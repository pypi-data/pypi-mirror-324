# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import CoactiveEnvironment
from .resources.asset.client import AssetClient, AsyncAssetClient
from .resources.classification.client import (
    AsyncClassificationClient,
    ClassificationClient,
)
from .resources.concept.client import AsyncConceptClient, ConceptClient
from .resources.credentials.client import AsyncCredentialsClient, CredentialsClient
from .resources.dataset.client import AsyncDatasetClient, DatasetClient
from .resources.dynamic_tags.client import AsyncDynamicTagsClient, DynamicTagsClient
from .resources.query.client import AsyncQueryClient, QueryClient
from .resources.search.client import AsyncSearchClient, SearchClient


class Coactive:
    def __init__(
        self,
        *,
        client_id: str,
        client_secret: str,
        base_url: typing.Optional[str] = None,
        environment: CoactiveEnvironment = CoactiveEnvironment.DEFAULT,
        timeout: typing.Optional[float] = 60,
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=f"{client_id}:{client_secret}",
            httpx_client=httpx.Client(timeout=timeout),
        )
        self.dataset = DatasetClient(client_wrapper=self._client_wrapper)
        self.concept = ConceptClient(client_wrapper=self._client_wrapper)
        self.credentials = CredentialsClient(client_wrapper=self._client_wrapper)
        self.query = QueryClient(client_wrapper=self._client_wrapper)
        self.classification = ClassificationClient(client_wrapper=self._client_wrapper)
        self.asset = AssetClient(client_wrapper=self._client_wrapper)
        self.search = SearchClient(client_wrapper=self._client_wrapper)
        self.dynamic_tags = DynamicTagsClient(client_wrapper=self._client_wrapper)


class AsyncCoactive:
    def __init__(
        self,
        *,
        client_id: str,
        client_secret: str,
        base_url: typing.Optional[str] = None,
        environment: CoactiveEnvironment = CoactiveEnvironment.DEFAULT,
        timeout: typing.Optional[float] = 60,
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=f"{client_id}:{client_secret}",
            httpx_client=httpx.AsyncClient(timeout=timeout),
        )
        self.dataset = AsyncDatasetClient(client_wrapper=self._client_wrapper)
        self.concept = AsyncConceptClient(client_wrapper=self._client_wrapper)
        self.credentials = AsyncCredentialsClient(client_wrapper=self._client_wrapper)
        self.query = AsyncQueryClient(client_wrapper=self._client_wrapper)
        self.classification = AsyncClassificationClient(
            client_wrapper=self._client_wrapper
        )
        self.asset = AsyncAssetClient(client_wrapper=self._client_wrapper)
        self.search = AsyncSearchClient(client_wrapper=self._client_wrapper)
        self.dynamic_tags = AsyncDynamicTagsClient(client_wrapper=self._client_wrapper)


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: CoactiveEnvironment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception(
            "Please pass in either base_url or environment to construct the client"
        )
