# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.add_assets_confirmation import AddAssetsConfirmation
from ...types.add_image_request import AddImageRequest
from ...types.add_video_request import AddVideoRequest
from ...types.dataset import Dataset
from ...types.dataset_settings import DatasetSettings
from ...types.encoder_name_enum import EncoderNameEnum
from ...types.error_response import ErrorResponse
from ...types.http_validation_error import HttpValidationError
from ...types.paged_datasets import PagedDatasets
from ...types.paged_images import PagedImages
from ...types.paged_videos import PagedVideos
from ...types.update_assets_metadata_confirmation import UpdateAssetsMetadataConfirmation
from ...types.update_image_metadata_request import UpdateImageMetadataRequest
from ...types.update_video_metadata_request import UpdateVideoMetadataRequest

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DatasetClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None) -> PagedDatasets:
        """
        Get all datasets in a paginated list

        Parameters:
            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/datasets"),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedDatasets, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        credentials_id: typing.Optional[str] = OMIT,
        encoder: typing.Optional[EncoderNameEnum] = OMIT,
        settings: typing.Optional[DatasetSettings] = OMIT,
    ) -> Dataset:
        """
        Create a new dataset

        Parameters:
            - name: str. The name of the dataset

            - description: typing.Optional[str]. The description of the dataset

            - credentials_id: typing.Optional[str]. The id of the default credentials to use to access protected data for this dataset

            - encoder: typing.Optional[EncoderNameEnum]. The default encoder to use to encode assets in this dataset

            - settings: typing.Optional[DatasetSettings]. Dataset settings
        ---
        from coactive import EncoderNameEnum
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.create(
            name="GameOfThrones",
            description="A dataset containing screenshots and clips from the tv show Game of Thrones",
            encoder=EncoderNameEnum.MULTIMODAL_TX_LARGE_3,
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if description is not OMIT:
            _request["description"] = description
        if credentials_id is not OMIT:
            _request["credentialsId"] = credentials_id
        if encoder is not OMIT:
            _request["encoder"] = encoder
        if settings is not OMIT:
            _request["settings"] = settings
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/datasets"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Dataset, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, dataset_id: str) -> Dataset:
        """
        Get dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.get(
            dataset_id="dataset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Dataset, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, dataset_id: str) -> typing.Any:
        """
        Delete dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.delete(
            dataset_id="dataset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, dataset_id: str, *, name: typing.Optional[str] = OMIT, description: typing.Optional[str] = OMIT
    ) -> Dataset:
        """
        Update dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - name: typing.Optional[str]. New name for the dataset

            - description: typing.Optional[str]. New description for the dataset
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.update(
            dataset_id="dataset_id",
            name="GameOfThrones",
            description="A dataset containing screenshots and clips from the tv show Game of Thrones",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Dataset, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_images(
        self, dataset_id: str, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> PagedImages:
        """
        Get images in a dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.get_images(
            dataset_id="dataset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/images"),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedImages, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_videos(
        self, dataset_id: str, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> PagedVideos:
        """
        Get videos in a dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.get_videos(
            dataset_id="dataset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/videos"),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedVideos, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_assets(
        self,
        dataset_id: str,
        *,
        images: typing.Optional[typing.List[AddImageRequest]] = OMIT,
        videos: typing.Optional[typing.List[AddVideoRequest]] = OMIT,
        data_path: typing.Optional[str] = OMIT,
        csv_path: typing.Optional[str] = OMIT,
    ) -> AddAssetsConfirmation:
        """
        Add images and/or videos to an existing dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - images: typing.Optional[typing.List[AddImageRequest]]. A list of assets to add with optional metadata

            - videos: typing.Optional[typing.List[AddVideoRequest]]. Videos to add to the dataset. Maximum allowed resolution is 1080p, higher resolutions will not be processed.

            - data_path: typing.Optional[str]. A S3 path prefix for all images and videos to add to the dataset

            - csv_path: typing.Optional[str]. A path to a previously uploaded CSV file containing data paths
        ---
        from coactive import AddImageRequest, AddVideoRequest
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.add_assets(
            dataset_id="dataset_id",
            images=[
                AddImageRequest(
                    path="s3://coactive-public/logo.png",
                    id="kingslanding_041711",
                    metadata={"artist": "Marc Simonetti"},
                )
            ],
            videos=[
                AddVideoRequest(
                    path="s3://your-s3-bucket/path/to/video.mp4",
                    metadata={
                        "show": "The Boys",
                        "season": 1,
                        "episode": 1,
                        "title": "The Name of the Game",
                    },
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if images is not OMIT:
            _request["images"] = images
        if videos is not OMIT:
            _request["videos"] = videos
        if data_path is not OMIT:
            _request["dataPath"] = data_path
        if csv_path is not OMIT:
            _request["csvPath"] = csv_path
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/assets"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AddAssetsConfirmation, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_asset_metadata(
        self,
        dataset_id: str,
        *,
        images: typing.Optional[typing.List[UpdateImageMetadataRequest]] = OMIT,
        videos: typing.Optional[typing.List[UpdateVideoMetadataRequest]] = OMIT,
    ) -> UpdateAssetsMetadataConfirmation:
        """
        Update image and/or video metadata in an existing dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - images: typing.Optional[typing.List[UpdateImageMetadataRequest]]. A list of image metadata replacement requests

            - videos: typing.Optional[typing.List[UpdateVideoMetadataRequest]]. A list of video metadata replacement requests
        ---
        from coactive import UpdateImageMetadataRequest, UpdateVideoMetadataRequest
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.update_asset_metadata(
            dataset_id="dataset_id",
            images=[
                UpdateImageMetadataRequest(
                    path="s3://coactive-public/logo.png",
                    metadata={"artist": "Marc Simonetti"},
                )
            ],
            videos=[
                UpdateVideoMetadataRequest(
                    path="s3://your-s3-bucket/path/to/video.mp4",
                    metadata={"artist": "Marc Simonetti"},
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if images is not OMIT:
            _request["images"] = images
        if videos is not OMIT:
            _request["videos"] = videos
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/assets-metadata"
            ),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UpdateAssetsMetadataConfirmation, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_image(self, dataset_id: str, coactive_image_id: str) -> typing.Any:
        """
        Delete image

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - coactive_image_id: str. The coactive unique identifier for the image to delete
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.delete_image(
            dataset_id="dataset_id",
            coactive_image_id="coactive_image_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/image/{coactive_image_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_video(self, dataset_id: str, coactive_video_id: str) -> typing.Any:
        """
        Delete video

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - coactive_video_id: str. The coactive unique identifier for the video to delete
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dataset.delete_video(
            dataset_id="dataset_id",
            coactive_video_id="coactive_video_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/video/{coactive_video_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDatasetClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(self, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None) -> PagedDatasets:
        """
        Get all datasets in a paginated list

        Parameters:
            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/datasets"),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedDatasets, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        credentials_id: typing.Optional[str] = OMIT,
        encoder: typing.Optional[EncoderNameEnum] = OMIT,
        settings: typing.Optional[DatasetSettings] = OMIT,
    ) -> Dataset:
        """
        Create a new dataset

        Parameters:
            - name: str. The name of the dataset

            - description: typing.Optional[str]. The description of the dataset

            - credentials_id: typing.Optional[str]. The id of the default credentials to use to access protected data for this dataset

            - encoder: typing.Optional[EncoderNameEnum]. The default encoder to use to encode assets in this dataset

            - settings: typing.Optional[DatasetSettings]. Dataset settings
        ---
        from coactive import EncoderNameEnum
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.create(
            name="GameOfThrones",
            description="A dataset containing screenshots and clips from the tv show Game of Thrones",
            encoder=EncoderNameEnum.MULTIMODAL_TX_LARGE_3,
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if description is not OMIT:
            _request["description"] = description
        if credentials_id is not OMIT:
            _request["credentialsId"] = credentials_id
        if encoder is not OMIT:
            _request["encoder"] = encoder
        if settings is not OMIT:
            _request["settings"] = settings
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/datasets"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Dataset, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, dataset_id: str) -> Dataset:
        """
        Get dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.get(
            dataset_id="dataset_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Dataset, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, dataset_id: str) -> typing.Any:
        """
        Delete dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.delete(
            dataset_id="dataset_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, dataset_id: str, *, name: typing.Optional[str] = OMIT, description: typing.Optional[str] = OMIT
    ) -> Dataset:
        """
        Update dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - name: typing.Optional[str]. New name for the dataset

            - description: typing.Optional[str]. New description for the dataset
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.update(
            dataset_id="dataset_id",
            name="GameOfThrones",
            description="A dataset containing screenshots and clips from the tv show Game of Thrones",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Dataset, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_images(
        self, dataset_id: str, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> PagedImages:
        """
        Get images in a dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.get_images(
            dataset_id="dataset_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/images"),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedImages, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_videos(
        self, dataset_id: str, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> PagedVideos:
        """
        Get videos in a dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.get_videos(
            dataset_id="dataset_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/videos"),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedVideos, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_assets(
        self,
        dataset_id: str,
        *,
        images: typing.Optional[typing.List[AddImageRequest]] = OMIT,
        videos: typing.Optional[typing.List[AddVideoRequest]] = OMIT,
        data_path: typing.Optional[str] = OMIT,
        csv_path: typing.Optional[str] = OMIT,
    ) -> AddAssetsConfirmation:
        """
        Add images and/or videos to an existing dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - images: typing.Optional[typing.List[AddImageRequest]]. A list of assets to add with optional metadata

            - videos: typing.Optional[typing.List[AddVideoRequest]]. Videos to add to the dataset. Maximum allowed resolution is 1080p, higher resolutions will not be processed.

            - data_path: typing.Optional[str]. A S3 path prefix for all images and videos to add to the dataset

            - csv_path: typing.Optional[str]. A path to a previously uploaded CSV file containing data paths
        ---
        from coactive import AddImageRequest, AddVideoRequest
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.add_assets(
            dataset_id="dataset_id",
            images=[
                AddImageRequest(
                    path="s3://coactive-public/logo.png",
                    id="kingslanding_041711",
                    metadata={"artist": "Marc Simonetti"},
                )
            ],
            videos=[
                AddVideoRequest(
                    path="s3://your-s3-bucket/path/to/video.mp4",
                    metadata={
                        "show": "The Boys",
                        "season": 1,
                        "episode": 1,
                        "title": "The Name of the Game",
                    },
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if images is not OMIT:
            _request["images"] = images
        if videos is not OMIT:
            _request["videos"] = videos
        if data_path is not OMIT:
            _request["dataPath"] = data_path
        if csv_path is not OMIT:
            _request["csvPath"] = csv_path
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/assets"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AddAssetsConfirmation, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_asset_metadata(
        self,
        dataset_id: str,
        *,
        images: typing.Optional[typing.List[UpdateImageMetadataRequest]] = OMIT,
        videos: typing.Optional[typing.List[UpdateVideoMetadataRequest]] = OMIT,
    ) -> UpdateAssetsMetadataConfirmation:
        """
        Update image and/or video metadata in an existing dataset

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - images: typing.Optional[typing.List[UpdateImageMetadataRequest]]. A list of image metadata replacement requests

            - videos: typing.Optional[typing.List[UpdateVideoMetadataRequest]]. A list of video metadata replacement requests
        ---
        from coactive import UpdateImageMetadataRequest, UpdateVideoMetadataRequest
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.update_asset_metadata(
            dataset_id="dataset_id",
            images=[
                UpdateImageMetadataRequest(
                    path="s3://coactive-public/logo.png",
                    metadata={"artist": "Marc Simonetti"},
                )
            ],
            videos=[
                UpdateVideoMetadataRequest(
                    path="s3://your-s3-bucket/path/to/video.mp4",
                    metadata={"artist": "Marc Simonetti"},
                )
            ],
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if images is not OMIT:
            _request["images"] = images
        if videos is not OMIT:
            _request["videos"] = videos
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/assets-metadata"
            ),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UpdateAssetsMetadataConfirmation, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_image(self, dataset_id: str, coactive_image_id: str) -> typing.Any:
        """
        Delete image

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - coactive_image_id: str. The coactive unique identifier for the image to delete
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.delete_image(
            dataset_id="dataset_id",
            coactive_image_id="coactive_image_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/image/{coactive_image_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_video(self, dataset_id: str, coactive_video_id: str) -> typing.Any:
        """
        Delete video

        Parameters:
            - dataset_id: str. The unique identifier for the dataset

            - coactive_video_id: str. The coactive unique identifier for the video to delete
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dataset.delete_video(
            dataset_id="dataset_id",
            coactive_video_id="coactive_video_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/datasets/{dataset_id}/video/{coactive_video_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
