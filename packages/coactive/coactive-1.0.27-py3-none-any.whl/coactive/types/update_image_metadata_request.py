# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UpdateImageMetadataRequest(pydantic.BaseModel):
    """
    A request to fully replace the metadata for an image. Provide one of image path or coactive
    image id.
    """

    path: typing.Optional[str] = pydantic.Field(description="The path of the image")
    coactive_image_id: typing.Optional[str] = pydantic.Field(
        alias="coactiveImageId", description="The unique id for the image"
    )
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(description="The replacement metadata")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
