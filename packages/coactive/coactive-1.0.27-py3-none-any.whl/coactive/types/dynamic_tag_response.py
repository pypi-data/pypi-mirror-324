# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .basic_description import BasicDescription
from .text_prompt import TextPrompt
from .visual_prompt import VisualPrompt

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class DynamicTagResponse(pydantic.BaseModel):
    """
    The base model for any single resource HTTP response
    """

    created_user_id: str = pydantic.Field(alias="createdUserId", description="The user that created the resource")
    created_dt: dt.datetime = pydantic.Field(alias="createdDt", description="The created datetime of the resource")
    updated_user_id: str = pydantic.Field(alias="updatedUserId", description="The user that last updated the resource")
    updated_dt: dt.datetime = pydantic.Field(
        alias="updatedDt", description="The datetime the resource was last updated"
    )
    dynamic_tag_id: str = pydantic.Field(alias="dynamicTagId", description="The unique identifier of the dynamic tag")
    name: str = pydantic.Field(description="The name of the dynamic tag")
    text_prompts: typing.Optional[typing.List[TextPrompt]] = pydantic.Field(
        alias="textPrompts", description="The list of text prompts for this dynamic tag"
    )
    visual_prompts: typing.Optional[typing.List[VisualPrompt]] = pydantic.Field(
        alias="visualPrompts", description="The list of visual prompts for this dynamic tag"
    )
    category_name: str = pydantic.Field(alias="categoryName", description="Category name associated with tag")
    datasets: typing.List[BasicDescription] = pydantic.Field(description="The datasets associated with tag")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
