# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .query_result import QueryResult
from .query_status_enum import QueryStatusEnum

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class QueryWithResult(pydantic.BaseModel):
    """
    The base model for any single resource HTTP response
    """

    created_user_id: str = pydantic.Field(alias="createdUserId", description="The user that created the resource")
    created_dt: dt.datetime = pydantic.Field(alias="createdDt", description="The created datetime of the resource")
    updated_user_id: str = pydantic.Field(alias="updatedUserId", description="The user that last updated the resource")
    updated_dt: dt.datetime = pydantic.Field(
        alias="updatedDt", description="The datetime the resource was last updated"
    )
    query_id: str = pydantic.Field(alias="queryId", description="The query id")
    query: str = pydantic.Field(description="The SQL query")
    dataset_id: str = pydantic.Field(alias="datasetId", description="The dataset id")
    status: QueryStatusEnum = pydantic.Field(description="The current status of the query")
    start_dt: typing.Optional[dt.datetime] = pydantic.Field(
        alias="startDt", description="The time the query started executing"
    )
    end_dt: typing.Optional[dt.datetime] = pydantic.Field(
        alias="endDt", description="The time the query finished executing"
    )
    is_active: typing.Optional[bool] = pydantic.Field(
        alias="isActive", description="Defines if the query is in an active state or not"
    )
    result: typing.Optional[QueryResult] = pydantic.Field(description="The result of the query")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
