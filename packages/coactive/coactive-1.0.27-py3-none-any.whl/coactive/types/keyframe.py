# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .audio_segment import AudioSegment
from .shot import Shot
from .video import Video

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Keyframe(pydantic.BaseModel):
    """
    A keyframe asset response
    """

    coactive_image_id: str = pydantic.Field(alias="coactiveImageId", description="The coactive image id")
    video: Video = pydantic.Field(description="The video the keyframe belongs to")
    shot: Shot = pydantic.Field(description="The video shot metadata")
    audio_segment: typing.Optional[AudioSegment] = pydantic.Field(
        alias="audioSegment", description="Audio segment associated with the keyframe (if the asset_type is 'keyframe')"
    )
    timestamp: typing.Optional[int] = pydantic.Field(
        description="The timestamp of the keyframe in the video in milliseconds"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
