# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class QueryStatusEnum(str, enum.Enum):
    """
    All possible query status values
    """

    QUEUED = "Queued"
    RUNNING = "Running"
    STOPPING = "Stopping"
    STOPPED = "Stopped"
    COMPLETE = "Complete"
    ERROR = "Error"

    def visit(
        self,
        queued: typing.Callable[[], T_Result],
        running: typing.Callable[[], T_Result],
        stopping: typing.Callable[[], T_Result],
        stopped: typing.Callable[[], T_Result],
        complete: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is QueryStatusEnum.QUEUED:
            return queued()
        if self is QueryStatusEnum.RUNNING:
            return running()
        if self is QueryStatusEnum.STOPPING:
            return stopping()
        if self is QueryStatusEnum.STOPPED:
            return stopped()
        if self is QueryStatusEnum.COMPLETE:
            return complete()
        if self is QueryStatusEnum.ERROR:
            return error()
