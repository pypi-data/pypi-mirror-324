# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ClassificationScore(pydantic.BaseModel):
    """
    A classification of an asset for a single concept
    """

    concept_name: str = pydantic.Field(alias="conceptName", description="The concept name")
    concept_id: str = pydantic.Field(alias="conceptId", description="The concept id")
    threshold: float = pydantic.Field(description="The threshold used to determine if it's a positive example")
    positive: bool = pydantic.Field(description="If the sample is classified as positive")
    score: float = pydantic.Field(description="The classification score in the range [0, 1]")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
