# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .concept_label_enum import ConceptLabelEnum

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ConceptLabelRequest(pydantic.BaseModel):
    """
    An request to associate an image or video keyframe to a concept
    """

    coactive_image_id: typing.Optional[str] = pydantic.Field(
        alias="coactiveImageId", description="The id of image or video keyframe to label"
    )
    image_path: typing.Optional[str] = pydantic.Field(alias="imagePath", description="The path of an image to label")
    label: typing.Optional[ConceptLabelEnum] = pydantic.Field(
        description='The label for the image or video keyframe. "negative" means the image or keyframe is not an example of the concept. "positive" means the image or keyframe is example of the concept. An empty value indicates the label should be removed if one exists.'
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
