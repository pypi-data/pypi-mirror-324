# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EncoderNameEnum(str, enum.Enum):
    """
    Enum to store encoder public names
    """

    MULTIMODAL = "multimodal"
    MULTIMODAL_TX_SMALL_1 = "multimodal-tx-small1"
    MULTIMODAL_TX_SMALL_2 = "multimodal-tx-small2"
    MULTIMODAL_TX_LARGE_1 = "multimodal-tx-large1"
    MULTIMODAL_TX_LARGE_2 = "multimodal-tx-large2"
    MULTIMODAL_TX_LARGE_3 = "multimodal-tx-large3"

    def visit(
        self,
        multimodal: typing.Callable[[], T_Result],
        multimodal_tx_small_1: typing.Callable[[], T_Result],
        multimodal_tx_small_2: typing.Callable[[], T_Result],
        multimodal_tx_large_1: typing.Callable[[], T_Result],
        multimodal_tx_large_2: typing.Callable[[], T_Result],
        multimodal_tx_large_3: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EncoderNameEnum.MULTIMODAL:
            return multimodal()
        if self is EncoderNameEnum.MULTIMODAL_TX_SMALL_1:
            return multimodal_tx_small_1()
        if self is EncoderNameEnum.MULTIMODAL_TX_SMALL_2:
            return multimodal_tx_small_2()
        if self is EncoderNameEnum.MULTIMODAL_TX_LARGE_1:
            return multimodal_tx_large_1()
        if self is EncoderNameEnum.MULTIMODAL_TX_LARGE_2:
            return multimodal_tx_large_2()
        if self is EncoderNameEnum.MULTIMODAL_TX_LARGE_3:
            return multimodal_tx_large_3()
