# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.category_response import CategoryResponse
from ...types.dynamic_tag_response import DynamicTagResponse
from ...types.error_response import ErrorResponse
from ...types.http_validation_error import HttpValidationError
from ...types.paged_categories import PagedCategories
from ...types.paged_dynamic_tags import PagedDynamicTags
from ...types.search_result import SearchResult

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DynamicTagsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_categories(
        self,
        *,
        datasets: typing.Optional[typing.Union[str, typing.List[str]]] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> PagedCategories:
        """
        Get paginated categories, optionally filtered by datasets

        Parameters:
            - datasets: typing.Optional[typing.Union[str, typing.List[str]]]. Datasets to use to filter categories

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.list_categories()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/dynamic-tag-categories"),
            params=remove_none_from_dict({"datasets": datasets, "offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedCategories, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_category(self, *, name: str, dataset_ids: typing.List[str]) -> CategoryResponse:
        """
        Create a new category

        Parameters:
            - name: str. The category name

            - dataset_ids: typing.List[str]. The dataset ids to create the category
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.create_category(
            name="Dog",
            dataset_ids=["c40276f0-024b-4a3f-b3e6-dcf0d304843e"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/dynamic-tag-categories"),
            json=jsonable_encoder({"name": name, "datasetIds": dataset_ids}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CategoryResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_dynamic_tags(
        self, category_id: str, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> PagedDynamicTags:
        """
        Get paginated dynamic tags, filtered by datasets

        Parameters:
            - category_id: str. The unique identifier for the category

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.list_dynamic_tags(
            category_id="category_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags"
            ),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedDynamicTags, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_dynamic_tag(
        self,
        category_id: str,
        *,
        name: str,
        text_prompt_data: typing.Optional[typing.List[str]] = OMIT,
        visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]] = OMIT,
    ) -> DynamicTagResponse:
        """
        Create a dynamic tag for a category

        Parameters:
            - category_id: str. The unique identifier for the category

            - name: str. name of the dynamic tag

            - text_prompt_data: typing.Optional[typing.List[str]]. data from frontend used to create text_prompts

            - visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]]. data from frontend used to create visual_prompts
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.create_dynamic_tag(
            category_id="category_id",
            name="dynamic tag name",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if text_prompt_data is not OMIT:
            _request["textPromptData"] = text_prompt_data
        if visual_prompt_data is not OMIT:
            _request["visualPromptData"] = visual_prompt_data
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags"
            ),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DynamicTagResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_category(self, category_id: str) -> CategoryResponse:
        """
        Get category by id

        Parameters:
            - category_id: str. The unique identifier for the category
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.get_category(
            category_id="category_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CategoryResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_category(self, category_id: str) -> typing.Any:
        """
        Delete an existing category

        Parameters:
            - category_id: str. The unique identifier for the category
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.delete_category(
            category_id="category_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_dynamic_tag(self, category_id: str, dynamic_tag_id: str) -> DynamicTagResponse:
        """
        Get information about a specific dynamic tag using the id

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.get_dynamic_tag(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}",
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DynamicTagResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_dynamic_tag(
        self,
        category_id: str,
        dynamic_tag_id: str,
        *,
        text_prompt_data: typing.Optional[typing.List[str]] = OMIT,
        visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]] = OMIT,
    ) -> None:
        """
        Triggers the update of a dynamic tag's prompts in our platform. Notice that the results may take a while to be reflected in the system. On success, no content is returned in the response.

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag

            - text_prompt_data: typing.Optional[typing.List[str]]. New list of text prompts to replace existing prompts

            - visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]]. New list of visual prompts to replace existing prompts
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.update_dynamic_tag(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if text_prompt_data is not OMIT:
            _request["textPromptData"] = text_prompt_data
        if visual_prompt_data is not OMIT:
            _request["visualPromptData"] = visual_prompt_data
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}",
            ),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_dynamic_tag(self, category_id: str, dynamic_tag_id: str) -> typing.Any:
        """
        Delete an existing dynamic tag

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.delete_dynamic_tag(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}",
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_top_content(
        self,
        category_id: str,
        dynamic_tag_id: str,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> SearchResult:
        """
        Images most similar to text and visual prompts of the provided dynamic tag

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.dynamic_tags.get_top_content(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}/top-content",
            ),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResult, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDynamicTagsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_categories(
        self,
        *,
        datasets: typing.Optional[typing.Union[str, typing.List[str]]] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> PagedCategories:
        """
        Get paginated categories, optionally filtered by datasets

        Parameters:
            - datasets: typing.Optional[typing.Union[str, typing.List[str]]]. Datasets to use to filter categories

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.list_categories()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/dynamic-tag-categories"),
            params=remove_none_from_dict({"datasets": datasets, "offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedCategories, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_category(self, *, name: str, dataset_ids: typing.List[str]) -> CategoryResponse:
        """
        Create a new category

        Parameters:
            - name: str. The category name

            - dataset_ids: typing.List[str]. The dataset ids to create the category
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.create_category(
            name="Dog",
            dataset_ids=["c40276f0-024b-4a3f-b3e6-dcf0d304843e"],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/dynamic-tag-categories"),
            json=jsonable_encoder({"name": name, "datasetIds": dataset_ids}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CategoryResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_dynamic_tags(
        self, category_id: str, *, offset: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> PagedDynamicTags:
        """
        Get paginated dynamic tags, filtered by datasets

        Parameters:
            - category_id: str. The unique identifier for the category

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.list_dynamic_tags(
            category_id="category_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags"
            ),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedDynamicTags, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_dynamic_tag(
        self,
        category_id: str,
        *,
        name: str,
        text_prompt_data: typing.Optional[typing.List[str]] = OMIT,
        visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]] = OMIT,
    ) -> DynamicTagResponse:
        """
        Create a dynamic tag for a category

        Parameters:
            - category_id: str. The unique identifier for the category

            - name: str. name of the dynamic tag

            - text_prompt_data: typing.Optional[typing.List[str]]. data from frontend used to create text_prompts

            - visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]]. data from frontend used to create visual_prompts
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.create_dynamic_tag(
            category_id="category_id",
            name="dynamic tag name",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if text_prompt_data is not OMIT:
            _request["textPromptData"] = text_prompt_data
        if visual_prompt_data is not OMIT:
            _request["visualPromptData"] = visual_prompt_data
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags"
            ),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DynamicTagResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_category(self, category_id: str) -> CategoryResponse:
        """
        Get category by id

        Parameters:
            - category_id: str. The unique identifier for the category
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.get_category(
            category_id="category_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CategoryResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_category(self, category_id: str) -> typing.Any:
        """
        Delete an existing category

        Parameters:
            - category_id: str. The unique identifier for the category
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.delete_category(
            category_id="category_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/dynamic-tag-categories/{category_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_dynamic_tag(self, category_id: str, dynamic_tag_id: str) -> DynamicTagResponse:
        """
        Get information about a specific dynamic tag using the id

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.get_dynamic_tag(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}",
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DynamicTagResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_dynamic_tag(
        self,
        category_id: str,
        dynamic_tag_id: str,
        *,
        text_prompt_data: typing.Optional[typing.List[str]] = OMIT,
        visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]] = OMIT,
    ) -> None:
        """
        Triggers the update of a dynamic tag's prompts in our platform. Notice that the results may take a while to be reflected in the system. On success, no content is returned in the response.

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag

            - text_prompt_data: typing.Optional[typing.List[str]]. New list of text prompts to replace existing prompts

            - visual_prompt_data: typing.Optional[typing.List[typing.Dict[str, str]]]. New list of visual prompts to replace existing prompts
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.update_dynamic_tag(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if text_prompt_data is not OMIT:
            _request["textPromptData"] = text_prompt_data
        if visual_prompt_data is not OMIT:
            _request["visualPromptData"] = visual_prompt_data
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}",
            ),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_dynamic_tag(self, category_id: str, dynamic_tag_id: str) -> typing.Any:
        """
        Delete an existing dynamic tag

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.delete_dynamic_tag(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}",
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_top_content(
        self,
        category_id: str,
        dynamic_tag_id: str,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> SearchResult:
        """
        Images most similar to text and visual prompts of the provided dynamic tag

        Parameters:
            - category_id: str. The unique identifier for the category

            - dynamic_tag_id: str. The unique identifier for the dynamic tag

            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.dynamic_tags.get_top_content(
            category_id="category_id",
            dynamic_tag_id="dynamic_tag_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"api/v1/dynamic-tag-categories/{category_id}/dynamic-tags/{dynamic_tag_id}/top-content",
            ),
            params=remove_none_from_dict({"offset": offset, "limit": limit}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResult, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
