# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError
from ...types.paged_queries import PagedQueries
from ...types.query import Query
from ...types.query_results_download_url import QueryResultsDownloadUrl
from ...types.query_with_result import QueryWithResult

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class QueryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        ids: typing.Optional[typing.Union[str, typing.List[str]]] = None,
    ) -> PagedQueries:
        """
        Get paginated list of queries. If query ids are provided, the returned list will include only those queries. Queries not found from the provided ids list will be ignored.

        Parameters:
            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return

            - ids: typing.Optional[typing.Union[str, typing.List[str]]]. Query ids to include in the result
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.query.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/queries"),
            params=remove_none_from_dict({"offset": offset, "limit": limit, "ids": ids}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedQueries, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def execute(self, *, query: str, dataset_id: str) -> Query:
        """
        Create and enqueue the execution of a SQL query

        Parameters:
            - query: str. The SQL query

            - dataset_id: str. The id of the dataset to query
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.query.execute(
            query="select * from coactive_images_table",
            dataset_id="c40276f0-024b-4a3f-b3e6-dcf0d304843e",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/queries"),
            json=jsonable_encoder({"query": query, "datasetId": dataset_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Query, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        query_id: str,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        exclude_results: typing.Optional[bool] = None,
    ) -> QueryWithResult:
        """
        Get query including paginated results if the query execution is complete

        Parameters:
            - query_id: str. The unique identifier for the query

            - offset: typing.Optional[int]. Starting index to return in the results

            - limit: typing.Optional[int]. Max number of items to return in the results

            - exclude_results: typing.Optional[bool]. Optionally exclude results from the response
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.query.get(
            query_id="query_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}"),
            params=remove_none_from_dict({"offset": offset, "limit": limit, "exclude_results": exclude_results}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(QueryWithResult, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, query_id: str) -> typing.Any:
        """
        Delete query

        Parameters:
            - query_id: str. The unique identifier for the query
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.query.delete(
            query_id="query_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stop(self, query_id: str) -> Query:
        """
        Stop the execution of a running or waiting query

        Parameters:
            - query_id: str. The unique identifier for the query
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.query.stop(
            query_id="query_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}/stop"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Query, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_results_download_url(self, query_id: str) -> QueryResultsDownloadUrl:
        """
        Get a url to download query results as a CSV

        Parameters:
            - query_id: str. The unique identifier for the query
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.query.get_results_download_url(
            query_id="query_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}/csv/url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(QueryResultsDownloadUrl, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncQueryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        ids: typing.Optional[typing.Union[str, typing.List[str]]] = None,
    ) -> PagedQueries:
        """
        Get paginated list of queries. If query ids are provided, the returned list will include only those queries. Queries not found from the provided ids list will be ignored.

        Parameters:
            - offset: typing.Optional[int]. Starting index to return

            - limit: typing.Optional[int]. Max number of items to return

            - ids: typing.Optional[typing.Union[str, typing.List[str]]]. Query ids to include in the result
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.query.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/queries"),
            params=remove_none_from_dict({"offset": offset, "limit": limit, "ids": ids}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PagedQueries, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def execute(self, *, query: str, dataset_id: str) -> Query:
        """
        Create and enqueue the execution of a SQL query

        Parameters:
            - query: str. The SQL query

            - dataset_id: str. The id of the dataset to query
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.query.execute(
            query="select * from coactive_images_table",
            dataset_id="c40276f0-024b-4a3f-b3e6-dcf0d304843e",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/queries"),
            json=jsonable_encoder({"query": query, "datasetId": dataset_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Query, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        query_id: str,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        exclude_results: typing.Optional[bool] = None,
    ) -> QueryWithResult:
        """
        Get query including paginated results if the query execution is complete

        Parameters:
            - query_id: str. The unique identifier for the query

            - offset: typing.Optional[int]. Starting index to return in the results

            - limit: typing.Optional[int]. Max number of items to return in the results

            - exclude_results: typing.Optional[bool]. Optionally exclude results from the response
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.query.get(
            query_id="query_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}"),
            params=remove_none_from_dict({"offset": offset, "limit": limit, "exclude_results": exclude_results}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(QueryWithResult, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, query_id: str) -> typing.Any:
        """
        Delete query

        Parameters:
            - query_id: str. The unique identifier for the query
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.query.delete(
            query_id="query_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def stop(self, query_id: str) -> Query:
        """
        Stop the execution of a running or waiting query

        Parameters:
            - query_id: str. The unique identifier for the query
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.query.stop(
            query_id="query_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}/stop"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Query, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_results_download_url(self, query_id: str) -> QueryResultsDownloadUrl:
        """
        Get a url to download query results as a CSV

        Parameters:
            - query_id: str. The unique identifier for the query
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.query.get_results_download_url(
            query_id="query_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/queries/{query_id}/csv/url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(QueryResultsDownloadUrl, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
