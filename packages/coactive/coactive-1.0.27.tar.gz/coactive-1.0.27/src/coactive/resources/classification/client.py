# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.classification import Classification
from ...types.http_validation_error import HttpValidationError

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ClassificationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def classify_image_at_url(
        self,
        *,
        threshold: typing.Optional[float] = None,
        url: str,
        concept_ids: typing.Optional[typing.List[str]] = OMIT,
        dataset_id: typing.Optional[str] = OMIT,
    ) -> Classification:
        """
        Classify an image downloadable via a public url for specific concepts or all concepts within a dataset

        Parameters:
            - threshold: typing.Optional[float]. Threshold above which classification is positive

            - url: str. A public url for downloading the image

            - concept_ids: typing.Optional[typing.List[str]]. The ids of concepts to use to classify an image

            - dataset_id: typing.Optional[str]. The id of the dataset related to the concepts to use to classify an image
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.classification.classify_image_at_url(
            url="s3://coactive-public/logo.png",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"url": url}
        if concept_ids is not OMIT:
            _request["conceptIds"] = concept_ids
        if dataset_id is not OMIT:
            _request["datasetId"] = dataset_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/classify/image/url"),
            params=remove_none_from_dict({"threshold": threshold}),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Classification, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncClassificationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def classify_image_at_url(
        self,
        *,
        threshold: typing.Optional[float] = None,
        url: str,
        concept_ids: typing.Optional[typing.List[str]] = OMIT,
        dataset_id: typing.Optional[str] = OMIT,
    ) -> Classification:
        """
        Classify an image downloadable via a public url for specific concepts or all concepts within a dataset

        Parameters:
            - threshold: typing.Optional[float]. Threshold above which classification is positive

            - url: str. A public url for downloading the image

            - concept_ids: typing.Optional[typing.List[str]]. The ids of concepts to use to classify an image

            - dataset_id: typing.Optional[str]. The id of the dataset related to the concepts to use to classify an image
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.classification.classify_image_at_url(
            url="s3://coactive-public/logo.png",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"url": url}
        if concept_ids is not OMIT:
            _request["conceptIds"] = concept_ids
        if dataset_id is not OMIT:
            _request["datasetId"] = dataset_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/classify/image/url"),
            params=remove_none_from_dict({"threshold": threshold}),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Classification, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
