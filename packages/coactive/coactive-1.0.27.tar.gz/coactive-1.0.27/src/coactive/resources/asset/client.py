# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.error_response import ErrorResponse
from ...types.http_validation_error import HttpValidationError
from ...types.video import Video
from .types.image_or_keyframe_detail import ImageOrKeyframeDetail

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AssetClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_image_detail(
        self,
        *,
        dataset_id: typing.Optional[str] = None,
        path: typing.Optional[str] = None,
        coactive_image_id: typing.Optional[str] = None,
    ) -> ImageOrKeyframeDetail:
        """
        Get image detail by coactive image id or dataset id and image path. Either coactive image id or or a combination of dataset id and image path can be used to uniquely identify an image.

        Parameters:
            - dataset_id: typing.Optional[str]. The dataset id of the image

            - path: typing.Optional[str]. The path of the image

            - coactive_image_id: typing.Optional[str]. The coactive image id of the image
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/assets/image-detail"),
            params=remove_none_from_dict(
                {"dataset_id": dataset_id, "path": path, "coactive_image_id": coactive_image_id}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ImageOrKeyframeDetail, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_video_detail(
        self,
        *,
        dataset_id: typing.Optional[str] = None,
        path: typing.Optional[str] = None,
        coactive_video_id: typing.Optional[str] = None,
    ) -> Video:
        """
        Get video detail by coactive image id or dataset id and video path. Either coactive video id or or a combination of dataset id and video path can be used to uniquely identify a video.

        Parameters:
            - dataset_id: typing.Optional[str]. The dataset id the video

            - path: typing.Optional[str]. The path of the video

            - coactive_video_id: typing.Optional[str]. The coactive video id of the video
        ---
        from coactive.client import Coactive

        client = Coactive(
            token="YOUR_TOKEN",
        )
        client.asset.get_video_detail()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/assets/video-detail"),
            params=remove_none_from_dict(
                {"dataset_id": dataset_id, "path": path, "coactive_video_id": coactive_video_id}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Video, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAssetClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_image_detail(
        self,
        *,
        dataset_id: typing.Optional[str] = None,
        path: typing.Optional[str] = None,
        coactive_image_id: typing.Optional[str] = None,
    ) -> ImageOrKeyframeDetail:
        """
        Get image detail by coactive image id or dataset id and image path. Either coactive image id or or a combination of dataset id and image path can be used to uniquely identify an image.

        Parameters:
            - dataset_id: typing.Optional[str]. The dataset id of the image

            - path: typing.Optional[str]. The path of the image

            - coactive_image_id: typing.Optional[str]. The coactive image id of the image
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/assets/image-detail"),
            params=remove_none_from_dict(
                {"dataset_id": dataset_id, "path": path, "coactive_image_id": coactive_image_id}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ImageOrKeyframeDetail, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_video_detail(
        self,
        *,
        dataset_id: typing.Optional[str] = None,
        path: typing.Optional[str] = None,
        coactive_video_id: typing.Optional[str] = None,
    ) -> Video:
        """
        Get video detail by coactive image id or dataset id and video path. Either coactive video id or or a combination of dataset id and video path can be used to uniquely identify a video.

        Parameters:
            - dataset_id: typing.Optional[str]. The dataset id the video

            - path: typing.Optional[str]. The path of the video

            - coactive_video_id: typing.Optional[str]. The coactive video id of the video
        ---
        from coactive.client import AsyncCoactive

        client = AsyncCoactive(
            token="YOUR_TOKEN",
        )
        await client.asset.get_video_detail()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/assets/video-detail"),
            params=remove_none_from_dict(
                {"dataset_id": dataset_id, "path": path, "coactive_video_id": coactive_video_id}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Video, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(ErrorResponse, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
