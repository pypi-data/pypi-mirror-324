# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .asset import Asset

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class PreviewImages(pydantic.BaseModel):
    """
    Preview images for the original asset
    """

    thumb: Asset = pydantic.Field(description="A 60px × 60px preview of the asset")
    small: Asset = pydantic.Field(description="A 60px × 60px preview of the asset")
    regular: Asset = pydantic.Field(description="A max 200px × max 200px preview of the asset")
    full: Asset = pydantic.Field(description="The asset at its original size")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
