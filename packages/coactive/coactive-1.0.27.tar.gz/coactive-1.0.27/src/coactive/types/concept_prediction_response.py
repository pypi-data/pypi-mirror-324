# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ConceptPredictionResponse(pydantic.BaseModel):
    """
    Base model for all schema
    """

    probability_ranges: typing.List[typing.List[float]] = pydantic.Field(
        alias="probabilityRanges",
        description="Each tuple represents the bounds of a bin we estimated number of assets for",
    )
    estimates: typing.List[int] = pydantic.Field(description="Number of assets belonging to each probability range")
    confidence_intervals: typing.Optional[typing.List[typing.List[int]]] = pydantic.Field(
        alias="confidenceIntervals",
        description="Lower/upper bounds representing respective ranges that the actual number of assets is in",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
