# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .dataset_status_enum import DatasetStatusEnum
from .encoder_name_enum import EncoderNameEnum

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Dataset(pydantic.BaseModel):
    """
    A set of images and videos to query
    """

    created_user_id: str = pydantic.Field(alias="createdUserId", description="The user that created the resource")
    created_dt: dt.datetime = pydantic.Field(alias="createdDt", description="The created datetime of the resource")
    updated_user_id: str = pydantic.Field(alias="updatedUserId", description="The user that last updated the resource")
    updated_dt: dt.datetime = pydantic.Field(
        alias="updatedDt", description="The datetime the resource was last updated"
    )
    name: str = pydantic.Field(description="The name of the dataset")
    description: typing.Optional[str] = pydantic.Field(description="The description of the dataset")
    dataset_id: str = pydantic.Field(alias="datasetId", description="The unique identifier for the dataset")
    status: DatasetStatusEnum = pydantic.Field(description="The status of the dataset")
    is_deletable: typing.Optional[bool] = pydantic.Field(
        alias="isDeletable", description="True if the dataset is in a state in which it can be deleted"
    )
    image_count: int = pydantic.Field(
        alias="imageCount", description="The number of fully processed images in the dataset"
    )
    video_count: int = pydantic.Field(
        alias="videoCount", description="The number of fully processed videos in the dataset"
    )
    encoder: typing.Optional[EncoderNameEnum] = pydantic.Field(
        description="The name of the encoder to transform your image and video data"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
