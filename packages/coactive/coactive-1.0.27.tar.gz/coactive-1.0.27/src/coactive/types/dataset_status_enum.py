# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class DatasetStatusEnum(str, enum.Enum):
    """
    The status of a dataset

    incomplete - The user has not yet identified any data to add to the dataset
    waiting - The dataset was recently created with at least one data source and has not yet
    started to initialize
    initializing - The dataset is either being created or updated. The dataset will not be available
    to query until the status is 'ready'.
    ready - The dataset has finished initializing or updating and is ready for use
    error - An error occurred while creating or updating the dataset
    deleting - The dataset is currently being deleted
    deleted - The dataset was successfully deleted
    """

    INCOMPLETE = "Incomplete"
    WAITING = "Waiting"
    INITIALIZING = "Initializing"
    READY = "Ready"
    ERROR = "Error"
    DELETING = "Deleting"
    DELETED = "Deleted"

    def visit(
        self,
        incomplete: typing.Callable[[], T_Result],
        waiting: typing.Callable[[], T_Result],
        initializing: typing.Callable[[], T_Result],
        ready: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
        deleting: typing.Callable[[], T_Result],
        deleted: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is DatasetStatusEnum.INCOMPLETE:
            return incomplete()
        if self is DatasetStatusEnum.WAITING:
            return waiting()
        if self is DatasetStatusEnum.INITIALIZING:
            return initializing()
        if self is DatasetStatusEnum.READY:
            return ready()
        if self is DatasetStatusEnum.ERROR:
            return error()
        if self is DatasetStatusEnum.DELETING:
            return deleting()
        if self is DatasetStatusEnum.DELETED:
            return deleted()
