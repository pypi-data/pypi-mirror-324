# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MetricResult(UniversalBaseModel):
    passing: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the metric passed or not.
    """

    score: typing.Optional[float] = pydantic.Field(default=None)
    """
    The score for the metric.
    """

    feedback: typing.Optional[str] = pydantic.Field(default=None)
    """
    The reasoning for the metric.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
