# _oai.py
import time
import uuid
from dataclasses import dataclass
from typing import List, Optional, Union, Dict, AsyncIterator, Literal
from pydantic import BaseModel

from ._session import HFBrowserSession
from ._hf import HuggingFaceAutomation

import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

from litechat.types.hf_models import HFChatModels


@dataclass
class ChatMessage:
    role: str
    content: str


@dataclass
class ChatChoice:
    index: int
    message: ChatMessage
    finish_reason: str


@dataclass
class Usage:
    prompt_tokens: Optional[int] = 0
    completion_tokens: Optional[int] = 0
    total_tokens: Optional[int] = 0


class ChatCompletion(BaseModel):
    id: str
    object: str
    created: int
    model: str
    choices: List[ChatChoice]
    usage: Optional[Usage] = None


class ChoiceDeltaToolCallFunction(BaseModel):
    arguments: Optional[str] = None
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: Optional[str] = None
    """The name of the function to call."""


class ChoiceDeltaToolCall(BaseModel):
    index: int

    id: Optional[str] = None
    """The ID of the tool call."""

    function: Optional[ChoiceDeltaToolCallFunction] = None

    type: Optional[Literal["function"]] = None
    """The type of the tool. Currently, only `function` is supported."""


class ChoiceDelta(BaseModel):
    content: Optional[str] = None
    """The contents of the chunk message."""

    refusal: Optional[str] = None
    """The refusal message generated by the model."""

    role: Optional[Literal["system", "user", "assistant", "tool"]] = None
    """The role of the author of this message."""

    tool_calls: Optional[List[ChoiceDeltaToolCall]] = None


class Choice(BaseModel):
    delta: ChoiceDelta
    """A chat completion delta generated by streamed model responses."""

    finish_reason: Optional[Literal["stop", "length", "tool_calls", "content_filter", "function_call"]] = None
    """The reason the model stopped generating tokens.

    This will be `stop` if the model hit a natural stop point or a provided stop
    sequence, `length` if the maximum number of tokens specified in the request was
    reached, `content_filter` if content was omitted due to a flag from our content
    filters, `tool_calls` if the model called a tool, or `function_call`
    (deprecated) if the model called a function.
    """

    index: int
    """The index of the choice in the list of choices."""

    logprobs: Optional[str] = None
    """Log probability information for the choice."""


class ChatCompletionChunk(BaseModel):
    id: str
    """A unique identifier for the chat completion. Each chunk has the same ID."""

    choices: List[Choice]
    """A list of chat completion choices.

    Can contain more than one elements if `n` is greater than 1. Can also be empty
    for the last chunk if you set `stream_options: {"include_usage": true}`.
    """

    created: int
    """The Unix timestamp (in seconds) of when the chat completion was created.

    Each chunk has the same timestamp.
    """

    model: str
    """The model to generate the completion."""

    object: Literal["chat.completion.chunk"]
    """The object type, which is always `chat.completion.chunk`."""

    service_tier: Optional[Literal["scale", "default"]] = None
    """The service tier used for processing the request.

    This field is only included if the `service_tier` parameter is specified in the
    request.
    """

    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.
    Can be used in conjunction with the `seed` request parameter to understand when
    backend changes have been made that might impact determinism.
    """

    usage: Optional[Usage] = None
    """
    An optional field that will only be present when you set
    `stream_options: {"include_usage": true}` in your request. When present, it
    contains a null value except for the last chunk which contains the token usage
    statistics for the entire request.
    """


class ChatHFClient:
    @classmethod
    async def create(cls, headless=True, user_name=None, password=None):
        instance = cls()
        await instance._init(headless=headless, user_name=user_name,
                             password=password)
        return instance

    async def _init(self, browser_session=None, headless=True,
                    user_name=None, password=None):
        """Initialize the client"""
        self.session = browser_session or await HFBrowserSession.create(headless=headless,
                                                                        username=user_name,
                                                                        password=password)
        self.hf = HuggingFaceAutomation(self.session)
        logger.info("HFChat initialized with browser session")
        self.completions = self.Completions(self.hf)

    class Completions:
        def __init__(self, hf: HuggingFaceAutomation):
            self.hf = hf

        async def create(
            self,
            messages: List[Dict[str, str]],
            model: Optional[HFChatModels] = None,
            temperature: float = 1.0,
            stream: bool = False,
            web_search: bool = False,
            max_wait_time: int = 3000,
            conversation_id: str = "",
            response_format: Optional[Dict] = None,
            **kwargs
        ) -> Union[ChatCompletion, AsyncIterator[ChatCompletionChunk]]:

            system_prompt = self.hf.system_prompt or ""
            prompt = ""
            model = model or self.hf.model or "nvidia/Llama-3.1-Nemotron-70B-Instruct-HF"
            for m in messages:
                if m['role'] == 'system':
                    system_prompt = m['content']
                else:
                    prompt += f"{m['content']}\n"

            try:
                if stream:
                    return self._handle_stream(prompt, system_prompt, web_search, max_wait_time,
                                               conversation_id=conversation_id,
                                               model=model,
                                               response_format=response_format, **kwargs
                                               )

                else:
                    return await self._handle_chat(prompt, system_prompt, web_search, max_wait_time,
                                                   conversation_id=conversation_id,
                                                   model=model,
                                                   response_format=response_format, **kwargs
                                                   )
            except Exception as e:
                logger.error(f"Error in chat completion: {str(e)}")
                raise

        async def _handle_chat(self, prompt: str, system_prompt, web_search: bool, max_wait_time: int,
                               conversation_id: str = "",
                               model=None,
                               response_format: Optional[Dict] = None,
                               **kwargs
                               ) -> ChatCompletion:
            response = await self.hf.complete(prompt, system_prompt, web_search, max_wait_time,
                                              conversation_id=conversation_id,
                                              model=model,
                                              response_format=response_format,**kwargs)
            return ChatCompletion(
                id=f"chatcmpl-{uuid.uuid4()}",
                object="chat.completion",
                created=int(time.time()),
                model=model,
                choices=[
                    ChatChoice(
                        index=0,
                        message=ChatMessage(role="assistant", content=response),
                        finish_reason="stop"
                    )
                ],
                usage=Usage()
            )

        async def _handle_stream(self, prompt: str, system_prompt, web_search: bool, max_wait_time: int,
                                 conversation_id: str = "",
                                 model: HFChatModels = "nvidia/Llama-3.1-Nemotron-70B-Instruct-HF",
                                 response_format: Optional[Dict] = None, **kwargs
                                 ) -> AsyncIterator[ChatCompletionChunk]:
            chat_id = f"chatcmpl-{uuid.uuid4()}"
            created_time = int(time.time())

            async for chunk in self.hf.stream_query(prompt, web_search, max_wait_time,
                                                    system_prompt=system_prompt,
                                                    conversation_id=conversation_id,
                                                    model=model,
                                                    response_format=response_format):
                stop:List = kwargs.get('stop',[])
                if stop and any([s in chunk for s in stop]):
                    break

                if chunk:
                    yield ChatCompletionChunk(
                        id=chat_id,
                        object="chat.completion.chunk",
                        created=created_time,
                        model=model,
                        choices=[
                            Choice(
                                index=0,
                                delta=ChoiceDelta(content=chunk, role="assistant"),
                                finish_reason=None,
                                logprobs=None
                            )
                        ]
                    )

    async def close(self):
        if self.session:
            await self.session.close()
            logger.info("Chat session closed")
