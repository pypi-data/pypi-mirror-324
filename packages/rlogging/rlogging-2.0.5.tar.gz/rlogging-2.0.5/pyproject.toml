[project]
name = "rlogging"
dynamic = ["version"]
description = "A set of tools to improve the observability of applications"
readme = "readme.md"
license = {text = "MIT"}
authors = [
    {name = "Aleksei Marusich", email = "aleksei.marusich@rocshers.com"}
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Archiving :: Packaging",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Software Distribution",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
]
keywords = ["rocshers", "logging"]
requires-python = ">=3.12"
dependencies = []

[project.optional-dependencies]
sentry = [
    "sentry-sdk>=2.17.0",
]
prometheus = [
    "logs-prometheus>=1.1.2",
    "prometheus-client>=0.21.0",
]
django = [
    "django>=5.1.2",
    "django-storages[s3]>=1.14.4",
]
common = [
    "pydantic-settings>=2.6.0",
]
opentelemetry = [
    "opentelemetry-distro[otlp]>=0.48b0",
]

[dependency-groups]
dev = [
    "mypy>=1.12.1",
    "pre-commit>=4.0.1",
    "pre-commit-hooks>=5.0.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.7.0",
    "types-toml>=0.10.8.20240310",
    "types-requests>=2.32.0.20241016",
    "pydantic>=2.9.2",
]

[build-system]
requires = ["hatchling", "wheel", "versioningit"]
build-backend = "hatchling.build"

[tool.uv]
package = true

[tool.versioningit]

[tool.hatch.version]
source = "versioningit"

[tool.hatch.build]
packages = ["rlogging"]

[tool.hatch.build.targets.sdist]
ignore-vcs = true

[tool.black]
skip-string-normalization = true
line-length = 120
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = "py312"
unsafe-fixes = true
exclude = []

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
select = ["A", "B", "C", "D", "E", "F", "I", "UP"]
fixable = ["A", "B", "C", "D", "E", "F", "I", "UP"]
ignore = ["UP004", "D100", "D101", "D102", "D103", "D104", "D107", "D415", "D105", "D106", "D203", "D213", "B008"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.coverage.run]
omit = [
    "*/tests/*",
    "install-poetry.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
addopts = "-vvs --tb=short"
xfail_strict = true
testpaths = [
    "tests",
    "integration",
]
python_files = [
    "tests/*.py",
    "test_*.py"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore:Module already imported:pytest.PytestWarning"
]
log_cli=true
log_level='INFO'
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
ignore_missing_imports = true
exclude = ".pyi"
