Metadata-Version: 2.4
Name: plangym
Version: 0.1.30
Summary: Plangym is an interface to use gymnasium for planning problems. It extends the standard interface to allow setting and recovering the environment states.
Author-email: Guillem Duran Ballester <guillem@fragile.tech>
Maintainer-email: Guillem Duran Ballester <guillem@fragile.tech>
License: MIT License
        
        Copyright (c) 2018 - 2021 FragileTech
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: RL,gymnasium,plangym,planning
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.10
Requires-Dist: flogging>=0.0.22
Requires-Dist: fragile-gym
Requires-Dist: imageio>=2.35.1
Requires-Dist: numpy
Requires-Dist: opencv-python>=4.10.0.84
Requires-Dist: pillow; sys_platform != 'darwin'
Requires-Dist: pyglet==1.5.11
Requires-Dist: pyvirtualdisplay>=3.0
Provides-Extra: atari
Requires-Dist: ale-py; extra == 'atari'
Requires-Dist: gymnasium[accept-rom-license,atari]==0.*,>=0.29.1; extra == 'atari'
Provides-Extra: box-2d
Requires-Dist: box2d-py==2.3.5; extra == 'box-2d'
Provides-Extra: classic-control
Requires-Dist: gymnasium[classic-control]==0.*,>=0.29.1; extra == 'classic-control'
Requires-Dist: pygame>=2.6.0; extra == 'classic-control'
Provides-Extra: dm-control
Requires-Dist: dm-control>=1.0.22; extra == 'dm-control'
Requires-Dist: mujoco>=3.2.2; extra == 'dm-control'
Provides-Extra: docs
Requires-Dist: jupyter-cache; extra == 'docs'
Requires-Dist: linkify-it-py; extra == 'docs'
Requires-Dist: myst-nb; extra == 'docs'
Requires-Dist: myst-parser; extra == 'docs'
Requires-Dist: pydata-sphinx-theme; extra == 'docs'
Requires-Dist: ruyaml; extra == 'docs'
Requires-Dist: sphinx; extra == 'docs'
Requires-Dist: sphinx-autoapi; extra == 'docs'
Requires-Dist: sphinx-autodoc2; extra == 'docs'
Requires-Dist: sphinx-book-theme; extra == 'docs'
Requires-Dist: sphinx-copybutton; extra == 'docs'
Requires-Dist: sphinx-rtd-theme; extra == 'docs'
Requires-Dist: sphinx-togglebutton; extra == 'docs'
Requires-Dist: sphinxcontrib-bibtex; extra == 'docs'
Requires-Dist: sphinxcontrib-mermaid; extra == 'docs'
Requires-Dist: sphinxext-opengraph; extra == 'docs'
Provides-Extra: jupyter
Requires-Dist: jupyterlab>=3.2.0; extra == 'jupyter'
Provides-Extra: nes
Requires-Dist: fragile-gym-super-mario-bros>=7.4.1; extra == 'nes'
Requires-Dist: fragile-gym[accept-rom-license]; extra == 'nes'
Requires-Dist: fragile-nes-py>=10.0.1; extra == 'nes'
Provides-Extra: ray
Requires-Dist: ray>=2.35.0; extra == 'ray'
Provides-Extra: retro
Requires-Dist: stable-retro==0.9.1; (sys_platform == 'darwin') and extra == 'retro'
Requires-Dist: stable-retro==0.9.2; (sys_platform != 'darwin') and extra == 'retro'
Provides-Extra: test
Requires-Dist: hypothesis>=6.24.6; extra == 'test'
Requires-Dist: psutil>=5.8.0; extra == 'test'
Requires-Dist: pytest-cov>=3.0.0; extra == 'test'
Requires-Dist: pytest-rerunfailures>=10.2; extra == 'test'
Requires-Dist: pytest-xdist>=2.4.0; extra == 'test'
Requires-Dist: pytest>=6.2.5; extra == 'test'
Requires-Dist: pyvirtualdisplay>=1.3.2; extra == 'test'
Requires-Dist: tomli>=1.2.3; extra == 'test'
Description-Content-Type: text/markdown

## Welcome to Plangym

[![Documentation Status](https://readthedocs.org/projects/plangym/badge/?version=latest)](https://plangym.readthedocs.io/en/latest/?badge=latest)
[![Code coverage](https://codecov.io/github/FragileTech/plangym/coverage.svg)](https://codecov.io/github/FragileTech/plangym)
[![PyPI package](https://badgen.net/pypi/v/plangym)](https://pypi.org/project/plangym/)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)
[![license: MIT](https://img.shields.io/badge/license-MIT-green.svg)](https://opensource.org/licenses/MIT)

Plangym is an open source Python library for developing and comparing planning algorithms by providing a 
standard API to communicate between algorithms and environments, as well as a standard set of environments 
compliant with that API.

Given that OpenAI's `gym` has become the de-facto standard in the research community, `plangym`'s API 
is designed to be as similar as possible to `gym`'s API while allowing to modify the environment state.

Furthermore, it provides additional functionality for stepping the environments in parallel, delayed environment
initialization for dealing with environments that are difficult to serialize, compatibility with `gym.Wrappers`, 
and more.

## Supported environments
Plangym currently supports all the following environments:

* OpenAI gym classic control environments
* OpenAI gym Box2D environments
* OpenAI gym Atari 2600 environments
* Deepmind's dm_control environments
* Stable-retro environments

## Getting started

### Stepping an environment
```python
import plangym
env = plangym.make(name="CartPole-v0")
state, obs, info = env.reset()

state = state.copy()
action = env.action_space.sample()

data = env.step(state=state, action=action)
new_state, observ, reward, end, truncated, info = data
```


### Stepping a batch of states and actions
```python
import plangym
env = plangym.make(name="CartPole-v0")
state, obs, info = env.reset()

states = [state.copy() for _ in range(10)]
actions = [env.action_space.sample() for _ in range(10)]

data = env.step_batch(states=states, actions=actions)
new_states, observs, rewards, ends, truncateds, infos = data
```


### Using parallel steps

```python
import plangym
env = plangym.make(name="MsPacman-v0", n_workers=2)

state, obs, info = env.reset()

states = [state.copy() for _ in range(10)]
actions = [env.action_space.sample() for _ in range(10)]

data =  env.step_batch(states=states, actions=actions)
new_states, observs, rewards, ends, truncateds, infos = data
```

## Installation 
TODO: Meanwhile take a look at how we set up the repository in `.github/workflows/push.yaml`.

## License
Plangym is released under the [MIT](LICENSE) license.

## Contributing

Contributions are very welcome! Please check the [contributing guidelines](CONTRIBUTING.md) before opening a pull request.

If you have any suggestions for improvement, or you want to report a bug please open 
an [issue](https://github.com/FragileTech/plangym/issues).


# Installing nes-py

#### Step 1: Install necessary development tools and libraries
sudo apt-get update
sudo apt-get install build-essential clang
sudo apt-get install libstdc++-10-dev

#### Step 2: Verify the compiler and include paths
#### Ensure you are using g++ instead of clang++ if clang++ is not properly configured
export CXX=g++
export CC=gcc

# Rebuild the project
rye install nes-py --git=https://github.com/FragileTech/nes-py