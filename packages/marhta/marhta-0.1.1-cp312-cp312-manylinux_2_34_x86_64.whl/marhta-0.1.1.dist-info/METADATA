Metadata-Version: 2.4
Name: marhta
Version: 0.1.1
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Rust
Classifier: Topic :: Text Processing :: General
License-File: LICENSE
Summary: Fast string similarity algorithms in Rust
Keywords: string,similarity,levenshtein,jaro-winkler,fuzzy
Requires-Python: >=3.8
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Repository, https://github.com/pjwerneck/marhta

# marhta
[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)

Fast string similarity algorithms

*This library is still in development and may not be stable.*

## Installation

```bash
pip install marhta
```

## Usage

```python
from marhta import levenshtein_similarity, jaro_winkler_similarity

# Calculate string similarities
print(levenshtein_similarity("hello", "helo"))  # 0.8
print(jaro_winkler_similarity("martha", "marhta"))  # 0.961

# Find best matches
from marhta import levenshtein_match
strings = ["apple", "banana", "orange", "pear"]
matches = levenshtein_match("aple", strings)
print(matches)  # [("apple", 0.8), ("pear", 0.5)]
```

## Features

- Levenshtein distance and similarity measures
- Jaro-Winkler distance and similarity measures
- Fuzzy string matching with customizable thresholds

## Performance

Written in Rust for improved performance, while maintaining a Pythonic API.

