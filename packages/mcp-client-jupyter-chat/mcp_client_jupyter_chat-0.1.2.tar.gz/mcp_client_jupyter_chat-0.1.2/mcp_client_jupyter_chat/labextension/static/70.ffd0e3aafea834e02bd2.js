"use strict";(self.webpackChunkmcp_client_jupyter_chat=self.webpackChunkmcp_client_jupyter_chat||[]).push([[70],{70:(e,n,t)=>{t.r(n),t.d(n,{default:()=>A});var o=t(72),s=t.n(o),a=t(825),l=t.n(a),c=t(659),i=t.n(c),r=t(56),d=t.n(r),p=t(540),u=t.n(p),m=t(113),h=t.n(m),g=t(646),x={};x.styleTagTransform=h(),x.setAttributes=d(),x.insert=i().bind(null,"head"),x.domAPI=l(),x.insertStyleElement=u(),s()(g.A,x),g.A&&g.A.locals&&g.A.locals;var f=t(209),y=t(256),b=t(123),C=t(593),v=t(88),w=t(910),k=t(32),E=t.n(k);class _{constructor(e,n,t){this.messages=[],this.tools=[],this.mcpClient=e,this.anthropic=new(E())({apiKey:t,dangerouslyAllowBrowser:!0}),this.modelName=n}async initializeTools(){try{const e=await this.mcpClient.listTools();this.tools=e.tools}catch(e){throw console.error("Failed to initialize tools:",e),e}}async*sendMessage(e){e&&this.messages.push({role:"user",content:e});let n=!0;try{for(;n;){let e="",t="",o="",s="";n=!1;const a=this.anthropic.messages.stream({model:this.modelName,max_tokens:4096,messages:this.messages.map((e=>({role:e.role,content:"string"==typeof e.content?e.content:JSON.stringify(e.content)}))),tools:this.tools.map((e=>({name:e.name,description:e.description,input_schema:e.inputSchema}))),system:"Before answering, explain your reasoning step-by-step."});for await(const l of a)if("content_block_start"===l.type)"tool_use"===l.content_block.type&&(o=l.content_block.name,s=l.content_block.id);else if("content_block_delta"===l.type)"text_delta"===l.delta.type?(e+=l.delta.text,yield{type:"text",text:l.delta.text}):"input_json_delta"===l.delta.type&&(t+=l.delta.partial_json);else if("message_delta"===l.type){if("tool_use"===l.delta.stop_reason){if(n=!0,""!==o){const a=[];""!==e&&(a.push({type:"text",text:e}),e="");const l=JSON.parse(t),c={type:"tool_use",id:s,name:o,input:l};a.push(c),yield{type:"tool_use",name:o,input:l},this.messages.push({role:"assistant",content:a});try{const e=(await this.mcpClient.callTool({name:o,arguments:l,_meta:{}})).content.map((e=>"text"===e.type?{type:"text",text:e.text}:"image"===e.type?{type:"image",source:{type:"base64",media_type:e.mimeType,data:e.data}}:{type:"text",text:"Unsupported content type"})),n={type:"tool_result",tool_use_id:s,content:e};yield{type:"tool_result",name:o,content:JSON.stringify(e)},this.messages.push({role:"user",content:[n]})}catch(e){console.error("Error executing tool:",e);const t={type:"text",text:`Error executing tool ${o}: ${e}`};yield t,n=!1}finally{o="",s="",t="",e=""}}}else if(""!==e){const n={type:"text",text:e};this.messages.push({role:"assistant",content:[n]}),e="",t=""}}else"message_stop"===l.type&&console.log("Message stop:",l);const l=await a.finalMessage();console.log("Final message:",l)}}catch(e){console.error("Error processing message:",e),yield{type:"text",text:"An error occurred while processing your message."}}}getHistory(){return this.messages}clearHistory(){this.messages=[]}}const L={id:"mcp-client-jupyter-chat:plugin",description:"A JupyterLab extension for Chat with AI supporting MCP",autoStart:!0,requires:[f.ICommandPalette,b.INotebookTracker],optional:[C.ISettingRegistry],activate:(e,n,t,o)=>{console.log("JupyterLab extension mcp-client-jupyter-chat is activated!");let s=[],a=null;const l=document.createElement("div");l.classList.add("mcp-model-select");const c=document.createElement("select");if(c.addEventListener("change",(()=>{a=s.find((e=>e.name===c.value))||null})),o){const e=e=>{const n=e.composite,t=(null==n?void 0:n.models)||[];s=Array.isArray(t)?t:[],a=s.find((e=>e.isDefault))||s[0]||null,console.log("mcp-client-jupyter-chat settings loaded:",`models: ${s.length}`),c.innerHTML="",s.forEach((e=>{const n=document.createElement("option");n.value=e.name,n.textContent=e.name,"gpt-4"===e.name&&(n.textContent="GPT-4"),n.selected=e===a,c.appendChild(n)}))};o.load(L.id).then((n=>{e(n),n.changed.connect(e)})).catch((e=>{console.error("Failed to load settings for mcp-client-jupyter-chat.",e)}))}const i=new y.Widget,r=document.createElement("div");r.classList.add("mcp-chat");const d=document.createElement("div");d.classList.add("mcp-chat-area");const p=document.createElement("div");p.classList.add("mcp-input-area");const u=document.createElement("div");u.classList.add("mcp-input-wrapper");const m=document.createElement("textarea");m.placeholder="Message MCP v3!...",m.classList.add("mcp-input");const h=new v.K({name:"jupyter-mcp-client",version:"0.1.0"},{capabilities:{tools:{},resources:{}}});let g=null,x=null,f=!1,b=!1;const C=async()=>{if(!b){b=!0;try{if(x){try{await x.close()}catch(e){console.log("Error closing existing transport:",e)}x=null}const e=new URL("http://localhost:3002/sse");if(x=new w.A(e),await h.connect(x),f=!0,console.log("Successfully connected to MCP server"),!a)throw new Error("No model selected");g=new _(h,a.name,a.apiKey),await g.initializeTools(),x.onclose=()=>{console.log("SSE transport closed"),f=!1,x=null,g=null}}catch(e){(e instanceof Error?e.message:String(e)).includes("CORS")&&console.warn("CORS error detected. The MCP server must be configured with these headers:\n  Access-Control-Allow-Origin: http://localhost:8888\n  Access-Control-Allow-Methods: GET\n  Access-Control-Allow-Headers: Accept, Origin\n"),f=!1,x=null,g=null}finally{b=!1}}};C().catch(console.error),m.addEventListener("input",(()=>{m.style.height="auto";const e=Math.min(m.scrollHeight,.3*window.innerHeight);m.style.height=e+"px"}));const k=document.createElement("button");k.classList.add("mcp-send-button");const E=(e,n)=>{const t=document.createElement("div");t.classList.add("mcp-message"),t.classList.add(n?"user":"assistant"),"string"==typeof e?t.textContent=e:e.forEach((e=>{const n=document.createElement("div");switch(e.type){case"text":n.textContent=e.text||"";break;case"tool_use":n.textContent=`[Using tool: ${e.name}]`,n.classList.add("tool-use");break;case"tool_result":{n.classList.add("tool-result"),e.is_error&&n.classList.add("error");const t=document.createElement("div");t.classList.add("tool-result-header"),t.textContent="Tool Result";const o=document.createElement("button");o.classList.add("tool-result-toggle"),o.textContent="Expand",o.onclick=()=>{const e=n.classList.toggle("expanded");o.textContent=e?"Collapse":"Expand"},t.appendChild(o),n.appendChild(t);const s=document.createElement("div");s.textContent="string"==typeof e.content?e.content:JSON.stringify(e.content,null,2),n.appendChild(s);break}}t.appendChild(n)})),d.appendChild(t),d.scrollTop=d.scrollHeight},A=async e=>{if(E(e,!0),f&&g||(E("Not connected to MCP server. Attempting to connect...",!1),await C(),f&&g))try{const n=document.createElement("div");n.classList.add("mcp-message","assistant"),d.appendChild(n);let o=null;for await(const s of g.sendMessage(e)){console.log("Received block:",s);let e=document.createElement("div");switch(s.type){case"text":o||(o=document.createElement("div"),n.appendChild(o)),o.textContent=(o.textContent||"")+(s.text||"");break;case"tool_use":o=null,e=document.createElement("div"),e.classList.add("tool-use"),e.textContent=`[Using tool: ${s.name}]`,n.appendChild(e);break;case"tool_result":{o=null,e=document.createElement("div"),e.classList.add("tool-result"),s.is_error&&e.classList.add("error");const a=document.createElement("div");a.classList.add("tool-result-header"),a.textContent="Tool Result";const l=document.createElement("button");l.classList.add("tool-result-toggle"),l.textContent="Expand",l.onclick=()=>{const n=e.classList.toggle("expanded");l.textContent=n?"Collapse":"Expand"},a.appendChild(l),e.appendChild(a);const c=document.createElement("div");c.textContent="string"==typeof s.content?s.content:JSON.stringify(s.content,null,2),e.appendChild(c),n.appendChild(e),t.currentWidget&&await t.currentWidget.context.revert();break}}d.scrollTop=d.scrollHeight}}catch(e){console.error("Error handling message:",e),f=!1,x=null,g=null,E("Error communicating with MCP server. Please ensure the server is running and try again.",!1)}else E("Failed to connect to MCP server. Please ensure the server is running at http://localhost:3002",!1)};k.addEventListener("click",(async()=>{const e=m.value.trim();e&&(await A(e),m.value="")})),m.addEventListener("keydown",(e=>{if("Enter"===e.key&&!e.shiftKey){e.preventDefault();const n=m.value.trim();n&&(A(n),m.value="",m.style.height="auto")}}));const M=document.createElement("div");M.classList.add("mcp-input-container"),M.appendChild(m),M.appendChild(k),u.appendChild(M),l.appendChild(c),p.appendChild(u),p.appendChild(l),r.appendChild(d),r.appendChild(p),i.node.appendChild(r);const P=new y.Panel;P.id="mcp-chat",P.title.label="MCP Chat",P.title.closable=!0,P.title.caption="MCP Chat Interface",P.addWidget(i);const z="mcp:open-chat";e.commands.addCommand(z,{label:"Open MCP Chat",caption:"Open the MCP Chat interface",isEnabled:()=>!0,execute:()=>{P.isAttached||e.shell.add(P,"left",{rank:100}),e.shell.activateById(P.id)}}),n.addItem({command:z,category:"MCP"})}},A=L},475:(e,n,t)=>{t.d(n,{A:()=>c});var o=t(601),s=t.n(o),a=t(314),l=t.n(a)()(s());l.push([e.id,"/*\n  See the JupyterLab Developer Guide for useful CSS Patterns:\n  https://jupyterlab.readthedocs.io/en/stable/developer/css.html\n*/\n\n.mcp-chat {\n  background: var(--jp-layout-color1);\n  color: var(--jp-ui-font-color1);\n  height: 100%;\n}\n\n.mcp-message {\n  font-size: var(--jp-ui-font-size1);\n}\n\n.mcp-input {\n  font-size: var(--jp-ui-font-size1);\n  font-family: var(--jp-ui-font-family);\n}\n",""]);const c=l},646:(e,n,t)=>{t.d(n,{A:()=>r});var o=t(601),s=t.n(o),a=t(314),l=t.n(a),c=t(475),i=l()(s());i.i(c.A),i.push([e.id,".mcp-chat {\n  position: fixed;\n  inset: 0;\n  display: flex;\n  flex-direction: column;\n  background: #faf9f7;\n}\n\n.mcp-chat-area {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  padding-bottom: 100px;\n  background: #faf9f7;\n  scrollbar-width: thin;\n  scrollbar-color: #e6e2dd transparent;\n}\n\n.mcp-chat-area::-webkit-scrollbar {\n  width: 8px;\n}\n\n.mcp-chat-area::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.mcp-chat-area::-webkit-scrollbar-thumb {\n  background-color: #e6e2dd;\n  border-radius: 4px;\n}\n\n.mcp-message {\n  margin: 8px 0;\n  padding: 8px 12px;\n  border-radius: 12px;\n  max-width: 80%;\n}\n\n.mcp-message.user {\n  background: #f0ece6;\n  margin-left: auto;\n  color: #444;\n}\n\n.mcp-message.assistant {\n  background: #fff;\n  margin-right: auto;\n  color: #444;\n  border: 1px solid #e6e2dd;\n}\n\n.mcp-input-area {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 12px;\n  background: #fff;\n  border-top: 1px solid #e6e2dd;\n  box-sizing: border-box;\n  box-shadow: 0 -2px 10px rgb(0 0 0 / 5%);\n  max-height: 100px;\n  z-index: 1000;\n}\n\n.mcp-input-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n}\n\n.mcp-input-container {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 12px;\n  border: 1px solid #e6e2dd;\n  border-radius: 20px;\n  background: #fff;\n}\n\n.mcp-input {\n  flex: 1;\n  padding: 0;\n  border: none;\n  background: transparent;\n  color: #444;\n  resize: none;\n  min-height: 24px;\n  max-height: 48px;\n  overflow-y: auto;\n  line-height: 1.4;\n  box-sizing: border-box;\n}\n\n.mcp-input:focus {\n  outline: none;\n}\n\n.mcp-send-button {\n  width: 32px;\n  height: 32px;\n  background: #f0ece6;\n  color: #444;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin-right: -4px;\n}\n\n.mcp-send-button::before {\n  content: '↑';\n  font-size: 18px;\n}\n\n.mcp-send-button:hover {\n  background: #e6e2dd;\n}\n\n.mcp-send-button:active {\n  background: #dcd8d3;\n}\n\n.tool-result {\n  position: relative;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 8px;\n  background: #f8f8f8;\n  border-radius: 6px;\n  margin: 4px 0;\n  font-family: monospace;\n  transition: max-height 0.3s ease;\n}\n\n.tool-result.expanded {\n  max-height: none;\n}\n\n.tool-result-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n  color: #666;\n  font-size: 0.9em;\n}\n\n.tool-result-toggle {\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  padding: 2px 6px;\n  font-size: 0.9em;\n  border-radius: 4px;\n}\n\n.tool-result-toggle:hover {\n  background: #eee;\n}\n\n.tool-result.error {\n  background: #fff0f0;\n  border: 1px solid #ffcdd2;\n}\n\n.mcp-model-select {\n  position: relative;\n  display: inline-block;\n  background: #f7f7f7;\n  border-radius: 8px;\n  padding: 2px 4px;\n  margin-top: 4px;\n  margin-bottom: 8px;\n  width: fit-content;\n  z-index: 1001;\n}\n\n.mcp-model-select select {\n  appearance: none;\n  -webkit-appearance: none;\n  width: auto;\n  padding: 6px 28px 6px 8px;\n  border: none;\n  background: transparent;\n  color: #333;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  outline: none;\n}\n\n.mcp-model-select::after {\n  content: '▼';\n  font-size: 8px;\n  color: #666;\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n}\n\n.mcp-model-select select:focus {\n  outline: none;\n}\n\n.mcp-model-select select option {\n  padding: 10px;\n  font-size: 14px;\n  background: #fff;\n  color: #333;\n  font-weight: 500;\n}\n\n.mcp-model-select select option:hover,\n.mcp-model-select select option:focus {\n  background: #f7f7f7;\n}\n",""]);const r=i}}]);