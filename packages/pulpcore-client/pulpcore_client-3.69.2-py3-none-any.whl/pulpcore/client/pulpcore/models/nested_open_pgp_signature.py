# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulpcore.configuration import Configuration


class NestedOpenPGPSignature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'issuer': 'str',
        'created': 'datetime',
        'expiration_time': 'str',
        'signers_user_id': 'str',
        'key_expiration_time': 'str',
        'expired': 'bool'
    }

    attribute_map = {
        'issuer': 'issuer',
        'created': 'created',
        'expiration_time': 'expiration_time',
        'signers_user_id': 'signers_user_id',
        'key_expiration_time': 'key_expiration_time',
        'expired': 'expired'
    }

    def __init__(self, issuer=None, created=None, expiration_time=None, signers_user_id=None, key_expiration_time=None, expired=None, local_vars_configuration=None):  # noqa: E501
        """NestedOpenPGPSignature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._issuer = None
        self._created = None
        self._expiration_time = None
        self._signers_user_id = None
        self._key_expiration_time = None
        self._expired = None
        self.discriminator = None

        self.issuer = issuer
        self.created = created
        self.expiration_time = expiration_time
        self.signers_user_id = signers_user_id
        self.key_expiration_time = key_expiration_time
        self.expired = expired

    @property
    def issuer(self):
        """Gets the issuer of this NestedOpenPGPSignature.  # noqa: E501


        :return: The issuer of this NestedOpenPGPSignature.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this NestedOpenPGPSignature.


        :param issuer: The issuer of this NestedOpenPGPSignature.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                issuer is not None and len(issuer) > 16):
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `16`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                issuer is not None and len(issuer) < 1):
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")  # noqa: E501

        self._issuer = issuer

    @property
    def created(self):
        """Gets the created of this NestedOpenPGPSignature.  # noqa: E501


        :return: The created of this NestedOpenPGPSignature.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NestedOpenPGPSignature.


        :param created: The created of this NestedOpenPGPSignature.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def expiration_time(self):
        """Gets the expiration_time of this NestedOpenPGPSignature.  # noqa: E501


        :return: The expiration_time of this NestedOpenPGPSignature.  # noqa: E501
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this NestedOpenPGPSignature.


        :param expiration_time: The expiration_time of this NestedOpenPGPSignature.  # noqa: E501
        :type: str
        """

        self._expiration_time = expiration_time

    @property
    def signers_user_id(self):
        """Gets the signers_user_id of this NestedOpenPGPSignature.  # noqa: E501


        :return: The signers_user_id of this NestedOpenPGPSignature.  # noqa: E501
        :rtype: str
        """
        return self._signers_user_id

    @signers_user_id.setter
    def signers_user_id(self, signers_user_id):
        """Sets the signers_user_id of this NestedOpenPGPSignature.


        :param signers_user_id: The signers_user_id of this NestedOpenPGPSignature.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                signers_user_id is not None and len(signers_user_id) < 1):
            raise ValueError("Invalid value for `signers_user_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._signers_user_id = signers_user_id

    @property
    def key_expiration_time(self):
        """Gets the key_expiration_time of this NestedOpenPGPSignature.  # noqa: E501


        :return: The key_expiration_time of this NestedOpenPGPSignature.  # noqa: E501
        :rtype: str
        """
        return self._key_expiration_time

    @key_expiration_time.setter
    def key_expiration_time(self, key_expiration_time):
        """Sets the key_expiration_time of this NestedOpenPGPSignature.


        :param key_expiration_time: The key_expiration_time of this NestedOpenPGPSignature.  # noqa: E501
        :type: str
        """

        self._key_expiration_time = key_expiration_time

    @property
    def expired(self):
        """Gets the expired of this NestedOpenPGPSignature.  # noqa: E501


        :return: The expired of this NestedOpenPGPSignature.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this NestedOpenPGPSignature.


        :param expired: The expired of this NestedOpenPGPSignature.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and expired is None:  # noqa: E501
            raise ValueError("Invalid value for `expired`, must not be `None`")  # noqa: E501

        self._expired = expired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedOpenPGPSignature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NestedOpenPGPSignature):
            return True

        return self.to_dict() != other.to_dict()
