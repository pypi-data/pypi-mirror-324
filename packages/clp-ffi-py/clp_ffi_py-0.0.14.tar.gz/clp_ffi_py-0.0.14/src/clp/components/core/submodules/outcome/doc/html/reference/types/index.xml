<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Types on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/reference/types/</link>
    <description>Recent content in Types on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 13 Dec 2018 21:10:19 +0000</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/reference/types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>`bad_outcome_access`</title>
      <link>https://ned14.github.io/outcome/reference/types/bad_outcome_access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/bad_outcome_access/</guid>
      <description>Exception type publicly inheriting from  std::logic_error indicating an incorrect observation of value or error or exception occurred by basic_outcome&amp;lt;T, EC, EP, NoValuePolicy&amp;gt; .
No member functions are added in addition to std::logic_error. Typical .what() strings are:
 &amp;quot;no value&amp;quot; &amp;quot;no error&amp;quot; &amp;quot;no exception&amp;quot;  Requires: Nothing.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/bad_access.hpp&amp;gt;</description>
    </item>
    
    <item>
      <title>`bad_result_access_with&lt;EC&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/bad_result_access_with/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/bad_result_access_with/</guid>
      <description>Exception type publicly inheriting from bad_result_access , and thus also  std::logic_error , indicating an incorrect observation of value occurred. The error value at the time of the exception throw is moved or copied into this type, and is available using the .error() observer which comes in lvalue ref, const lvalue ref, rvalue ref, and const rvalue ref overloads.
The primary purpose of this exception type is to enable standing in for  P0323 std::expected&amp;lt;T, E&amp;gt; &amp;rsquo;s bad_expected_access&amp;lt;E&amp;gt; which is thrown on incorrect wide value observation.</description>
    </item>
    
    <item>
      <title>`bad_result_access`</title>
      <link>https://ned14.github.io/outcome/reference/types/bad_result_access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/bad_result_access/</guid>
      <description>Exception type publicly inheriting from  std::logic_error indicating an incorrect observation of value or error occurred by basic_result&amp;lt;T, E, NoValuePolicy&amp;gt; .
No member functions are added in addition to std::logic_error. Typical .what() strings are:
 &amp;quot;no value&amp;quot; &amp;quot;no error&amp;quot;  Requires: Nothing.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/bad_access.hpp&amp;gt;</description>
    </item>
    
    <item>
      <title>`eager&lt;T, Executor = void&gt;/atomic_eager&lt;T, Executor = void&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/awaitables/eager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/awaitables/eager/</guid>
      <description>This is very similar to lazy&amp;lt;T, Executor = void&amp;gt; , except that execution of the eager&amp;lt;T&amp;gt; returning function begins immediately, and if the function never suspends during the course of its execution, no suspend-resume cycle occurs. Functions which return eager&amp;lt;T&amp;gt; are therefore suitable for tasks which may require suspension, but will often complete immediately.
atomic_eager&amp;lt;T&amp;gt; is like eager&amp;lt;T&amp;gt;, except that the setting of the coroutine result performs an atomic release, whilst the checking of whether the coroutine has finished is an atomic acquire.</description>
    </item>
    
    <item>
      <title>`failure_type&lt;EC, EP = void&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/failure_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/failure_type/</guid>
      <description>Type sugar for constructing an unsuccessful result or outcome. Generally not constructed directly, but via the free function failure(T &amp;amp;&amp;amp;, ...) . Detectable using is_failure_type&amp;lt;T&amp;gt; .
This is a regular wrapper type, with defaulted default, copy and move constructor, defaulted assignment, and defaulted destructor.
Member type aliases error_type and exception_type indicate EC and E.
There is an explicit initialising constructor taking any types U and V which will forward construct the contained error_type and exception_type respectively.</description>
    </item>
    
    <item>
      <title>`generator&lt;T, Executor = void&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/awaitables/generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/awaitables/generator/</guid>
      <description>This is a classic coroutine generator whereby the coroutine is resumed to calculate the next value, and is suspended upon yielding that value. If the value being yielded is an Outcome type, special semantics are used if the coroutine throws an exception (see below).
The Executor template parameter is purely for compatibility with third party software such as ASIO, and this awaitable can be directly used by ASIO.
Example of use:</description>
    </item>
    
    <item>
      <title>`in_place_type_t&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/in_place_type_t/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/in_place_type_t/</guid>
      <description>Either std::in_place_type_t&amp;lt;T&amp;gt; or a local emulation, depending on the OUTCOME_USE_STD_IN_PLACE_TYPE macro.
Note that the templated variable in_place_type is also aliased or emulated locally.
Requires: Nothing.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/config.hpp&amp;gt;</description>
    </item>
    
    <item>
      <title>`lazy&lt;T, Executor = void&gt;/atomic_lazy&lt;T, Executor = void&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/awaitables/lazy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/awaitables/lazy/</guid>
      <description>This is very similar to eager&amp;lt;T, Executor = void&amp;gt; , except that execution of the lazy&amp;lt;T&amp;gt; returning function suspends immediately. Functions which return lazy&amp;lt;T&amp;gt; are therefore suitable for tasks which you need to instantiate right now, but whose execution will occur elsewhere e.g. in a separate kernel thread. Because of the very common use case of using worker threads to execute the body of lazily executed coroutines, most people will want to use atomic_lazy&amp;lt;T&amp;gt; instead of lazy&amp;lt;T&amp;gt;.</description>
    </item>
    
    <item>
      <title>`success_type&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/types/success_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/success_type/</guid>
      <description>Type sugar for constructing a successful result or outcome. Generally not constructed directly, but via the free function success(T &amp;amp;&amp;amp;, ...) . Detectable using is_success_type&amp;lt;T&amp;gt; .
This is a regular wrapper type, with defaulted default, copy and move constructor, defaulted assignment, and defaulted destructor.
A member type alias value_type indicates T.
There is an explicit initialising constructor taking any type U which is not a success_type&amp;lt;T&amp;gt;, and which will forward construct the contained T from that U.</description>
    </item>
    
  </channel>
</rss>