<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Traits on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/reference/traits/</link>
    <description>Recent content in Traits on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 13 Dec 2018 17:36:11 +0000</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/reference/traits/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>`is_basic_outcome&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_basic_outcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_basic_outcome/</guid>
      <description>An integral constant type true for basic_outcome&amp;lt;T, EC, EP, NoValuePolicy&amp;gt; types. This does not match anything not exactly a basic_outcome. If you want to match types like basic_outcome but not equal to it, consider basic_outcome&amp;lt;T&amp;gt; ..
Overridable: Not overridable.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/basic_outcome.hpp&amp;gt;
Variable alias: is_basic_outcome_v&amp;lt;T&amp;gt;</description>
    </item>
    
    <item>
      <title>`is_basic_result&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_basic_result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_basic_result/</guid>
      <description>An integral constant type true for basic_result&amp;lt;T, E, NoValuePolicy&amp;gt; types. This does not match anything not exactly a basic_result. If you want to match types like basic_result but not equal to it, consider basic_result&amp;lt;T&amp;gt; or value_or_error&amp;lt;T&amp;gt; .
Overridable: Not overridable.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/basic_result.hpp&amp;gt;
Variable alias: is_basic_result_v&amp;lt;T&amp;gt;</description>
    </item>
    
    <item>
      <title>`is_error_code_available&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_error_code_available/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_error_code_available/</guid>
      <description>::value is true if an error code can be constructed from a T e.g. if there exists an ADL discovered free function make_error_code(T). ::type is the type that would result if ::value is true, else void.
Overridable: By template specialisation into the trait namespace.
Default: True if T is an error code, else to metaprogramming which performs the ADL discovery of make_error_code(T). Note that the STL defines multiple overloads of an ADL discovered free function  std::make_error_code(T) for its error enumerations, as does Boost.</description>
    </item>
    
    <item>
      <title>`is_error_type&lt;E&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_error_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_error_type/</guid>
      <description>A customisable integral constant type true for E types which are to receive error throwing no-value policies. Special weakened implicit construction enable is available for integral T types when combined with E types in this whitelist &amp;ndash; this permits boost_result&amp;lt;int, boost::system::errc::errc_t to retain its implicit constructors, despite the fact that errc_t as a C enum has an implicit conversion to int.
Overridable: By template specialisation into the trait namespace.
Default: False.</description>
    </item>
    
    <item>
      <title>`is_error_type_enum&lt;E, Enum&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_error_type_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_error_type_enum/</guid>
      <description>A customisable integral constant type true for E types constructible from Enum types which are to receive error throwing no-value policies
Overridable: By template specialisation into the trait namespace.
Default: False. Specialisations exist for:
 &amp;lt;outcome/boost_result.hpp&amp;gt;
 boost::system::error_code to boost::system::is_error_condition_enum&amp;lt;Enum&amp;gt;::value.  &amp;lt;outcome/std_result.hpp&amp;gt;
 std::error_code to std::is_error_condition_enum&amp;lt;Enum&amp;gt;::value.   Namespace: OUTCOME_V2_NAMESPACE::trait
Header: &amp;lt;outcome/trait.hpp&amp;gt;</description>
    </item>
    
    <item>
      <title>`is_exception_ptr_available&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_exception_ptr_available/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_exception_ptr_available/</guid>
      <description>::value is true if an exception ptr can be constructed from a T e.g. if there exists an ADL discovered free function make_exception_ptr(T). ::type is the type that would result if ::value is true, else void.
Overridable: By template specialisation into the trait namespace.
Default: True if T is an exception ptr, else to metaprogramming which performs the ADL discovery of make_exception_ptr(T). Note that the STL defines an ADL discovered free function  std::make_exception_ptr(T) .</description>
    </item>
    
    <item>
      <title>`is_failure_type&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_failure_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_failure_type/</guid>
      <description>An integral constant boolean variable true for failure_type&amp;lt;EC, EP = void&amp;gt; types.
Overridable: Not overridable.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/success_failure.hpp&amp;gt;</description>
    </item>
    
    <item>
      <title>`is_move_bitcopying&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_move_bitcopying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_move_bitcopying/</guid>
      <description>A customisable integral constant type true for T types which are move bitcopying safe. As per P1029 move bitcopying, these are types for which:
 There is an inline, constexpr-available, default constructor. The move constructor has side effects equivalent to memcpy of source to destination, followed by a memcpy of a default constructed instance to source. That the destruction of a default constructed instance has no visible side effects.  This implies that if you move from a bit copying type, you need not call its destructor, even if that is a virtual destructor.</description>
    </item>
    
    <item>
      <title>`is_success_type&lt;T&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/is_success_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/is_success_type/</guid>
      <description>An integral constant boolean variable true for success_type&amp;lt;T&amp;gt; types.
Overridable: Not overridable.
Namespace: OUTCOME_V2_NAMESPACE
Header: &amp;lt;outcome/success_failure.hpp&amp;gt;</description>
    </item>
    
    <item>
      <title>`type_can_be_used_in_basic_result&lt;R&gt;`</title>
      <link>https://ned14.github.io/outcome/reference/traits/type_can_be_used_in_basic_result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/traits/type_can_be_used_in_basic_result/</guid>
      <description>A constexpr boolean true for types permissible in basic_result&amp;lt;T, E, NoValuePolicy&amp;gt;.
Overridable: Not overridable.
Definition: True for a type which:
 Is not a reference. Is not an in_place_type_t&amp;lt;T&amp;gt; . Is not a success_type&amp;lt;T&amp;gt; . Is not a failure_type&amp;lt;EC, EP = void&amp;gt; . Is not an array. Is either void, or else is an Object and is Destructible.  Namespace: OUTCOME_V2_NAMESPACE::trait
Header: &amp;lt;outcome/trait.hpp&amp;gt;</description>
    </item>
    
  </channel>
</rss>