[project]
name = "asyncio-lifx-scenes"
version = "0.1.0"
description = "List and activate scenes via the LIFX Cloud."
authors = [{ name = "Avi Miller", email = "me@dje.li" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.12,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "httpx>=0.28.1",
    "httpx-auth>=0.23.1",
    "rich>=13.9.4",
    "typer>=0.15.1",
]

[project.urls]
Homepage = "https://djelibeybi.github.io/asyncio-lifx-scenes/"
Repository = "https://github.com/djelibeybi/asyncio-lifx-scenes"
Documentation = "https://djelibeybi.github.io/asyncio-lifx-scenes/"

[project.scripts]
lifx-scenes = "asyncio_lifx_scenes.__main__:app"

[dependency-groups]
dev = [
    "deptry>=0.22.0",
    "mkdocs-material>=8.5.10",
    "mkdocs>=1.4.2",
    "mkdocstrings[python]>=0.26.1",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=4.0.0",
    "pytest-httpx>=0.35.0",
    "pytest>=7.2.0",
    "ruff>=0.9.2",
    "tox-uv>=1.11.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"



[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
addopts = """\
    -v
    -Wdefault
    --capture=tee-sys
    --cov=asyncio_lifx_scenes
    --cov-report=term-missing:skip-covered
    --cov-branch
    --junitxml=junit.xml
    """
pythonpath = ["src"]
faulthandler_timeout = 5
asyncio_default_fixture_loop_scope = "session"
testpaths = ["tests"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.coverage.run]
branch = true
source = ["src/"]
omit = ["src/asyncio_lifx_scenes/__main__.py"]
