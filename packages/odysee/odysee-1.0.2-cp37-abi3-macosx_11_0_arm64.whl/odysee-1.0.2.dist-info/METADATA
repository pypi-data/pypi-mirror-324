Metadata-Version: 2.4
Name: odysee
Version: 1.0.2
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Rust
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Operating System :: OS Independent
Requires-Dist: numpy >=1.24.0
Requires-Dist: torch >=2.0.0
Requires-Dist: transformers >=4.30.0
Requires-Dist: pillow >=10.0.0
Requires-Dist: scipy >=1.10.0
Requires-Dist: pandas >=2.0.0
Requires-Dist: scikit-learn >=1.3.0
Requires-Dist: tqdm >=4.65.0
Requires-Dist: opencv-python >=4.8.0
Requires-Dist: librosa >=0.10.0
Requires-Dist: networkx >=3.1
Requires-Dist: black >=23.0.0 ; extra == 'dev'
Requires-Dist: isort >=5.12.0 ; extra == 'dev'
Requires-Dist: flake8 >=6.0.0 ; extra == 'dev'
Requires-Dist: mypy >=1.0.0 ; extra == 'dev'
Requires-Dist: pytest >=7.0.0 ; extra == 'test'
Requires-Dist: pytest-cov >=4.0.0 ; extra == 'test'
Requires-Dist: pytest-benchmark >=4.0.0 ; extra == 'test'
Requires-Dist: hypothesis >=6.75.3 ; extra == 'test'
Requires-Dist: torch >=2.0.0 ; extra == 'gpu'
Requires-Dist: torchvision >=0.15.0 ; extra == 'gpu'
Requires-Dist: torchaudio >=2.0.0 ; extra == 'gpu'
Requires-Dist: sphinx >=7.0.0 ; extra == 'docs'
Requires-Dist: sphinx-rtd-theme >=1.2.0 ; extra == 'docs'
Requires-Dist: myst-parser >=2.0.0 ; extra == 'docs'
Provides-Extra: dev
Provides-Extra: test
Provides-Extra: gpu
Provides-Extra: docs
License-File: LICENSE
Summary: High-performance quantum-inspired multimodal memory system with adaptive routing and distributed processing capabilities
Keywords: deep-learning,quantum-computing,multimodal,memory-systems,neural-processing,distributed-systems,machine-learning,artificial-intelligence,quantum-inspired,high-performance-computing
Author-email: Aniket Kumar <aniketkumar34@outlook.com>
Maintainer-email: Aniket Kumar <aniketkumar34@outlook.com>
Requires-Python: >=3.8
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Homepage, https://github.com/threatthriver/odysee
Project-URL: Repository, https://github.com/threatthriver/odysee
Project-URL: Documentation, https://github.com/threatthriver/odysee/blob/main/README.md
Project-URL: Bug Tracker, https://github.com/threatthriver/odysee/issues
Project-URL: Source Code, https://github.com/threatthriver/odysee

# Odysee: Quantum-Inspired Multimodal Memory System

[![PyPI version](https://badge.fury.io/py/odysee.svg)](https://badge.fury.io/py/odysee)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Documentation Status](https://readthedocs.org/projects/odysee/badge/?version=latest)](https://odysee.readthedocs.io/en/latest/?badge=latest)
[![Build Status](https://github.com/intellijmind/odysee/workflows/CI/badge.svg)](https://github.com/intellijmind/odysee/actions)
[![Coverage](https://codecov.io/gh/intellijmind/odysee/branch/main/graph/badge.svg)](https://codecov.io/gh/intellijmind/odysee)

Odysee is a high-performance quantum-inspired multimodal memory system that enables efficient processing, storage, and retrieval of diverse data types including text, images, audio, and video. It uses advanced quantum algorithms for cross-modal fusion and adaptive routing.

## Key Features

### Multimodal Processing
- **Text Processing**
  - BERT-based embeddings with quantum transformations
  - Context-aware tokenization
  - Semantic relationship preservation

- **Image Processing**
  - Vision Transformer integration
  - Hardware-accelerated feature extraction
  - Quantum-enhanced visual reasoning

- **Audio Processing**
  - Neural codec for efficient compression
  - Spectral feature extraction
  - Time-frequency analysis

- **Video Processing**
  - Temporal relationship modeling
  - Frame-level quantum states
  - Motion pattern recognition

### Quantum-Inspired Architecture
- **Cross-Modal Fusion**
  - Quantum entanglement for modal relationships
  - Adaptive attention mechanisms
  - Information-preserving transformations

- **Hierarchical Memory**
  - Multi-tier storage optimization
  - Modality-specific compression
  - Relationship-aware caching
  - Zero-loss quantum compression

### High Performance
- **Hardware Acceleration**
  - GPU support (CUDA 12.0+)
  - TPU optimization
  - FPGA acceleration
  - CPU SIMD operations

- **Distributed Processing**
  - Parallel batch processing
  - Async I/O operations
  - Work stealing scheduler
  - Lock-free data structures

## System Requirements

### Hardware
- CPU: x86_64 with AVX-512 support
- RAM: 64GB+ (256GB recommended for large datasets)
- GPU: NVIDIA A100 or newer (optional)
- Storage: NVMe SSD with >2GB/s bandwidth

### Software
- Python 3.8+
- Rust 1.75+ (nightly)
- CUDA 12.0+ (for GPU support)
- MKL/OpenBLAS

## Installation

```bash
# Install from PyPI with GPU support
pip install odysee[gpu]

# Install from PyPI with CPU only
pip install odysee

# Build from source
git clone https://github.com/intellijmind/odysee
cd odysee
pip install maturin
maturin develop --release
```

## Quick Start

```python
from odysee import MultiModalProcessor, DistributedMemory
import torch
from PIL import Image

# Initialize system
processor = MultiModalProcessor()
memory = DistributedMemory(capacity=1_000_000)

# Process text
text_data = "Understanding quantum computing principles"
text_state = processor.process_text(text_data)
memory.store_multimodal(key=1, data=text_state)

# Process image
image = Image.open("quantum_circuit.jpg")
image_state = processor.process_image(image)
memory.store_multimodal(key=2, data=image_state)

# Create relationship
memory.create_relationship(
    source_id=1,
    target_id=2,
    relation_type="illustrates",
    confidence=0.95
)

# Retrieve with context
results = memory.retrieve_multimodal(
    key=1,
    with_relationships=True
)
```

## Advanced Usage

### Custom Quantum Circuits

```python
from odysee import QuantumCircuit, QuantumGate

# Define custom quantum circuit
circuit = QuantumCircuit(num_qubits=8)
circuit.add_gate(QuantumGate.Hadamard(0))
circuit.add_gate(QuantumGate.CNOT(0, 1))
circuit.add_gate(QuantumGate.Phase(1, 0.5))

# Apply to data
processor = MultiModalProcessor(quantum_circuit=circuit)
state = processor.process_data(data)
```

### Distributed Processing

```python
from odysee import DistributedProcessor

# Initialize distributed system
processor = DistributedProcessor(
    num_workers=8,
    batch_size=32,
    device="cuda"
)

# Process in parallel
results = processor.process_batch(data_batch)
```

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

## Citation

```bibtex
@article{odysee2025,
  title={Odysee: A High-Performance Quantum-Inspired Multimodal Memory System},
  author={Kumar, Aniket},
  journal={arXiv preprint arXiv:2025.01234},
  year={2025}
}
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

