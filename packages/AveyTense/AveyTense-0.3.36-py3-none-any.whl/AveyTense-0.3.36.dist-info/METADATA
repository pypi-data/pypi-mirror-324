Metadata-Version: 2.1
Name: AveyTense
Version: 0.3.36
Summary: Library written in Python, includes several extensions for inbuilt Python solutions
Home-page: https://aveyzan.glitch.me/tense/
Author: Aveyzan
Author-email: aveyzan@gmail.com
License: MIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: typing_extensions

# AveyTense

**AveyTense** (formally *Tense*) is a library written by Aveyzan using Python, which provides especially extensions to inbuilt Python solutions.

## Features
### Types, functions and classes

- the `abroad()` function being extended version of `range()` inbuilt Python function
- the `reckon()` function being extended version of `len()` inbuilt Python function
- the `Math` class featuring same and more math methods than `math` inbuilt Python module
- the `Time` class featuring several time management methods using `datetime` inbuilt Python module
- the `Tense` class featuring all methods from `Math` and `Time`, as well as `probability()` class method,
  methods for disassembling code, randomizing results, personalized `print()` and `input()` inbuilt functions
  implementations, methods for checking and converting
- the `Color` class, which colorizes the output and features several font decorations as in ANSI, and supports
  `RGB` and `CMYK` class instances

### Submodules

- the `tense.util` submodule (since 0.3.34) featuring `Final`, `Abstract`, `Frozen` classes, their blends, including
`AbstractFinal` and `final`, `finalmethod`, `abstract`, `abstractmethod` decorators
- the `tense.constants` submodule featuring some math constants, as well as some from gaming and Tense versions
- the `tense.fencord` submodule featuring several Discord.py solutions
- the `tense.games` submodule featuring class `Games`, which has some Tic-Tac-Toe methods and `mcEnchBook()` for
  generating Minecraft `/give enchanted_book` commands
- the `tense.operators` submodule being extension of `operator` inbuilt Python module
- the `tense.types_collection` submodule, which contains utility types from `typing`, `enum`, `types`, `inspect`,
  `subprocess` inbuilt Python modules, and from `typing_extensions` PyPi project

## Getting started

To install AveyTense, you only need to have Python 3.9 or above, and run the following command:

```
pip install AveyTense
```

If you are out-of-date, consider checking out [releases section](https://pypi.org/project/AveyTense/#history), then
use this command in the following way: `pip install AveyTense==<version>`, like `pip install AveyTense==0.3.31`.

> **Note**: It is highly recommended to install latest final version of AveyTense. Do not rely on alpha, beta releases, and
> release candidates before their final counterparts are published.

> **Warning**: Since AveyTense 0.3.30, archive files will no longer be available on [this page](https://aveyzan.glitch.me/tense),
> due to expiry of formula after orienting publication of next versions to PyPi. Instead of providing change log via file
> `./tense/information/changes.txt` normally included in zip/7-zip files, changes will be now provided in [this Google document](https://docs.google.com/document/d/1GC_KAOXML65jNfBZA8GhVViqPnrMoFtbLv_jHvUhBlg/edit?usp=sharing).

After installation process, you can import module `tense`, which is heart of AveyTense project.

## Example programs

```py
from tense import *

print(Color("Hello World!", 8, 69) % Color.BOLD_ITALIC_UNDERLINE)
# prints "Hello World!" colored blue, with bolded oblique font and line under

print(Tense.repeat(33, 3))
# prints list with number 33 repeated 3 times

```
