[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multi_swarm"
version = "0.1.2"
description = "A framework for creating collaborative AI agents using multiple LLM providers"
authors = [
    {name = "Multi-Swarm Team", email = "info@multi-swarm.ai"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "google-generativeai>=0.3.0",
    "anthropic>=0.7.0",
    "pytrends>=4.9.0",
    "pandas>=1.5.0",
    "python-dotenv>=1.0.0",
    "asyncio>=3.4.3",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0"
]
dev = [
    "black>=22.3.0",
    "isort>=5.10.1",
]

[project.urls]
Homepage = "https://github.com/bartvanspitaels99/multi-swarm"
Documentation = "https://multi-swarm.readthedocs.io"
Repository = "https://github.com/bartvanspitaels99/multi-swarm.git"
Issues = "https://github.com/bartvanspitaels99/multi-swarm/issues"

[project.scripts]
multi_swarm = "multi_swarm.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["multi_swarm", "multi_swarm.core", "multi_swarm.ceo", "multi_swarm.trends_analyst"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=multi_swarm --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["multi_swarm"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
] 