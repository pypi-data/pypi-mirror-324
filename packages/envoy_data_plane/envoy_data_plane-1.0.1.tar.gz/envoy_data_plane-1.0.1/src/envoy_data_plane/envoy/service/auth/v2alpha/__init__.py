# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/auth/v2alpha/external_auth.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AuthorizationStub",
    "AuthorizationBase",
)

from typing import TYPE_CHECKING

import betterproto2
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.2.4")


class AuthorizationStub(betterproto2.ServiceStub):
    """
    [#protodoc-title: Authorization Service ]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    async def check(
        self,
        message: "_v2__.CheckRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_v2__.CheckResponse":
        """
        Performs authorization check based on the attributes associated with the
        incoming request, and returns status `OK` or not `OK`.
        """

        return await self._unary_unary(
            "/envoy.service.auth.v2alpha.Authorization/Check",
            message,
            _v2__.CheckResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .. import v2 as _v2__


class AuthorizationBase(ServiceBase):
    """
    [#protodoc-title: Authorization Service ]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    async def check(self, message: "_v2__.CheckRequest") -> "_v2__.CheckResponse":
        """
        Performs authorization check based on the attributes associated with the
        incoming request, and returns status `OK` or not `OK`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_check(
        self, stream: "grpclib.server.Stream[_v2__.CheckRequest, _v2__.CheckResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.check(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler":
        return {
            "/envoy.service.auth.v2alpha.Authorization/Check": grpclib.const.Handler(
                self.__rpc_check,
                grpclib.const.Cardinality.UNARY_UNARY,
                _v2__.CheckRequest,
                _v2__.CheckResponse,
            ),
        }
