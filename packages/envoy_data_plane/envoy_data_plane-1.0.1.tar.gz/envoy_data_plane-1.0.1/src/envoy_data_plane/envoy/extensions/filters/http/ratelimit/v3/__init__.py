# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ratelimit/v3/rate_limit.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "RateLimitXRateLimitHeadersRfcVersion",
    "RateLimitConfigActionMetaDataSource",
    "RateLimitPerRouteOverrideOptions",
    "RateLimitPerRouteVhRateLimitsOptions",
    "RateLimit",
    "RateLimitConfig",
    "RateLimitConfigAction",
    "RateLimitConfigActionDestinationCluster",
    "RateLimitConfigActionGenericKey",
    "RateLimitConfigActionHeaderValueMatch",
    "RateLimitConfigActionMetaData",
    "RateLimitConfigActionRemoteAddress",
    "RateLimitConfigActionRequestHeaders",
    "RateLimitConfigActionSourceCluster",
    "RateLimitConfigOverride",
    "RateLimitConfigOverrideDynamicMetadata",
    "RateLimitPerRoute",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

betterproto2.check_compiler_version("0.2.4")


class RateLimitXRateLimitHeadersRfcVersion(betterproto2.Enum):
    """
    Defines the version of the standard to use for X-RateLimit headers.

    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.XRateLimitHeadersRFCVersion instead.]
    """

    OFF = 0
    """
    X-RateLimit headers disabled.
    """

    DRAFT_VERSION_03 = 1
    """
    Use `draft RFC Version 03 <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_.
    """


class RateLimitConfigActionMetaDataSource(betterproto2.Enum):
    DYNAMIC = 0
    """
    Query :ref:`dynamic metadata <well_known_dynamic_metadata>`
    """

    ROUTE_ENTRY = 1
    """
    Query :ref:`route entry metadata <envoy_v3_api_field_config.route.v3.Route.metadata>`
    """


class RateLimitPerRouteOverrideOptions(betterproto2.Enum):
    """
    The override option determines how the filter handles the cases where there is an override config at a more specific level than this one (from least to most specific: virtual host, route, cluster weight).
    [#not-implemented-hide:]
    """

    DEFAULT = 0
    """
    Client-defined default, typically OVERRIDE_POLICY. If VhRateLimitsOptions is set, that will be used instead.
    """

    OVERRIDE_POLICY = 1
    """
    If there is an override config at a more specific level, use that instead of this one.
    """

    INCLUDE_POLICY = 2
    """
    If there is an override config at a more specific level, use data from both.
    """

    IGNORE_POLICY = 3
    """
    If there is an override config at a more specific level, ignore it and use only this one.
    """


class RateLimitPerRouteVhRateLimitsOptions(betterproto2.Enum):
    """
    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.VhRateLimitsOptions instead.]
    """

    OVERRIDE = 0
    """
    Use the virtual host rate limits unless the route has a rate limit policy.
    """

    INCLUDE = 1
    """
    Use the virtual host rate limits even if the route has a rate limit policy.
    """

    IGNORE = 2
    """
    Ignore the virtual host rate limits even if the route does not have a rate limit policy.
    """


@dataclass(eq=False, repr=False)
class RateLimit(betterproto2.Message):
    """
    [#protodoc-title: Rate limit]
    Rate limit :ref:`configuration overview <config_http_filters_rate_limit>`.
    [#extension: envoy.filters.http.ratelimit]

    [#next-free-field: 14]
    """

    domain: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The rate limit domain to use when calling the rate limit service.
    """

    stage: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    Specifies the rate limit configurations to be applied with the same
    stage number. If not set, the default stage number is 0.

    .. note::

     The filter supports a range of 0 - 10 inclusively for stage numbers.
    """

    request_type: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The type of requests the filter should apply to. The supported
    types are ``internal``, ``external`` or ``both``. A request is considered internal if
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is set to true. If
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is not set or false, a
    request is considered external. The filter defaults to ``both``, and it will apply to all request
    types.
    """

    timeout: "datetime.timedelta | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The timeout in milliseconds for the rate limit service RPC. If not
    set, this defaults to 20ms.
    """

    failure_mode_deny: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    The filter's behaviour in case the rate limiting service does
    not respond back. When it is set to true, Envoy will not allow traffic in case of
    communication failure between rate limiting service and the proxy.
    """

    rate_limited_as_resource_exhausted: "bool" = betterproto2.field(
        6, betterproto2.TYPE_BOOL
    )
    """
    Specifies whether a ``RESOURCE_EXHAUSTED`` gRPC code must be returned instead
    of the default ``UNAVAILABLE`` gRPC code for a rate limited gRPC call. The
    HTTP code will be 200 for a gRPC response.
    """

    rate_limit_service: "_____config__ratelimit__v3__.RateLimitServiceConfig | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for an external rate limit service provider. If not
    specified, any calls to the rate limit service will immediately return
    success.
    """

    enable_x_ratelimit_headers: "RateLimitXRateLimitHeadersRfcVersion" = (
        betterproto2.field(
            8,
            betterproto2.TYPE_ENUM,
            default_factory=lambda: RateLimitXRateLimitHeadersRfcVersion.try_value(0),
        )
    )
    """
    Defines the standard version to use for X-RateLimit headers emitted by the filter:

    * ``X-RateLimit-Limit`` - indicates the request-quota associated to the
      client in the current time-window followed by the description of the
      quota policy. The values are returned by the rate limiting service in
      :ref:`current_limit<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.DescriptorStatus.current_limit>`
      field. Example: ``10, 10;w=1;name="per-ip", 1000;w=3600``.
    * ``X-RateLimit-Remaining`` - indicates the remaining requests in the
      current time-window. The values are returned by the rate limiting service
      in :ref:`limit_remaining<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.DescriptorStatus.limit_remaining>`
      field.
    * ``X-RateLimit-Reset`` - indicates the number of seconds until reset of
      the current time-window. The values are returned by the rate limiting service
      in :ref:`duration_until_reset<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.DescriptorStatus.duration_until_reset>`
      field.

    In case rate limiting policy specifies more then one time window, the values
    above represent the window that is closest to reaching its limit.

    For more information about the headers specification see selected version of
    the `draft RFC <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_.

    Disabled by default.

    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.XRateLimitHeadersRFCVersion instead.]
    """

    disable_x_envoy_ratelimited_header: "bool" = betterproto2.field(
        9, betterproto2.TYPE_BOOL
    )
    """
    Disables emitting the :ref:`x-envoy-ratelimited<config_http_filters_router_x-envoy-ratelimited>` header
    in case of rate limiting (i.e. 429 responses).
    Having this header not present potentially makes the request retriable.
    """

    rate_limited_status: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field allows for a custom HTTP response status code to the downstream client when
    the request has been rate limited.
    Defaults to 429 (TooManyRequests).

    .. note::
      If this is set to < 400, 429 will be used instead.
    """

    response_headers_to_add: "list[_____config__core__v3__.HeaderValueOption]" = (
        betterproto2.field(11, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Specifies a list of HTTP headers that should be added to each response for requests that
    have been rate limited.
    """

    status_on_error: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Sets the HTTP status that is returned to the client when the ratelimit server returns an error
    or cannot be reached. The default status is 500.
    """

    stat_prefix: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)
    """
    Optional additional prefix to use when emitting statistics. This allows to distinguish
    emitted statistics between configured ``ratelimit`` filters in an HTTP filter chain.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3", "RateLimit", RateLimit
)


@dataclass(eq=False, repr=False)
class RateLimitConfig(betterproto2.Message):
    """
    Global rate limiting :ref:`architecture overview <arch_overview_global_rate_limit>`.
    Also applies to Local rate limiting :ref:`using descriptors <config_http_filters_local_rate_limit_descriptors>`.
    [#not-implemented-hide:]
    """

    stage: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    Refers to the stage set in the filter. The rate limit configuration only
    applies to filters with the same stage number. The default stage number is
    0.

    .. note::

      The filter supports a range of 0 - 10 inclusively for stage numbers.
    """

    disable_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The key to be set in runtime to disable this rate limit configuration.
    """

    actions: "list[RateLimitConfigAction]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of actions that are to be applied for this rate limit configuration.
    Order matters as the actions are processed sequentially and the descriptor
    is composed by appending descriptor entries in that sequence. If an action
    cannot append a descriptor entry, no descriptor is generated for the
    configuration. See :ref:`composing actions
    <config_http_filters_rate_limit_composing_actions>` for additional documentation.
    """

    limit: "RateLimitConfigOverride | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    An optional limit override to be appended to the descriptor produced by this
    rate limit configuration. If the override value is invalid or cannot be resolved
    from metadata, no override is provided. See :ref:`rate limit override
    <config_http_filters_rate_limit_rate_limit_override>` for more information.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3", "RateLimitConfig", RateLimitConfig
)


@dataclass(eq=False, repr=False)
class RateLimitConfigAction(betterproto2.Message):
    """
    [#next-free-field: 10]

    Oneofs:
        - action_specifier:
    """

    source_cluster: "RateLimitConfigActionSourceCluster | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
    )
    """
    Rate limit on source cluster.
    """

    destination_cluster: "RateLimitConfigActionDestinationCluster | None" = (
        betterproto2.field(
            2, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
        )
    )
    """
    Rate limit on destination cluster.
    """

    request_headers: "RateLimitConfigActionRequestHeaders | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
    )
    """
    Rate limit on request headers.
    """

    remote_address: "RateLimitConfigActionRemoteAddress | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
    )
    """
    Rate limit on remote address.
    """

    generic_key: "RateLimitConfigActionGenericKey | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
    )
    """
    Rate limit on a generic key.
    """

    header_value_match: "RateLimitConfigActionHeaderValueMatch | None" = (
        betterproto2.field(
            6, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
        )
    )
    """
    Rate limit on the existence of request headers.
    """

    metadata: "RateLimitConfigActionMetaData | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
    )
    """
    Rate limit on metadata.
    """

    extension: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(
            9, betterproto2.TYPE_MESSAGE, optional=True, group="action_specifier"
        )
    )
    """
    Rate limit descriptor extension. See the rate limit descriptor extensions documentation.
    [#extension-category: envoy.rate_limit_descriptors]
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action",
    RateLimitConfigAction,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionDestinationCluster(betterproto2.Message):
    """
    The following descriptor entry is appended to the descriptor:

    .. code-block:: cpp

      ("destination_cluster", "<routed target cluster>")

    Once a request matches against a route table rule, a routed cluster is determined by one of
    the following :ref:`route table configuration <envoy_v3_api_msg_config.route.v3.RouteConfiguration>`
    settings:

    * :ref:`cluster <envoy_v3_api_field_config.route.v3.RouteAction.cluster>` indicates the upstream cluster
      to route to.
    * :ref:`weighted_clusters <envoy_v3_api_field_config.route.v3.RouteAction.weighted_clusters>`
      chooses a cluster randomly from a set of clusters with attributed weight.
    * :ref:`cluster_header <envoy_v3_api_field_config.route.v3.RouteAction.cluster_header>` indicates which
      header in the request contains the target cluster.
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.DestinationCluster",
    RateLimitConfigActionDestinationCluster,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionGenericKey(betterproto2.Message):
    """
    The following descriptor entry is appended to the descriptor:

    .. code-block:: cpp

      ("generic_key", "<descriptor_value>")
    """

    descriptor_value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The value to use in the descriptor entry.
    """

    descriptor_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    An optional key to use in the descriptor entry. If not set it defaults
    to 'generic_key' as the descriptor key.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.GenericKey",
    RateLimitConfigActionGenericKey,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionHeaderValueMatch(betterproto2.Message):
    """
    The following descriptor entry is appended to the descriptor:

    .. code-block:: cpp

      ("header_match", "<descriptor_value>")
    """

    descriptor_value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The value to use in the descriptor entry.
    """

    expect_match: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If set to true, the action will append a descriptor entry when the
    request matches the headers. If set to false, the action will append a
    descriptor entry when the request does not match the headers. The
    default value is true.
    """

    headers: "list[_____config__route__v3__.HeaderMatcher]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies a set of headers that the rate limit action should match
    on. The action will check the request’s headers against all the
    specified headers in the config. A match will happen if all the
    headers in the config are present in the request with the same values
    (or based on presence if the value field is not in the config).
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.HeaderValueMatch",
    RateLimitConfigActionHeaderValueMatch,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionMetaData(betterproto2.Message):
    """
    The following descriptor entry is appended when the metadata contains a key value:

    .. code-block:: cpp

      ("<descriptor_key>", "<value_queried_from_metadata>")
    [#next-free-field: 6]
    """

    descriptor_key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The key to use in the descriptor entry.
    """

    metadata_key: "_____type__metadata__v3__.MetadataKey | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Metadata struct that defines the key and path to retrieve the string value. A match will
    only happen if the value in the metadata is of type string.
    """

    default_value: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    An optional value to use if ``metadata_key`` is empty. If not set and
    no value is present under the metadata_key then ``skip_if_absent`` is followed to
    skip calling the rate limiting service or skip the descriptor.
    """

    source: "RateLimitConfigActionMetaDataSource" = betterproto2.field(
        4,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RateLimitConfigActionMetaDataSource.try_value(0),
    )
    """
    Source of metadata
    """

    skip_if_absent: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    If set to true, Envoy skips the descriptor while calling rate limiting service
    when ``metadata_key`` is empty and ``default_value`` is not set. By default it skips calling the
    rate limiting service in that case.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.MetaData",
    RateLimitConfigActionMetaData,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionRemoteAddress(betterproto2.Message):
    """
    The following descriptor entry is appended to the descriptor and is populated using the
    trusted address from :ref:`x-forwarded-for <config_http_conn_man_headers_x-forwarded-for>`:

    .. code-block:: cpp

      ("remote_address", "<trusted address from x-forwarded-for>")
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.RemoteAddress",
    RateLimitConfigActionRemoteAddress,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionRequestHeaders(betterproto2.Message):
    """
    The following descriptor entry is appended when a header contains a key that matches the
    ``header_name``:

    .. code-block:: cpp

      ("<descriptor_key>", "<header_value_queried_from_header>")
    """

    header_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The header name to be queried from the request headers. The header’s
    value is used to populate the value of the descriptor entry for the
    descriptor_key.
    """

    descriptor_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The key to use in the descriptor entry.
    """

    skip_if_absent: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If set to true, Envoy skips the descriptor while calling rate limiting service
    when header is not present in the request. By default it skips calling the
    rate limiting service if this header is not present in the request.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.RequestHeaders",
    RateLimitConfigActionRequestHeaders,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigActionSourceCluster(betterproto2.Message):
    """
    The following descriptor entry is appended to the descriptor:

    .. code-block:: cpp

      ("source_cluster", "<local service cluster>")

    <local service cluster> is derived from the :option:`--service-cluster` option.
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Action.SourceCluster",
    RateLimitConfigActionSourceCluster,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigOverride(betterproto2.Message):
    """


    Oneofs:
        - override_specifier:
    """

    dynamic_metadata: "RateLimitConfigOverrideDynamicMetadata | None" = (
        betterproto2.field(
            1, betterproto2.TYPE_MESSAGE, optional=True, group="override_specifier"
        )
    )
    """
    Limit override from dynamic metadata.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Override",
    RateLimitConfigOverride,
)


@dataclass(eq=False, repr=False)
class RateLimitConfigOverrideDynamicMetadata(betterproto2.Message):
    """
    Fetches the override from the dynamic metadata.
    """

    metadata_key: "_____type__metadata__v3__.MetadataKey | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Metadata struct that defines the key and path to retrieve the struct value.
    The value must be a struct containing an integer "requests_per_unit" property
    and a "unit" property with a value parseable to :ref:`RateLimitUnit
    enum <envoy_v3_api_enum_type.v3.RateLimitUnit>`
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3",
    "RateLimitConfig.Override.DynamicMetadata",
    RateLimitConfigOverrideDynamicMetadata,
)


@dataclass(eq=False, repr=False)
class RateLimitPerRoute(betterproto2.Message):
    vh_rate_limits: "RateLimitPerRouteVhRateLimitsOptions" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RateLimitPerRouteVhRateLimitsOptions.try_value(0),
    )
    """
    Specifies if the rate limit filter should include the virtual host rate limits.
    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.VhRateLimitsOptions instead.]
    """

    override_option: "RateLimitPerRouteOverrideOptions" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RateLimitPerRouteOverrideOptions.try_value(0),
    )
    """
    Specifies if the rate limit filter should include the lower levels (route level, virtual host level or cluster weight level) rate limits override options.
    [#not-implemented-hide:]
    """

    rate_limits: "list[RateLimitConfig]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Rate limit configuration. If not set, uses the
    :ref:`VirtualHost.rate_limits<envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>` or
    :ref:`RouteAction.rate_limits<envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` fields instead.
    [#not-implemented-hide:]
    """

    domain: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Overrides the domain. If not set, uses the filter-level domain instead.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3", "RateLimitPerRoute", RateLimitPerRoute
)


from ......config.core import v3 as _____config__core__v3__
from ......config.ratelimit import v3 as _____config__ratelimit__v3__
from ......config.route import v3 as _____config__route__v3__
from ......type import v3 as _____type__v3__
from ......type.metadata import v3 as _____type__metadata__v3__
