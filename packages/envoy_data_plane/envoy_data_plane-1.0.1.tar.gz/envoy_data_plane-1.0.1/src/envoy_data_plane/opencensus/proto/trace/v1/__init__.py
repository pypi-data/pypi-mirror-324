# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: opencensus/proto/trace/v1/trace.proto, opencensus/proto/trace/v1/trace_config.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ConstantSamplerConstantDecision",
    "SpanLinkType",
    "SpanSpanKind",
    "SpanTimeEventMessageEventType",
    "AttributeValue",
    "ConstantSampler",
    "Module",
    "ProbabilitySampler",
    "RateLimitingSampler",
    "Span",
    "SpanAttributes",
    "SpanLink",
    "SpanLinks",
    "SpanTimeEvent",
    "SpanTimeEventAnnotation",
    "SpanTimeEventMessageEvent",
    "SpanTimeEvents",
    "SpanTracestate",
    "SpanTracestateEntry",
    "StackTrace",
    "StackTraceStackFrame",
    "StackTraceStackFrames",
    "Status",
    "TraceConfig",
    "TruncatableString",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

betterproto2.check_compiler_version("0.2.4")


class ConstantSamplerConstantDecision(betterproto2.Enum):
    """
    How spans should be sampled:
    - Always off
    - Always on
    - Always follow the parent Span's decision (off if no parent).
    """

    ALWAYS_OFF = 0

    ALWAYS_ON = 1

    ALWAYS_PARENT = 2


class SpanLinkType(betterproto2.Enum):
    """
    The relationship of the current span relative to the linked span: child,
    parent, or unspecified.
    """

    TYPE_UNSPECIFIED = 0
    """
    The relationship of the two spans is unknown, or known but other
    than parent-child.
    """

    CHILD_LINKED_SPAN = 1
    """
    The linked span is a child of the current span.
    """

    PARENT_LINKED_SPAN = 2
    """
    The linked span is a parent of the current span.
    """


class SpanSpanKind(betterproto2.Enum):
    """
    Type of span. Can be used to specify additional relationships between spans
    in addition to a parent/child relationship.
    """

    SPAN_KIND_UNSPECIFIED = 0
    """
    Unspecified.
    """

    SERVER = 1
    """
    Indicates that the span covers server-side handling of an RPC or other
    remote network request.
    """

    CLIENT = 2
    """
    Indicates that the span covers the client-side wrapper around an RPC or
    other remote request.
    """


class SpanTimeEventMessageEventType(betterproto2.Enum):
    """
    Indicates whether the message was sent or received.
    """

    TYPE_UNSPECIFIED = 0
    """
    Unknown event type.
    """

    SENT = 1
    """
    Indicates a sent message.
    """

    RECEIVED = 2
    """
    Indicates a received message.
    """


@dataclass(eq=False, repr=False)
class AttributeValue(betterproto2.Message):
    """
    The value of an Attribute.

    Oneofs:
        - value: The type of the value.
    """

    string_value: "TruncatableString | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="value"
    )
    """
    A string up to 256 bytes long.
    """

    int_value: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_INT64, optional=True, group="value"
    )
    """
    A 64-bit signed integer.
    """

    bool_value: "bool | None" = betterproto2.field(
        3, betterproto2.TYPE_BOOL, optional=True, group="value"
    )
    """
    A Boolean value represented by `true` or `false`.
    """

    double_value: "float | None" = betterproto2.field(
        4, betterproto2.TYPE_DOUBLE, optional=True, group="value"
    )
    """
    A double value.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "AttributeValue", AttributeValue
)


@dataclass(eq=False, repr=False)
class ConstantSampler(betterproto2.Message):
    """
    Sampler that always makes a constant decision on span sampling.
    """

    decision: "ConstantSamplerConstantDecision" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ConstantSamplerConstantDecision.try_value(0),
    )


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "ConstantSampler", ConstantSampler
)


@dataclass(eq=False, repr=False)
class Module(betterproto2.Message):
    """
    A description of a binary module.
    """

    module: "TruncatableString | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    TODO: document the meaning of this field.
    For example: main binary, kernel modules, and dynamic libraries
    such as libc.so, sharedlib.so.
    """

    build_id: "TruncatableString | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A unique identifier for the module, usually a hash of its
    contents.
    """


default_message_pool.register_message("opencensus.proto.trace.v1", "Module", Module)


@dataclass(eq=False, repr=False)
class ProbabilitySampler(betterproto2.Message):
    """
    Sampler that tries to uniformly sample traces with a given probability.
    The probability of sampling a trace is equal to that of the specified probability.
    """

    sampling_probability: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    The desired probability of sampling. Must be within [0.0, 1.0].
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "ProbabilitySampler", ProbabilitySampler
)


@dataclass(eq=False, repr=False)
class RateLimitingSampler(betterproto2.Message):
    """
    Sampler that tries to sample with a rate per time window.
    """

    qps: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Rate per second.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "RateLimitingSampler", RateLimitingSampler
)


@dataclass(eq=False, repr=False)
class Span(betterproto2.Message):
    """
    A span represents a single operation within a trace. Spans can be
    nested to form a trace tree. Spans may also be linked to other spans
    from the same or different trace. And form graphs. Often, a trace
    contains a root span that describes the end-to-end latency, and one
    or more subspans for its sub-operations. A trace can also contain
    multiple root spans, or none at all. Spans do not need to be
    contiguous - there may be gaps or overlaps between spans in a trace.

    The next id is 17.
    TODO(bdrutu): Add an example.
    """

    trace_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    A unique identifier for a trace. All spans from the same trace share
    the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
    is considered invalid.

    This field is semantically required. Receiver should generate new
    random trace_id if empty or invalid trace_id was received.

    This field is required.
    """

    span_id: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    A unique identifier for a span within a trace, assigned when the span
    is created. The ID is an 8-byte array. An ID with all zeroes is considered
    invalid.

    This field is semantically required. Receiver should generate new
    random span_id if empty or invalid span_id was received.

    This field is required.
    """

    tracestate: "SpanTracestate | None" = betterproto2.field(
        15, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The Tracestate on the span.
    """

    parent_span_id: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)
    """
    The `span_id` of this span's parent span. If this is a root span, then this
    field must be empty. The ID is an 8-byte array.
    """

    name: "TruncatableString | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A description of the span's operation.

    For example, the name can be a qualified method name or a file name
    and a line number where the operation is called. A best practice is to use
    the same display name at the same call point in an application.
    This makes it easier to correlate spans in different traces.

    This field is semantically required to be set to non-empty string.
    When null or empty string received - receiver may use string "name"
    as a replacement. There might be smarted algorithms implemented by
    receiver to fix the empty span name.

    This field is required.
    """

    kind: "SpanSpanKind" = betterproto2.field(
        14, betterproto2.TYPE_ENUM, default_factory=lambda: SpanSpanKind.try_value(0)
    )
    """
    Distinguishes between spans generated in a particular context. For example,
    two spans with the same name may be distinguished using `CLIENT` (caller)
    and `SERVER` (callee) to identify queueing latency associated with the span.
    """

    start_time: "datetime.datetime | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The start time of the span. On the client side, this is the time kept by
    the local machine where the span execution starts. On the server side, this
    is the time when the server's application handler starts running.

    This field is semantically required. When not set on receive -
    receiver should set it to the value of end_time field if it was
    set. Or to the current time if neither was set. It is important to
    keep end_time > start_time for consistency.

    This field is required.
    """

    end_time: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The end time of the span. On the client side, this is the time kept by
    the local machine where the span execution ends. On the server side, this
    is the time when the server application handler stops running.

    This field is semantically required. When not set on receive -
    receiver should set it to start_time value. It is important to
    keep end_time > start_time for consistency.

    This field is required.
    """

    attributes: "SpanAttributes | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A set of attributes on the span.
    """

    stack_trace: "StackTrace | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A stack trace captured at the start of the span.
    """

    time_events: "SpanTimeEvents | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The included time events.
    """

    links: "SpanLinks | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The included links.
    """

    status: "Status | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    An optional final status for this span. Semantically when Status
    wasn't set it is means span ended without errors and assume
    Status.Ok (code = 0).
    """

    resource: "__resource__v1__.Resource | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    An optional resource that is associated with this span. If not set, this span 
    should be part of a batch that does include the resource information, unless resource 
    information is unknown.
    """

    same_process_as_parent_span: "bool | None | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, wraps=betterproto2.TYPE_BOOL, optional=True
    )
    """
    A highly recommended but not required flag that identifies when a
    trace crosses a process boundary. True when the parent_span belongs
    to the same process as the current span. This flag is most commonly
    used to indicate the need to adjust time as clocks in different
    processes may not be synchronized.
    """

    child_span_count: "int | None | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, wraps=betterproto2.TYPE_UINT32, optional=True
    )
    """
    An optional number of child spans that were generated while this span
    was active. If set, allows an implementation to detect missing child spans.
    """


default_message_pool.register_message("opencensus.proto.trace.v1", "Span", Span)


@dataclass(eq=False, repr=False)
class SpanAttributes(betterproto2.Message):
    """
    A set of attributes, each with a key and a value.
    """

    attribute_map: "dict[str, AttributeValue]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_types=(betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE),
    )
    """
    The set of attributes. The value can be a string, an integer, a double
    or the Boolean values `true` or `false`. Note, global attributes like 
    server name can be set as tags using resource API. Examples of attributes:

        "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
        "/http/server_latency": 300
        "abc.com/myattribute": true
        "abc.com/score": 10.239
    """

    dropped_attributes_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of attributes that were discarded. Attributes can be discarded
    because their keys are too long or because there are too many attributes.
    If this value is 0, then no attributes were dropped.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.Attributes", SpanAttributes
)


@dataclass(eq=False, repr=False)
class SpanLink(betterproto2.Message):
    """
    A pointer from the current span to another span in the same trace or in a
    different trace. For example, this can be used in batching operations,
    where a single batch handler processes multiple requests from different
    traces or when the handler receives a request from a different project.
    """

    trace_id: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    A unique identifier of a trace that this linked span is part of. The ID is a 
    16-byte array.
    """

    span_id: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    A unique identifier for the linked span. The ID is an 8-byte array.
    """

    type: "SpanLinkType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: SpanLinkType.try_value(0)
    )
    """
    The relationship of the current span relative to the linked span.
    """

    attributes: "SpanAttributes | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A set of attributes on the link.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.Link", SpanLink
)


@dataclass(eq=False, repr=False)
class SpanLinks(betterproto2.Message):
    """
    A collection of links, which are references from this span to a span
    in the same or different trace.
    """

    link: "list[SpanLink]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A collection of links.
    """

    dropped_links_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of dropped links after the maximum size was enforced. If
    this value is 0, then no links were dropped.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.Links", SpanLinks
)


@dataclass(eq=False, repr=False)
class SpanTimeEvent(betterproto2.Message):
    """
    A time-stamped annotation or message event in the Span.

    Oneofs:
        - value: A `TimeEvent` can contain either an `Annotation` object or a
            `MessageEvent` object, but not both.
    """

    time: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The time the event occurred.
    """

    annotation: "SpanTimeEventAnnotation | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="value"
    )
    """
    A text annotation with a set of attributes.
    """

    message_event: "SpanTimeEventMessageEvent | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="value"
    )
    """
    An event describing a message sent/received between Spans.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.TimeEvent", SpanTimeEvent
)


@dataclass(eq=False, repr=False)
class SpanTimeEventAnnotation(betterproto2.Message):
    """
    A text annotation with a set of attributes.
    """

    description: "TruncatableString | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A user-supplied message describing the event.
    """

    attributes: "SpanAttributes | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A set of attributes on the annotation.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.TimeEvent.Annotation", SpanTimeEventAnnotation
)


@dataclass(eq=False, repr=False)
class SpanTimeEventMessageEvent(betterproto2.Message):
    """
    An event describing a message sent/received between Spans.
    """

    type: "SpanTimeEventMessageEventType" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: SpanTimeEventMessageEventType.try_value(0),
    )
    """
    The type of MessageEvent. Indicates whether the message was sent or
    received.
    """

    id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    An identifier for the MessageEvent's message that can be used to match
    SENT and RECEIVED MessageEvents. For example, this field could
    represent a sequence ID for a streaming RPC. It is recommended to be
    unique within a Span.
    """

    uncompressed_size: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    The number of uncompressed bytes sent or received.
    """

    compressed_size: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    The number of compressed bytes sent or received. If zero, assumed to
    be the same size as uncompressed.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1",
    "Span.TimeEvent.MessageEvent",
    SpanTimeEventMessageEvent,
)


@dataclass(eq=False, repr=False)
class SpanTimeEvents(betterproto2.Message):
    """
    A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
    on the span, consisting of either user-supplied key-value pairs, or
    details of a message sent/received between Spans.
    """

    time_event: "list[SpanTimeEvent]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A collection of `TimeEvent`s.
    """

    dropped_annotations_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of dropped annotations in all the included time events.
    If the value is 0, then no annotations were dropped.
    """

    dropped_message_events_count: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The number of dropped message events in all the included time events.
    If the value is 0, then no message events were dropped.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.TimeEvents", SpanTimeEvents
)


@dataclass(eq=False, repr=False)
class SpanTracestate(betterproto2.Message):
    """
    This field conveys information about request position in multiple distributed tracing graphs.
    It is a list of Tracestate.Entry with a maximum of 32 members in the list.

    See the https://github.com/w3c/distributed-tracing for more details about this field.
    """

    entries: "list[SpanTracestateEntry]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of entries that represent the Tracestate.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.Tracestate", SpanTracestate
)


@dataclass(eq=False, repr=False)
class SpanTracestateEntry(betterproto2.Message):
    key: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The key must begin with a lowercase letter, and can only contain
    lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
    '-', asterisks '*', and forward slashes '/'.
    """

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The value is opaque string up to 256 characters printable ASCII
    RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
    Note that this also excludes tabs, newlines, carriage returns, etc.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "Span.Tracestate.Entry", SpanTracestateEntry
)


@dataclass(eq=False, repr=False)
class StackTrace(betterproto2.Message):
    """
    The call stack which originated this span.
    """

    stack_frames: "StackTraceStackFrames | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Stack frames in this stack trace.
    """

    stack_trace_hash_id: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    The hash ID is used to conserve network bandwidth for duplicate
    stack traces within a single trace.

    Often multiple spans will have identical stack traces.
    The first occurrence of a stack trace should contain both
    `stack_frames` and a value in `stack_trace_hash_id`.

    Subsequent spans within the same request can refer
    to that stack trace by setting only `stack_trace_hash_id`.

    TODO: describe how to deal with the case where stack_trace_hash_id is
    zero because it was not set.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "StackTrace", StackTrace
)


@dataclass(eq=False, repr=False)
class StackTraceStackFrame(betterproto2.Message):
    """
    A single stack frame in a stack trace.
    """

    function_name: "TruncatableString | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The fully-qualified name that uniquely identifies the function or
    method that is active in this frame.
    """

    original_function_name: "TruncatableString | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    An un-mangled function name, if `function_name` is
    [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
    be fully qualified.
    """

    file_name: "TruncatableString | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The name of the source file where the function call appears.
    """

    line_number: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)
    """
    The line number in `file_name` where the function call appears.
    """

    column_number: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)
    """
    The column number where the function call appears, if available.
    This is important in JavaScript because of its anonymous functions.
    """

    load_module: "Module | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The binary module from where the code was loaded.
    """

    source_version: "TruncatableString | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The version of the deployed source code.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "StackTrace.StackFrame", StackTraceStackFrame
)


@dataclass(eq=False, repr=False)
class StackTraceStackFrames(betterproto2.Message):
    """
    A collection of stack frames, which can be truncated.
    """

    frame: "list[StackTraceStackFrame]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Stack frames in this call stack.
    """

    dropped_frames_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of stack frames that were dropped because there
    were too many stack frames.
    If this value is 0, then no stack frames were dropped.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "StackTrace.StackFrames", StackTraceStackFrames
)


@dataclass(eq=False, repr=False)
class Status(betterproto2.Message):
    """
    The `Status` type defines a logical error model that is suitable for different
    programming environments, including REST APIs and RPC APIs. This proto's fields
    are a subset of those of
    [google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),
    which is used by [gRPC](https://github.com/grpc).
    """

    code: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    The status code. This is optional field. It is safe to assume 0 (OK)
    when not set.
    """

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A developer-facing error message, which should be in English.
    """


default_message_pool.register_message("opencensus.proto.trace.v1", "Status", Status)


@dataclass(eq=False, repr=False)
class TraceConfig(betterproto2.Message):
    """
    Global configuration of the trace service. All fields must be specified, or
    the default (zero) values will be used for each type.

    Oneofs:
        - sampler: The global default sampler used to make decisions on span sampling.
    """

    probability_sampler: "ProbabilitySampler | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="sampler"
    )

    constant_sampler: "ConstantSampler | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="sampler"
    )

    rate_limiting_sampler: "RateLimitingSampler | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="sampler"
    )

    max_number_of_attributes: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)
    """
    The global default max number of attributes per span.
    """

    max_number_of_annotations: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)
    """
    The global default max number of annotation events per span.
    """

    max_number_of_message_events: "int" = betterproto2.field(6, betterproto2.TYPE_INT64)
    """
    The global default max number of message events per span.
    """

    max_number_of_links: "int" = betterproto2.field(7, betterproto2.TYPE_INT64)
    """
    The global default max number of link entries per span.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "TraceConfig", TraceConfig
)


@dataclass(eq=False, repr=False)
class TruncatableString(betterproto2.Message):
    """
    A string that might be shortened to a specified length.
    """

    value: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The shortened string. For example, if the original string was 500 bytes long and
    the limit of the string was 128 bytes, then this value contains the first 128
    bytes of the 500-byte string. Note that truncation always happens on a
    character boundary, to ensure that a truncated string is still valid UTF-8.
    Because it may contain multi-byte characters, the size of the truncated string
    may be less than the truncation limit.
    """

    truncated_byte_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of bytes removed from the original string. If this
    value is 0, then the string was not shortened.
    """


default_message_pool.register_message(
    "opencensus.proto.trace.v1", "TruncatableString", TruncatableString
)


from ...resource import v1 as __resource__v1__
