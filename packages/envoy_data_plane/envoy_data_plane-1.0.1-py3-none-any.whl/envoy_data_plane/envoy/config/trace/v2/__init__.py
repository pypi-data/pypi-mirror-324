# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/trace/v2/datadog.proto, envoy/config/trace/v2/dynamic_ot.proto, envoy/config/trace/v2/http_tracer.proto, envoy/config/trace/v2/lightstep.proto, envoy/config/trace/v2/opencensus.proto, envoy/config/trace/v2/service.proto, envoy/config/trace/v2/trace.proto, envoy/config/trace/v2/zipkin.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "LightstepConfigPropagationMode",
    "OpenCensusConfigTraceContext",
    "ZipkinConfigCollectorEndpointVersion",
    "DatadogConfig",
    "DynamicOtConfig",
    "LightstepConfig",
    "OpenCensusConfig",
    "TraceServiceConfig",
    "Tracing",
    "TracingHttp",
    "ZipkinConfig",
)

import warnings
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

betterproto2.check_compiler_version("0.2.4")


class LightstepConfigPropagationMode(betterproto2.Enum):
    """
    Available propagation modes
    """

    ENVOY = 0
    """
    Propagate trace context in the single header x-ot-span-context.
    """

    LIGHTSTEP = 1
    """
    Propagate trace context using LightStep's native format.
    """

    B3 = 2
    """
    Propagate trace context using the b3 format.
    """

    TRACE_CONTEXT = 3
    """
    Propagation trace context using the w3 trace-context standard.
    """


class OpenCensusConfigTraceContext(betterproto2.Enum):
    NONE = 0
    """
    No-op default, no trace context is utilized.
    """

    TRACE_CONTEXT = 1
    """
    W3C Trace-Context format "traceparent:" header.
    """

    GRPC_TRACE_BIN = 2
    """
    Binary "grpc-trace-bin:" header.
    """

    CLOUD_TRACE_CONTEXT = 3
    """
    "X-Cloud-Trace-Context:" header.
    """

    B3 = 4
    """
    X-B3-* headers.
    """


class ZipkinConfigCollectorEndpointVersion(betterproto2.Enum):
    """
    Available Zipkin collector endpoint versions.
    """

    HTTP_JSON_V1 = 0
    """
    Zipkin API v1, JSON over HTTP.
    [#comment: The default implementation of Zipkin client before this field is added was only v1
    and the way user configure this was by not explicitly specifying the version. Consequently,
    before this is added, the corresponding Zipkin collector expected to receive v1 payload.
    Hence the motivation of adding HTTP_JSON_V1 as the default is to avoid a breaking change when
    user upgrading Envoy with this change. Furthermore, we also immediately deprecate this field,
    since in Zipkin realm this v1 version is considered to be not preferable anymore.]
    """

    HTTP_JSON = 1
    """
    Zipkin API v2, JSON over HTTP.
    """

    HTTP_PROTO = 2
    """
    Zipkin API v2, protobuf over HTTP.
    """

    GRPC = 3
    """
    [#not-implemented-hide:]
    """


@dataclass(eq=False, repr=False)
class DatadogConfig(betterproto2.Message):
    """
    [#protodoc-title: Datadog tracer]

    Configuration for the Datadog tracer.
    [#extension: envoy.tracers.datadog]
    """

    collector_cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The cluster to use for submitting traces to the Datadog agent.
    """

    service_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name used for the service when traces are generated by envoy.
    """


default_message_pool.register_message(
    "envoy.config.trace.v2", "DatadogConfig", DatadogConfig
)


@dataclass(eq=False, repr=False)
class DynamicOtConfig(betterproto2.Message):
    """
    [#protodoc-title: Dynamically loadable OpenTracing tracer]

    DynamicOtConfig is used to dynamically load a tracer from a shared library
    that implements the `OpenTracing dynamic loading API
    <https://github.com/opentracing/opentracing-cpp>`_.
    [#extension: envoy.tracers.dynamic_ot]
    """

    library: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Dynamic library implementing the `OpenTracing API
    <https://github.com/opentracing/opentracing-cpp>`_.
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The configuration to use when creating a tracer from the given dynamic
    library.
    """


default_message_pool.register_message(
    "envoy.config.trace.v2", "DynamicOtConfig", DynamicOtConfig
)


@dataclass(eq=False, repr=False)
class LightstepConfig(betterproto2.Message):
    """
    [#protodoc-title: LightStep tracer]

    Configuration for the LightStep tracer.
    [#extension: envoy.tracers.lightstep]
    """

    collector_cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The cluster manager cluster that hosts the LightStep collectors.
    """

    access_token_file: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    File containing the access token to the `LightStep
    <https://lightstep.com/>`_ API.
    """

    propagation_modes: "list[LightstepConfigPropagationMode]" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    Propagation modes to use by LightStep's tracer.
    """


default_message_pool.register_message(
    "envoy.config.trace.v2", "LightstepConfig", LightstepConfig
)


@dataclass(eq=False, repr=False)
class OpenCensusConfig(betterproto2.Message):
    """
    [#protodoc-title: OpenCensus tracer]

    Configuration for the OpenCensus tracer.
    [#next-free-field: 15]
    [#extension: envoy.tracers.opencensus]
    """

    trace_config: "____opencensus__proto__trace__v1__.TraceConfig | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configures tracing, e.g. the sampler, max number of annotations, etc.
    """

    stdout_exporter_enabled: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Enables the stdout exporter if set to true. This is intended for debugging
    purposes.
    """

    stackdriver_exporter_enabled: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Enables the Stackdriver exporter if set to true. The project_id must also
    be set.
    """

    stackdriver_project_id: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The Cloud project_id to use for Stackdriver tracing.
    """

    stackdriver_address: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    (optional) By default, the Stackdriver exporter will connect to production
    Stackdriver. If stackdriver_address is non-empty, it will instead connect
    to this address, which is in the gRPC format:
    https://github.com/grpc/grpc/blob/master/doc/naming.md
    """

    stackdriver_grpc_service: "___api__v2__core__.GrpcService | None" = (
        betterproto2.field(13, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    (optional) The gRPC server that hosts Stackdriver tracing service. Only
    Google gRPC is supported. If :ref:`target_uri <envoy_v3_api_field_config.core.v3.GrpcService.GoogleGrpc.target_uri>`
    is not provided, the default production Stackdriver address will be used.
    """

    zipkin_exporter_enabled: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    Enables the Zipkin exporter if set to true. The url and service name must
    also be set.
    """

    zipkin_url: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans"
    """

    ocagent_exporter_enabled: "bool" = betterproto2.field(11, betterproto2.TYPE_BOOL)
    """
    Enables the OpenCensus Agent exporter if set to true. The ocagent_address or
    ocagent_grpc_service must also be set.
    """

    ocagent_address: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)
    """
    The address of the OpenCensus Agent, if its exporter is enabled, in gRPC
    format: https://github.com/grpc/grpc/blob/master/doc/naming.md
    [#comment:TODO: deprecate this field]
    """

    ocagent_grpc_service: "___api__v2__core__.GrpcService | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    (optional) The gRPC server hosted by the OpenCensus Agent. Only Google gRPC is supported.
    This is only used if the ocagent_address is left empty.
    """

    incoming_trace_context: "list[OpenCensusConfigTraceContext]" = betterproto2.field(
        8, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    List of incoming trace context headers we will accept. First one found
    wins.
    """

    outgoing_trace_context: "list[OpenCensusConfigTraceContext]" = betterproto2.field(
        9, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    List of outgoing trace context headers we will produce.
    """


default_message_pool.register_message(
    "envoy.config.trace.v2", "OpenCensusConfig", OpenCensusConfig
)


@dataclass(eq=False, repr=False)
class TraceServiceConfig(betterproto2.Message):
    """
    [#protodoc-title: Trace Service]

    Configuration structure.
    """

    grpc_service: "___api__v2__core__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream gRPC cluster that hosts the metrics service.
    """


default_message_pool.register_message(
    "envoy.config.trace.v2", "TraceServiceConfig", TraceServiceConfig
)


@dataclass(eq=False, repr=False)
class Tracing(betterproto2.Message):
    """
    [#protodoc-title: Tracing]
    Tracing :ref:`architecture overview <arch_overview_tracing>`.

    The tracing configuration specifies settings for an HTTP tracer provider used by Envoy.

    Envoy may support other tracers in the future, but right now the HTTP tracer is the only one
    supported.

    .. attention::

      Use of this message type has been deprecated in favor of direct use of
      :ref:`Tracing.Http <envoy_api_msg_config.trace.v2.Tracing.Http>`.
    """

    http: "TracingHttp | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Provides configuration for the HTTP tracer.
    """


default_message_pool.register_message("envoy.config.trace.v2", "Tracing", Tracing)


@dataclass(eq=False, repr=False)
class TracingHttp(betterproto2.Message):
    """
    Configuration for an HTTP tracer provider used by Envoy.

    The configuration is defined by the
    :ref:`HttpConnectionManager.Tracing <envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing>`
    :ref:`provider <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.provider>`
    field.

    Oneofs:
        - config_type: Trace driver specific configuration which depends on the driver being instantiated.
            See the trace drivers for examples:

            - :ref:`LightstepConfig <envoy_api_msg_config.trace.v2.LightstepConfig>`
            - :ref:`ZipkinConfig <envoy_api_msg_config.trace.v2.ZipkinConfig>`
            - :ref:`DynamicOtConfig <envoy_api_msg_config.trace.v2.DynamicOtConfig>`
            - :ref:`DatadogConfig <envoy_api_msg_config.trace.v2.DatadogConfig>`
            - :ref:`OpenCensusConfig <envoy_api_msg_config.trace.v2.OpenCensusConfig>`
            - :ref:`AWS X-Ray <envoy_api_msg_config.trace.v2alpha.XRayConfig>`
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the HTTP trace driver to instantiate. The name must match a
    supported HTTP trace driver. Built-in trace drivers:

    - *envoy.tracers.lightstep*
    - *envoy.tracers.zipkin*
    - *envoy.tracers.dynamic_ot*
    - *envoy.tracers.datadog*
    - *envoy.tracers.opencensus*
    - *envoy.tracers.xray*
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("config"):
            warnings.warn("TracingHttp.config is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.trace.v2", "Tracing.Http", TracingHttp
)


@dataclass(eq=False, repr=False)
class ZipkinConfig(betterproto2.Message):
    """
    [#protodoc-title: Zipkin tracer]

    Configuration for the Zipkin tracer.
    [#extension: envoy.tracers.zipkin]
    [#next-free-field: 6]
    """

    collector_cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The cluster manager cluster that hosts the Zipkin collectors. Note that the
    Zipkin cluster must be defined in the :ref:`Bootstrap static cluster
    resources <envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`.
    """

    collector_endpoint: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The API endpoint of the Zipkin service where the spans will be sent. When
    using a standard Zipkin installation, the API endpoint is typically
    /api/v1/spans, which is the default value.
    """

    trace_id_128bit: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Determines whether a 128bit trace id will be used when creating a new
    trace instance. The default value is false, which will result in a 64 bit trace id being used.
    """

    shared_span_context: "bool | None | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, wraps=betterproto2.TYPE_BOOL, optional=True
    )
    """
    Determines whether client and server spans will share the same span context.
    The default value is true.
    """

    collector_endpoint_version: "ZipkinConfigCollectorEndpointVersion" = (
        betterproto2.field(
            5,
            betterproto2.TYPE_ENUM,
            default_factory=lambda: ZipkinConfigCollectorEndpointVersion.try_value(0),
        )
    )
    """
    Determines the selected collector endpoint version. By default, the ``HTTP_JSON_V1`` will be
    used.
    """


default_message_pool.register_message(
    "envoy.config.trace.v2", "ZipkinConfig", ZipkinConfig
)


from .....google import protobuf as ____google__protobuf__
from .....opencensus.proto.trace import v1 as ____opencensus__proto__trace__v1__
from ....api.v2 import core as ___api__v2__core__
