import os
import sys
import subprocess
import logging
import ctypes

# üìú Configuration des logs
logging.basicConfig(
    filename="autolaunch.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

def is_admin():
    """V√©rifie si le script est ex√©cut√© en tant qu'administrateur."""
    try:
        return os.getuid() == 0  # UNIX/Linux
    except AttributeError:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0  # Windows

def check_env_variable(name):
    """V√©rifie si une variable d'environnement est d√©j√† d√©finie."""
    value = os.environ.get(name)
    if value:
        logging.info(f"üîç Variable '{name}' trouv√©e : {value}")
        return value
    else:
        logging.warning(f"‚ö†Ô∏è Variable '{name}' non trouv√©e.")
        return None

def set_env_variable(name, value):
    """Ajoute une variable d'environnement de mani√®re persistante."""
    if not is_admin():
        logging.error("‚ùå Python n'est pas ex√©cut√© avec les droits administrateurs.")
        print("Erreur : Veuillez ex√©cuter Python en mode administrateur.")
        return
    
    # V√©rifier si la variable existe d√©j√†
    if check_env_variable(name):
        logging.info(f"‚úÖ La variable '{name}' est d√©j√† d√©finie.")
        return

    try:
        subprocess.run(f'setx {name} "{value}"', shell=True, check=True)
        logging.info(f"‚úÖ Variable '{name}' enregistr√©e avec succ√®s : {value}")
        print(f"‚úÖ Variable '{name}' enregistr√©e avec succ√®s.")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå Erreur lors de l'enregistrement de '{name}': {e}")
        print(f"Erreur lors de l'ajout de '{name}', voir les logs.")

def ensure_registered(app_name="MON_APP", app_path=None):
    """Enregistre l'application si elle n'est pas d√©j√† enregistr√©e."""
    if app_path is None:
        app_path = os.path.abspath(sys.argv[0])  # Obtient le chemin du script
    set_env_variable(app_name, app_path)

def unregister_app(app_name="MON_APP"):
    """Supprime une application enregistr√©e."""
    try:
        subprocess.run(f'reg delete HKCU\\Environment /F /V {app_name}', shell=True, check=True)
        logging.info(f"‚ùå Variable '{app_name}' supprim√©e.")
        print(f"‚ùå Variable '{app_name}' supprim√©e.")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ö†Ô∏è Erreur lors de la suppression de '{app_name}': {e}")
        print(f"‚ö†Ô∏è Impossible de supprimer '{app_name}', voir les logs.")

def register_app(app_name, app_path):
    """Alias de `ensure_registered` pour plus de clart√©."""
    ensure_registered(app_name, app_path)

# üìå Exemple d'utilisation
if __name__ == "__main__":
    ensure_registered()
