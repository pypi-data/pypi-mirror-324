import os
import sys
import subprocess
import logging
import ctypes

# üìú Configuration des logs
logging.basicConfig(
    filename="autolaunch.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

def is_admin():
    """V√©rifie si le script est ex√©cut√© en tant qu'administrateur."""
    try:
        return os.getuid() == 0  # UNIX/Linux
    except AttributeError:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0  # Windows

def check_env_variable(name):
    """V√©rifie si une variable d'environnement est d√©j√† d√©finie."""
    value = os.environ.get(name)
    if value:
        logging.info(f"üîç Variable '{name}' trouv√©e : {value}")
        return value
    else:
        logging.warning(f"‚ö†Ô∏è Variable '{name}' non trouv√©e.")
        return None

def set_env_variable(name, value):
    """Ajoute une variable d'environnement de mani√®re persistante."""
    if not is_admin():
        logging.error("‚ùå Python n'est pas ex√©cut√© avec les droits administrateurs.")
        print("Erreur : Veuillez ex√©cuter Python en mode administrateur.")
        return
    
    # V√©rifier si la variable existe d√©j√†
    if check_env_variable(name):
        logging.info(f"‚úÖ La variable '{name}' est d√©j√† d√©finie.")
        return

    try:
        subprocess.run(f'setx {name} "{value}"', shell=True, check=True)
        logging.info(f"‚úÖ Variable '{name}' enregistr√©e avec succ√®s : {value}")
        print(f"‚úÖ Variable '{name}' enregistr√©e avec succ√®s.")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå Erreur lors de l'enregistrement de '{name}': {e}")
        print(f"Erreur lors de l'ajout de '{name}', voir les logs.")

def create_executable_command(app_name, app_path):
    """Cr√©e un fichier .cmd ex√©cutable pour lancer l'application."""
    cmd_path = os.path.join(os.environ["USERPROFILE"], f"{app_name}.cmd")
    
    with open(cmd_path, "w") as f:
        f.write(f'@echo off\npython "{app_path}" %*\n')

    logging.info(f"‚úÖ Fichier ex√©cutable cr√©√© : {cmd_path}")
    print(f"‚úÖ Fichier ex√©cutable ajout√© : {cmd_path}")

def ensure_registered():
    """Enregistre l'application et la rend ex√©cutable depuis n'importe o√π."""
    app_path = os.path.abspath(sys.argv[0])  # Chemin du script actuel
    app_name = os.path.splitext(os.path.basename(app_path))[0]  # Nom du script sans extension

    # V√©rifier si admin
    if not is_admin():
        logging.error("‚ùå Python n'est pas ex√©cut√© en administrateur.")
        print("Erreur : Ex√©cute ce script en mode administrateur.")
        return

    # Enregistre la variable d‚Äôenvironnement
    set_env_variable(app_name, app_path)
    
    # Cr√©e une commande ex√©cutable
    create_executable_command(app_name, app_path)

    print(f"‚úÖ '{app_name}' peut maintenant √™tre lanc√© depuis n'importe o√π.")

def unregister_app():
    """Supprime l'application enregistr√©e."""
    app_path = os.path.abspath(sys.argv[0])  # Chemin du script actuel
    app_name = os.path.splitext(os.path.basename(app_path))[0]  # Nom du script sans extension

    try:
        subprocess.run(f'reg delete HKCU\\Environment /F /V {app_name}', shell=True, check=True)
        logging.info(f"‚ùå Variable '{app_name}' supprim√©e.")
        print(f"‚ùå Variable '{app_name}' supprim√©e.")

        cmd_path = os.path.join(os.environ["USERPROFILE"], f"{app_name}.cmd")
        if os.path.exists(cmd_path):
            os.remove(cmd_path)
            logging.info(f"üóëÔ∏è Fichier ex√©cutable supprim√© : {cmd_path}")
            print(f"üóëÔ∏è Fichier ex√©cutable supprim√© : {cmd_path}")

    except subprocess.CalledProcessError as e:
        logging.error(f"‚ö†Ô∏è Erreur lors de la suppression de '{app_name}': {e}")
        print(f"‚ö†Ô∏è Impossible de supprimer '{app_name}', voir les logs.")

def register_app(app_name, app_path):
    """Alias de `ensure_registered` pour plus de clart√©."""
    ensure_registered()

# üìå Exemple d'utilisation
if __name__ == "__main__":
    if "--unregister" in sys.argv:
        unregister_app()
    else:
        ensure_registered()
