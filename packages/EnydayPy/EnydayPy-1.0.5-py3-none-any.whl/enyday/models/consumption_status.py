# coding: utf-8

"""
    Enyday API

    API for Enyday energy services integration

    The version of the OpenAPI document: 1.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from enyday.models.common_consumption import CommonConsumption
from enyday.models.common_production import CommonProduction
from enyday.models.community_consumption import CommunityConsumption
from enyday.models.consumption_address import ConsumptionAddress
from typing import Optional, Set
from typing_extensions import Self

class ConsumptionStatus(BaseModel):
    """
    ConsumptionStatus
    """ # noqa: E501
    addresses: Optional[List[ConsumptionAddress]] = None
    community_type_id: Optional[StrictInt] = None
    community_type_name: Optional[StrictStr] = None
    common_consumption: Optional[CommonConsumption] = None
    common_production: Optional[CommonProduction] = None
    community_consumption: Optional[CommunityConsumption] = None
    __properties: ClassVar[List[str]] = ["addresses", "community_type_id", "community_type_name", "common_consumption", "common_production", "community_consumption"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumptionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_consumption
        if self.common_consumption:
            _dict['common_consumption'] = self.common_consumption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of common_production
        if self.common_production:
            _dict['common_production'] = self.common_production.to_dict()
        # override the default output from pydantic by calling `to_dict()` of community_consumption
        if self.community_consumption:
            _dict['community_consumption'] = self.community_consumption.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumptionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": [ConsumptionAddress.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "community_type_id": obj.get("community_type_id"),
            "community_type_name": obj.get("community_type_name"),
            "common_consumption": CommonConsumption.from_dict(obj["common_consumption"]) if obj.get("common_consumption") is not None else None,
            "common_production": CommonProduction.from_dict(obj["common_production"]) if obj.get("common_production") is not None else None,
            "community_consumption": CommunityConsumption.from_dict(obj["community_consumption"]) if obj.get("community_consumption") is not None else None
        })
        return _obj


