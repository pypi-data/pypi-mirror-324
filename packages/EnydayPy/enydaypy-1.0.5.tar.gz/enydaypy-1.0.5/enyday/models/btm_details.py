# coding: utf-8

"""
    Enyday API

    API for Enyday energy services integration

    The version of the OpenAPI document: 1.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BtmDetails(BaseModel):
    """
    BtmDetails
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    calculated: Optional[datetime] = None
    power_value_id: Optional[StrictInt] = None
    use_buildings: Optional[StrictInt] = None
    alarm: Optional[StrictStr] = None
    reading_age: Optional[StrictInt] = None
    community_type_id: Optional[StrictInt] = None
    tz_identifier: Optional[StrictStr] = None
    partner_id: Optional[StrictInt] = None
    image: Optional[StrictStr] = None
    text_description: Optional[StrictStr] = None
    payment_area: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "calculated", "power_value_id", "use_buildings", "alarm", "reading_age", "community_type_id", "tz_identifier", "partner_id", "image", "text_description", "payment_area"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BtmDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if power_value_id (nullable) is None
        # and model_fields_set contains the field
        if self.power_value_id is None and "power_value_id" in self.model_fields_set:
            _dict['power_value_id'] = None

        # set to None if reading_age (nullable) is None
        # and model_fields_set contains the field
        if self.reading_age is None and "reading_age" in self.model_fields_set:
            _dict['reading_age'] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if text_description (nullable) is None
        # and model_fields_set contains the field
        if self.text_description is None and "text_description" in self.model_fields_set:
            _dict['text_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BtmDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "calculated": obj.get("calculated"),
            "power_value_id": obj.get("power_value_id"),
            "use_buildings": obj.get("use_buildings"),
            "alarm": obj.get("alarm"),
            "reading_age": obj.get("reading_age"),
            "community_type_id": obj.get("community_type_id"),
            "tz_identifier": obj.get("tz_identifier"),
            "partner_id": obj.get("partner_id"),
            "image": obj.get("image"),
            "text_description": obj.get("text_description"),
            "payment_area": obj.get("payment_area")
        })
        return _obj


