# coding: utf-8

"""
    Enyday API

    API for Enyday energy services integration

    The version of the OpenAPI document: 1.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SubmeterDetail(BaseModel):
    """
    SubmeterDetail
    """ # noqa: E501
    submeter_id: Optional[StrictInt] = None
    submeter_name: Optional[StrictStr] = None
    submeter_direction: Optional[StrictInt] = None
    submeter_box_external_id: Optional[StrictStr] = None
    metering_point_id: Optional[StrictStr] = None
    power_internal: Optional[Union[StrictFloat, StrictInt]] = None
    power_external: Optional[Union[StrictFloat, StrictInt]] = None
    price_internal: Optional[Union[StrictFloat, StrictInt]] = None
    price_external: Optional[Union[StrictFloat, StrictInt]] = None
    last_reading_value: Optional[Union[StrictFloat, StrictInt]] = None
    last_time: Optional[datetime] = None
    power: Optional[Union[StrictFloat, StrictInt]] = None
    consumption_total: Optional[Union[StrictFloat, StrictInt]] = None
    internal_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    width: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["submeter_id", "submeter_name", "submeter_direction", "submeter_box_external_id", "metering_point_id", "power_internal", "power_external", "price_internal", "price_external", "last_reading_value", "last_time", "power", "consumption_total", "internal_percentage", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmeterDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metering_point_id (nullable) is None
        # and model_fields_set contains the field
        if self.metering_point_id is None and "metering_point_id" in self.model_fields_set:
            _dict['metering_point_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmeterDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "submeter_id": obj.get("submeter_id"),
            "submeter_name": obj.get("submeter_name"),
            "submeter_direction": obj.get("submeter_direction"),
            "submeter_box_external_id": obj.get("submeter_box_external_id"),
            "metering_point_id": obj.get("metering_point_id"),
            "power_internal": obj.get("power_internal"),
            "power_external": obj.get("power_external"),
            "price_internal": obj.get("price_internal"),
            "price_external": obj.get("price_external"),
            "last_reading_value": obj.get("last_reading_value"),
            "last_time": obj.get("last_time"),
            "power": obj.get("power"),
            "consumption_total": obj.get("consumption_total"),
            "internal_percentage": obj.get("internal_percentage"),
            "width": obj.get("width")
        })
        return _obj


