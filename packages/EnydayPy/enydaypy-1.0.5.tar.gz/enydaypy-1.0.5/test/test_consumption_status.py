# coding: utf-8

"""
    Enyday API

    API for Enyday energy services integration

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from enyday.models.consumption_status import ConsumptionStatus

class TestConsumptionStatus(unittest.TestCase):
    """ConsumptionStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsumptionStatus:
        """Test ConsumptionStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsumptionStatus`
        """
        model = ConsumptionStatus()
        if include_optional:
            return ConsumptionStatus(
                addresses = [
                    enyday.models.consumption_address.ConsumptionAddress(
                        submeters = [
                            enyday.models.submeter_detail.SubmeterDetail(
                                submeter_id = 56, 
                                submeter_name = '', 
                                submeter_direction = 56, 
                                submeter_box_external_id = '', 
                                metering_point_id = '', 
                                power_internal = 1.337, 
                                power_external = 1.337, 
                                price_internal = 1.337, 
                                price_external = 1.337, 
                                last_reading_value = 1.337, 
                                last_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                power = 1.337, 
                                consumption_total = 1.337, 
                                internal_percentage = 1.337, 
                                width = 1.337, )
                            ], 
                        address_id = 56, 
                        address = '', 
                        address_floor = '', 
                        address_side = '', 
                        door_number = 56, 
                        total_doors_on_floor = 56, 
                        building_id = 56, 
                        power = 1.337, 
                        power_internal = 1.337, 
                        power_external = 1.337, 
                        price_internal = 1.337, 
                        price_external = 1.337, 
                        users = [
                            enyday.models.user_detail.UserDetail(
                                user_id = 56, 
                                user_firstname = '', 
                                user_lastname = '', 
                                user_address_begin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                user_address_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        user_name = '', 
                        consumption_total = 1.337, 
                        internal_percentage = 1.337, 
                        width = 1.337, )
                    ],
                community_type_id = 56,
                community_type_name = '',
                common_consumption = enyday.models.common_consumption.CommonConsumption(
                    submeters = [
                        enyday.models.submeter_detail.SubmeterDetail(
                            submeter_id = 56, 
                            submeter_name = '', 
                            submeter_direction = 56, 
                            submeter_box_external_id = '', 
                            metering_point_id = '', 
                            power_internal = 1.337, 
                            power_external = 1.337, 
                            price_internal = 1.337, 
                            price_external = 1.337, 
                            last_reading_value = 1.337, 
                            last_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            power = 1.337, 
                            consumption_total = 1.337, 
                            internal_percentage = 1.337, 
                            width = 1.337, )
                        ], 
                    power = 1.337, 
                    power_internal = 1.337, 
                    power_external = 1.337, 
                    price_internal = 1.337, 
                    price_external = 1.337, ),
                common_production = enyday.models.common_production.CommonProduction(
                    submeters = [
                        enyday.models.submeter_detail.SubmeterDetail(
                            submeter_id = 56, 
                            submeter_name = '', 
                            submeter_direction = 56, 
                            submeter_box_external_id = '', 
                            metering_point_id = '', 
                            power_internal = 1.337, 
                            power_external = 1.337, 
                            price_internal = 1.337, 
                            price_external = 1.337, 
                            last_reading_value = 1.337, 
                            last_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            power = 1.337, 
                            consumption_total = 1.337, 
                            internal_percentage = 1.337, 
                            width = 1.337, )
                        ], 
                    power = 1.337, 
                    power_internal = 1.337, 
                    power_external = 1.337, 
                    price_internal = 1.337, 
                    price_external = 1.337, ),
                community_consumption = enyday.models.community_consumption.CommunityConsumption(
                    from_solar = 1.337, 
                    from_grid = 1.337, )
            )
        else:
            return ConsumptionStatus(
        )
        """

    def testConsumptionStatus(self):
        """Test ConsumptionStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
