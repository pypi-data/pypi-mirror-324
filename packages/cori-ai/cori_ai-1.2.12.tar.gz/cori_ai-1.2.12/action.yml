name: '‚ú® CoriAI Code Review, PhD'
description: 'ü§ñ AI-powered code reviews for pull requests using LLMs, by a smart human with a PhD! üéì'
author: 'theboringhumane'

branding:
  icon: 'anchor'
  color: 'purple'

inputs:
  provider:
    description: 'LLM provider to use (openai, gemini, groq, mistral, ollama)'
    required: false
    default: 'openai'
  
  # OpenAI settings
  openai_api_key:
    description: 'OpenAI API key (required if using OpenAI)'
    required: false
  openai_base_url:
    description: 'OpenAI API base URL (optional)'
    required: false
    default: 'https://api.openai.com/v1'
  
  # Google Gemini settings
  google_api_key:
    description: 'Google API key (required if using Gemini)'
    required: false
  
  # Groq settings
  groq_api_key:
    description: 'Groq API key (required if using Groq)'
    required: false
  
  # Mistral settings
  mistral_api_key:
    description: 'Mistral API key (required if using Mistral)'
    required: false
  
  # Ollama settings
  ollama_api_key:
    description: 'Ollama API key (required if using Ollama)'
    required: false
  ollama_base_url:
    description: 'Ollama API base URL (optional)'
    required: false
    default: 'http://localhost:11434'
  
  # Common settings
  github_token:
    description: 'GitHub token for PR access'
    required: false
    default: ${{ github.token }}
  extra_prompt:
    description: 'Additional instructions for the AI reviewer'
    required: false
    default: ''
  model:
    description: 'Model to use (provider-specific, e.g., gpt-4-turbo-preview for OpenAI, gemini-pro for Google)'
    required: false
    default: 'gpt-4o-mini'
  pr_title:
    description: 'Title of the pull request'
    required: false
    default: ${{ github.event.pull_request.title }}
  pr_description:
    description: 'Description of the pull request'
    required: false
    default: ${{ github.event.pull_request.body }}
  pr_state:
    description: 'State of the pull request'
    required: false
    default: ${{ github.event.pull_request.state }}
  pr_author:
    description: 'Author of the pull request'
    required: false
    default: ${{ github.event.pull_request.user.login }}
  pr_number:
    description: 'Number of the pull request'
    required: false
    default: ${{ github.event.number }}
  github_repository:
    description: 'Repository of the pull request'
    required: false
    default: ${{ github.repository }}

runs:
  using: 'composite'

  steps:
    
    - name: Skip if has skip-review label
      id: check_if_skip_review_label
      shell: bash
      run: |
        if [[ ${{ contains(github.event.pull_request.labels.*.name, 'skip-review') }} == true ]]; then
          echo "SKIP_REVIEW_LABEL=0" >> $GITHUB_OUTPUT
        else
          echo "SKIP_REVIEW_LABEL=1" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Check if review is requested
      id: check_if_review_requested
      shell: python
      env:
        PR_TITLE: ${{ inputs.pr_title }}
        PR_DESCRIPTION: ${{ inputs.pr_description }}
        PR_STATE: ${{ inputs.pr_state }}
        MERGE_PATTERN: \b(?:merged|closed)\b
        SKIP_REVIEW_LABEL: ${{ steps.check_if_skip_review_label.outputs.SKIP_REVIEW_LABEL }}
        PATTERN: \b((?:no|skip)-(?:review|cori|coriai)|cori-(?:no|bye|restricted))(?:,((?:no|skip)-(?:review|cori|coriai)|cori-(?:no|bye|restricted)))*\b
      run: |
        import os
        import re

        pr_title = os.environ['PR_TITLE']
        pattern = os.environ['PATTERN']
        pr_description = os.environ['PR_DESCRIPTION']
        merge_pattern = os.environ['MERGE_PATTERN']
        pr_state = os.environ['PR_STATE']

        if re.search(pattern, pr_title, re.IGNORECASE) or re.search(merge_pattern, pr_state, re.IGNORECASE) or re.search(pattern, pr_description, re.IGNORECASE) or os.environ.get('SKIP_REVIEW_LABEL', '1') == '0':
            print("ü¶¶ No review requested, skipping code review")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("code_review_requested=false\n")
        else:
            print("üîç Code review requested")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("code_review_requested=true\n")
   
    - name: Echo code review requested
      shell: bash
      run: |
        echo "Code review requested: ${{ steps.check_if_review_requested.outputs.code_review_requested }}"

    - name: Add skip comment if review is skipped
      if: steps.check_if_review_requested.outputs.code_review_requested == 'false'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ inputs.github_repository }}
        PR_NUMBER: ${{ inputs.pr_number }}
        COMMENT: "Hey @${{inputs.pr_author}}! ü¶¶ Looks like you've requested a vacation from code review! I'll be chilling with my fish friends instead! üê† Have a splashing good day! üåä"
      run: |
        # First check if comment already exists
        EXISTING_COMMENTS=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments?since=${{ github.event.pull_request.created_at }}")
        
        if ! echo "$EXISTING_COMMENTS" | grep -q "$COMMENT"; then
          # Comment doesn't exist, so create it
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
            -d "{\"body\":\"$COMMENT\"}"
        else
          echo "Skip comment already exists"
        fi

    - name: Add a label to the PR if review is skipped
      if: steps.check_if_review_requested.outputs.code_review_requested == 'false'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        gh label create "skip-review" --description "Skip review" --color "f0f0f0" -f
        gh pr edit ${{ env.PR_NUMBER }} --add-label "skip-review"
    
    - name: Add a label to the PR if review is requested
      if: steps.check_if_review_requested.outputs.code_review_requested == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        gh label create "cori-ai-review" --description "Cori AI review" --color "9C27B0" -f
        gh pr edit ${{ env.PR_NUMBER }} --add-label "cori-ai-review"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
          python-version: "3.12"   

    - name: Review Code with CoriAI ‚ú®
      shell: bash
      if: steps.check_if_review_requested.outputs.code_review_requested == 'true'
      run: |
        echo "üîç Detective Otter on the case! Time to review some code! üïµÔ∏è‚Äç‚ôÇÔ∏è"
        pip install --no-cache-dir cori-ai --upgrade pip
        python -m cori_ai.review
        echo "üéâ Code review complete! üéâ"
        echo "üêü Fishy code review results! üêü"
      env:
        INPUT_PROVIDER: ${{ inputs.provider }}
        INPUT_OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        INPUT_OPENAI_BASE_URL: ${{ inputs.openai_base_url }}
        INPUT_GOOGLE_API_KEY: ${{ inputs.google_api_key }}
        INPUT_GROQ_API_KEY: ${{ inputs.groq_api_key }}
        INPUT_OLLAMA_API_KEY: ${{ inputs.ollama_api_key }}
        INPUT_OLLAMA_BASE_URL: ${{ inputs.ollama_base_url }}
        INPUT_MISTRAL_API_KEY: ${{ inputs.mistral_api_key }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_EXTRA_PROMPT: ${{ inputs.extra_prompt }}
        PR_TITLE: ${{ inputs.pr_title }}
        PR_DESCRIPTION: ${{ inputs.pr_description }}
        PR_STATE: ${{ inputs.pr_state }}
        PR_AUTHOR: ${{ inputs.pr_author }}
        PR_NUMBER: ${{ inputs.pr_number }}
        GITHUB_REPOSITORY: ${{ inputs.github_repository }}

    - name: Add a label to the PR if review is complete
      if: steps.check_if_review_requested.outputs.code_review_requested == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        gh label create "cori-ai-review-complete" --description "Cori AI review complete" --color "2ECC71" -f
        gh pr edit ${{ env.PR_NUMBER }} --add-label "cori-ai-review-complete"