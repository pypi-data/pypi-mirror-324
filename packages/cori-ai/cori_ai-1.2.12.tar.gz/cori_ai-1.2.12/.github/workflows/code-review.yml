name: Test OtterAI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"

jobs:
  # Run tests
  tests:
    runs-on: ubuntu-latest
    container:
      image: python:3.12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run BASIC tests
        run: |
          python -m unittest discover -s tests -p 'test_*.py'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m unittest discover -s cori_ai/tests -p 'test_*.py'

  code-review:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get full history for better context

      - name: Cori Auth Step
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CORI_APP_ID }}
          private-key: ${{ secrets.CORI_APP_PRIVATE_KEY }}

      - name: CoriAI ✨ Code Review
        uses: ./ # Uses the action from the current repository
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          provider: "openai"
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          openai_base_url: ${{ secrets.OPENAI_BASE_URL }}
          model: codellama/CodeLlama-34b-Instruct-hf
          extra_prompt: |
            Please focus on:
            - 📝 Python best practices and PEP8 compliance
            - 🔒 Security implications and vulnerability checks
            - ⚡ Performance optimizations and resource efficiency
            - 📚 Code maintainability, readability, and comprehensive documentation
            - 🛡️ Robust error handling and edge case coverage
            - 🧪 Unit test coverage and test quality
            - 🔄 Code reusability and modularity
            - 🎯 Type hints and input validation
            - 💾 Database and I/O operations efficiency
            - 🌐 API design and integration patterns
            - 🚀 Scalability considerations
            - 🔍 Memory management and resource cleanup
            - 📊 Logging and monitoring practices
            
            Review Guidelines:
            - Use descriptive emojis for better visibility
            - Format comments using **bold**, *italic*, and `inline code`
            - Include ```code blocks``` for suggested improvements
            - Provide detailed explanations with examples
            - Link to relevant documentation when applicable