# coding: utf-8

"""
    Demo250128

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobInfoDto(BaseModel):
    """
    Lightweight object used to query the job state in the database.
    """ # noqa: E501
    key: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    host_machine_name: Optional[StrictStr] = Field(default=None, alias="hostMachineName")
    organization_unit_id: Optional[StrictInt] = Field(default=None, alias="organizationUnitId")
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["key", "state", "startTime", "creationTime", "hostMachineName", "organizationUnitId", "id"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'Running', 'Stopping', 'Terminating', 'Faulted', 'Successful', 'Stopped', 'Suspended', 'Resumed']):
            raise ValueError("must be one of enum values ('Pending', 'Running', 'Stopping', 'Terminating', 'Faulted', 'Successful', 'Stopped', 'Suspended', 'Resumed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        # set to None if host_machine_name (nullable) is None
        # and model_fields_set contains the field
        if self.host_machine_name is None and "host_machine_name" in self.model_fields_set:
            _dict['hostMachineName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "state": obj.get("state"),
            "startTime": obj.get("startTime"),
            "creationTime": obj.get("creationTime"),
            "hostMachineName": obj.get("hostMachineName"),
            "organizationUnitId": obj.get("organizationUnitId"),
            "id": obj.get("id")
        })
        return _obj


