from typing import Any, Callable, Iterable, TypeVar

__all__ = ['isTrue', 'isFalse', 'isNone', 'isNotNone', 'isIn', 'isNotIn', 'equals', 'isBlank', 'default', 'allNone', 'allNotNone']

T = TypeVar('T')

def isTrue(var: bool) -> bool: ...
def isFalse(var: bool) -> bool: ...
def isNone(val: Any) -> bool: ...
def isIn(it: Iterable[T | None]) -> Callable[[T | None], bool]: ...
def isNotIn(it: Iterable[T | None]) -> Callable[[T | None], bool]: ...
def equals(obj: Any) -> Callable[[Any], bool]: ...
def isBlank(obj: Any) -> bool: ...
def default(defaultVal: T) -> Callable[[T | None], T]: ...
def allNone(it: Iterable[T | None]) -> bool: ...
def allNotNone(it: Iterable[T | None]) -> bool: ...

# Names in __all__ with no definition:
#   isNotNone
