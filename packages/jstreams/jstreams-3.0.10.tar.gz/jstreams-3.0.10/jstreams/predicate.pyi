from typing import Any, Callable, Iterable, TypeVar

__all__ = ['isTrue', 'isFalse', 'isNone', 'isNotNone', 'isIn', 'isNotIn', 'equals', 'isBlank', 'default', 'allNone', 'allNotNone', 'strContains', 'strContainsIgnoreCase', 'strStartsWith', 'strStartsWithIgnoreCase', 'strEndsWith', 'strEndsWithIgnoreCase', 'strMatches', 'strNotMatches', 'strLongerThan', 'strShorterThan', 'strLongerThanOrEqual', 'strShorterThanOrEqual', 'equalsIgnoreCase', 'isEven', 'isOdd', 'isPositive', 'isNegative', 'isZero', 'isInt', 'isBeween', 'isBeweenClosed', 'isBeweenClosedStart', 'isBeweenClosedEnd', 'not_', 'notStrict', 'notEquals', 'isNotBlank']

T = TypeVar('T')

def isTrue(var: bool) -> bool: ...
def isFalse(var: bool) -> bool: ...
def isNone(val: Any) -> bool: ...
def isIn(it: Iterable[T | None]) -> Callable[[T | None], bool]: ...
def isNotIn(it: Iterable[T | None]) -> Callable[[T | None], bool]: ...
def equals(obj: Any) -> Callable[[Any], bool]: ...
def notEquals(obj: Any) -> Callable[[Any], bool]: ...
def isBlank(obj: Any) -> bool: ...
def isNotBlank(obj: Any) -> bool: ...
def default(defaultVal: T) -> Callable[[T | None], T]: ...
def allNone(it: Iterable[T | None]) -> bool: ...
def allNotNone(it: Iterable[T | None]) -> bool: ...
def strContains(value: str) -> Callable[[str | None], bool]: ...
def strContainsIgnoreCase(value: str) -> Callable[[str | None], bool]: ...
def strStartsWith(value: str) -> Callable[[str | None], bool]: ...
def strStartsWithIgnoreCase(value: str) -> Callable[[str | None], bool]: ...
def strEndsWith(value: str) -> Callable[[str | None], bool]: ...
def strEndsWithIgnoreCase(value: str) -> Callable[[str | None], bool]: ...
def strMatches(value: str) -> Callable[[str | None], bool]: ...
def strNotMatches(value: str) -> Callable[[str | None], bool]: ...
def strLongerThan(value: int) -> Callable[[str | None], bool]: ...
def strShorterThan(value: int) -> Callable[[str | None], bool]: ...
def strLongerThanOrEqual(value: int) -> Callable[[str | None], bool]: ...
def strShorterThanOrEqual(value: int) -> Callable[[str | None], bool]: ...
def equalsIgnoreCase(value: str) -> Callable[[str | None], bool]: ...
def isEven(integer: int | None) -> bool: ...
def isOdd(integer: int | None) -> bool: ...
def isPositive(number: float | None) -> bool: ...
def isNegative(number: float | None) -> bool: ...
def isZero(number: float | None) -> bool: ...
def isInt(number: float | None) -> bool: ...
def isBeween(intervalStart: float, intervalEnd: float) -> Callable[[float | None], bool]: ...
def isBeweenClosed(intervalStart: float, intervalEnd: float) -> Callable[[float | None], bool]: ...
def isBeweenClosedStart(intervalStart: float, intervalEnd: float) -> Callable[[float | None], bool]: ...
def isBeweenClosedEnd(intervalStart: float, intervalEnd: float) -> Callable[[float | None], bool]: ...
def not_(predicate: Callable[[T | None], bool]) -> Callable[[T | None], bool]: ...
def notStrict(predicate: Callable[[T], bool]) -> Callable[[T], bool]: ...

# Names in __all__ with no definition:
#   isNotNone
