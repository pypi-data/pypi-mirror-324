# coding: utf-8

"""
    API Alegra Proveedor Electrónico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_company_request_all_of_webhooks_credit_notes import CreateCompanyRequestAllOfWebhooksCreditNotes
from openapi_client.models.create_company_request_all_of_webhooks_debit_notes import CreateCompanyRequestAllOfWebhooksDebitNotes
from openapi_client.models.create_company_request_all_of_webhooks_general import CreateCompanyRequestAllOfWebhooksGeneral
from openapi_client.models.create_company_request_all_of_webhooks_invoices import CreateCompanyRequestAllOfWebhooksInvoices
from openapi_client.models.create_company_request_all_of_webhooks_payrolls import CreateCompanyRequestAllOfWebhooksPayrolls
from openapi_client.models.get_companies200_response_companies_inner_webhooks_equivalent_documents import GetCompanies200ResponseCompaniesInnerWebhooksEquivalentDocuments
from openapi_client.models.get_companies200_response_companies_inner_webhooks_support_documents import GetCompanies200ResponseCompaniesInnerWebhooksSupportDocuments
from typing import Optional, Set
from typing_extensions import Self

class CreateCompanyRequestAllOfWebhooks(BaseModel):
    """
    Objeto que contiene la información de los webhooks configurados para la empresa. En caso de querer actualizar un webhook, se debe enviar el objeto completo con los webhooks que se desean mantener y los que se desean eliminar
    """ # noqa: E501
    general: Optional[CreateCompanyRequestAllOfWebhooksGeneral] = None
    payrolls: Optional[CreateCompanyRequestAllOfWebhooksPayrolls] = None
    invoices: Optional[CreateCompanyRequestAllOfWebhooksInvoices] = None
    credit_notes: Optional[CreateCompanyRequestAllOfWebhooksCreditNotes] = Field(default=None, alias="creditNotes")
    debit_notes: Optional[CreateCompanyRequestAllOfWebhooksDebitNotes] = Field(default=None, alias="debitNotes")
    equivalent_documents: Optional[GetCompanies200ResponseCompaniesInnerWebhooksEquivalentDocuments] = Field(default=None, alias="equivalentDocuments")
    support_documents: Optional[GetCompanies200ResponseCompaniesInnerWebhooksSupportDocuments] = Field(default=None, alias="supportDocuments")
    __properties: ClassVar[List[str]] = ["general", "payrolls", "invoices", "creditNotes", "debitNotes", "equivalentDocuments", "supportDocuments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCompanyRequestAllOfWebhooks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of general
        if self.general:
            _dict['general'] = self.general.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payrolls
        if self.payrolls:
            _dict['payrolls'] = self.payrolls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoices
        if self.invoices:
            _dict['invoices'] = self.invoices.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_notes
        if self.credit_notes:
            _dict['creditNotes'] = self.credit_notes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debit_notes
        if self.debit_notes:
            _dict['debitNotes'] = self.debit_notes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equivalent_documents
        if self.equivalent_documents:
            _dict['equivalentDocuments'] = self.equivalent_documents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support_documents
        if self.support_documents:
            _dict['supportDocuments'] = self.support_documents.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCompanyRequestAllOfWebhooks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "general": CreateCompanyRequestAllOfWebhooksGeneral.from_dict(obj["general"]) if obj.get("general") is not None else None,
            "payrolls": CreateCompanyRequestAllOfWebhooksPayrolls.from_dict(obj["payrolls"]) if obj.get("payrolls") is not None else None,
            "invoices": CreateCompanyRequestAllOfWebhooksInvoices.from_dict(obj["invoices"]) if obj.get("invoices") is not None else None,
            "creditNotes": CreateCompanyRequestAllOfWebhooksCreditNotes.from_dict(obj["creditNotes"]) if obj.get("creditNotes") is not None else None,
            "debitNotes": CreateCompanyRequestAllOfWebhooksDebitNotes.from_dict(obj["debitNotes"]) if obj.get("debitNotes") is not None else None,
            "equivalentDocuments": GetCompanies200ResponseCompaniesInnerWebhooksEquivalentDocuments.from_dict(obj["equivalentDocuments"]) if obj.get("equivalentDocuments") is not None else None,
            "supportDocuments": GetCompanies200ResponseCompaniesInnerWebhooksSupportDocuments.from_dict(obj["supportDocuments"]) if obj.get("supportDocuments") is not None else None
        })
        return _obj


