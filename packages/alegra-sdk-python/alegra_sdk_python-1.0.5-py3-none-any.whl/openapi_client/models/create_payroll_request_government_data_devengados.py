# coding: utf-8

"""
    API Alegra Proveedor Electrónico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.create_payroll_request_government_data_devengados_anticipos import CreatePayrollRequestGovernmentDataDevengadosAnticipos
from openapi_client.models.create_payroll_request_government_data_devengados_auxilios import CreatePayrollRequestGovernmentDataDevengadosAuxilios
from openapi_client.models.create_payroll_request_government_data_devengados_basico import CreatePayrollRequestGovernmentDataDevengadosBasico
from openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones import CreatePayrollRequestGovernmentDataDevengadosBonificaciones
from openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs import CreatePayrollRequestGovernmentDataDevengadosBonoEPCTVs
from openapi_client.models.create_payroll_request_government_data_devengados_cesantias import CreatePayrollRequestGovernmentDataDevengadosCesantias
from openapi_client.models.create_payroll_request_government_data_devengados_comisiones import CreatePayrollRequestGovernmentDataDevengadosComisiones
from openapi_client.models.create_payroll_request_government_data_devengados_compensaciones import CreatePayrollRequestGovernmentDataDevengadosCompensaciones
from openapi_client.models.create_payroll_request_government_data_devengados_heddfs import CreatePayrollRequestGovernmentDataDevengadosHEDDFs
from openapi_client.models.create_payroll_request_government_data_devengados_heds import CreatePayrollRequestGovernmentDataDevengadosHEDs
from openapi_client.models.create_payroll_request_government_data_devengados_hendfs import CreatePayrollRequestGovernmentDataDevengadosHENDFs
from openapi_client.models.create_payroll_request_government_data_devengados_hens import CreatePayrollRequestGovernmentDataDevengadosHENs
from openapi_client.models.create_payroll_request_government_data_devengados_hrddfs import CreatePayrollRequestGovernmentDataDevengadosHRDDFs
from openapi_client.models.create_payroll_request_government_data_devengados_hrndfs import CreatePayrollRequestGovernmentDataDevengadosHRNDFs
from openapi_client.models.create_payroll_request_government_data_devengados_hrns import CreatePayrollRequestGovernmentDataDevengadosHRNs
from openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales import CreatePayrollRequestGovernmentDataDevengadosHuelgasLegales
from openapi_client.models.create_payroll_request_government_data_devengados_incapacidades import CreatePayrollRequestGovernmentDataDevengadosIncapacidades
from openapi_client.models.create_payroll_request_government_data_devengados_licencias import CreatePayrollRequestGovernmentDataDevengadosLicencias
from openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos import CreatePayrollRequestGovernmentDataDevengadosOtrosConceptos
from openapi_client.models.create_payroll_request_government_data_devengados_pagos_terceros import CreatePayrollRequestGovernmentDataDevengadosPagosTerceros
from openapi_client.models.create_payroll_request_government_data_devengados_primas import CreatePayrollRequestGovernmentDataDevengadosPrimas
from openapi_client.models.create_payroll_request_government_data_devengados_transporte_inner import CreatePayrollRequestGovernmentDataDevengadosTransporteInner
from openapi_client.models.create_payroll_request_government_data_devengados_vacaciones import CreatePayrollRequestGovernmentDataDevengadosVacaciones
from typing import Optional, Set
from typing_extensions import Self

class CreatePayrollRequestGovernmentDataDevengados(BaseModel):
    """
    Objeto con la información de los devengados del documento
    """ # noqa: E501
    basico: CreatePayrollRequestGovernmentDataDevengadosBasico = Field(alias="Basico")
    transporte: Optional[List[CreatePayrollRequestGovernmentDataDevengadosTransporteInner]] = Field(default=None, description="Array con información sobre devengados por concepto de transporte", alias="Transporte")
    heds: Optional[CreatePayrollRequestGovernmentDataDevengadosHEDs] = Field(default=None, alias="HEDs")
    hens: Optional[CreatePayrollRequestGovernmentDataDevengadosHENs] = Field(default=None, alias="HENs")
    hrns: Optional[CreatePayrollRequestGovernmentDataDevengadosHRNs] = Field(default=None, alias="HRNs")
    heddfs: Optional[CreatePayrollRequestGovernmentDataDevengadosHEDDFs] = Field(default=None, alias="HEDDFs")
    hrddfs: Optional[CreatePayrollRequestGovernmentDataDevengadosHRDDFs] = Field(default=None, alias="HRDDFs")
    hendfs: Optional[CreatePayrollRequestGovernmentDataDevengadosHENDFs] = Field(default=None, alias="HENDFs")
    hrndfs: Optional[CreatePayrollRequestGovernmentDataDevengadosHRNDFs] = Field(default=None, alias="HRNDFs")
    vacaciones: Optional[CreatePayrollRequestGovernmentDataDevengadosVacaciones] = Field(default=None, alias="Vacaciones")
    primas: Optional[CreatePayrollRequestGovernmentDataDevengadosPrimas] = Field(default=None, alias="Primas")
    cesantias: Optional[CreatePayrollRequestGovernmentDataDevengadosCesantias] = Field(default=None, alias="Cesantias")
    incapacidades: Optional[CreatePayrollRequestGovernmentDataDevengadosIncapacidades] = Field(default=None, alias="Incapacidades")
    licencias: Optional[CreatePayrollRequestGovernmentDataDevengadosLicencias] = Field(default=None, alias="Licencias")
    bonificaciones: Optional[CreatePayrollRequestGovernmentDataDevengadosBonificaciones] = Field(default=None, alias="Bonificaciones")
    auxilios: Optional[CreatePayrollRequestGovernmentDataDevengadosAuxilios] = Field(default=None, alias="Auxilios")
    huelgas_legales: Optional[CreatePayrollRequestGovernmentDataDevengadosHuelgasLegales] = Field(default=None, alias="HuelgasLegales")
    otros_conceptos: Optional[CreatePayrollRequestGovernmentDataDevengadosOtrosConceptos] = Field(default=None, alias="OtrosConceptos")
    compensaciones: Optional[CreatePayrollRequestGovernmentDataDevengadosCompensaciones] = Field(default=None, alias="Compensaciones")
    bono_epctvs: Optional[CreatePayrollRequestGovernmentDataDevengadosBonoEPCTVs] = Field(default=None, alias="BonoEPCTVs")
    comisiones: Optional[CreatePayrollRequestGovernmentDataDevengadosComisiones] = Field(default=None, alias="Comisiones")
    pagos_terceros: Optional[CreatePayrollRequestGovernmentDataDevengadosPagosTerceros] = Field(default=None, alias="PagosTerceros")
    anticipos: Optional[CreatePayrollRequestGovernmentDataDevengadosAnticipos] = Field(default=None, alias="Anticipos")
    dotacion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De conformidad con lo previsto en el artículo 230 del Código Sustantivo del Trabajo, o la norma que lo modifique, adicione o sustituya, corresponde al valor que el empleador dispone para suministrar la dotación de sus trabajadores.", alias="Dotacion")
    apoyo_sost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Corresponde al valor no salarial que el patrocinador paga de forma mensual como ayuda o apoyo economía al aprendiz o practicante universitario durante su etapa lectiva y fase practica.", alias="ApoyoSost")
    teletrabajo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que debe ser pagado al trabajador cuyo contrato indica expresamente que puede laborar mediante teletrabajo", alias="Teletrabajo")
    bonif_retiro: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor establecido por mutuo acuerdo por retiro del Trabajador", alias="BonifRetiro")
    indemnizacion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor de Indemnizacion establecido por ley", alias="Indemnizacion")
    reintegro: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que le regresa la empresa al trabajador por una deducción mal realizada en otro pago de nomina", alias="Reintegro")
    __properties: ClassVar[List[str]] = ["Basico", "Transporte", "HEDs", "HENs", "HRNs", "HEDDFs", "HRDDFs", "HENDFs", "HRNDFs", "Vacaciones", "Primas", "Cesantias", "Incapacidades", "Licencias", "Bonificaciones", "Auxilios", "HuelgasLegales", "OtrosConceptos", "Compensaciones", "BonoEPCTVs", "Comisiones", "PagosTerceros", "Anticipos", "Dotacion", "ApoyoSost", "Teletrabajo", "BonifRetiro", "Indemnizacion", "Reintegro"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePayrollRequestGovernmentDataDevengados from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basico
        if self.basico:
            _dict['Basico'] = self.basico.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transporte (list)
        _items = []
        if self.transporte:
            for _item_transporte in self.transporte:
                if _item_transporte:
                    _items.append(_item_transporte.to_dict())
            _dict['Transporte'] = _items
        # override the default output from pydantic by calling `to_dict()` of heds
        if self.heds:
            _dict['HEDs'] = self.heds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hens
        if self.hens:
            _dict['HENs'] = self.hens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hrns
        if self.hrns:
            _dict['HRNs'] = self.hrns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of heddfs
        if self.heddfs:
            _dict['HEDDFs'] = self.heddfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hrddfs
        if self.hrddfs:
            _dict['HRDDFs'] = self.hrddfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hendfs
        if self.hendfs:
            _dict['HENDFs'] = self.hendfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hrndfs
        if self.hrndfs:
            _dict['HRNDFs'] = self.hrndfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vacaciones
        if self.vacaciones:
            _dict['Vacaciones'] = self.vacaciones.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primas
        if self.primas:
            _dict['Primas'] = self.primas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cesantias
        if self.cesantias:
            _dict['Cesantias'] = self.cesantias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incapacidades
        if self.incapacidades:
            _dict['Incapacidades'] = self.incapacidades.to_dict()
        # override the default output from pydantic by calling `to_dict()` of licencias
        if self.licencias:
            _dict['Licencias'] = self.licencias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bonificaciones
        if self.bonificaciones:
            _dict['Bonificaciones'] = self.bonificaciones.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auxilios
        if self.auxilios:
            _dict['Auxilios'] = self.auxilios.to_dict()
        # override the default output from pydantic by calling `to_dict()` of huelgas_legales
        if self.huelgas_legales:
            _dict['HuelgasLegales'] = self.huelgas_legales.to_dict()
        # override the default output from pydantic by calling `to_dict()` of otros_conceptos
        if self.otros_conceptos:
            _dict['OtrosConceptos'] = self.otros_conceptos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensaciones
        if self.compensaciones:
            _dict['Compensaciones'] = self.compensaciones.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bono_epctvs
        if self.bono_epctvs:
            _dict['BonoEPCTVs'] = self.bono_epctvs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comisiones
        if self.comisiones:
            _dict['Comisiones'] = self.comisiones.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pagos_terceros
        if self.pagos_terceros:
            _dict['PagosTerceros'] = self.pagos_terceros.to_dict()
        # override the default output from pydantic by calling `to_dict()` of anticipos
        if self.anticipos:
            _dict['Anticipos'] = self.anticipos.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePayrollRequestGovernmentDataDevengados from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Basico": CreatePayrollRequestGovernmentDataDevengadosBasico.from_dict(obj["Basico"]) if obj.get("Basico") is not None else None,
            "Transporte": [CreatePayrollRequestGovernmentDataDevengadosTransporteInner.from_dict(_item) for _item in obj["Transporte"]] if obj.get("Transporte") is not None else None,
            "HEDs": CreatePayrollRequestGovernmentDataDevengadosHEDs.from_dict(obj["HEDs"]) if obj.get("HEDs") is not None else None,
            "HENs": CreatePayrollRequestGovernmentDataDevengadosHENs.from_dict(obj["HENs"]) if obj.get("HENs") is not None else None,
            "HRNs": CreatePayrollRequestGovernmentDataDevengadosHRNs.from_dict(obj["HRNs"]) if obj.get("HRNs") is not None else None,
            "HEDDFs": CreatePayrollRequestGovernmentDataDevengadosHEDDFs.from_dict(obj["HEDDFs"]) if obj.get("HEDDFs") is not None else None,
            "HRDDFs": CreatePayrollRequestGovernmentDataDevengadosHRDDFs.from_dict(obj["HRDDFs"]) if obj.get("HRDDFs") is not None else None,
            "HENDFs": CreatePayrollRequestGovernmentDataDevengadosHENDFs.from_dict(obj["HENDFs"]) if obj.get("HENDFs") is not None else None,
            "HRNDFs": CreatePayrollRequestGovernmentDataDevengadosHRNDFs.from_dict(obj["HRNDFs"]) if obj.get("HRNDFs") is not None else None,
            "Vacaciones": CreatePayrollRequestGovernmentDataDevengadosVacaciones.from_dict(obj["Vacaciones"]) if obj.get("Vacaciones") is not None else None,
            "Primas": CreatePayrollRequestGovernmentDataDevengadosPrimas.from_dict(obj["Primas"]) if obj.get("Primas") is not None else None,
            "Cesantias": CreatePayrollRequestGovernmentDataDevengadosCesantias.from_dict(obj["Cesantias"]) if obj.get("Cesantias") is not None else None,
            "Incapacidades": CreatePayrollRequestGovernmentDataDevengadosIncapacidades.from_dict(obj["Incapacidades"]) if obj.get("Incapacidades") is not None else None,
            "Licencias": CreatePayrollRequestGovernmentDataDevengadosLicencias.from_dict(obj["Licencias"]) if obj.get("Licencias") is not None else None,
            "Bonificaciones": CreatePayrollRequestGovernmentDataDevengadosBonificaciones.from_dict(obj["Bonificaciones"]) if obj.get("Bonificaciones") is not None else None,
            "Auxilios": CreatePayrollRequestGovernmentDataDevengadosAuxilios.from_dict(obj["Auxilios"]) if obj.get("Auxilios") is not None else None,
            "HuelgasLegales": CreatePayrollRequestGovernmentDataDevengadosHuelgasLegales.from_dict(obj["HuelgasLegales"]) if obj.get("HuelgasLegales") is not None else None,
            "OtrosConceptos": CreatePayrollRequestGovernmentDataDevengadosOtrosConceptos.from_dict(obj["OtrosConceptos"]) if obj.get("OtrosConceptos") is not None else None,
            "Compensaciones": CreatePayrollRequestGovernmentDataDevengadosCompensaciones.from_dict(obj["Compensaciones"]) if obj.get("Compensaciones") is not None else None,
            "BonoEPCTVs": CreatePayrollRequestGovernmentDataDevengadosBonoEPCTVs.from_dict(obj["BonoEPCTVs"]) if obj.get("BonoEPCTVs") is not None else None,
            "Comisiones": CreatePayrollRequestGovernmentDataDevengadosComisiones.from_dict(obj["Comisiones"]) if obj.get("Comisiones") is not None else None,
            "PagosTerceros": CreatePayrollRequestGovernmentDataDevengadosPagosTerceros.from_dict(obj["PagosTerceros"]) if obj.get("PagosTerceros") is not None else None,
            "Anticipos": CreatePayrollRequestGovernmentDataDevengadosAnticipos.from_dict(obj["Anticipos"]) if obj.get("Anticipos") is not None else None,
            "Dotacion": obj.get("Dotacion"),
            "ApoyoSost": obj.get("ApoyoSost"),
            "Teletrabajo": obj.get("Teletrabajo"),
            "BonifRetiro": obj.get("BonifRetiro"),
            "Indemnizacion": obj.get("Indemnizacion"),
            "Reintegro": obj.get("Reintegro")
        })
        return _obj


