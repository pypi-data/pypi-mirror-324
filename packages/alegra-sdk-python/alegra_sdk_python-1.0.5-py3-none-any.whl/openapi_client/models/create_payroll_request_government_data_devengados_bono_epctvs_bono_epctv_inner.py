# coding: utf-8

"""
    API Alegra Proveedor Electrónico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreatePayrollRequestGovernmentDataDevengadosBonoEPCTVsBonoEPCTVInner(BaseModel):
    """
    Objeto con información sobre devengados por concepto de Bonos Electronicos o de Papel de Servicio, Cheques, Tarjetas, Vales, etc
    """ # noqa: E501
    pago_s: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que el trabajador recibe como contraprestación por el trabajo realizado, por medio de bonos electrónicos, recargas, cheques, vales. es decir, todo pago realizado en un medio diferente a dinero en efectivo o consignación de cuenta bancaria (Salarial).", alias="PagoS")
    pago_ns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que el trabajador recibe como concepto no salarial, por medio de bonos electrónicos, recargas, cheques, vales. es decir, todo pago realizado en un medio diferente a dinero en efectivo o consignación de cuenta bancaria (No Salarial).", alias="PagoNS")
    pago_alimentacion_s: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que el trabajador recibe como concepto no salarial, por medio de bonos electrónicos, recargas, cheques, vales. es decir, todo pago realizado en un medio diferente a dinero en efectivo o consignación de cuenta bancaria (Para Alimentación Salarial).", alias="PagoAlimentacionS")
    pago_alimentacion_ns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que el trabajador recibe como concepto no salarial, por medio de bonos electrónicos, recargas, cheques, vales. es decir, todo pago realizado en un medio diferente a dinero en efectivo o consignación de cuenta bancaria (Para Alimentación No Salarial).", alias="PagoAlimentacionNS")
    __properties: ClassVar[List[str]] = ["PagoS", "PagoNS", "PagoAlimentacionS", "PagoAlimentacionNS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePayrollRequestGovernmentDataDevengadosBonoEPCTVsBonoEPCTVInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePayrollRequestGovernmentDataDevengadosBonoEPCTVsBonoEPCTVInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PagoS": obj.get("PagoS"),
            "PagoNS": obj.get("PagoNS"),
            "PagoAlimentacionS": obj.get("PagoAlimentacionS"),
            "PagoAlimentacionNS": obj.get("PagoAlimentacionNS")
        })
        return _obj


