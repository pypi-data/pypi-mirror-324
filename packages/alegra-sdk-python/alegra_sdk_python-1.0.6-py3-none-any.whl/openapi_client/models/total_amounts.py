# coding: utf-8

"""
    API Alegra Proveedor Electrónico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TotalAmounts(BaseModel):
    """
    Objeto que contiene la información de totales relacionados con el documento
    """ # noqa: E501
    gross_total: Union[StrictFloat, StrictInt] = Field(description="Total valor bruto antes de tributos. Suma de todos los subtotales correspondientes a los árticulos y/o servicios. <br><i>Campo oficial DIAN &lt;LegalMonetaryTotal&gt;</i>", alias="grossTotal")
    taxable_total: Union[StrictFloat, StrictInt] = Field(description="Total valor base imponible. Base imponible para el cálculo de los tributos. <br><i>Campo oficial DIAN &lt;TaxExclusiveAmount&gt;</i>", alias="taxableTotal")
    tax_total: Union[StrictFloat, StrictInt] = Field(description="Total valor tributos/impuestos. <br><i>Valor asociado en el calculo del campo oficial DIAN &lt;TaxInclusiveAmount&gt;</i>", alias="taxTotal")
    discount_total: Union[StrictFloat, StrictInt] = Field(description="Total valor descuentos. Suma de todos los descuentos aplicados al total de la factura. <br><i>Campo oficial DIAN &lt;AllowanceTotalAmount&gt;</i>", alias="discountTotal")
    charge_total: Union[StrictFloat, StrictInt] = Field(description="Total valor cargos. Suma de todos los cargos aplicados al total de la factura. <br><i>Campo oficial DIAN &lt;ChargeTotalAmount&gt;</i>", alias="chargeTotal")
    advance_total: Union[StrictFloat, StrictInt] = Field(description="Total valor anticipos. Suma de todos los pagos anticipados. <br><i>Campo oficial DIAN &lt;PrePaidAmount&gt;</i>", alias="advanceTotal")
    payable_total: Union[StrictFloat, StrictInt] = Field(description="Total valor factura. Valor total de ítems (incluyendo cargos y descuentos a nivel de ítems) + valor tributos + valor cargos – valor descuentos. <br><i>Campo oficial DIAN &lt;PayableAmount&gt;</i>", alias="payableTotal")
    currency_code: Optional[StrictStr] = Field(default=None, description="Código de moneda de la transacción. <br><i>Asociado en diferentes seccionaes en el Campos oficial DIAN &lt;@currencyID&gt;</i>", alias="currencyCode")
    __properties: ClassVar[List[str]] = ["grossTotal", "taxableTotal", "taxTotal", "discountTotal", "chargeTotal", "advanceTotal", "payableTotal", "currencyCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TotalAmounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TotalAmounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "grossTotal": obj.get("grossTotal"),
            "taxableTotal": obj.get("taxableTotal"),
            "taxTotal": obj.get("taxTotal"),
            "discountTotal": obj.get("discountTotal"),
            "chargeTotal": obj.get("chargeTotal"),
            "advanceTotal": obj.get("advanceTotal"),
            "payableTotal": obj.get("payableTotal"),
            "currencyCode": obj.get("currencyCode")
        })
        return _obj


