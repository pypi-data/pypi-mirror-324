# coding: utf-8

"""
    API Alegra Proveedor Electrónico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateAdjustmentNoteSupportDocumentRequestDiscrepanciesInner(BaseModel):
    """
    CreateAdjustmentNoteSupportDocumentRequestDiscrepanciesInner
    """ # noqa: E501
    response_code: Union[StrictFloat, StrictInt] = Field(description="Código de descripción de la corrección, ver lista de valores admitidos por la dian. Valores proibles: <br> - `1`: Devolución parcial de los bienes y/o no aceptación parcial del servicio. <br> - `2`: Anulación del documento soporte en adquisiciones efectuadas a sujetos no obligados a expedir factura de venta o documento equivalente. <br> - `3`: Rebaja  o descuento parcial o total. <br> - `4`: Ajuste de precio. <br> - `5`: Otros. <br><i>Campo oficial DIAN &lt;ResponseCode&gt;</i>", alias="responseCode")
    description: Optional[Annotated[str, Field(min_length=20, strict=True, max_length=5000)]] = Field(default=None, description="Descripción de la naturaleza de la corrección. <br><i>Campo oficial DIAN &lt;Description&gt;</i>")
    __properties: ClassVar[List[str]] = ["responseCode", "description"]

    @field_validator('response_code')
    def response_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3, 4, 5]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAdjustmentNoteSupportDocumentRequestDiscrepanciesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAdjustmentNoteSupportDocumentRequestDiscrepanciesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "responseCode": obj.get("responseCode"),
            "description": obj.get("description")
        })
        return _obj


