# coding: utf-8

"""
    API Alegra Proveedor Electrónico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.create_payroll_request_government_data_deducciones_anticipos import CreatePayrollRequestGovernmentDataDeduccionesAnticipos
from openapi_client.models.create_payroll_request_government_data_deducciones_fondo_pension import CreatePayrollRequestGovernmentDataDeduccionesFondoPension
from openapi_client.models.create_payroll_request_government_data_deducciones_fondo_sp import CreatePayrollRequestGovernmentDataDeduccionesFondoSP
from openapi_client.models.create_payroll_request_government_data_deducciones_libranzas import CreatePayrollRequestGovernmentDataDeduccionesLibranzas
from openapi_client.models.create_payroll_request_government_data_deducciones_otras_deducciones import CreatePayrollRequestGovernmentDataDeduccionesOtrasDeducciones
from openapi_client.models.create_payroll_request_government_data_deducciones_pagos_terceros import CreatePayrollRequestGovernmentDataDeduccionesPagosTerceros
from openapi_client.models.create_payroll_request_government_data_deducciones_salud import CreatePayrollRequestGovernmentDataDeduccionesSalud
from openapi_client.models.create_payroll_request_government_data_deducciones_sanciones import CreatePayrollRequestGovernmentDataDeduccionesSanciones
from openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos import CreatePayrollRequestGovernmentDataDeduccionesSindicatos
from typing import Optional, Set
from typing_extensions import Self

class CreatePayrollRequestGovernmentDataDeducciones(BaseModel):
    """
    Objeto con la información de las deducciones del documento
    """ # noqa: E501
    salud: CreatePayrollRequestGovernmentDataDeduccionesSalud = Field(alias="Salud")
    fondo_pension: CreatePayrollRequestGovernmentDataDeduccionesFondoPension = Field(alias="FondoPension")
    fondo_sp: Optional[CreatePayrollRequestGovernmentDataDeduccionesFondoSP] = Field(default=None, alias="FondoSP")
    sindicatos: Optional[CreatePayrollRequestGovernmentDataDeduccionesSindicatos] = Field(default=None, alias="Sindicatos")
    sanciones: Optional[CreatePayrollRequestGovernmentDataDeduccionesSanciones] = Field(default=None, alias="Sanciones")
    libranzas: Optional[CreatePayrollRequestGovernmentDataDeduccionesLibranzas] = Field(default=None, alias="Libranzas")
    pagos_terceros: Optional[CreatePayrollRequestGovernmentDataDeduccionesPagosTerceros] = Field(default=None, alias="PagosTerceros")
    anticipos: Optional[CreatePayrollRequestGovernmentDataDeduccionesAnticipos] = Field(default=None, alias="Anticipos")
    otras_deducciones: Optional[CreatePayrollRequestGovernmentDataDeduccionesOtrasDeducciones] = Field(default=None, alias="OtrasDeducciones")
    pension_voluntaria: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor correspondiente al ahorro que hace el trabajador para complementar su pension obligatoria o cumplir metas especificas.", alias="PensionVoluntaria")
    retencion_fuente: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Si hubiere lugar, la empresa deberá calcular y retener al empleado el valor correspondiente a retención en la fuente por ingresos laborales. Este valor será declarado y consignado en la respectiva declaración mensual de retención en la fuente.", alias="RetencionFuente")
    afc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Corresponde a (Ahorro Fomento a la contruccion)", alias="AFC")
    cooperativa: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Las cuotas o aportes que los empleados hagan a las cooperativas legalmente constituidas", alias="Cooperativa")
    embargo_fiscal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Los embargos ordenados por autoridad judicial competente contra los empleados deben ser descontados de la nómina por la empresa y consignarlos en la cuenta que el juez haya ordenado.", alias="EmbargoFiscal")
    plan_complementarios: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor de planes complementarios de salud al que el trabajador se encuentran afiliado, siempre que medie autorización del empleado.", alias="PlanComplementarios")
    educacion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor de servicios educativos que el trabajador autorice descuento.", alias="Educacion")
    reintegro: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que le regresa el trabajador a la empresa por un devengo mal realizado en otro pago de nómina", alias="Reintegro")
    deuda: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor que se deba pagar por las obligaciones que el empleado tenga con su empresa, como puede ser un crédito que ésta le haya otorgado, o como compensación por algún perjuicio o detrimento económico que el empleado le haya causado a la empresa.", alias="Deuda")
    __properties: ClassVar[List[str]] = ["Salud", "FondoPension", "FondoSP", "Sindicatos", "Sanciones", "Libranzas", "PagosTerceros", "Anticipos", "OtrasDeducciones", "PensionVoluntaria", "RetencionFuente", "AFC", "Cooperativa", "EmbargoFiscal", "PlanComplementarios", "Educacion", "Reintegro", "Deuda"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePayrollRequestGovernmentDataDeducciones from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of salud
        if self.salud:
            _dict['Salud'] = self.salud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fondo_pension
        if self.fondo_pension:
            _dict['FondoPension'] = self.fondo_pension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fondo_sp
        if self.fondo_sp:
            _dict['FondoSP'] = self.fondo_sp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sindicatos
        if self.sindicatos:
            _dict['Sindicatos'] = self.sindicatos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sanciones
        if self.sanciones:
            _dict['Sanciones'] = self.sanciones.to_dict()
        # override the default output from pydantic by calling `to_dict()` of libranzas
        if self.libranzas:
            _dict['Libranzas'] = self.libranzas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pagos_terceros
        if self.pagos_terceros:
            _dict['PagosTerceros'] = self.pagos_terceros.to_dict()
        # override the default output from pydantic by calling `to_dict()` of anticipos
        if self.anticipos:
            _dict['Anticipos'] = self.anticipos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of otras_deducciones
        if self.otras_deducciones:
            _dict['OtrasDeducciones'] = self.otras_deducciones.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePayrollRequestGovernmentDataDeducciones from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Salud": CreatePayrollRequestGovernmentDataDeduccionesSalud.from_dict(obj["Salud"]) if obj.get("Salud") is not None else None,
            "FondoPension": CreatePayrollRequestGovernmentDataDeduccionesFondoPension.from_dict(obj["FondoPension"]) if obj.get("FondoPension") is not None else None,
            "FondoSP": CreatePayrollRequestGovernmentDataDeduccionesFondoSP.from_dict(obj["FondoSP"]) if obj.get("FondoSP") is not None else None,
            "Sindicatos": CreatePayrollRequestGovernmentDataDeduccionesSindicatos.from_dict(obj["Sindicatos"]) if obj.get("Sindicatos") is not None else None,
            "Sanciones": CreatePayrollRequestGovernmentDataDeduccionesSanciones.from_dict(obj["Sanciones"]) if obj.get("Sanciones") is not None else None,
            "Libranzas": CreatePayrollRequestGovernmentDataDeduccionesLibranzas.from_dict(obj["Libranzas"]) if obj.get("Libranzas") is not None else None,
            "PagosTerceros": CreatePayrollRequestGovernmentDataDeduccionesPagosTerceros.from_dict(obj["PagosTerceros"]) if obj.get("PagosTerceros") is not None else None,
            "Anticipos": CreatePayrollRequestGovernmentDataDeduccionesAnticipos.from_dict(obj["Anticipos"]) if obj.get("Anticipos") is not None else None,
            "OtrasDeducciones": CreatePayrollRequestGovernmentDataDeduccionesOtrasDeducciones.from_dict(obj["OtrasDeducciones"]) if obj.get("OtrasDeducciones") is not None else None,
            "PensionVoluntaria": obj.get("PensionVoluntaria"),
            "RetencionFuente": obj.get("RetencionFuente"),
            "AFC": obj.get("AFC"),
            "Cooperativa": obj.get("Cooperativa"),
            "EmbargoFiscal": obj.get("EmbargoFiscal"),
            "PlanComplementarios": obj.get("PlanComplementarios"),
            "Educacion": obj.get("Educacion"),
            "Reintegro": obj.get("Reintegro"),
            "Deuda": obj.get("Deuda")
        })
        return _obj


