# coding: utf-8

"""
    API Alegra Proveedor Electr贸nico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateInvoiceRequestItemsInnerAllOfTaxesInner(BaseModel):
    """
    Objeto que contiene la informaci贸n tributaria del articulo y/o servicio 
    """ # noqa: E501
    tax_code: StrictStr = Field(description="C贸digo o identificador del impuesto. Se debe colocar el C贸digo que corresponda de la tabla de tipos de tributos/impuestos disponibles de la DIAN. <br><i>Campo oficial DIAN &lt;ID&gt;</i>", alias="taxCode")
    tax_amount: Union[StrictFloat, StrictInt] = Field(description="Valor y/o importe del impuesto. <br><i>Campo oficial DIAN &lt;TaxAmount&gt;</i>", alias="taxAmount")
    tax_percentage: StrictStr = Field(description="Porcentaje o tarifa de impuesto. Ejemplo: Para indicar la tarifa general asociada al impuesto de IVA, se debe enviar un porcentaje de 19. <br><i>Campo oficial DIAN &lt;Percent&gt;</i>", alias="taxPercentage")
    taxable_amount: Union[StrictFloat, StrictInt] = Field(description="Base Imponible sobre la que se calcula el valor del impuesto. <br><i>Campo oficial DIAN &lt;TaxableAmount&gt;</i>", alias="taxableAmount")
    tax_base_unit_measure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unidad de medida base para el tributo. Usado en el caso de que el tributo es un valor fijo por unidad tributada: informar el valor del tributo por unidadtributada.", alias="taxBaseUnitMeasure")
    tax_per_unit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Valor del tributo por unidad. Correspode al valor nominal del tributo por unidad", alias="taxPerUnitAmount")
    __properties: ClassVar[List[str]] = ["taxCode", "taxAmount", "taxPercentage", "taxableAmount", "taxBaseUnitMeasure", "taxPerUnitAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInvoiceRequestItemsInnerAllOfTaxesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInvoiceRequestItemsInnerAllOfTaxesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "taxCode": obj.get("taxCode"),
            "taxAmount": obj.get("taxAmount"),
            "taxPercentage": obj.get("taxPercentage"),
            "taxableAmount": obj.get("taxableAmount"),
            "taxBaseUnitMeasure": obj.get("taxBaseUnitMeasure"),
            "taxPerUnitAmount": obj.get("taxPerUnitAmount")
        })
        return _obj


