name: Python Run Tests Unix

on:
  push:
    branches: [main]
    paths:
      - "**"
  pull_request:
    branches: [main]
    paths:
      - "**"
      - "!README.md"
      - "!**/meta.yaml"
      - "!**/pyproject.toml"

jobs:
  test:
    name: Test Env ${{ matrix.download_name }}-${{ matrix.python-version}}
    runs-on: ${{ matrix.os }}
    env:
        TERM: unknown
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR: SNOWFLAKE_JWT
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE: DEVOPS
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA: TRIAL_SCHEMA
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE: COMPUTE_WH
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE: ACCOUNTADMIN
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu
          - os: ubuntu-latest
            python-version: "3.9"
            cloud-provider: aws
            snow_cli_version: "2.8.2"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.10"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.11"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: linux
          - os: ubuntu-latest
            python-version: "3.12"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: linux 
          
          # macOS  
          - os: macos-latest
            python-version: "3.9"
            cloud-provider: aws
            snow_cli_version: "2.8.2"
            download_name: macos
          - os: macos-latest
            python-version: "3.10"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: macos   
          - os: macos-latest
            python-version: "3.11"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: macos
          - os: macos-latest
            python-version: "3.12"
            cloud-provider: aws
            snow_cli_version: "3.2.0"
            download_name: macos    


    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print Current Python Env
        run: |
          python --version && pip --version

      - name: Set up Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@main
        with:
          cli-version: ${{ matrix.snow_cli_version }}
          default-config-file-path: ".github/workflows/config/config.toml"

      - name: Execute Snowflake CLI
        run: |
          snow --info   
          snow --version

      - name: Set up key (Unix)
        if: runner.os != 'Windows'
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          echo "PARENT_DIR=$PARENT_DIR" >> $GITHUB_ENV
          echo "PRIVATE_KEY_FILE=$PRIVATE_KEY_FILE" >> $GITHUB_ENV

          mkdir -v $PARENT_DIR/.ssh && ls -la $PARENT_DIR && pwd
          echo "${SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW}" > $PRIVATE_KEY_FILE
          sudo chmod 600 $PRIVATE_KEY_FILE
          file $PRIVATE_KEY_FILE && ls -la $PRIVATE_KEY_FILE
        env:
          SNOWFLAKE_CONNECTIONS_MYCONNECTION_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}

      - name: Set up Connection Snowflake CLI (Unix)
        if: runner.os != 'Windows'
        run: |
          PARENT_DIR=$(dirname "${{ github.workspace }}")
          PRIVATE_KEY_FILE=$PARENT_DIR/.ssh/key.p8
          CONFIG_FILE=".github/workflows/config/config.toml"
          
          if [[ "$RUNNER_OS" == "Linux" ]]; then 
            SNOWFLAKE_CONFIG_DIR="/home/runner/.snowflake"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            SNOWFLAKE_CONFIG_DIR="/$HOME/.snowflake"
          fi
          SNOWFLAKE_CONFIG_PATH="$SNOWFLAKE_CONFIG_DIR/config.toml"
          
          mkdir -p "$SNOWFLAKE_CONFIG_DIR"

          echo "[connections.myconnection]" > "$CONFIG_FILE"
          echo "authenticator = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_AUTHENTICATOR\"" >> "$CONFIG_FILE"
          echo "schema = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_SCHEMA\"" >> "$CONFIG_FILE"
          echo "account = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT\"" >> "$CONFIG_FILE"
          echo "user = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER\"" >> "$CONFIG_FILE"
          echo "database = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE\"" >> "$CONFIG_FILE"
          echo "warehouse = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_WAREHOUSE\"" >> "$CONFIG_FILE"
          echo "role = \"$SNOWFLAKE_CONNECTIONS_MYCONNECTION_ROLE\"" >> "$CONFIG_FILE"
          echo "private_key_file = \"$PRIVATE_KEY_FILE\"" >> "$CONFIG_FILE"

          cp "$CONFIG_FILE" "$SNOWFLAKE_CONFIG_PATH"
          chmod 600 "$PRIVATE_KEY_FILE"
          chmod 600 "$SNOWFLAKE_CONFIG_PATH"

          echo "Snowflake configuration at $SNOWFLAKE_CONFIG_PATH:"
          cat "$SNOWFLAKE_CONFIG_PATH"
        shell: bash
         
      - name: Test Snowflake CLI
        run: |
          snow --info && snow --version
          snow connection test -c myconnection
          snow sql -q " Select current_organization_name(); select current_account_name();" -c myconnection
          snow connection set-default myconnection
          snow connection list        
     


