name: Hadoop on Windows

on:
  push:
    branches:
      - main
    paths:
      - "**"
      - "!README.md"
      - "!**/meta.yaml"
      - "!**/pyproject.toml"

jobs:
  setup-hadoop:
    runs-on: windows-latest
    env:
      HADOOP_HOME: "${{ github.workspace }}\\hadoop"
      HADOOP_VERSION: "3.3.6"
      JAVA_VERSION: "11"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Java JDK
      uses: actions/setup-java@v3
      with:
        java-version: '${{ env.JAVA_VERSION }}'
        distribution: 'temurin'

    - name: Download Winutils
      shell: pwsh
      run: |
        $winutilsRepo = "https://github.com/cdarlint/winutils"
        $hadoopDir = "hadoop-${{ env.HADOOP_VERSION }}/bin"
        $tempDir = "$env:RUNNER_TEMP\hadoop_bin"
        
        New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
        
        try {
          Invoke-WebRequest -Uri "$winutilsRepo/archive/master.zip" -OutFile "$tempDir\winutils.zip"
          
          Expand-Archive -Path "$tempDir\winutils.zip" -DestinationPath $tempDir -Force
          
          $sourceDir = Join-Path -Path $tempDir -ChildPath "winutils-master\$hadoopDir"
          $destinationDir = "${{ env.HADOOP_HOME }}\bin"
          
          New-Item -ItemType Directory -Force -Path $destinationDir | Out-Null
          
          Get-ChildItem -Path $sourceDir | Move-Item -Destination $destinationDir -Force
          
          $winutilsPath = Join-Path -Path $destinationDir -ChildPath "winutils.exe"
          
          if (-Not (Test-Path $winutilsPath)) {
            throw "winutils.exe not found in $destinationDir"
          }
          
          Write-Output "Winutils successfully installed at $winutilsPath"
        }
        catch {
          Write-Error "Winutils download or installation failed: $_"
          exit 1
        }

    - name: Configure Hadoop Environment
      shell: pwsh
      run: |
        Write-Output "Configuring Hadoop environment variables"
        
        # Set HADOOP_HOME
        echo "HADOOP_HOME=${{ env.HADOOP_HOME }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Update PATH with Hadoop bin directory
        $hadoopBinPath = "${{ env.HADOOP_HOME }}\bin"
        echo "PATH=$env:PATH;$hadoopBinPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Verify configurations
        Write-Output "HADOOP_HOME set to: ${{ env.HADOOP_HOME }}"
        Write-Output "Hadoop bin added to PATH"

    - name: Verify Hadoop Installation
      shell: pwsh
      run: |
        # Check Hadoop version
        try {
          $hadoopVersion = & "${{ env.HADOOP_HOME }}\bin\hadoop" version
          Write-Output "Hadoop version verified: $hadoopVersion"
        }
        catch {
          Write-Error "Hadoop version check failed: $_"
          exit 1
        }
        
        # List Hadoop home contents
        Write-Output "Hadoop Home Contents:"
        Get-ChildItem -Path "${{ env.HADOOP_HOME }}" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize

    - name: Basic Hadoop Configuration Test
      shell: pwsh
      run: |
        # Simple test to ensure basic Hadoop functionality
        try {
          # Create a test directory in HDFS
          & "${{ env.HADOOP_HOME }}\bin\hdfs" dfs -mkdir -p /test
          
          # List the directory to verify
          $testList = & "${{ env.HADOOP_HOME }}\bin\hdfs" dfs -ls /
          Write-Output "HDFS Basic Test Passed"
          Write-Output "Directory Listing: $testList"
        }
        catch {
          Write-Error "Hadoop HDFS test failed: $_"
          exit 1
        }