import logging
from .filter_parser import FilterParser
from .wfp_filter import WfpFilter, WfpCondition, WINDIVERT_TO_WFP_MAPPING, FWP_ACTION_BLOCK, FWP_ACTION_PERMIT
from win32more.Windows.Win32.NetworkManagement.WindowsFilteringPlatform import (
    FWPM_LAYER_ALE_AUTH_CONNECT_V4,
    FWPM_SUBLAYER_UNIVERSAL,
    FWP_MATCH_RANGE,
    FWP_MATCH_EQUAL,
)

logger = logging.getLogger(__name__)


def build_wfp_filter_from_expression(
    filter_string: str,
    filter_name: str = "PyWFP Filter",
    filter_description: str = "Filter generated by PyWFP in Windivert-style expression",
):
    """
    Parses and converts a FilterExpression into a WfpFilter.
    Only supports a pure conjunction (AND) as the windows filtering platform does not support (OR) or (NOT) operations.
    """
    try:
        logger.info(f"Parsing filter string: {filter_string}")
        expr = FilterParser.parse(filter_string)
    except ValueError as e:
        logger.error(f"Error parsing filter: {e}")
        return

    logger.info("Building WFP filter from expression")
    try:
        conditions = expr.flatten()
        logger.debug(f"Flattened conditions: {[f'{c.field}={c.value}' for c in conditions]}")

    except ValueError as e:
        logger.error(f"Failed to flatten filter expression: {e}")
        raise ValueError(f"Filter expression error: {e}")

    # Default to outbound if no direction specified
    layer = FWPM_LAYER_ALE_AUTH_CONNECT_V4

    # First pass: look for direction (inbound/outbound)
    for cond in conditions:
        field_key = cond.field.lower()
        if field_key in ("inbound", "outbound"):
            layer, _, _ = WINDIVERT_TO_WFP_MAPPING[field_key]
            break

    wfp_filter = WfpFilter(
        name=filter_name,
        description=filter_description,
        layer=layer,
        sublayer=FWPM_SUBLAYER_UNIVERSAL,
        action=FWP_ACTION_BLOCK,  # Default action
    )

    # Second pass: add all other conditions and handle action
    for cond in conditions:
        field_key = cond.field.lower()
        logger.debug(f"Processing condition: {field_key}")
        if field_key == "action":
            if cond.value and cond.value.lower() == "allow":
                wfp_filter.action = FWP_ACTION_PERMIT
            continue

        if field_key in ("inbound", "outbound"):
            continue

        op = cond.operator if cond.operator is not None else "flag"
        value = cond.value if cond.value is not None else "true"

        if field_key in WINDIVERT_TO_WFP_MAPPING:
            mapping = WINDIVERT_TO_WFP_MAPPING[field_key]
            wfp_key, value_type = mapping[:2]
            transform = mapping[2]

            if value_type is None:
                continue

            try:
                transformed_value = transform(value)
                if isinstance(transformed_value, tuple):
                    # It's a range - pass the entire tuple to WfpCondition
                    wcond = WfpCondition(wfp_key, transformed_value, value_type, FWP_MATCH_RANGE)
                else:
                    # Single value
                    wcond = WfpCondition(wfp_key, transformed_value, value_type, FWP_MATCH_EQUAL)

                wfp_filter.add_condition(wcond)
            except Exception as ex:
                raise ValueError(f"Error transforming value for field '{field_key}': {ex}")
        else:
            print(f"Warning: Unsupported or unrecognized field '{field_key}' - ignoring it.")
    return wfp_filter
