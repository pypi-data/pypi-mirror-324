"""
Main PyWFP class providing a high-level interface for WFP filter management.
"""

import logging
from contextlib import contextmanager
from typing import List, Dict, Optional

from .filter_parser import FilterParser
from .wfp_engine import WfpEngine
from .filter_builder import build_wfp_filter_from_expression

logger = logging.getLogger(__name__)


class WFPError(Exception):
    """Base exception for PyWFP errors"""

    pass


class PyWFP:
    def __init__(self, session_name: str = "PyWFP Session"):
        """
        Initialize PyWFP with an optional session name.

        Args:
            session_name: Name for the WFP session (default: "PyWFP Session")
        """
        self.session_name = session_name
        self._engine = WfpEngine()

    @contextmanager
    def session(self):
        """
        Context manager for WFP engine sessions.

        Usage:
            with pywfp.session():
                pywfp.add_filter("outbound and tcp")
        """
        try:
            self._engine.open(session_name=self.session_name)
            yield self
        finally:
            self._engine.close()

    def add_filter(
        self,
        filter_string: str,
        filter_name: str = "PyWFP Filter",
        filter_description: str = "Filter generated by PyWFP in Windivert-style expression",
        weight: int = None,
    ) -> None:
        """
        Add a new WFP filter using Windivert-style filter syntax.

        Args:
            filter_string: Filter string in Windivert syntax
            filter_name: Name for the filter
            filter_description: Description for the filter

        Raises:
            WFPError: If filter creation or addition fails
        """
        try:
            wfp_filter = build_wfp_filter_from_expression(filter_string)
            self._engine.add_filter(wfp_filter, filter_name, filter_description, weight)
            logger.info(f"Added filter: {filter_string}")
        except Exception as e:
            raise WFPError(f"Failed to add filter: {e}") from e

    def list_filters(self) -> List[Dict]:
        """
        List all currently installed WFP filters.

        Returns:
            List of filter dictionaries containing filter details
        """
        try:
            return self._engine.list_filters()
        except Exception as e:
            raise WFPError(f"Failed to list filters: {e}") from e

    def get_filter(self, name: str) -> Optional[Dict]:
        """
        Get a specific filter by name.

        Args:
            name: Name of the filter to find

        Returns:
            Filter dictionary if found, None otherwise
        """
        filters = self.list_filters()
        return next((f for f in filters if f["name"] == name), None)

    @staticmethod
    def validate_filter(filter_string: str) -> bool:
        """
        Validate a filter string without adding it.

        Args:
            filter_string: Filter string to validate

        Returns:
            True if valid, False otherwise
        """
        try:
            FilterParser.parse(filter_string)
            return True
        except Exception:
            return False
