"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Generated by https://github.com/foxglove/schemas"""

import builtins
import collections.abc
from . import Color_pb2 as foxglove_Color_pb2
from . import Point2_pb2 as foxglove_Point2_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class PointsAnnotation(google.protobuf.message.Message):
    """An array of points on a 2D image"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[PointsAnnotation._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: PointsAnnotation._Type.ValueType  # 0
        POINTS: PointsAnnotation._Type.ValueType  # 1
        """Individual points: 0, 1, 2, ..."""
        LINE_LOOP: PointsAnnotation._Type.ValueType  # 2
        """Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0"""
        LINE_STRIP: PointsAnnotation._Type.ValueType  # 3
        """Connected line segments: 0-1, 1-2, ..., (n-1)-n"""
        LINE_LIST: PointsAnnotation._Type.ValueType  # 4
        """Individual line segments: 0-1, 2-3, 4-5, ..."""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """Type of points annotation"""

    UNKNOWN: PointsAnnotation.Type.ValueType  # 0
    POINTS: PointsAnnotation.Type.ValueType  # 1
    """Individual points: 0, 1, 2, ..."""
    LINE_LOOP: PointsAnnotation.Type.ValueType  # 2
    """Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0"""
    LINE_STRIP: PointsAnnotation.Type.ValueType  # 3
    """Connected line segments: 0-1, 1-2, ..., (n-1)-n"""
    LINE_LIST: PointsAnnotation.Type.ValueType  # 4
    """Individual line segments: 0-1, 2-3, 4-5, ..."""

    TIMESTAMP_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    POINTS_FIELD_NUMBER: builtins.int
    OUTLINE_COLOR_FIELD_NUMBER: builtins.int
    OUTLINE_COLORS_FIELD_NUMBER: builtins.int
    FILL_COLOR_FIELD_NUMBER: builtins.int
    THICKNESS_FIELD_NUMBER: builtins.int
    type: global___PointsAnnotation.Type.ValueType
    """Type of points annotation to draw"""
    thickness: builtins.float
    """Stroke thickness in pixels"""
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp of annotation"""

    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[foxglove_Point2_pb2.Point2]:
        """Points in 2D image coordinates (pixels).
        These coordinates use the top-left corner of the top-left pixel of the image as the origin.
        """

    @property
    def outline_color(self) -> foxglove_Color_pb2.Color:
        """Outline color"""

    @property
    def outline_colors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[foxglove_Color_pb2.Color]:
        """Per-point colors, if `type` is `POINTS`, or per-segment stroke colors, if `type` is `LINE_LIST`, `LINE_STRIP` or `LINE_LOOP`."""

    @property
    def fill_color(self) -> foxglove_Color_pb2.Color:
        """Fill color"""

    def __init__(
        self,
        *,
        timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        type: global___PointsAnnotation.Type.ValueType = ...,
        points: collections.abc.Iterable[foxglove_Point2_pb2.Point2] | None = ...,
        outline_color: foxglove_Color_pb2.Color | None = ...,
        outline_colors: collections.abc.Iterable[foxglove_Color_pb2.Color] | None = ...,
        fill_color: foxglove_Color_pb2.Color | None = ...,
        thickness: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fill_color", b"fill_color", "outline_color", b"outline_color", "timestamp", b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fill_color", b"fill_color", "outline_color", b"outline_color", "outline_colors", b"outline_colors", "points", b"points", "thickness", b"thickness", "timestamp", b"timestamp", "type", b"type"]) -> None: ...

global___PointsAnnotation = PointsAnnotation
