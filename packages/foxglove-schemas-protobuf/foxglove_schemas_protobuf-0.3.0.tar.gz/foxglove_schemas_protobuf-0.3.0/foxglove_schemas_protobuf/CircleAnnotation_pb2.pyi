"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Generated by https://github.com/foxglove/schemas"""

import builtins
from . import Color_pb2 as foxglove_Color_pb2
from . import Point2_pb2 as foxglove_Point2_pb2
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CircleAnnotation(google.protobuf.message.Message):
    """A circle annotation on a 2D image"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIMESTAMP_FIELD_NUMBER: builtins.int
    POSITION_FIELD_NUMBER: builtins.int
    DIAMETER_FIELD_NUMBER: builtins.int
    THICKNESS_FIELD_NUMBER: builtins.int
    FILL_COLOR_FIELD_NUMBER: builtins.int
    OUTLINE_COLOR_FIELD_NUMBER: builtins.int
    diameter: builtins.float
    """Circle diameter in pixels"""
    thickness: builtins.float
    """Line thickness in pixels"""
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp of circle"""

    @property
    def position(self) -> foxglove_Point2_pb2.Point2:
        """Center of the circle in 2D image coordinates (pixels).
        The coordinate uses the top-left corner of the top-left pixel of the image as the origin.
        """

    @property
    def fill_color(self) -> foxglove_Color_pb2.Color:
        """Fill color"""

    @property
    def outline_color(self) -> foxglove_Color_pb2.Color:
        """Outline color"""

    def __init__(
        self,
        *,
        timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        position: foxglove_Point2_pb2.Point2 | None = ...,
        diameter: builtins.float = ...,
        thickness: builtins.float = ...,
        fill_color: foxglove_Color_pb2.Color | None = ...,
        outline_color: foxglove_Color_pb2.Color | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fill_color", b"fill_color", "outline_color", b"outline_color", "position", b"position", "timestamp", b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["diameter", b"diameter", "fill_color", b"fill_color", "outline_color", b"outline_color", "position", b"position", "thickness", b"thickness", "timestamp", b"timestamp"]) -> None: ...

global___CircleAnnotation = CircleAnnotation
