from _typeshed import Incomplete
from dataclasses import dataclass
from openai import pagination as pagination

@dataclass
class ResultBase:
    status: bool = ...
    reason_status_0: str = ...
    def __init__(self, status=..., reason_status_0=...) -> None: ...

@dataclass
class Results(ResultBase):
    raw_results: list[pagination.SyncCursorPage] | None = ...
    def __init__(self, status=..., reason_status_0=..., raw_results=...) -> None: ...

@dataclass
class IdNameListResults(Results):
    names: list[str] = ...
    ids: list[str] = ...
    dict_name_id: dict = ...
    def __init__(self, status=..., reason_status_0=..., raw_results=..., names=..., ids=..., dict_name_id=...) -> None: ...

@dataclass
class Result(ResultBase):
    raw_result: pagination.SyncCursorPage | None = ...
    def __init__(self, status=..., reason_status_0=..., raw_result=...) -> None: ...

@dataclass
class IdNameListResult(Result):
    names: list[str] = ...
    ids: list[str] = ...
    dict_name_id: dict = ...
    def __init__(self, status=..., reason_status_0=..., raw_result=..., names=..., ids=..., dict_name_id=...) -> None: ...

class Storage:
    client: Incomplete
    def __init__(self, api_key: str) -> None: ...
    def get_uploaded_file_list(self) -> IdNameListResults: ...
    def get_vector_store_list(self) -> IdNameListResults: ...
    def get_vector_store_uploaded_file_list(self, vs_name: str): ...
    def add_files_to_vector_store(self, file_paths: list[str], vs_name: str): ...
    def delete_files_from_vector_store(self, filenames: list[str], vs_name: str): ...

class Assistant:
    client: Incomplete
    thread: Incomplete
    def __init__(self, api_key) -> None: ...
    def set_id(self, id) -> None: ...
    def new_chat_and_run(self, prompt: Incomplete | None = None): ...
