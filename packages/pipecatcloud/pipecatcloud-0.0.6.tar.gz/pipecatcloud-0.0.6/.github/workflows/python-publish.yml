# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Setup virtual environment
        run: |
          python -m venv .venv
      - name: Install basic Python dependencies
        run: |
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Build project
        run: |
          source .venv/bin/activate
          python -m build
      - name: Install project and other Python dependencies
        run: |
          source .venv/bin/activate
          pip install --editable .
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write
      contents: read

    environment:
      name: pypi
      url: https://pypi.org/p/pipecatcloud

    steps:
      - uses: actions/checkout@v4

      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

      - name: Read CHANGELOG
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
            cat CHANGELOG.md >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "CHANGELOG_CONTENT=No changelog available." >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: |
            ${{ env.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false
          files: |
            dist/*.tar.gz
            dist/*.whl
