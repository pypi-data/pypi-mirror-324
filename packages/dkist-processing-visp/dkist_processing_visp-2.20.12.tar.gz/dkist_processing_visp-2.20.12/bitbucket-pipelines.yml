#Build Configuration for docker deployment to artifactory
image: python:3.11

definitions:
  services:
    redis:
      image: redis
  steps:
    - step: &lint
        caches:
          - pip
        name: Lint
        script:
          - echo "Retrieving and Executing Lint Script"
          - curl -fL https://getcli.jfrog.io | sh
          - ./jfrog rt dl --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD generic-packages/ci_scripts/latest/lint_python.sh
          - cat ci_scripts/latest/lint_python.sh
          - chmod 755 ci_scripts/latest/lint_python.sh
          - ./ci_scripts/latest/lint_python.sh
    - step: &changelog
        caches:
          - pip
        name: Changelog
        script:
          - echo "Retrieving and Executing Changelog Script"
          - curl -fL https://getcli.jfrog.io | sh
          - ./jfrog rt dl --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD generic-packages/ci_scripts/latest/check_changelog.sh
          - cat ci_scripts/latest/check_changelog.sh
          - chmod 755 ci_scripts/latest/check_changelog.sh
          - ./ci_scripts/latest/check_changelog.sh
    - step: &scan
        caches:
          - pip
        name: Scan
        script:
          - echo "Retrieving and Executing Scan Script"
          - curl -fL https://getcli.jfrog.io | sh
          - ./jfrog rt dl --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD generic-packages/ci_scripts/latest/scan_python.sh
          - cat ci_scripts/latest/scan_python.sh
          - chmod 755 ci_scripts/latest/scan_python.sh
          - ./ci_scripts/latest/scan_python.sh
    - step: &test
        caches:
          - pip
        name: Test
        script:
          - pip install -U pip
          - pip install .[test]
          - pytest -v -n auto --cov -m "not development" --dist loadscope dkist_processing_visp
        services:
          - redis
    - step: &push_workflow
        caches:
          - pip
        name: Push Workflow
        script:
          - pip install -U pip
          - pip install .
          - export BUILD_VERSION="${BITBUCKET_TAG:1}"
          - export ARTIFACT_FOLDER="${BITBUCKET_REPO_SLUG}_${BUILD_VERSION}/"
          - python -c "from dkist_processing_core.build_utils import export_dags; import dkist_processing_visp.workflows as workflow_package; export_dags(workflow_package, '${ARTIFACT_FOLDER}')"
          - export SOURCE_PATH="workflow_${BUILD_VERSION}.gz"
          - tar --exclude="bitbucket-pipelines.yml" -cvzf ${SOURCE_PATH} ${ARTIFACT_FOLDER}
          - export TARGET_PATH="generic-packages/dkist-processing-visp/${BUILD_VERSION}/"
          - curl -fL https://getcli.jfrog.io | sh
          - ./jfrog rt u --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD ${SOURCE_PATH} ${TARGET_PATH}
    - step: &push_code
        caches:
          - pip
        name: Push Code
        script:
          - pip install -U pip
          - pip install build twine
          - python -m build --outdir wheelhouse .
          - python -m twine upload --skip-existing wheelhouse/*
    - step: &push_mpw
        caches:
          - pip
          - docker
        services:
          - docker
        name: Push Manual Processing Worker
        script:
          - export BUILD_VERSION="${BITBUCKET_TAG:1}"
          - export BUILD_INSTRUMENT="visp"
          - export BUILD_PACKAGE="dkist_processing_${BUILD_INSTRUMENT}"
          - export BUILD_CONTAINER_NAME="manual-processing-worker-${BUILD_INSTRUMENT}"
          - pip install -U pip
          - pip install .
          - python -c "from dkist_processing_core.build_utils import export_notebook_dockerfile; import ${BUILD_PACKAGE}.workflows as workflow_package; export_notebook_dockerfile(workflow_package, 'notebooks/')"
          - ls -af
          - cat Dockerfile
          - docker login dkistdc-docker.jfrog.io --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          - docker build -t $DOCKER_HUB_URL/${BUILD_CONTAINER_NAME}:latest -t $DOCKER_HUB_URL/${BUILD_CONTAINER_NAME}:${BUILD_VERSION} .
          - docker push -a $DOCKER_HUB_URL/${BUILD_CONTAINER_NAME}
    - step: &docs
        name: Test Docs
        caches:
          - pip
        script:
          - echo "Retrieving and Executing Sphinx Test Script"
          - curl -fL https://getcli.jfrog.io | sh
          - ./jfrog rt dl --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --password $ARTIFACTORY_PASSWORD generic-packages/ci_scripts/latest/test_sphinx.sh
          - cat ci_scripts/latest/test_sphinx.sh
          - chmod 755 ci_scripts/latest/test_sphinx.sh
          - ./ci_scripts/latest/test_sphinx.sh

options:
  max-time: 25
pipelines:
  default:
    - parallel:
      - step: *lint
      - step: *changelog
    - parallel:
      - step: *scan
      - step: *test
      - step: *docs
  tags:
    'v*':
      - parallel:
        - step: *changelog
        - step: *lint
      - parallel:
        - step: *scan
        - step: *test
        - step: *docs
      - parallel:
        - step: *push_workflow
        - step: *push_mpw
      - step: *push_code
