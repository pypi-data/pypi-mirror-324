# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateRoutingRuleGroupDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'evaluation_order': 'float',
        'name': 'str',
        'result_team_id': 'str',
        'and_rules': 'list[str]',
        'or_rules': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'evaluation_order': 'evaluationOrder',
        'name': 'name',
        'result_team_id': 'resultTeamId',
        'and_rules': 'andRules',
        'or_rules': 'orRules'
    }

    def __init__(self, description=None, evaluation_order=None, name=None, result_team_id=None, and_rules=None, or_rules=None):  # noqa: E501
        """UpdateRoutingRuleGroupDto - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._evaluation_order = None
        self._name = None
        self._result_team_id = None
        self._and_rules = None
        self._or_rules = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if evaluation_order is not None:
            self.evaluation_order = evaluation_order
        if name is not None:
            self.name = name
        if result_team_id is not None:
            self.result_team_id = result_team_id
        if and_rules is not None:
            self.and_rules = and_rules
        if or_rules is not None:
            self.or_rules = or_rules

    @property
    def description(self):
        """Gets the description of this UpdateRoutingRuleGroupDto.  # noqa: E501

        The description of the routing rule group  # noqa: E501

        :return: The description of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateRoutingRuleGroupDto.

        The description of the routing rule group  # noqa: E501

        :param description: The description of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def evaluation_order(self):
        """Gets the evaluation_order of this UpdateRoutingRuleGroupDto.  # noqa: E501

        The evaluation order of the routing rule group  # noqa: E501

        :return: The evaluation_order of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._evaluation_order

    @evaluation_order.setter
    def evaluation_order(self, evaluation_order):
        """Sets the evaluation_order of this UpdateRoutingRuleGroupDto.

        The evaluation order of the routing rule group  # noqa: E501

        :param evaluation_order: The evaluation_order of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :type: float
        """

        self._evaluation_order = evaluation_order

    @property
    def name(self):
        """Gets the name of this UpdateRoutingRuleGroupDto.  # noqa: E501

        The name of the routing rule group  # noqa: E501

        :return: The name of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateRoutingRuleGroupDto.

        The name of the routing rule group  # noqa: E501

        :param name: The name of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def result_team_id(self):
        """Gets the result_team_id of this UpdateRoutingRuleGroupDto.  # noqa: E501

        The result team ID of the routing rule group  # noqa: E501

        :return: The result_team_id of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._result_team_id

    @result_team_id.setter
    def result_team_id(self, result_team_id):
        """Sets the result_team_id of this UpdateRoutingRuleGroupDto.

        The result team ID of the routing rule group  # noqa: E501

        :param result_team_id: The result_team_id of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :type: str
        """

        self._result_team_id = result_team_id

    @property
    def and_rules(self):
        """Gets the and_rules of this UpdateRoutingRuleGroupDto.  # noqa: E501

        The rules of the routing rule group  # noqa: E501

        :return: The and_rules of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._and_rules

    @and_rules.setter
    def and_rules(self, and_rules):
        """Sets the and_rules of this UpdateRoutingRuleGroupDto.

        The rules of the routing rule group  # noqa: E501

        :param and_rules: The and_rules of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :type: list[str]
        """

        self._and_rules = and_rules

    @property
    def or_rules(self):
        """Gets the or_rules of this UpdateRoutingRuleGroupDto.  # noqa: E501

        The rules of the routing rule group  # noqa: E501

        :return: The or_rules of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._or_rules

    @or_rules.setter
    def or_rules(self, or_rules):
        """Sets the or_rules of this UpdateRoutingRuleGroupDto.

        The rules of the routing rule group  # noqa: E501

        :param or_rules: The or_rules of this UpdateRoutingRuleGroupDto.  # noqa: E501
        :type: list[str]
        """

        self._or_rules = or_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateRoutingRuleGroupDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateRoutingRuleGroupDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
