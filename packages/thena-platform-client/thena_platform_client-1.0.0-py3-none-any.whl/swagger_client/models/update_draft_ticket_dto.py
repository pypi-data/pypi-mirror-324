# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateDraftTicketDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_agent_id': 'str',
        'description': 'str',
        'submitter_email': 'str',
        'status_id': 'str',
        'priority_id': 'str',
        'type_id': 'str',
        'is_private': 'bool',
        'attachment_urls': 'list[str]',
        'custom_field_values': 'list[ExternalCustomFieldValuesDto]',
        'metadata': 'object',
        'title': 'str',
        'requestor_email': 'str',
        'status': 'str'
    }

    attribute_map = {
        'assigned_agent_id': 'assignedAgentId',
        'description': 'description',
        'submitter_email': 'submitterEmail',
        'status_id': 'statusId',
        'priority_id': 'priorityId',
        'type_id': 'typeId',
        'is_private': 'isPrivate',
        'attachment_urls': 'attachmentUrls',
        'custom_field_values': 'customFieldValues',
        'metadata': 'metadata',
        'title': 'title',
        'requestor_email': 'requestorEmail',
        'status': 'status'
    }

    def __init__(self, assigned_agent_id=None, description=None, submitter_email=None, status_id=None, priority_id=None, type_id=None, is_private=None, attachment_urls=None, custom_field_values=None, metadata=None, title=None, requestor_email=None, status=None):  # noqa: E501
        """UpdateDraftTicketDto - a model defined in Swagger"""  # noqa: E501
        self._assigned_agent_id = None
        self._description = None
        self._submitter_email = None
        self._status_id = None
        self._priority_id = None
        self._type_id = None
        self._is_private = None
        self._attachment_urls = None
        self._custom_field_values = None
        self._metadata = None
        self._title = None
        self._requestor_email = None
        self._status = None
        self.discriminator = None
        if assigned_agent_id is not None:
            self.assigned_agent_id = assigned_agent_id
        if description is not None:
            self.description = description
        if submitter_email is not None:
            self.submitter_email = submitter_email
        if status_id is not None:
            self.status_id = status_id
        if priority_id is not None:
            self.priority_id = priority_id
        if type_id is not None:
            self.type_id = type_id
        if is_private is not None:
            self.is_private = is_private
        if attachment_urls is not None:
            self.attachment_urls = attachment_urls
        if custom_field_values is not None:
            self.custom_field_values = custom_field_values
        if metadata is not None:
            self.metadata = metadata
        if title is not None:
            self.title = title
        if requestor_email is not None:
            self.requestor_email = requestor_email
        if status is not None:
            self.status = status

    @property
    def assigned_agent_id(self):
        """Gets the assigned_agent_id of this UpdateDraftTicketDto.  # noqa: E501

        The ID of the assigned agent  # noqa: E501

        :return: The assigned_agent_id of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._assigned_agent_id

    @assigned_agent_id.setter
    def assigned_agent_id(self, assigned_agent_id):
        """Sets the assigned_agent_id of this UpdateDraftTicketDto.

        The ID of the assigned agent  # noqa: E501

        :param assigned_agent_id: The assigned_agent_id of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._assigned_agent_id = assigned_agent_id

    @property
    def description(self):
        """Gets the description of this UpdateDraftTicketDto.  # noqa: E501

        The description of the ticket  # noqa: E501

        :return: The description of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateDraftTicketDto.

        The description of the ticket  # noqa: E501

        :param description: The description of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def submitter_email(self):
        """Gets the submitter_email of this UpdateDraftTicketDto.  # noqa: E501

        The email of the submitter  # noqa: E501

        :return: The submitter_email of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._submitter_email

    @submitter_email.setter
    def submitter_email(self, submitter_email):
        """Sets the submitter_email of this UpdateDraftTicketDto.

        The email of the submitter  # noqa: E501

        :param submitter_email: The submitter_email of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._submitter_email = submitter_email

    @property
    def status_id(self):
        """Gets the status_id of this UpdateDraftTicketDto.  # noqa: E501

        The ID of the status  # noqa: E501

        :return: The status_id of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this UpdateDraftTicketDto.

        The ID of the status  # noqa: E501

        :param status_id: The status_id of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    @property
    def priority_id(self):
        """Gets the priority_id of this UpdateDraftTicketDto.  # noqa: E501

        The ID of the priority  # noqa: E501

        :return: The priority_id of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this UpdateDraftTicketDto.

        The ID of the priority  # noqa: E501

        :param priority_id: The priority_id of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._priority_id = priority_id

    @property
    def type_id(self):
        """Gets the type_id of this UpdateDraftTicketDto.  # noqa: E501

        The ID of the type  # noqa: E501

        :return: The type_id of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this UpdateDraftTicketDto.

        The ID of the type  # noqa: E501

        :param type_id: The type_id of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def is_private(self):
        """Gets the is_private of this UpdateDraftTicketDto.  # noqa: E501

        Whether the ticket is private  # noqa: E501

        :return: The is_private of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this UpdateDraftTicketDto.

        Whether the ticket is private  # noqa: E501

        :param is_private: The is_private of this UpdateDraftTicketDto.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def attachment_urls(self):
        """Gets the attachment_urls of this UpdateDraftTicketDto.  # noqa: E501

        The attachment URLs  # noqa: E501

        :return: The attachment_urls of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_urls

    @attachment_urls.setter
    def attachment_urls(self, attachment_urls):
        """Sets the attachment_urls of this UpdateDraftTicketDto.

        The attachment URLs  # noqa: E501

        :param attachment_urls: The attachment_urls of this UpdateDraftTicketDto.  # noqa: E501
        :type: list[str]
        """

        self._attachment_urls = attachment_urls

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this UpdateDraftTicketDto.  # noqa: E501

        The custom field values  # noqa: E501

        :return: The custom_field_values of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: list[ExternalCustomFieldValuesDto]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this UpdateDraftTicketDto.

        The custom field values  # noqa: E501

        :param custom_field_values: The custom_field_values of this UpdateDraftTicketDto.  # noqa: E501
        :type: list[ExternalCustomFieldValuesDto]
        """

        self._custom_field_values = custom_field_values

    @property
    def metadata(self):
        """Gets the metadata of this UpdateDraftTicketDto.  # noqa: E501

        Additional metadata for the draft  # noqa: E501

        :return: The metadata of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateDraftTicketDto.

        Additional metadata for the draft  # noqa: E501

        :param metadata: The metadata of this UpdateDraftTicketDto.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def title(self):
        """Gets the title of this UpdateDraftTicketDto.  # noqa: E501

        The title of the ticket  # noqa: E501

        :return: The title of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateDraftTicketDto.

        The title of the ticket  # noqa: E501

        :param title: The title of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def requestor_email(self):
        """Gets the requestor_email of this UpdateDraftTicketDto.  # noqa: E501

        The email of the requestor  # noqa: E501

        :return: The requestor_email of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._requestor_email

    @requestor_email.setter
    def requestor_email(self, requestor_email):
        """Sets the requestor_email of this UpdateDraftTicketDto.

        The email of the requestor  # noqa: E501

        :param requestor_email: The requestor_email of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """

        self._requestor_email = requestor_email

    @property
    def status(self):
        """Gets the status of this UpdateDraftTicketDto.  # noqa: E501

        The status of the draft  # noqa: E501

        :return: The status of this UpdateDraftTicketDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateDraftTicketDto.

        The status of the draft  # noqa: E501

        :param status: The status of this UpdateDraftTicketDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_progress", "ready_to_publish", "published", "discarded"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateDraftTicketDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateDraftTicketDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
