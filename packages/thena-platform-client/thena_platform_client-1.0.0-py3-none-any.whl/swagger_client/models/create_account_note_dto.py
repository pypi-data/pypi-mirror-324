# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAccountNoteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'content': 'str',
        'type': 'str',
        'visibility': 'str',
        'attachment_urls': 'list[str]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'content': 'content',
        'type': 'type',
        'visibility': 'visibility',
        'attachment_urls': 'attachmentUrls'
    }

    def __init__(self, account_id=None, content=None, type=None, visibility=None, attachment_urls=None):  # noqa: E501
        """CreateAccountNoteDto - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._content = None
        self._type = None
        self._visibility = None
        self._attachment_urls = None
        self.discriminator = None
        self.account_id = account_id
        self.content = content
        if type is not None:
            self.type = type
        if visibility is not None:
            self.visibility = visibility
        if attachment_urls is not None:
            self.attachment_urls = attachment_urls

    @property
    def account_id(self):
        """Gets the account_id of this CreateAccountNoteDto.  # noqa: E501

        The identifier of the account to create the note for  # noqa: E501

        :return: The account_id of this CreateAccountNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAccountNoteDto.

        The identifier of the account to create the note for  # noqa: E501

        :param account_id: The account_id of this CreateAccountNoteDto.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def content(self):
        """Gets the content of this CreateAccountNoteDto.  # noqa: E501

        The content of the note  # noqa: E501

        :return: The content of this CreateAccountNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateAccountNoteDto.

        The content of the note  # noqa: E501

        :param content: The content of this CreateAccountNoteDto.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def type(self):
        """Gets the type of this CreateAccountNoteDto.  # noqa: E501

        The identifier / value of the Type attribute of the activity  # noqa: E501

        :return: The type of this CreateAccountNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateAccountNoteDto.

        The identifier / value of the Type attribute of the activity  # noqa: E501

        :param type: The type of this CreateAccountNoteDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def visibility(self):
        """Gets the visibility of this CreateAccountNoteDto.  # noqa: E501

        The visibility of the note  # noqa: E501

        :return: The visibility of this CreateAccountNoteDto.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this CreateAccountNoteDto.

        The visibility of the note  # noqa: E501

        :param visibility: The visibility of this CreateAccountNoteDto.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def attachment_urls(self):
        """Gets the attachment_urls of this CreateAccountNoteDto.  # noqa: E501

        The URLs of the attachments to attach to the note  # noqa: E501

        :return: The attachment_urls of this CreateAccountNoteDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_urls

    @attachment_urls.setter
    def attachment_urls(self, attachment_urls):
        """Sets the attachment_urls of this CreateAccountNoteDto.

        The URLs of the attachments to attach to the note  # noqa: E501

        :param attachment_urls: The attachment_urls of this CreateAccountNoteDto.  # noqa: E501
        :type: list[str]
        """

        self._attachment_urls = attachment_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountNoteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountNoteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
