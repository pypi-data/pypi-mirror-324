# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCommentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'thread_name': 'str',
        'parent_comment_id': 'str',
        'comment_visibility': 'str',
        'comment_type': 'str',
        'metadata': 'object',
        'attachment_urls': 'list[str]'
    }

    attribute_map = {
        'content': 'content',
        'thread_name': 'threadName',
        'parent_comment_id': 'parentCommentId',
        'comment_visibility': 'commentVisibility',
        'comment_type': 'commentType',
        'metadata': 'metadata',
        'attachment_urls': 'attachmentUrls'
    }

    def __init__(self, content=None, thread_name=None, parent_comment_id=None, comment_visibility=None, comment_type=None, metadata=None, attachment_urls=None):  # noqa: E501
        """CreateCommentDto - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._thread_name = None
        self._parent_comment_id = None
        self._comment_visibility = None
        self._comment_type = None
        self._metadata = None
        self._attachment_urls = None
        self.discriminator = None
        self.content = content
        if thread_name is not None:
            self.thread_name = thread_name
        if parent_comment_id is not None:
            self.parent_comment_id = parent_comment_id
        if comment_visibility is not None:
            self.comment_visibility = comment_visibility
        if comment_type is not None:
            self.comment_type = comment_type
        if metadata is not None:
            self.metadata = metadata
        if attachment_urls is not None:
            self.attachment_urls = attachment_urls

    @property
    def content(self):
        """Gets the content of this CreateCommentDto.  # noqa: E501

        The content of the comment  # noqa: E501

        :return: The content of this CreateCommentDto.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateCommentDto.

        The content of the comment  # noqa: E501

        :param content: The content of this CreateCommentDto.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def thread_name(self):
        """Gets the thread_name of this CreateCommentDto.  # noqa: E501

        The name of the comment thread  # noqa: E501

        :return: The thread_name of this CreateCommentDto.  # noqa: E501
        :rtype: str
        """
        return self._thread_name

    @thread_name.setter
    def thread_name(self, thread_name):
        """Sets the thread_name of this CreateCommentDto.

        The name of the comment thread  # noqa: E501

        :param thread_name: The thread_name of this CreateCommentDto.  # noqa: E501
        :type: str
        """

        self._thread_name = thread_name

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this CreateCommentDto.  # noqa: E501

        The parent comment ID  # noqa: E501

        :return: The parent_comment_id of this CreateCommentDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this CreateCommentDto.

        The parent comment ID  # noqa: E501

        :param parent_comment_id: The parent_comment_id of this CreateCommentDto.  # noqa: E501
        :type: str
        """

        self._parent_comment_id = parent_comment_id

    @property
    def comment_visibility(self):
        """Gets the comment_visibility of this CreateCommentDto.  # noqa: E501

        The visibility of the comment  # noqa: E501

        :return: The comment_visibility of this CreateCommentDto.  # noqa: E501
        :rtype: str
        """
        return self._comment_visibility

    @comment_visibility.setter
    def comment_visibility(self, comment_visibility):
        """Sets the comment_visibility of this CreateCommentDto.

        The visibility of the comment  # noqa: E501

        :param comment_visibility: The comment_visibility of this CreateCommentDto.  # noqa: E501
        :type: str
        """

        self._comment_visibility = comment_visibility

    @property
    def comment_type(self):
        """Gets the comment_type of this CreateCommentDto.  # noqa: E501

        The type of the comment  # noqa: E501

        :return: The comment_type of this CreateCommentDto.  # noqa: E501
        :rtype: str
        """
        return self._comment_type

    @comment_type.setter
    def comment_type(self, comment_type):
        """Sets the comment_type of this CreateCommentDto.

        The type of the comment  # noqa: E501

        :param comment_type: The comment_type of this CreateCommentDto.  # noqa: E501
        :type: str
        """

        self._comment_type = comment_type

    @property
    def metadata(self):
        """Gets the metadata of this CreateCommentDto.  # noqa: E501

        The metadata of the comment  # noqa: E501

        :return: The metadata of this CreateCommentDto.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateCommentDto.

        The metadata of the comment  # noqa: E501

        :param metadata: The metadata of this CreateCommentDto.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def attachment_urls(self):
        """Gets the attachment_urls of this CreateCommentDto.  # noqa: E501

        The attachment URLs  # noqa: E501

        :return: The attachment_urls of this CreateCommentDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_urls

    @attachment_urls.setter
    def attachment_urls(self, attachment_urls):
        """Sets the attachment_urls of this CreateCommentDto.

        The attachment URLs  # noqa: E501

        :param attachment_urls: The attachment_urls of this CreateCommentDto.  # noqa: E501
        :type: list[str]
        """

        self._attachment_urls = attachment_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCommentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCommentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
