# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountNoteResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'account': 'str',
        'content': 'str',
        'type': 'str',
        'type_id': 'str',
        'visibility': 'str',
        'attachments': 'list[str]',
        'author': 'str',
        'author_id': 'str',
        'author_email': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'account': 'account',
        'content': 'content',
        'type': 'type',
        'type_id': 'typeId',
        'visibility': 'visibility',
        'attachments': 'attachments',
        'author': 'author',
        'author_id': 'authorId',
        'author_email': 'authorEmail',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, account_id=None, account=None, content=None, type=None, type_id=None, visibility=None, attachments=None, author=None, author_id=None, author_email=None, created_at=None, updated_at=None):  # noqa: E501
        """AccountNoteResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._account = None
        self._content = None
        self._type = None
        self._type_id = None
        self._visibility = None
        self._attachments = None
        self._author = None
        self._author_id = None
        self._author_email = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.account_id = account_id
        self.account = account
        self.content = content
        self.type = type
        self.type_id = type_id
        self.visibility = visibility
        self.attachments = attachments
        self.author = author
        self.author_id = author_id
        self.author_email = author_email
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this AccountNoteResponseDto.  # noqa: E501

        The identifier of the activity  # noqa: E501

        :return: The id of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountNoteResponseDto.

        The identifier of the activity  # noqa: E501

        :param id: The id of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this AccountNoteResponseDto.  # noqa: E501

        The identifier of the account  # noqa: E501

        :return: The account_id of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountNoteResponseDto.

        The identifier of the account  # noqa: E501

        :param account_id: The account_id of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this AccountNoteResponseDto.  # noqa: E501

        The name of the account  # noqa: E501

        :return: The account of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountNoteResponseDto.

        The name of the account  # noqa: E501

        :param account: The account of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def content(self):
        """Gets the content of this AccountNoteResponseDto.  # noqa: E501

        The content of the note  # noqa: E501

        :return: The content of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AccountNoteResponseDto.

        The content of the note  # noqa: E501

        :param content: The content of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def type(self):
        """Gets the type of this AccountNoteResponseDto.  # noqa: E501

        The type of the note  # noqa: E501

        :return: The type of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountNoteResponseDto.

        The type of the note  # noqa: E501

        :param type: The type of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def type_id(self):
        """Gets the type_id of this AccountNoteResponseDto.  # noqa: E501

        The identifier of the type attribute  # noqa: E501

        :return: The type_id of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AccountNoteResponseDto.

        The identifier of the type attribute  # noqa: E501

        :param type_id: The type_id of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def visibility(self):
        """Gets the visibility of this AccountNoteResponseDto.  # noqa: E501

        The visibility of the note  # noqa: E501

        :return: The visibility of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this AccountNoteResponseDto.

        The visibility of the note  # noqa: E501

        :param visibility: The visibility of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def attachments(self):
        """Gets the attachments of this AccountNoteResponseDto.  # noqa: E501

        The attachments of the note  # noqa: E501

        :return: The attachments of this AccountNoteResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AccountNoteResponseDto.

        The attachments of the note  # noqa: E501

        :param attachments: The attachments of this AccountNoteResponseDto.  # noqa: E501
        :type: list[str]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def author(self):
        """Gets the author of this AccountNoteResponseDto.  # noqa: E501

        The name of the author  # noqa: E501

        :return: The author of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AccountNoteResponseDto.

        The name of the author  # noqa: E501

        :param author: The author of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def author_id(self):
        """Gets the author_id of this AccountNoteResponseDto.  # noqa: E501

        The identifier of the author  # noqa: E501

        :return: The author_id of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this AccountNoteResponseDto.

        The identifier of the author  # noqa: E501

        :param author_id: The author_id of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def author_email(self):
        """Gets the author_email of this AccountNoteResponseDto.  # noqa: E501

        The email of the author  # noqa: E501

        :return: The author_email of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this AccountNoteResponseDto.

        The email of the author  # noqa: E501

        :param author_email: The author_email of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if author_email is None:
            raise ValueError("Invalid value for `author_email`, must not be `None`")  # noqa: E501

        self._author_email = author_email

    @property
    def created_at(self):
        """Gets the created_at of this AccountNoteResponseDto.  # noqa: E501

        The timestamp of the note  # noqa: E501

        :return: The created_at of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountNoteResponseDto.

        The timestamp of the note  # noqa: E501

        :param created_at: The created_at of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AccountNoteResponseDto.  # noqa: E501

        The last updated timestamp of the note  # noqa: E501

        :return: The updated_at of this AccountNoteResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AccountNoteResponseDto.

        The last updated timestamp of the note  # noqa: E501

        :param updated_at: The updated_at of this AccountNoteResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountNoteResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountNoteResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
