# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomFieldTypesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'list[str]',
        'numeric': 'list[str]',
        'choice': 'list[str]',
        '_date': 'list[str]',
        'user': 'list[str]',
        'specialized': 'list[str]',
        'file': 'list[str]',
        'calculated': 'list[str]',
        'lookup': 'list[str]',
        'geographic': 'list[str]',
        'rating': 'list[str]',
        'toggle': 'list[str]'
    }

    attribute_map = {
        'text': 'text',
        'numeric': 'numeric',
        'choice': 'choice',
        '_date': 'date',
        'user': 'user',
        'specialized': 'specialized',
        'file': 'file',
        'calculated': 'calculated',
        'lookup': 'lookup',
        'geographic': 'geographic',
        'rating': 'rating',
        'toggle': 'toggle'
    }

    def __init__(self, text=None, numeric=None, choice=None, _date=None, user=None, specialized=None, file=None, calculated=None, lookup=None, geographic=None, rating=None, toggle=None):  # noqa: E501
        """CustomFieldTypesData - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._numeric = None
        self._choice = None
        self.__date = None
        self._user = None
        self._specialized = None
        self._file = None
        self._calculated = None
        self._lookup = None
        self._geographic = None
        self._rating = None
        self._toggle = None
        self.discriminator = None
        self.text = text
        self.numeric = numeric
        self.choice = choice
        self._date = _date
        self.user = user
        self.specialized = specialized
        self.file = file
        self.calculated = calculated
        self.lookup = lookup
        self.geographic = geographic
        self.rating = rating
        self.toggle = toggle

    @property
    def text(self):
        """Gets the text of this CustomFieldTypesData.  # noqa: E501


        :return: The text of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CustomFieldTypesData.


        :param text: The text of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def numeric(self):
        """Gets the numeric of this CustomFieldTypesData.  # noqa: E501


        :return: The numeric of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._numeric

    @numeric.setter
    def numeric(self, numeric):
        """Sets the numeric of this CustomFieldTypesData.


        :param numeric: The numeric of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if numeric is None:
            raise ValueError("Invalid value for `numeric`, must not be `None`")  # noqa: E501

        self._numeric = numeric

    @property
    def choice(self):
        """Gets the choice of this CustomFieldTypesData.  # noqa: E501


        :return: The choice of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._choice

    @choice.setter
    def choice(self, choice):
        """Sets the choice of this CustomFieldTypesData.


        :param choice: The choice of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if choice is None:
            raise ValueError("Invalid value for `choice`, must not be `None`")  # noqa: E501

        self._choice = choice

    @property
    def _date(self):
        """Gets the _date of this CustomFieldTypesData.  # noqa: E501


        :return: The _date of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CustomFieldTypesData.


        :param _date: The _date of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def user(self):
        """Gets the user of this CustomFieldTypesData.  # noqa: E501


        :return: The user of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CustomFieldTypesData.


        :param user: The user of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def specialized(self):
        """Gets the specialized of this CustomFieldTypesData.  # noqa: E501


        :return: The specialized of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._specialized

    @specialized.setter
    def specialized(self, specialized):
        """Sets the specialized of this CustomFieldTypesData.


        :param specialized: The specialized of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if specialized is None:
            raise ValueError("Invalid value for `specialized`, must not be `None`")  # noqa: E501

        self._specialized = specialized

    @property
    def file(self):
        """Gets the file of this CustomFieldTypesData.  # noqa: E501


        :return: The file of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this CustomFieldTypesData.


        :param file: The file of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def calculated(self):
        """Gets the calculated of this CustomFieldTypesData.  # noqa: E501


        :return: The calculated of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._calculated

    @calculated.setter
    def calculated(self, calculated):
        """Sets the calculated of this CustomFieldTypesData.


        :param calculated: The calculated of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if calculated is None:
            raise ValueError("Invalid value for `calculated`, must not be `None`")  # noqa: E501

        self._calculated = calculated

    @property
    def lookup(self):
        """Gets the lookup of this CustomFieldTypesData.  # noqa: E501


        :return: The lookup of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._lookup

    @lookup.setter
    def lookup(self, lookup):
        """Sets the lookup of this CustomFieldTypesData.


        :param lookup: The lookup of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if lookup is None:
            raise ValueError("Invalid value for `lookup`, must not be `None`")  # noqa: E501

        self._lookup = lookup

    @property
    def geographic(self):
        """Gets the geographic of this CustomFieldTypesData.  # noqa: E501


        :return: The geographic of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._geographic

    @geographic.setter
    def geographic(self, geographic):
        """Sets the geographic of this CustomFieldTypesData.


        :param geographic: The geographic of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if geographic is None:
            raise ValueError("Invalid value for `geographic`, must not be `None`")  # noqa: E501

        self._geographic = geographic

    @property
    def rating(self):
        """Gets the rating of this CustomFieldTypesData.  # noqa: E501


        :return: The rating of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CustomFieldTypesData.


        :param rating: The rating of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def toggle(self):
        """Gets the toggle of this CustomFieldTypesData.  # noqa: E501


        :return: The toggle of this CustomFieldTypesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._toggle

    @toggle.setter
    def toggle(self, toggle):
        """Sets the toggle of this CustomFieldTypesData.


        :param toggle: The toggle of this CustomFieldTypesData.  # noqa: E501
        :type: list[str]
        """
        if toggle is None:
            raise ValueError("Invalid value for `toggle`, must not be `None`")  # noqa: E501

        self._toggle = toggle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldTypesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldTypesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
