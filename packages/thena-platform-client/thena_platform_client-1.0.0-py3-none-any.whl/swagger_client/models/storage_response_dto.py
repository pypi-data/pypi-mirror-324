# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StorageResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'data': 'StorageResponseDtoData',
        'message': 'str',
        'path': 'str'
    }

    attribute_map = {
        'success': 'success',
        'data': 'data',
        'message': 'message',
        'path': 'path'
    }

    def __init__(self, success=None, data=None, message=None, path=None):  # noqa: E501
        """StorageResponseDto - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._data = None
        self._message = None
        self._path = None
        self.discriminator = None
        self.success = success
        if data is not None:
            self.data = data
        if message is not None:
            self.message = message
        if path is not None:
            self.path = path

    @property
    def success(self):
        """Gets the success of this StorageResponseDto.  # noqa: E501

        Indicates if the operation was successful  # noqa: E501

        :return: The success of this StorageResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this StorageResponseDto.

        Indicates if the operation was successful  # noqa: E501

        :param success: The success of this StorageResponseDto.  # noqa: E501
        :type: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def data(self):
        """Gets the data of this StorageResponseDto.  # noqa: E501


        :return: The data of this StorageResponseDto.  # noqa: E501
        :rtype: StorageResponseDtoData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StorageResponseDto.


        :param data: The data of this StorageResponseDto.  # noqa: E501
        :type: StorageResponseDtoData
        """

        self._data = data

    @property
    def message(self):
        """Gets the message of this StorageResponseDto.  # noqa: E501

        Response message  # noqa: E501

        :return: The message of this StorageResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StorageResponseDto.

        Response message  # noqa: E501

        :param message: The message of this StorageResponseDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def path(self):
        """Gets the path of this StorageResponseDto.  # noqa: E501

        Storage path  # noqa: E501

        :return: The path of this StorageResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this StorageResponseDto.

        Storage path  # noqa: E501

        :param path: The path of this StorageResponseDto.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
