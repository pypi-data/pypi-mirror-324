# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BusinessDays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monday': 'AllOfBusinessDaysMonday',
        'tuesday': 'AllOfBusinessDaysTuesday',
        'wednesday': 'AllOfBusinessDaysWednesday',
        'thursday': 'AllOfBusinessDaysThursday',
        'friday': 'AllOfBusinessDaysFriday',
        'saturday': 'AllOfBusinessDaysSaturday',
        'sunday': 'AllOfBusinessDaysSunday'
    }

    attribute_map = {
        'monday': 'monday',
        'tuesday': 'tuesday',
        'wednesday': 'wednesday',
        'thursday': 'thursday',
        'friday': 'friday',
        'saturday': 'saturday',
        'sunday': 'sunday'
    }

    def __init__(self, monday=None, tuesday=None, wednesday=None, thursday=None, friday=None, saturday=None, sunday=None):  # noqa: E501
        """BusinessDays - a model defined in Swagger"""  # noqa: E501
        self._monday = None
        self._tuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self._sunday = None
        self.discriminator = None
        self.monday = monday
        self.tuesday = tuesday
        self.wednesday = wednesday
        self.thursday = thursday
        self.friday = friday
        self.saturday = saturday
        self.sunday = sunday

    @property
    def monday(self):
        """Gets the monday of this BusinessDays.  # noqa: E501

        The business hours for Monday  # noqa: E501

        :return: The monday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysMonday
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this BusinessDays.

        The business hours for Monday  # noqa: E501

        :param monday: The monday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysMonday
        """
        if monday is None:
            raise ValueError("Invalid value for `monday`, must not be `None`")  # noqa: E501

        self._monday = monday

    @property
    def tuesday(self):
        """Gets the tuesday of this BusinessDays.  # noqa: E501

        The business hours for Tuesday  # noqa: E501

        :return: The tuesday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysTuesday
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this BusinessDays.

        The business hours for Tuesday  # noqa: E501

        :param tuesday: The tuesday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysTuesday
        """
        if tuesday is None:
            raise ValueError("Invalid value for `tuesday`, must not be `None`")  # noqa: E501

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this BusinessDays.  # noqa: E501

        The business hours for Wednesday  # noqa: E501

        :return: The wednesday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysWednesday
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this BusinessDays.

        The business hours for Wednesday  # noqa: E501

        :param wednesday: The wednesday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysWednesday
        """
        if wednesday is None:
            raise ValueError("Invalid value for `wednesday`, must not be `None`")  # noqa: E501

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this BusinessDays.  # noqa: E501

        The business hours for Thursday  # noqa: E501

        :return: The thursday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysThursday
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this BusinessDays.

        The business hours for Thursday  # noqa: E501

        :param thursday: The thursday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysThursday
        """
        if thursday is None:
            raise ValueError("Invalid value for `thursday`, must not be `None`")  # noqa: E501

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this BusinessDays.  # noqa: E501

        The business hours for Friday  # noqa: E501

        :return: The friday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysFriday
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this BusinessDays.

        The business hours for Friday  # noqa: E501

        :param friday: The friday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysFriday
        """
        if friday is None:
            raise ValueError("Invalid value for `friday`, must not be `None`")  # noqa: E501

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this BusinessDays.  # noqa: E501

        The business hours for Saturday  # noqa: E501

        :return: The saturday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysSaturday
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this BusinessDays.

        The business hours for Saturday  # noqa: E501

        :param saturday: The saturday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysSaturday
        """
        if saturday is None:
            raise ValueError("Invalid value for `saturday`, must not be `None`")  # noqa: E501

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this BusinessDays.  # noqa: E501

        The business hours for Sunday  # noqa: E501

        :return: The sunday of this BusinessDays.  # noqa: E501
        :rtype: AllOfBusinessDaysSunday
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this BusinessDays.

        The business hours for Sunday  # noqa: E501

        :param sunday: The sunday of this BusinessDays.  # noqa: E501
        :type: AllOfBusinessDaysSunday
        """
        if sunday is None:
            raise ValueError("Invalid value for `sunday`, must not be `None`")  # noqa: E501

        self._sunday = sunday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessDays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessDays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
