# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DraftTicketResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'status': 'str',
        'draft_scope': 'str',
        'entity_type': 'str',
        'content': 'object',
        'metadata': 'object',
        'created_by': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'last_modified_by': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'status': 'status',
        'draft_scope': 'draftScope',
        'entity_type': 'entityType',
        'content': 'content',
        'metadata': 'metadata',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'last_modified_by': 'lastModifiedBy'
    }

    def __init__(self, uid=None, status=None, draft_scope=None, entity_type=None, content=None, metadata=None, created_by=None, created_at=None, updated_at=None, last_modified_by=None):  # noqa: E501
        """DraftTicketResponseDto - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._status = None
        self._draft_scope = None
        self._entity_type = None
        self._content = None
        self._metadata = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self._last_modified_by = None
        self.discriminator = None
        self.uid = uid
        self.status = status
        self.draft_scope = draft_scope
        self.entity_type = entity_type
        self.content = content
        self.metadata = metadata
        self.created_by = created_by
        self.created_at = created_at
        self.updated_at = updated_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by

    @property
    def uid(self):
        """Gets the uid of this DraftTicketResponseDto.  # noqa: E501


        :return: The uid of this DraftTicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DraftTicketResponseDto.


        :param uid: The uid of this DraftTicketResponseDto.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def status(self):
        """Gets the status of this DraftTicketResponseDto.  # noqa: E501


        :return: The status of this DraftTicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DraftTicketResponseDto.


        :param status: The status of this DraftTicketResponseDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def draft_scope(self):
        """Gets the draft_scope of this DraftTicketResponseDto.  # noqa: E501


        :return: The draft_scope of this DraftTicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._draft_scope

    @draft_scope.setter
    def draft_scope(self, draft_scope):
        """Sets the draft_scope of this DraftTicketResponseDto.


        :param draft_scope: The draft_scope of this DraftTicketResponseDto.  # noqa: E501
        :type: str
        """
        if draft_scope is None:
            raise ValueError("Invalid value for `draft_scope`, must not be `None`")  # noqa: E501

        self._draft_scope = draft_scope

    @property
    def entity_type(self):
        """Gets the entity_type of this DraftTicketResponseDto.  # noqa: E501


        :return: The entity_type of this DraftTicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this DraftTicketResponseDto.


        :param entity_type: The entity_type of this DraftTicketResponseDto.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def content(self):
        """Gets the content of this DraftTicketResponseDto.  # noqa: E501


        :return: The content of this DraftTicketResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DraftTicketResponseDto.


        :param content: The content of this DraftTicketResponseDto.  # noqa: E501
        :type: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def metadata(self):
        """Gets the metadata of this DraftTicketResponseDto.  # noqa: E501


        :return: The metadata of this DraftTicketResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DraftTicketResponseDto.


        :param metadata: The metadata of this DraftTicketResponseDto.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def created_by(self):
        """Gets the created_by of this DraftTicketResponseDto.  # noqa: E501


        :return: The created_by of this DraftTicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DraftTicketResponseDto.


        :param created_by: The created_by of this DraftTicketResponseDto.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this DraftTicketResponseDto.  # noqa: E501


        :return: The created_at of this DraftTicketResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DraftTicketResponseDto.


        :param created_at: The created_at of this DraftTicketResponseDto.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DraftTicketResponseDto.  # noqa: E501


        :return: The updated_at of this DraftTicketResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DraftTicketResponseDto.


        :param updated_at: The updated_at of this DraftTicketResponseDto.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this DraftTicketResponseDto.  # noqa: E501


        :return: The last_modified_by of this DraftTicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this DraftTicketResponseDto.


        :param last_modified_by: The last_modified_by of this DraftTicketResponseDto.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DraftTicketResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DraftTicketResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
