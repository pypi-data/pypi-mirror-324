# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketTypeResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'color': 'str',
        'icon': 'str',
        'is_active': 'bool',
        'team_id': 'str',
        'organization_id': 'str',
        'auto_assign': 'bool',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'color': 'color',
        'icon': 'icon',
        'is_active': 'isActive',
        'team_id': 'teamId',
        'organization_id': 'organizationId',
        'auto_assign': 'autoAssign',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, color=None, icon=None, is_active=None, team_id=None, organization_id=None, auto_assign=None, created_at=None, updated_at=None):  # noqa: E501
        """TicketTypeResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._color = None
        self._icon = None
        self._is_active = None
        self._team_id = None
        self._organization_id = None
        self._auto_assign = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.color = color
        self.icon = icon
        self.is_active = is_active
        self.team_id = team_id
        self.organization_id = organization_id
        self.auto_assign = auto_assign
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this TicketTypeResponseDto.  # noqa: E501

        The unique identifier of the ticket  # noqa: E501

        :return: The id of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketTypeResponseDto.

        The unique identifier of the ticket  # noqa: E501

        :param id: The id of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TicketTypeResponseDto.  # noqa: E501

        The name of the ticket type  # noqa: E501

        :return: The name of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TicketTypeResponseDto.

        The name of the ticket type  # noqa: E501

        :param name: The name of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def color(self):
        """Gets the color of this TicketTypeResponseDto.  # noqa: E501

        The color of the ticket type  # noqa: E501

        :return: The color of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TicketTypeResponseDto.

        The color of the ticket type  # noqa: E501

        :param color: The color of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def icon(self):
        """Gets the icon of this TicketTypeResponseDto.  # noqa: E501

        The icon of the ticket type  # noqa: E501

        :return: The icon of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this TicketTypeResponseDto.

        The icon of the ticket type  # noqa: E501

        :param icon: The icon of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def is_active(self):
        """Gets the is_active of this TicketTypeResponseDto.  # noqa: E501

        Whether the ticket type is active  # noqa: E501

        :return: The is_active of this TicketTypeResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TicketTypeResponseDto.

        Whether the ticket type is active  # noqa: E501

        :param is_active: The is_active of this TicketTypeResponseDto.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def team_id(self):
        """Gets the team_id of this TicketTypeResponseDto.  # noqa: E501

        The team ID of the ticket type  # noqa: E501

        :return: The team_id of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TicketTypeResponseDto.

        The team ID of the ticket type  # noqa: E501

        :param team_id: The team_id of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def organization_id(self):
        """Gets the organization_id of this TicketTypeResponseDto.  # noqa: E501

        The organization ID of the ticket type  # noqa: E501

        :return: The organization_id of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TicketTypeResponseDto.

        The organization ID of the ticket type  # noqa: E501

        :param organization_id: The organization_id of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def auto_assign(self):
        """Gets the auto_assign of this TicketTypeResponseDto.  # noqa: E501

        Whether the ticket type is auto-assigned  # noqa: E501

        :return: The auto_assign of this TicketTypeResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_assign

    @auto_assign.setter
    def auto_assign(self, auto_assign):
        """Sets the auto_assign of this TicketTypeResponseDto.

        Whether the ticket type is auto-assigned  # noqa: E501

        :param auto_assign: The auto_assign of this TicketTypeResponseDto.  # noqa: E501
        :type: bool
        """
        if auto_assign is None:
            raise ValueError("Invalid value for `auto_assign`, must not be `None`")  # noqa: E501

        self._auto_assign = auto_assign

    @property
    def created_at(self):
        """Gets the created_at of this TicketTypeResponseDto.  # noqa: E501

        The created date of the ticket type  # noqa: E501

        :return: The created_at of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketTypeResponseDto.

        The created date of the ticket type  # noqa: E501

        :param created_at: The created_at of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketTypeResponseDto.  # noqa: E501

        The updated date of the ticket type  # noqa: E501

        :return: The updated_at of this TicketTypeResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketTypeResponseDto.

        The updated date of the ticket type  # noqa: E501

        :param updated_at: The updated_at of this TicketTypeResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketTypeResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketTypeResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
