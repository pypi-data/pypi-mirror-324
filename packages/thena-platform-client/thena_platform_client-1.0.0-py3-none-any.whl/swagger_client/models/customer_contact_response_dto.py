# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerContactResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'accounts': 'list[str]',
        'contact_type_id': 'str',
        'contact_type': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'accounts': 'accounts',
        'contact_type_id': 'contactTypeId',
        'contact_type': 'contactType',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, first_name=None, last_name=None, email=None, phone_number=None, accounts=None, contact_type_id=None, contact_type=None, created_at=None, updated_at=None):  # noqa: E501
        """CustomerContactResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone_number = None
        self._accounts = None
        self._contact_type_id = None
        self._contact_type = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.phone_number = phone_number
        self.accounts = accounts
        self.contact_type_id = contact_type_id
        self.contact_type = contact_type
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this CustomerContactResponseDto.  # noqa: E501

        The identifier of the customer contact  # noqa: E501

        :return: The id of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerContactResponseDto.

        The identifier of the customer contact  # noqa: E501

        :param id: The id of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this CustomerContactResponseDto.  # noqa: E501

        The first name of the customer contact  # noqa: E501

        :return: The first_name of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerContactResponseDto.

        The first name of the customer contact  # noqa: E501

        :param first_name: The first_name of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CustomerContactResponseDto.  # noqa: E501

        The last name of the customer contact  # noqa: E501

        :return: The last_name of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerContactResponseDto.

        The last name of the customer contact  # noqa: E501

        :param last_name: The last_name of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this CustomerContactResponseDto.  # noqa: E501

        The email of the customer contact  # noqa: E501

        :return: The email of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerContactResponseDto.

        The email of the customer contact  # noqa: E501

        :param email: The email of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this CustomerContactResponseDto.  # noqa: E501

        The phone number of the customer contact  # noqa: E501

        :return: The phone_number of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CustomerContactResponseDto.

        The phone number of the customer contact  # noqa: E501

        :param phone_number: The phone_number of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def accounts(self):
        """Gets the accounts of this CustomerContactResponseDto.  # noqa: E501

        The name of the account  # noqa: E501

        :return: The accounts of this CustomerContactResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this CustomerContactResponseDto.

        The name of the account  # noqa: E501

        :param accounts: The accounts of this CustomerContactResponseDto.  # noqa: E501
        :type: list[str]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def contact_type_id(self):
        """Gets the contact_type_id of this CustomerContactResponseDto.  # noqa: E501

        The identifier of the contact type  # noqa: E501

        :return: The contact_type_id of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_type_id

    @contact_type_id.setter
    def contact_type_id(self, contact_type_id):
        """Sets the contact_type_id of this CustomerContactResponseDto.

        The identifier of the contact type  # noqa: E501

        :param contact_type_id: The contact_type_id of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if contact_type_id is None:
            raise ValueError("Invalid value for `contact_type_id`, must not be `None`")  # noqa: E501

        self._contact_type_id = contact_type_id

    @property
    def contact_type(self):
        """Gets the contact_type of this CustomerContactResponseDto.  # noqa: E501

        The name of the contact type  # noqa: E501

        :return: The contact_type of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this CustomerContactResponseDto.

        The name of the contact type  # noqa: E501

        :param contact_type: The contact_type of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if contact_type is None:
            raise ValueError("Invalid value for `contact_type`, must not be `None`")  # noqa: E501

        self._contact_type = contact_type

    @property
    def created_at(self):
        """Gets the created_at of this CustomerContactResponseDto.  # noqa: E501

        The creation date of the contact  # noqa: E501

        :return: The created_at of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomerContactResponseDto.

        The creation date of the contact  # noqa: E501

        :param created_at: The created_at of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomerContactResponseDto.  # noqa: E501

        The last update date of the contact  # noqa: E501

        :return: The updated_at of this CustomerContactResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomerContactResponseDto.

        The last update date of the contact  # noqa: E501

        :param updated_at: The updated_at of this CustomerContactResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerContactResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerContactResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
