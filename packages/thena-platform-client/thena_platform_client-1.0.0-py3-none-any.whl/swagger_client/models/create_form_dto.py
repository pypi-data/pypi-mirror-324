# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateFormDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'conditions': 'list[Condition]',
        'fields': 'list[FormFieldDto]',
        'is_active': 'bool',
        'channels': 'list[str]',
        'team_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'conditions': 'conditions',
        'fields': 'fields',
        'is_active': 'isActive',
        'channels': 'channels',
        'team_id': 'teamId'
    }

    def __init__(self, name=None, description=None, conditions=None, fields=None, is_active=None, channels=None, team_id=None):  # noqa: E501
        """CreateFormDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._conditions = None
        self._fields = None
        self._is_active = None
        self._channels = None
        self._team_id = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if conditions is not None:
            self.conditions = conditions
        if fields is not None:
            self.fields = fields
        if is_active is not None:
            self.is_active = is_active
        if channels is not None:
            self.channels = channels
        if team_id is not None:
            self.team_id = team_id

    @property
    def name(self):
        """Gets the name of this CreateFormDto.  # noqa: E501

        The name of the form  # noqa: E501

        :return: The name of this CreateFormDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFormDto.

        The name of the form  # noqa: E501

        :param name: The name of this CreateFormDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateFormDto.  # noqa: E501

        The description of the form  # noqa: E501

        :return: The description of this CreateFormDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFormDto.

        The description of the form  # noqa: E501

        :param description: The description of this CreateFormDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def conditions(self):
        """Gets the conditions of this CreateFormDto.  # noqa: E501

        Conditions of the form  # noqa: E501

        :return: The conditions of this CreateFormDto.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CreateFormDto.

        Conditions of the form  # noqa: E501

        :param conditions: The conditions of this CreateFormDto.  # noqa: E501
        :type: list[Condition]
        """

        self._conditions = conditions

    @property
    def fields(self):
        """Gets the fields of this CreateFormDto.  # noqa: E501

        Fields of the form  # noqa: E501

        :return: The fields of this CreateFormDto.  # noqa: E501
        :rtype: list[FormFieldDto]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CreateFormDto.

        Fields of the form  # noqa: E501

        :param fields: The fields of this CreateFormDto.  # noqa: E501
        :type: list[FormFieldDto]
        """

        self._fields = fields

    @property
    def is_active(self):
        """Gets the is_active of this CreateFormDto.  # noqa: E501

        Indicates if the form is active  # noqa: E501

        :return: The is_active of this CreateFormDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CreateFormDto.

        Indicates if the form is active  # noqa: E501

        :param is_active: The is_active of this CreateFormDto.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def channels(self):
        """Gets the channels of this CreateFormDto.  # noqa: E501

        Channels of the form  # noqa: E501

        :return: The channels of this CreateFormDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this CreateFormDto.

        Channels of the form  # noqa: E501

        :param channels: The channels of this CreateFormDto.  # noqa: E501
        :type: list[str]
        """

        self._channels = channels

    @property
    def team_id(self):
        """Gets the team_id of this CreateFormDto.  # noqa: E501

        The ID of the team  # noqa: E501

        :return: The team_id of this CreateFormDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CreateFormDto.

        The ID of the team  # noqa: E501

        :param team_id: The team_id of this CreateFormDto.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFormDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFormDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
