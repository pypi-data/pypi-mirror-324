# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountActivityResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'account': 'str',
        'activity_timestamp': 'str',
        'duration': 'float',
        'location': 'str',
        'type': 'str',
        'type_id': 'str',
        'status': 'str',
        'status_id': 'str',
        'participants': 'list[str]',
        'creator': 'str',
        'creator_id': 'str',
        'creator_email': 'str',
        'attachments': 'list[str]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'account': 'account',
        'activity_timestamp': 'activityTimestamp',
        'duration': 'duration',
        'location': 'location',
        'type': 'type',
        'type_id': 'typeId',
        'status': 'status',
        'status_id': 'statusId',
        'participants': 'participants',
        'creator': 'creator',
        'creator_id': 'creatorId',
        'creator_email': 'creatorEmail',
        'attachments': 'attachments',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, account_id=None, account=None, activity_timestamp=None, duration=None, location=None, type=None, type_id=None, status=None, status_id=None, participants=None, creator=None, creator_id=None, creator_email=None, attachments=None, created_at=None, updated_at=None):  # noqa: E501
        """AccountActivityResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._account = None
        self._activity_timestamp = None
        self._duration = None
        self._location = None
        self._type = None
        self._type_id = None
        self._status = None
        self._status_id = None
        self._participants = None
        self._creator = None
        self._creator_id = None
        self._creator_email = None
        self._attachments = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.account_id = account_id
        self.account = account
        self.activity_timestamp = activity_timestamp
        self.duration = duration
        self.location = location
        self.type = type
        self.type_id = type_id
        self.status = status
        self.status_id = status_id
        self.participants = participants
        self.creator = creator
        self.creator_id = creator_id
        self.creator_email = creator_email
        self.attachments = attachments
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this AccountActivityResponseDto.  # noqa: E501

        The identifier of the activity  # noqa: E501

        :return: The id of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountActivityResponseDto.

        The identifier of the activity  # noqa: E501

        :param id: The id of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this AccountActivityResponseDto.  # noqa: E501

        The identifier of the account  # noqa: E501

        :return: The account_id of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountActivityResponseDto.

        The identifier of the account  # noqa: E501

        :param account_id: The account_id of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this AccountActivityResponseDto.  # noqa: E501

        The name of the account  # noqa: E501

        :return: The account of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountActivityResponseDto.

        The name of the account  # noqa: E501

        :param account: The account of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def activity_timestamp(self):
        """Gets the activity_timestamp of this AccountActivityResponseDto.  # noqa: E501

        The timestamp of the activity  # noqa: E501

        :return: The activity_timestamp of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_timestamp

    @activity_timestamp.setter
    def activity_timestamp(self, activity_timestamp):
        """Sets the activity_timestamp of this AccountActivityResponseDto.

        The timestamp of the activity  # noqa: E501

        :param activity_timestamp: The activity_timestamp of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if activity_timestamp is None:
            raise ValueError("Invalid value for `activity_timestamp`, must not be `None`")  # noqa: E501

        self._activity_timestamp = activity_timestamp

    @property
    def duration(self):
        """Gets the duration of this AccountActivityResponseDto.  # noqa: E501

        The duration of the activity in minutes  # noqa: E501

        :return: The duration of this AccountActivityResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AccountActivityResponseDto.

        The duration of the activity in minutes  # noqa: E501

        :param duration: The duration of this AccountActivityResponseDto.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def location(self):
        """Gets the location of this AccountActivityResponseDto.  # noqa: E501

        The location of the activity  # noqa: E501

        :return: The location of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AccountActivityResponseDto.

        The location of the activity  # noqa: E501

        :param location: The location of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def type(self):
        """Gets the type of this AccountActivityResponseDto.  # noqa: E501

        The type of the activity  # noqa: E501

        :return: The type of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountActivityResponseDto.

        The type of the activity  # noqa: E501

        :param type: The type of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def type_id(self):
        """Gets the type_id of this AccountActivityResponseDto.  # noqa: E501

        The identifier of the type attribute  # noqa: E501

        :return: The type_id of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AccountActivityResponseDto.

        The identifier of the type attribute  # noqa: E501

        :param type_id: The type_id of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def status(self):
        """Gets the status of this AccountActivityResponseDto.  # noqa: E501

        The status of the activity  # noqa: E501

        :return: The status of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountActivityResponseDto.

        The status of the activity  # noqa: E501

        :param status: The status of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_id(self):
        """Gets the status_id of this AccountActivityResponseDto.  # noqa: E501

        The identifier of the status attribute  # noqa: E501

        :return: The status_id of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AccountActivityResponseDto.

        The identifier of the status attribute  # noqa: E501

        :param status_id: The status_id of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def participants(self):
        """Gets the participants of this AccountActivityResponseDto.  # noqa: E501

        The participants of the activity  # noqa: E501

        :return: The participants of this AccountActivityResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this AccountActivityResponseDto.

        The participants of the activity  # noqa: E501

        :param participants: The participants of this AccountActivityResponseDto.  # noqa: E501
        :type: list[str]
        """
        if participants is None:
            raise ValueError("Invalid value for `participants`, must not be `None`")  # noqa: E501

        self._participants = participants

    @property
    def creator(self):
        """Gets the creator of this AccountActivityResponseDto.  # noqa: E501

        The creator of the activity  # noqa: E501

        :return: The creator of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AccountActivityResponseDto.

        The creator of the activity  # noqa: E501

        :param creator: The creator of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def creator_id(self):
        """Gets the creator_id of this AccountActivityResponseDto.  # noqa: E501

        The identifier of the creator  # noqa: E501

        :return: The creator_id of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this AccountActivityResponseDto.

        The identifier of the creator  # noqa: E501

        :param creator_id: The creator_id of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def creator_email(self):
        """Gets the creator_email of this AccountActivityResponseDto.  # noqa: E501

        The email of the creator  # noqa: E501

        :return: The creator_email of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this AccountActivityResponseDto.

        The email of the creator  # noqa: E501

        :param creator_email: The creator_email of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if creator_email is None:
            raise ValueError("Invalid value for `creator_email`, must not be `None`")  # noqa: E501

        self._creator_email = creator_email

    @property
    def attachments(self):
        """Gets the attachments of this AccountActivityResponseDto.  # noqa: E501

        The attachments of the activity  # noqa: E501

        :return: The attachments of this AccountActivityResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AccountActivityResponseDto.

        The attachments of the activity  # noqa: E501

        :param attachments: The attachments of this AccountActivityResponseDto.  # noqa: E501
        :type: list[str]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def created_at(self):
        """Gets the created_at of this AccountActivityResponseDto.  # noqa: E501

        The creation date of the activity  # noqa: E501

        :return: The created_at of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountActivityResponseDto.

        The creation date of the activity  # noqa: E501

        :param created_at: The created_at of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AccountActivityResponseDto.  # noqa: E501

        The update date of the activity  # noqa: E501

        :return: The updated_at of this AccountActivityResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AccountActivityResponseDto.

        The update date of the activity  # noqa: E501

        :param updated_at: The updated_at of this AccountActivityResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountActivityResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountActivityResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
