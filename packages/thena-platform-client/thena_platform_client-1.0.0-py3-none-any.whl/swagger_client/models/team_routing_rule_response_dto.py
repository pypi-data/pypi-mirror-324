# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamRoutingRuleResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'team_id': 'str',
        'evaluation_order': 'float',
        'result_team_id': 'str',
        'fallback_team_id': 'str',
        'and_rules': 'list[str]',
        'or_rules': 'list[str]',
        'created_by': 'str',
        'created_at': 'str',
        'created_by_id': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'team_id': 'teamId',
        'evaluation_order': 'evaluationOrder',
        'result_team_id': 'resultTeamId',
        'fallback_team_id': 'fallbackTeamId',
        'and_rules': 'andRules',
        'or_rules': 'orRules',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'created_by_id': 'createdById',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, description=None, team_id=None, evaluation_order=None, result_team_id=None, fallback_team_id=None, and_rules=None, or_rules=None, created_by=None, created_at=None, created_by_id=None, updated_at=None):  # noqa: E501
        """TeamRoutingRuleResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._team_id = None
        self._evaluation_order = None
        self._result_team_id = None
        self._fallback_team_id = None
        self._and_rules = None
        self._or_rules = None
        self._created_by = None
        self._created_at = None
        self._created_by_id = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.team_id = team_id
        self.evaluation_order = evaluation_order
        self.result_team_id = result_team_id
        self.fallback_team_id = fallback_team_id
        self.and_rules = and_rules
        self.or_rules = or_rules
        self.created_by = created_by
        self.created_at = created_at
        self.created_by_id = created_by_id
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this TeamRoutingRuleResponseDto.  # noqa: E501

        The unique identifier of the team routing rule  # noqa: E501

        :return: The id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamRoutingRuleResponseDto.

        The unique identifier of the team routing rule  # noqa: E501

        :param id: The id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TeamRoutingRuleResponseDto.  # noqa: E501

        The name of the team routing rule  # noqa: E501

        :return: The name of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamRoutingRuleResponseDto.

        The name of the team routing rule  # noqa: E501

        :param name: The name of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TeamRoutingRuleResponseDto.  # noqa: E501

        The description of the team routing rule  # noqa: E501

        :return: The description of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamRoutingRuleResponseDto.

        The description of the team routing rule  # noqa: E501

        :param description: The description of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def team_id(self):
        """Gets the team_id of this TeamRoutingRuleResponseDto.  # noqa: E501

        The team ID of the team routing rule  # noqa: E501

        :return: The team_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamRoutingRuleResponseDto.

        The team ID of the team routing rule  # noqa: E501

        :param team_id: The team_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def evaluation_order(self):
        """Gets the evaluation_order of this TeamRoutingRuleResponseDto.  # noqa: E501

        The evaluation order of the team routing rule  # noqa: E501

        :return: The evaluation_order of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._evaluation_order

    @evaluation_order.setter
    def evaluation_order(self, evaluation_order):
        """Sets the evaluation_order of this TeamRoutingRuleResponseDto.

        The evaluation order of the team routing rule  # noqa: E501

        :param evaluation_order: The evaluation_order of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: float
        """
        if evaluation_order is None:
            raise ValueError("Invalid value for `evaluation_order`, must not be `None`")  # noqa: E501

        self._evaluation_order = evaluation_order

    @property
    def result_team_id(self):
        """Gets the result_team_id of this TeamRoutingRuleResponseDto.  # noqa: E501

        The result team ID of the team routing rule  # noqa: E501

        :return: The result_team_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._result_team_id

    @result_team_id.setter
    def result_team_id(self, result_team_id):
        """Sets the result_team_id of this TeamRoutingRuleResponseDto.

        The result team ID of the team routing rule  # noqa: E501

        :param result_team_id: The result_team_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if result_team_id is None:
            raise ValueError("Invalid value for `result_team_id`, must not be `None`")  # noqa: E501

        self._result_team_id = result_team_id

    @property
    def fallback_team_id(self):
        """Gets the fallback_team_id of this TeamRoutingRuleResponseDto.  # noqa: E501

        The fallback team ID of the team routing rule  # noqa: E501

        :return: The fallback_team_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._fallback_team_id

    @fallback_team_id.setter
    def fallback_team_id(self, fallback_team_id):
        """Sets the fallback_team_id of this TeamRoutingRuleResponseDto.

        The fallback team ID of the team routing rule  # noqa: E501

        :param fallback_team_id: The fallback_team_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if fallback_team_id is None:
            raise ValueError("Invalid value for `fallback_team_id`, must not be `None`")  # noqa: E501

        self._fallback_team_id = fallback_team_id

    @property
    def and_rules(self):
        """Gets the and_rules of this TeamRoutingRuleResponseDto.  # noqa: E501

        The AND rules of the team routing rule  # noqa: E501

        :return: The and_rules of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._and_rules

    @and_rules.setter
    def and_rules(self, and_rules):
        """Sets the and_rules of this TeamRoutingRuleResponseDto.

        The AND rules of the team routing rule  # noqa: E501

        :param and_rules: The and_rules of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: list[str]
        """
        if and_rules is None:
            raise ValueError("Invalid value for `and_rules`, must not be `None`")  # noqa: E501

        self._and_rules = and_rules

    @property
    def or_rules(self):
        """Gets the or_rules of this TeamRoutingRuleResponseDto.  # noqa: E501

        The OR rules of the team routing rule  # noqa: E501

        :return: The or_rules of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._or_rules

    @or_rules.setter
    def or_rules(self, or_rules):
        """Sets the or_rules of this TeamRoutingRuleResponseDto.

        The OR rules of the team routing rule  # noqa: E501

        :param or_rules: The or_rules of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: list[str]
        """
        if or_rules is None:
            raise ValueError("Invalid value for `or_rules`, must not be `None`")  # noqa: E501

        self._or_rules = or_rules

    @property
    def created_by(self):
        """Gets the created_by of this TeamRoutingRuleResponseDto.  # noqa: E501

        The created by of the team routing rule  # noqa: E501

        :return: The created_by of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TeamRoutingRuleResponseDto.

        The created by of the team routing rule  # noqa: E501

        :param created_by: The created_by of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this TeamRoutingRuleResponseDto.  # noqa: E501

        The created date of the team routing rule  # noqa: E501

        :return: The created_at of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamRoutingRuleResponseDto.

        The created date of the team routing rule  # noqa: E501

        :param created_at: The created_at of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by_id(self):
        """Gets the created_by_id of this TeamRoutingRuleResponseDto.  # noqa: E501

        The created by ID of the team routing rule  # noqa: E501

        :return: The created_by_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this TeamRoutingRuleResponseDto.

        The created by ID of the team routing rule  # noqa: E501

        :param created_by_id: The created_by_id of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if created_by_id is None:
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamRoutingRuleResponseDto.  # noqa: E501

        The updated date of the team routing rule  # noqa: E501

        :return: The updated_at of this TeamRoutingRuleResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamRoutingRuleResponseDto.

        The updated date of the team routing rule  # noqa: E501

        :param updated_at: The updated_at of this TeamRoutingRuleResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamRoutingRuleResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamRoutingRuleResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
