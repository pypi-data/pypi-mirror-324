# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCustomFieldDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_active': 'bool',
        'description': 'str',
        'name': 'str',
        'source': 'str',
        'field_type': 'str',
        'options': 'list[str]',
        'metadata': 'object',
        'placeholder_text': 'str',
        'hint_text': 'str',
        'mandatory_on_close': 'bool',
        'mandatory_on_creation': 'bool',
        'visible_to_customer': 'bool',
        'editable_by_customer': 'bool',
        'auto_add_to_all_forms': 'bool',
        'default_value': 'str',
        'team_id': 'str'
    }

    attribute_map = {
        'is_active': 'isActive',
        'description': 'description',
        'name': 'name',
        'source': 'source',
        'field_type': 'fieldType',
        'options': 'options',
        'metadata': 'metadata',
        'placeholder_text': 'placeholderText',
        'hint_text': 'hintText',
        'mandatory_on_close': 'mandatoryOnClose',
        'mandatory_on_creation': 'mandatoryOnCreation',
        'visible_to_customer': 'visibleToCustomer',
        'editable_by_customer': 'editableByCustomer',
        'auto_add_to_all_forms': 'autoAddToAllForms',
        'default_value': 'defaultValue',
        'team_id': 'teamId'
    }

    def __init__(self, is_active=None, description=None, name=None, source=None, field_type=None, options=None, metadata=None, placeholder_text=None, hint_text=None, mandatory_on_close=None, mandatory_on_creation=None, visible_to_customer=None, editable_by_customer=None, auto_add_to_all_forms=None, default_value=None, team_id=None):  # noqa: E501
        """CreateCustomFieldDto - a model defined in Swagger"""  # noqa: E501
        self._is_active = None
        self._description = None
        self._name = None
        self._source = None
        self._field_type = None
        self._options = None
        self._metadata = None
        self._placeholder_text = None
        self._hint_text = None
        self._mandatory_on_close = None
        self._mandatory_on_creation = None
        self._visible_to_customer = None
        self._editable_by_customer = None
        self._auto_add_to_all_forms = None
        self._default_value = None
        self._team_id = None
        self.discriminator = None
        if is_active is not None:
            self.is_active = is_active
        if description is not None:
            self.description = description
        self.name = name
        self.source = source
        self.field_type = field_type
        if options is not None:
            self.options = options
        if metadata is not None:
            self.metadata = metadata
        if placeholder_text is not None:
            self.placeholder_text = placeholder_text
        if hint_text is not None:
            self.hint_text = hint_text
        if mandatory_on_close is not None:
            self.mandatory_on_close = mandatory_on_close
        if mandatory_on_creation is not None:
            self.mandatory_on_creation = mandatory_on_creation
        if visible_to_customer is not None:
            self.visible_to_customer = visible_to_customer
        if editable_by_customer is not None:
            self.editable_by_customer = editable_by_customer
        if auto_add_to_all_forms is not None:
            self.auto_add_to_all_forms = auto_add_to_all_forms
        if default_value is not None:
            self.default_value = default_value
        if team_id is not None:
            self.team_id = team_id

    @property
    def is_active(self):
        """Gets the is_active of this CreateCustomFieldDto.  # noqa: E501

        Whether the custom field is active  # noqa: E501

        :return: The is_active of this CreateCustomFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CreateCustomFieldDto.

        Whether the custom field is active  # noqa: E501

        :param is_active: The is_active of this CreateCustomFieldDto.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def description(self):
        """Gets the description of this CreateCustomFieldDto.  # noqa: E501

        The description of the custom field  # noqa: E501

        :return: The description of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCustomFieldDto.

        The description of the custom field  # noqa: E501

        :param description: The description of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateCustomFieldDto.  # noqa: E501

        The name of the custom field  # noqa: E501

        :return: The name of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCustomFieldDto.

        The name of the custom field  # noqa: E501

        :param name: The name of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this CreateCustomFieldDto.  # noqa: E501

        The source of the custom field  # noqa: E501

        :return: The source of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateCustomFieldDto.

        The source of the custom field  # noqa: E501

        :param source: The source of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def field_type(self):
        """Gets the field_type of this CreateCustomFieldDto.  # noqa: E501

        The type of the custom field  # noqa: E501

        :return: The field_type of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this CreateCustomFieldDto.

        The type of the custom field  # noqa: E501

        :param field_type: The field_type of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """
        if field_type is None:
            raise ValueError("Invalid value for `field_type`, must not be `None`")  # noqa: E501

        self._field_type = field_type

    @property
    def options(self):
        """Gets the options of this CreateCustomFieldDto.  # noqa: E501

        The options of the custom field  # noqa: E501

        :return: The options of this CreateCustomFieldDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CreateCustomFieldDto.

        The options of the custom field  # noqa: E501

        :param options: The options of this CreateCustomFieldDto.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def metadata(self):
        """Gets the metadata of this CreateCustomFieldDto.  # noqa: E501

        The metadata of the custom field  # noqa: E501

        :return: The metadata of this CreateCustomFieldDto.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateCustomFieldDto.

        The metadata of the custom field  # noqa: E501

        :param metadata: The metadata of this CreateCustomFieldDto.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def placeholder_text(self):
        """Gets the placeholder_text of this CreateCustomFieldDto.  # noqa: E501

        The placeholder text of the custom field  # noqa: E501

        :return: The placeholder_text of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._placeholder_text

    @placeholder_text.setter
    def placeholder_text(self, placeholder_text):
        """Sets the placeholder_text of this CreateCustomFieldDto.

        The placeholder text of the custom field  # noqa: E501

        :param placeholder_text: The placeholder_text of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """

        self._placeholder_text = placeholder_text

    @property
    def hint_text(self):
        """Gets the hint_text of this CreateCustomFieldDto.  # noqa: E501

        The hint text of the custom field  # noqa: E501

        :return: The hint_text of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._hint_text

    @hint_text.setter
    def hint_text(self, hint_text):
        """Sets the hint_text of this CreateCustomFieldDto.

        The hint text of the custom field  # noqa: E501

        :param hint_text: The hint_text of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """

        self._hint_text = hint_text

    @property
    def mandatory_on_close(self):
        """Gets the mandatory_on_close of this CreateCustomFieldDto.  # noqa: E501

        Whether the custom field is mandatory on close  # noqa: E501

        :return: The mandatory_on_close of this CreateCustomFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_on_close

    @mandatory_on_close.setter
    def mandatory_on_close(self, mandatory_on_close):
        """Sets the mandatory_on_close of this CreateCustomFieldDto.

        Whether the custom field is mandatory on close  # noqa: E501

        :param mandatory_on_close: The mandatory_on_close of this CreateCustomFieldDto.  # noqa: E501
        :type: bool
        """

        self._mandatory_on_close = mandatory_on_close

    @property
    def mandatory_on_creation(self):
        """Gets the mandatory_on_creation of this CreateCustomFieldDto.  # noqa: E501

        Whether the custom field is mandatory on creation  # noqa: E501

        :return: The mandatory_on_creation of this CreateCustomFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_on_creation

    @mandatory_on_creation.setter
    def mandatory_on_creation(self, mandatory_on_creation):
        """Sets the mandatory_on_creation of this CreateCustomFieldDto.

        Whether the custom field is mandatory on creation  # noqa: E501

        :param mandatory_on_creation: The mandatory_on_creation of this CreateCustomFieldDto.  # noqa: E501
        :type: bool
        """

        self._mandatory_on_creation = mandatory_on_creation

    @property
    def visible_to_customer(self):
        """Gets the visible_to_customer of this CreateCustomFieldDto.  # noqa: E501

        Whether the custom field is visible to customer  # noqa: E501

        :return: The visible_to_customer of this CreateCustomFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_customer

    @visible_to_customer.setter
    def visible_to_customer(self, visible_to_customer):
        """Sets the visible_to_customer of this CreateCustomFieldDto.

        Whether the custom field is visible to customer  # noqa: E501

        :param visible_to_customer: The visible_to_customer of this CreateCustomFieldDto.  # noqa: E501
        :type: bool
        """

        self._visible_to_customer = visible_to_customer

    @property
    def editable_by_customer(self):
        """Gets the editable_by_customer of this CreateCustomFieldDto.  # noqa: E501

        Whether the custom field is editable by customer  # noqa: E501

        :return: The editable_by_customer of this CreateCustomFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._editable_by_customer

    @editable_by_customer.setter
    def editable_by_customer(self, editable_by_customer):
        """Sets the editable_by_customer of this CreateCustomFieldDto.

        Whether the custom field is editable by customer  # noqa: E501

        :param editable_by_customer: The editable_by_customer of this CreateCustomFieldDto.  # noqa: E501
        :type: bool
        """

        self._editable_by_customer = editable_by_customer

    @property
    def auto_add_to_all_forms(self):
        """Gets the auto_add_to_all_forms of this CreateCustomFieldDto.  # noqa: E501

        Whether the custom field is auto added to all forms  # noqa: E501

        :return: The auto_add_to_all_forms of this CreateCustomFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_add_to_all_forms

    @auto_add_to_all_forms.setter
    def auto_add_to_all_forms(self, auto_add_to_all_forms):
        """Sets the auto_add_to_all_forms of this CreateCustomFieldDto.

        Whether the custom field is auto added to all forms  # noqa: E501

        :param auto_add_to_all_forms: The auto_add_to_all_forms of this CreateCustomFieldDto.  # noqa: E501
        :type: bool
        """

        self._auto_add_to_all_forms = auto_add_to_all_forms

    @property
    def default_value(self):
        """Gets the default_value of this CreateCustomFieldDto.  # noqa: E501

        The default value of the custom field  # noqa: E501

        :return: The default_value of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CreateCustomFieldDto.

        The default value of the custom field  # noqa: E501

        :param default_value: The default_value of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def team_id(self):
        """Gets the team_id of this CreateCustomFieldDto.  # noqa: E501

        The team id of the custom field  # noqa: E501

        :return: The team_id of this CreateCustomFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this CreateCustomFieldDto.

        The team id of the custom field  # noqa: E501

        :param team_id: The team_id of this CreateCustomFieldDto.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCustomFieldDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomFieldDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
