# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTimezoneWorkingHoursDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone': 'str',
        'routing_respects_timezone': 'bool',
        'holidays': 'list[str]',
        'routing_respects_user_timezone': 'bool',
        'routing_respects_user_availability': 'bool',
        'user_routing_strategy': 'str',
        'common_daily_config': 'bool',
        'common_slots': 'list[str]',
        'daily_config': 'AllOfUpdateTimezoneWorkingHoursDtoDailyConfig'
    }

    attribute_map = {
        'timezone': 'timezone',
        'routing_respects_timezone': 'routingRespectsTimezone',
        'holidays': 'holidays',
        'routing_respects_user_timezone': 'routingRespectsUserTimezone',
        'routing_respects_user_availability': 'routingRespectsUserAvailability',
        'user_routing_strategy': 'userRoutingStrategy',
        'common_daily_config': 'commonDailyConfig',
        'common_slots': 'commonSlots',
        'daily_config': 'dailyConfig'
    }

    def __init__(self, timezone=None, routing_respects_timezone=None, holidays=None, routing_respects_user_timezone=None, routing_respects_user_availability=None, user_routing_strategy=None, common_daily_config=None, common_slots=None, daily_config=None):  # noqa: E501
        """UpdateTimezoneWorkingHoursDto - a model defined in Swagger"""  # noqa: E501
        self._timezone = None
        self._routing_respects_timezone = None
        self._holidays = None
        self._routing_respects_user_timezone = None
        self._routing_respects_user_availability = None
        self._user_routing_strategy = None
        self._common_daily_config = None
        self._common_slots = None
        self._daily_config = None
        self.discriminator = None
        if timezone is not None:
            self.timezone = timezone
        if routing_respects_timezone is not None:
            self.routing_respects_timezone = routing_respects_timezone
        if holidays is not None:
            self.holidays = holidays
        if routing_respects_user_timezone is not None:
            self.routing_respects_user_timezone = routing_respects_user_timezone
        if routing_respects_user_availability is not None:
            self.routing_respects_user_availability = routing_respects_user_availability
        if user_routing_strategy is not None:
            self.user_routing_strategy = user_routing_strategy
        if common_daily_config is not None:
            self.common_daily_config = common_daily_config
        if common_slots is not None:
            self.common_slots = common_slots
        if daily_config is not None:
            self.daily_config = daily_config

    @property
    def timezone(self):
        """Gets the timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        The timezone of the team  # noqa: E501

        :return: The timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UpdateTimezoneWorkingHoursDto.

        The timezone of the team  # noqa: E501

        :param timezone: The timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def routing_respects_timezone(self):
        """Gets the routing_respects_timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        Whether the routing rules respect the timezone for the teams  # noqa: E501

        :return: The routing_respects_timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: bool
        """
        return self._routing_respects_timezone

    @routing_respects_timezone.setter
    def routing_respects_timezone(self, routing_respects_timezone):
        """Sets the routing_respects_timezone of this UpdateTimezoneWorkingHoursDto.

        Whether the routing rules respect the timezone for the teams  # noqa: E501

        :param routing_respects_timezone: The routing_respects_timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: bool
        """

        self._routing_respects_timezone = routing_respects_timezone

    @property
    def holidays(self):
        """Gets the holidays of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        The dates of the team's holidays  # noqa: E501

        :return: The holidays of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._holidays

    @holidays.setter
    def holidays(self, holidays):
        """Sets the holidays of this UpdateTimezoneWorkingHoursDto.

        The dates of the team's holidays  # noqa: E501

        :param holidays: The holidays of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: list[str]
        """

        self._holidays = holidays

    @property
    def routing_respects_user_timezone(self):
        """Gets the routing_respects_user_timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        Whether the routing rules respect the user timezone for the teams  # noqa: E501

        :return: The routing_respects_user_timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: bool
        """
        return self._routing_respects_user_timezone

    @routing_respects_user_timezone.setter
    def routing_respects_user_timezone(self, routing_respects_user_timezone):
        """Sets the routing_respects_user_timezone of this UpdateTimezoneWorkingHoursDto.

        Whether the routing rules respect the user timezone for the teams  # noqa: E501

        :param routing_respects_user_timezone: The routing_respects_user_timezone of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: bool
        """

        self._routing_respects_user_timezone = routing_respects_user_timezone

    @property
    def routing_respects_user_availability(self):
        """Gets the routing_respects_user_availability of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        Whether the routing rules respect the user availability for the teams  # noqa: E501

        :return: The routing_respects_user_availability of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: bool
        """
        return self._routing_respects_user_availability

    @routing_respects_user_availability.setter
    def routing_respects_user_availability(self, routing_respects_user_availability):
        """Sets the routing_respects_user_availability of this UpdateTimezoneWorkingHoursDto.

        Whether the routing rules respect the user availability for the teams  # noqa: E501

        :param routing_respects_user_availability: The routing_respects_user_availability of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: bool
        """

        self._routing_respects_user_availability = routing_respects_user_availability

    @property
    def user_routing_strategy(self):
        """Gets the user_routing_strategy of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        The user routing strategy for the team  # noqa: E501

        :return: The user_routing_strategy of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: str
        """
        return self._user_routing_strategy

    @user_routing_strategy.setter
    def user_routing_strategy(self, user_routing_strategy):
        """Sets the user_routing_strategy of this UpdateTimezoneWorkingHoursDto.

        The user routing strategy for the team  # noqa: E501

        :param user_routing_strategy: The user_routing_strategy of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["manual", "round_robin"]  # noqa: E501
        if user_routing_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `user_routing_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(user_routing_strategy, allowed_values)
            )

        self._user_routing_strategy = user_routing_strategy

    @property
    def common_daily_config(self):
        """Gets the common_daily_config of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        Whether the team uses common daily config  # noqa: E501

        :return: The common_daily_config of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: bool
        """
        return self._common_daily_config

    @common_daily_config.setter
    def common_daily_config(self, common_daily_config):
        """Sets the common_daily_config of this UpdateTimezoneWorkingHoursDto.

        Whether the team uses common daily config  # noqa: E501

        :param common_daily_config: The common_daily_config of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: bool
        """

        self._common_daily_config = common_daily_config

    @property
    def common_slots(self):
        """Gets the common_slots of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        The common slots for the team  # noqa: E501

        :return: The common_slots of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._common_slots

    @common_slots.setter
    def common_slots(self, common_slots):
        """Sets the common_slots of this UpdateTimezoneWorkingHoursDto.

        The common slots for the team  # noqa: E501

        :param common_slots: The common_slots of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: list[str]
        """

        self._common_slots = common_slots

    @property
    def daily_config(self):
        """Gets the daily_config of this UpdateTimezoneWorkingHoursDto.  # noqa: E501

        The business hours of the team  # noqa: E501

        :return: The daily_config of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :rtype: AllOfUpdateTimezoneWorkingHoursDtoDailyConfig
        """
        return self._daily_config

    @daily_config.setter
    def daily_config(self, daily_config):
        """Sets the daily_config of this UpdateTimezoneWorkingHoursDto.

        The business hours of the team  # noqa: E501

        :param daily_config: The daily_config of this UpdateTimezoneWorkingHoursDto.  # noqa: E501
        :type: AllOfUpdateTimezoneWorkingHoursDtoDailyConfig
        """

        self._daily_config = daily_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTimezoneWorkingHoursDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTimezoneWorkingHoursDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
