# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateAccountTaskDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'assignee_id': 'str',
        'activity_id': 'str',
        'description': 'str',
        'type': 'str',
        'status': 'str',
        'priority': 'str',
        'attachment_urls': 'list[str]'
    }

    attribute_map = {
        'title': 'title',
        'assignee_id': 'assigneeId',
        'activity_id': 'activityId',
        'description': 'description',
        'type': 'type',
        'status': 'status',
        'priority': 'priority',
        'attachment_urls': 'attachmentUrls'
    }

    def __init__(self, title=None, assignee_id=None, activity_id=None, description=None, type=None, status=None, priority=None, attachment_urls=None):  # noqa: E501
        """UpdateAccountTaskDto - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._assignee_id = None
        self._activity_id = None
        self._description = None
        self._type = None
        self._status = None
        self._priority = None
        self._attachment_urls = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if assignee_id is not None:
            self.assignee_id = assignee_id
        if activity_id is not None:
            self.activity_id = activity_id
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if priority is not None:
            self.priority = priority
        if attachment_urls is not None:
            self.attachment_urls = attachment_urls

    @property
    def title(self):
        """Gets the title of this UpdateAccountTaskDto.  # noqa: E501

        The title of the task  # noqa: E501

        :return: The title of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateAccountTaskDto.

        The title of the task  # noqa: E501

        :param title: The title of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def assignee_id(self):
        """Gets the assignee_id of this UpdateAccountTaskDto.  # noqa: E501

        The identifier of the assignee  # noqa: E501

        :return: The assignee_id of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this UpdateAccountTaskDto.

        The identifier of the assignee  # noqa: E501

        :param assignee_id: The assignee_id of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._assignee_id = assignee_id

    @property
    def activity_id(self):
        """Gets the activity_id of this UpdateAccountTaskDto.  # noqa: E501

        Change the activity associated with the task  # noqa: E501

        :return: The activity_id of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this UpdateAccountTaskDto.

        Change the activity associated with the task  # noqa: E501

        :param activity_id: The activity_id of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def description(self):
        """Gets the description of this UpdateAccountTaskDto.  # noqa: E501

        The description of the task  # noqa: E501

        :return: The description of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAccountTaskDto.

        The description of the task  # noqa: E501

        :param description: The description of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this UpdateAccountTaskDto.  # noqa: E501

        The identifier / value of the type attribute of the task  # noqa: E501

        :return: The type of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateAccountTaskDto.

        The identifier / value of the type attribute of the task  # noqa: E501

        :param type: The type of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this UpdateAccountTaskDto.  # noqa: E501

        The identifier / value of the status attribute of the task   # noqa: E501

        :return: The status of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAccountTaskDto.

        The identifier / value of the status attribute of the task   # noqa: E501

        :param status: The status of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def priority(self):
        """Gets the priority of this UpdateAccountTaskDto.  # noqa: E501

        The identifier / value of the priority attribute of the task  # noqa: E501

        :return: The priority of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdateAccountTaskDto.

        The identifier / value of the priority attribute of the task  # noqa: E501

        :param priority: The priority of this UpdateAccountTaskDto.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def attachment_urls(self):
        """Gets the attachment_urls of this UpdateAccountTaskDto.  # noqa: E501

        The URLs of the attachments to attach to the note  # noqa: E501

        :return: The attachment_urls of this UpdateAccountTaskDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_urls

    @attachment_urls.setter
    def attachment_urls(self, attachment_urls):
        """Sets the attachment_urls of this UpdateAccountTaskDto.

        The URLs of the attachments to attach to the note  # noqa: E501

        :param attachment_urls: The attachment_urls of this UpdateAccountTaskDto.  # noqa: E501
        :type: list[str]
        """

        self._attachment_urls = attachment_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAccountTaskDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAccountTaskDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
