# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTicketsBulkDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_id': 'str',
        'type_id': 'str',
        'priority_id': 'str',
        'assigned_agent_id': 'str',
        'is_private': 'bool',
        'ticket_ids': 'list[str]'
    }

    attribute_map = {
        'status_id': 'statusId',
        'type_id': 'typeId',
        'priority_id': 'priorityId',
        'assigned_agent_id': 'assignedAgentId',
        'is_private': 'isPrivate',
        'ticket_ids': 'ticketIds'
    }

    def __init__(self, status_id=None, type_id=None, priority_id=None, assigned_agent_id=None, is_private=None, ticket_ids=None):  # noqa: E501
        """UpdateTicketsBulkDto - a model defined in Swagger"""  # noqa: E501
        self._status_id = None
        self._type_id = None
        self._priority_id = None
        self._assigned_agent_id = None
        self._is_private = None
        self._ticket_ids = None
        self.discriminator = None
        if status_id is not None:
            self.status_id = status_id
        if type_id is not None:
            self.type_id = type_id
        if priority_id is not None:
            self.priority_id = priority_id
        if assigned_agent_id is not None:
            self.assigned_agent_id = assigned_agent_id
        if is_private is not None:
            self.is_private = is_private
        self.ticket_ids = ticket_ids

    @property
    def status_id(self):
        """Gets the status_id of this UpdateTicketsBulkDto.  # noqa: E501

        The ID of the status  # noqa: E501

        :return: The status_id of this UpdateTicketsBulkDto.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this UpdateTicketsBulkDto.

        The ID of the status  # noqa: E501

        :param status_id: The status_id of this UpdateTicketsBulkDto.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    @property
    def type_id(self):
        """Gets the type_id of this UpdateTicketsBulkDto.  # noqa: E501

        The ID of the type  # noqa: E501

        :return: The type_id of this UpdateTicketsBulkDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this UpdateTicketsBulkDto.

        The ID of the type  # noqa: E501

        :param type_id: The type_id of this UpdateTicketsBulkDto.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def priority_id(self):
        """Gets the priority_id of this UpdateTicketsBulkDto.  # noqa: E501

        The ID of the priority  # noqa: E501

        :return: The priority_id of this UpdateTicketsBulkDto.  # noqa: E501
        :rtype: str
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this UpdateTicketsBulkDto.

        The ID of the priority  # noqa: E501

        :param priority_id: The priority_id of this UpdateTicketsBulkDto.  # noqa: E501
        :type: str
        """

        self._priority_id = priority_id

    @property
    def assigned_agent_id(self):
        """Gets the assigned_agent_id of this UpdateTicketsBulkDto.  # noqa: E501

        The ID of the assigned agent  # noqa: E501

        :return: The assigned_agent_id of this UpdateTicketsBulkDto.  # noqa: E501
        :rtype: str
        """
        return self._assigned_agent_id

    @assigned_agent_id.setter
    def assigned_agent_id(self, assigned_agent_id):
        """Sets the assigned_agent_id of this UpdateTicketsBulkDto.

        The ID of the assigned agent  # noqa: E501

        :param assigned_agent_id: The assigned_agent_id of this UpdateTicketsBulkDto.  # noqa: E501
        :type: str
        """

        self._assigned_agent_id = assigned_agent_id

    @property
    def is_private(self):
        """Gets the is_private of this UpdateTicketsBulkDto.  # noqa: E501

        Whether the ticket is private  # noqa: E501

        :return: The is_private of this UpdateTicketsBulkDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this UpdateTicketsBulkDto.

        Whether the ticket is private  # noqa: E501

        :param is_private: The is_private of this UpdateTicketsBulkDto.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def ticket_ids(self):
        """Gets the ticket_ids of this UpdateTicketsBulkDto.  # noqa: E501

        The IDs of the tickets to update  # noqa: E501

        :return: The ticket_ids of this UpdateTicketsBulkDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._ticket_ids

    @ticket_ids.setter
    def ticket_ids(self, ticket_ids):
        """Sets the ticket_ids of this UpdateTicketsBulkDto.

        The IDs of the tickets to update  # noqa: E501

        :param ticket_ids: The ticket_ids of this UpdateTicketsBulkDto.  # noqa: E501
        :type: list[str]
        """
        if ticket_ids is None:
            raise ValueError("Invalid value for `ticket_ids`, must not be `None`")  # noqa: E501

        self._ticket_ids = ticket_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTicketsBulkDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTicketsBulkDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
