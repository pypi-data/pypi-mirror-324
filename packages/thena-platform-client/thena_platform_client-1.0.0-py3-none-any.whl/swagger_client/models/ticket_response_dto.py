# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'ticket_id': 'float',
        'description': 'str',
        'account_id': 'str',
        'status': 'str',
        'status_id': 'str',
        'priority': 'str',
        'priority_id': 'str',
        'story_points': 'float',
        'account': 'str',
        'team_id': 'str',
        'team_name': 'str',
        'is_private': 'bool',
        'type_id': 'str',
        'type': 'str',
        'assigned_agent': 'str',
        'assigned_agent_id': 'str',
        'requestor_email': 'str',
        'submitter_email': 'str',
        'custom_field_values': 'list[str]',
        'deleted_at': 'str',
        'archived_at': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'form_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'ticket_id': 'ticketId',
        'description': 'description',
        'account_id': 'accountId',
        'status': 'status',
        'status_id': 'statusId',
        'priority': 'priority',
        'priority_id': 'priorityId',
        'story_points': 'storyPoints',
        'account': 'account',
        'team_id': 'teamId',
        'team_name': 'teamName',
        'is_private': 'isPrivate',
        'type_id': 'typeId',
        'type': 'type',
        'assigned_agent': 'assignedAgent',
        'assigned_agent_id': 'assignedAgentId',
        'requestor_email': 'requestorEmail',
        'submitter_email': 'submitterEmail',
        'custom_field_values': 'customFieldValues',
        'deleted_at': 'deletedAt',
        'archived_at': 'archivedAt',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'form_id': 'formId'
    }

    def __init__(self, id=None, title=None, ticket_id=None, description=None, account_id=None, status=None, status_id=None, priority=None, priority_id=None, story_points=None, account=None, team_id=None, team_name=None, is_private=None, type_id=None, type=None, assigned_agent=None, assigned_agent_id=None, requestor_email=None, submitter_email=None, custom_field_values=None, deleted_at=None, archived_at=None, created_at=None, updated_at=None, form_id=None):  # noqa: E501
        """TicketResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._ticket_id = None
        self._description = None
        self._account_id = None
        self._status = None
        self._status_id = None
        self._priority = None
        self._priority_id = None
        self._story_points = None
        self._account = None
        self._team_id = None
        self._team_name = None
        self._is_private = None
        self._type_id = None
        self._type = None
        self._assigned_agent = None
        self._assigned_agent_id = None
        self._requestor_email = None
        self._submitter_email = None
        self._custom_field_values = None
        self._deleted_at = None
        self._archived_at = None
        self._created_at = None
        self._updated_at = None
        self._form_id = None
        self.discriminator = None
        self.id = id
        self.title = title
        self.ticket_id = ticket_id
        self.description = description
        self.account_id = account_id
        self.status = status
        self.status_id = status_id
        self.priority = priority
        self.priority_id = priority_id
        self.story_points = story_points
        self.account = account
        self.team_id = team_id
        self.team_name = team_name
        self.is_private = is_private
        self.type_id = type_id
        self.type = type
        self.assigned_agent = assigned_agent
        self.assigned_agent_id = assigned_agent_id
        self.requestor_email = requestor_email
        self.submitter_email = submitter_email
        self.custom_field_values = custom_field_values
        self.deleted_at = deleted_at
        self.archived_at = archived_at
        self.created_at = created_at
        self.updated_at = updated_at
        self.form_id = form_id

    @property
    def id(self):
        """Gets the id of this TicketResponseDto.  # noqa: E501

        The unique identifier of the ticket  # noqa: E501

        :return: The id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketResponseDto.

        The unique identifier of the ticket  # noqa: E501

        :param id: The id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this TicketResponseDto.  # noqa: E501

        The title of the ticket  # noqa: E501

        :return: The title of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TicketResponseDto.

        The title of the ticket  # noqa: E501

        :param title: The title of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def ticket_id(self):
        """Gets the ticket_id of this TicketResponseDto.  # noqa: E501

        The ticket ID of the ticket  # noqa: E501

        :return: The ticket_id of this TicketResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this TicketResponseDto.

        The ticket ID of the ticket  # noqa: E501

        :param ticket_id: The ticket_id of this TicketResponseDto.  # noqa: E501
        :type: float
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")  # noqa: E501

        self._ticket_id = ticket_id

    @property
    def description(self):
        """Gets the description of this TicketResponseDto.  # noqa: E501

        The description of the ticket  # noqa: E501

        :return: The description of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketResponseDto.

        The description of the ticket  # noqa: E501

        :param description: The description of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def account_id(self):
        """Gets the account_id of this TicketResponseDto.  # noqa: E501

        The account ID of the ticket  # noqa: E501

        :return: The account_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TicketResponseDto.

        The account ID of the ticket  # noqa: E501

        :param account_id: The account_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def status(self):
        """Gets the status of this TicketResponseDto.  # noqa: E501

        The status of the ticket  # noqa: E501

        :return: The status of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TicketResponseDto.

        The status of the ticket  # noqa: E501

        :param status: The status of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_id(self):
        """Gets the status_id of this TicketResponseDto.  # noqa: E501

        The status ID of the ticket  # noqa: E501

        :return: The status_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this TicketResponseDto.

        The status ID of the ticket  # noqa: E501

        :param status_id: The status_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def priority(self):
        """Gets the priority of this TicketResponseDto.  # noqa: E501

        The priority of the ticket  # noqa: E501

        :return: The priority of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TicketResponseDto.

        The priority of the ticket  # noqa: E501

        :param priority: The priority of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def priority_id(self):
        """Gets the priority_id of this TicketResponseDto.  # noqa: E501

        The priority ID of the ticket  # noqa: E501

        :return: The priority_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this TicketResponseDto.

        The priority ID of the ticket  # noqa: E501

        :param priority_id: The priority_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if priority_id is None:
            raise ValueError("Invalid value for `priority_id`, must not be `None`")  # noqa: E501

        self._priority_id = priority_id

    @property
    def story_points(self):
        """Gets the story_points of this TicketResponseDto.  # noqa: E501

        The story points of the ticket  # noqa: E501

        :return: The story_points of this TicketResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._story_points

    @story_points.setter
    def story_points(self, story_points):
        """Sets the story_points of this TicketResponseDto.

        The story points of the ticket  # noqa: E501

        :param story_points: The story_points of this TicketResponseDto.  # noqa: E501
        :type: float
        """
        if story_points is None:
            raise ValueError("Invalid value for `story_points`, must not be `None`")  # noqa: E501

        self._story_points = story_points

    @property
    def account(self):
        """Gets the account of this TicketResponseDto.  # noqa: E501

        The account of the ticket  # noqa: E501

        :return: The account of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this TicketResponseDto.

        The account of the ticket  # noqa: E501

        :param account: The account of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def team_id(self):
        """Gets the team_id of this TicketResponseDto.  # noqa: E501

        The team ID of the ticket  # noqa: E501

        :return: The team_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TicketResponseDto.

        The team ID of the ticket  # noqa: E501

        :param team_id: The team_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this TicketResponseDto.  # noqa: E501

        The name of the team of the ticket  # noqa: E501

        :return: The team_name of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this TicketResponseDto.

        The name of the team of the ticket  # noqa: E501

        :param team_name: The team_name of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if team_name is None:
            raise ValueError("Invalid value for `team_name`, must not be `None`")  # noqa: E501

        self._team_name = team_name

    @property
    def is_private(self):
        """Gets the is_private of this TicketResponseDto.  # noqa: E501

        Whether the ticket is private  # noqa: E501

        :return: The is_private of this TicketResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this TicketResponseDto.

        Whether the ticket is private  # noqa: E501

        :param is_private: The is_private of this TicketResponseDto.  # noqa: E501
        :type: bool
        """
        if is_private is None:
            raise ValueError("Invalid value for `is_private`, must not be `None`")  # noqa: E501

        self._is_private = is_private

    @property
    def type_id(self):
        """Gets the type_id of this TicketResponseDto.  # noqa: E501

        The type ID of the ticket  # noqa: E501

        :return: The type_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this TicketResponseDto.

        The type ID of the ticket  # noqa: E501

        :param type_id: The type_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def type(self):
        """Gets the type of this TicketResponseDto.  # noqa: E501

        The name of the type of the ticket  # noqa: E501

        :return: The type of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TicketResponseDto.

        The name of the type of the ticket  # noqa: E501

        :param type: The type of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def assigned_agent(self):
        """Gets the assigned_agent of this TicketResponseDto.  # noqa: E501

        The assigned agent of the ticket  # noqa: E501

        :return: The assigned_agent of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._assigned_agent

    @assigned_agent.setter
    def assigned_agent(self, assigned_agent):
        """Sets the assigned_agent of this TicketResponseDto.

        The assigned agent of the ticket  # noqa: E501

        :param assigned_agent: The assigned_agent of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if assigned_agent is None:
            raise ValueError("Invalid value for `assigned_agent`, must not be `None`")  # noqa: E501

        self._assigned_agent = assigned_agent

    @property
    def assigned_agent_id(self):
        """Gets the assigned_agent_id of this TicketResponseDto.  # noqa: E501

        The assigned agent ID of the ticket  # noqa: E501

        :return: The assigned_agent_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._assigned_agent_id

    @assigned_agent_id.setter
    def assigned_agent_id(self, assigned_agent_id):
        """Sets the assigned_agent_id of this TicketResponseDto.

        The assigned agent ID of the ticket  # noqa: E501

        :param assigned_agent_id: The assigned_agent_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if assigned_agent_id is None:
            raise ValueError("Invalid value for `assigned_agent_id`, must not be `None`")  # noqa: E501

        self._assigned_agent_id = assigned_agent_id

    @property
    def requestor_email(self):
        """Gets the requestor_email of this TicketResponseDto.  # noqa: E501

        The requestor email of the ticket  # noqa: E501

        :return: The requestor_email of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._requestor_email

    @requestor_email.setter
    def requestor_email(self, requestor_email):
        """Sets the requestor_email of this TicketResponseDto.

        The requestor email of the ticket  # noqa: E501

        :param requestor_email: The requestor_email of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if requestor_email is None:
            raise ValueError("Invalid value for `requestor_email`, must not be `None`")  # noqa: E501

        self._requestor_email = requestor_email

    @property
    def submitter_email(self):
        """Gets the submitter_email of this TicketResponseDto.  # noqa: E501

        The submitter email of the ticket  # noqa: E501

        :return: The submitter_email of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._submitter_email

    @submitter_email.setter
    def submitter_email(self, submitter_email):
        """Sets the submitter_email of this TicketResponseDto.

        The submitter email of the ticket  # noqa: E501

        :param submitter_email: The submitter_email of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if submitter_email is None:
            raise ValueError("Invalid value for `submitter_email`, must not be `None`")  # noqa: E501

        self._submitter_email = submitter_email

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this TicketResponseDto.  # noqa: E501

        The custom field values  # noqa: E501

        :return: The custom_field_values of this TicketResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this TicketResponseDto.

        The custom field values  # noqa: E501

        :param custom_field_values: The custom_field_values of this TicketResponseDto.  # noqa: E501
        :type: list[str]
        """
        if custom_field_values is None:
            raise ValueError("Invalid value for `custom_field_values`, must not be `None`")  # noqa: E501

        self._custom_field_values = custom_field_values

    @property
    def deleted_at(self):
        """Gets the deleted_at of this TicketResponseDto.  # noqa: E501

        The deleted at date of the ticket  # noqa: E501

        :return: The deleted_at of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this TicketResponseDto.

        The deleted at date of the ticket  # noqa: E501

        :param deleted_at: The deleted_at of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")  # noqa: E501

        self._deleted_at = deleted_at

    @property
    def archived_at(self):
        """Gets the archived_at of this TicketResponseDto.  # noqa: E501

        The archived at date of the ticket  # noqa: E501

        :return: The archived_at of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this TicketResponseDto.

        The archived at date of the ticket  # noqa: E501

        :param archived_at: The archived_at of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if archived_at is None:
            raise ValueError("Invalid value for `archived_at`, must not be `None`")  # noqa: E501

        self._archived_at = archived_at

    @property
    def created_at(self):
        """Gets the created_at of this TicketResponseDto.  # noqa: E501

        The created at date of the ticket  # noqa: E501

        :return: The created_at of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketResponseDto.

        The created at date of the ticket  # noqa: E501

        :param created_at: The created_at of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketResponseDto.  # noqa: E501

        The updated at date of the ticket  # noqa: E501

        :return: The updated_at of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketResponseDto.

        The updated at date of the ticket  # noqa: E501

        :param updated_at: The updated_at of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def form_id(self):
        """Gets the form_id of this TicketResponseDto.  # noqa: E501

        The form ID of the ticket  # noqa: E501

        :return: The form_id of this TicketResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this TicketResponseDto.

        The form ID of the ticket  # noqa: E501

        :param form_id: The form_id of this TicketResponseDto.  # noqa: E501
        :type: str
        """
        if form_id is None:
            raise ValueError("Invalid value for `form_id`, must not be `None`")  # noqa: E501

        self._form_id = form_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
