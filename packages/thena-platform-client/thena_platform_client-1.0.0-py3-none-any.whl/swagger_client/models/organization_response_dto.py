# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'name': 'str',
        'is_active': 'bool',
        'created_at': 'str',
        'updated_at': 'str',
        'logo_url': 'str',
        'is_verified': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'orgId',
        'name': 'name',
        'is_active': 'isActive',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'logo_url': 'logoUrl',
        'is_verified': 'isVerified'
    }

    def __init__(self, id=None, org_id=None, name=None, is_active=None, created_at=None, updated_at=None, logo_url=None, is_verified=None):  # noqa: E501
        """OrganizationResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._org_id = None
        self._name = None
        self._is_active = None
        self._created_at = None
        self._updated_at = None
        self._logo_url = None
        self._is_verified = None
        self.discriminator = None
        self.id = id
        self.org_id = org_id
        self.name = name
        self.is_active = is_active
        self.created_at = created_at
        self.updated_at = updated_at
        self.logo_url = logo_url
        self.is_verified = is_verified

    @property
    def id(self):
        """Gets the id of this OrganizationResponseDto.  # noqa: E501

        The unique identifier of the organization  # noqa: E501

        :return: The id of this OrganizationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationResponseDto.

        The unique identifier of the organization  # noqa: E501

        :param id: The id of this OrganizationResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this OrganizationResponseDto.  # noqa: E501

        The unique identifier of the organization  # noqa: E501

        :return: The org_id of this OrganizationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this OrganizationResponseDto.

        The unique identifier of the organization  # noqa: E501

        :param org_id: The org_id of this OrganizationResponseDto.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def name(self):
        """Gets the name of this OrganizationResponseDto.  # noqa: E501

        The name of the organization  # noqa: E501

        :return: The name of this OrganizationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationResponseDto.

        The name of the organization  # noqa: E501

        :param name: The name of this OrganizationResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_active(self):
        """Gets the is_active of this OrganizationResponseDto.  # noqa: E501

        Whether the organization is active  # noqa: E501

        :return: The is_active of this OrganizationResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this OrganizationResponseDto.

        Whether the organization is active  # noqa: E501

        :param is_active: The is_active of this OrganizationResponseDto.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationResponseDto.  # noqa: E501

        The created at date of the organization  # noqa: E501

        :return: The created_at of this OrganizationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationResponseDto.

        The created at date of the organization  # noqa: E501

        :param created_at: The created_at of this OrganizationResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this OrganizationResponseDto.  # noqa: E501

        The updated at date of the organization  # noqa: E501

        :return: The updated_at of this OrganizationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrganizationResponseDto.

        The updated at date of the organization  # noqa: E501

        :param updated_at: The updated_at of this OrganizationResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def logo_url(self):
        """Gets the logo_url of this OrganizationResponseDto.  # noqa: E501

        The logo URL of the organization  # noqa: E501

        :return: The logo_url of this OrganizationResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this OrganizationResponseDto.

        The logo URL of the organization  # noqa: E501

        :param logo_url: The logo_url of this OrganizationResponseDto.  # noqa: E501
        :type: str
        """
        if logo_url is None:
            raise ValueError("Invalid value for `logo_url`, must not be `None`")  # noqa: E501

        self._logo_url = logo_url

    @property
    def is_verified(self):
        """Gets the is_verified of this OrganizationResponseDto.  # noqa: E501

        Whether the organization is verified  # noqa: E501

        :return: The is_verified of this OrganizationResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this OrganizationResponseDto.

        Whether the organization is verified  # noqa: E501

        :param is_verified: The is_verified of this OrganizationResponseDto.  # noqa: E501
        :type: bool
        """
        if is_verified is None:
            raise ValueError("Invalid value for `is_verified`, must not be `None`")  # noqa: E501

        self._is_verified = is_verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
