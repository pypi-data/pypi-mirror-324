# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkCreateCustomerContactsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contacts': 'list[str]',
        'account_ids': 'list[str]',
        'contact_type': 'str'
    }

    attribute_map = {
        'contacts': 'contacts',
        'account_ids': 'accountIds',
        'contact_type': 'contactType'
    }

    def __init__(self, contacts=None, account_ids=None, contact_type=None):  # noqa: E501
        """BulkCreateCustomerContactsDto - a model defined in Swagger"""  # noqa: E501
        self._contacts = None
        self._account_ids = None
        self._contact_type = None
        self.discriminator = None
        self.contacts = contacts
        if account_ids is not None:
            self.account_ids = account_ids
        if contact_type is not None:
            self.contact_type = contact_type

    @property
    def contacts(self):
        """Gets the contacts of this BulkCreateCustomerContactsDto.  # noqa: E501

        Details of customer contacts to create  # noqa: E501

        :return: The contacts of this BulkCreateCustomerContactsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this BulkCreateCustomerContactsDto.

        Details of customer contacts to create  # noqa: E501

        :param contacts: The contacts of this BulkCreateCustomerContactsDto.  # noqa: E501
        :type: list[str]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def account_ids(self):
        """Gets the account_ids of this BulkCreateCustomerContactsDto.  # noqa: E501

        Account ID of the customer contacts  # noqa: E501

        :return: The account_ids of this BulkCreateCustomerContactsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this BulkCreateCustomerContactsDto.

        Account ID of the customer contacts  # noqa: E501

        :param account_ids: The account_ids of this BulkCreateCustomerContactsDto.  # noqa: E501
        :type: list[str]
        """

        self._account_ids = account_ids

    @property
    def contact_type(self):
        """Gets the contact_type of this BulkCreateCustomerContactsDto.  # noqa: E501

        Contact type of the customer contacts  # noqa: E501

        :return: The contact_type of this BulkCreateCustomerContactsDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this BulkCreateCustomerContactsDto.

        Contact type of the customer contacts  # noqa: E501

        :param contact_type: The contact_type of this BulkCreateCustomerContactsDto.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkCreateCustomerContactsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkCreateCustomerContactsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
