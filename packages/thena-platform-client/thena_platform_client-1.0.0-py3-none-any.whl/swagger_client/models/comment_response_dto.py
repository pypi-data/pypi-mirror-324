# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommentResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content': 'str',
        'content_html': 'str',
        'content_markdown': 'str',
        'is_edited': 'bool',
        'thread_name': 'str',
        'comment_visibility': 'str',
        'comment_type': 'str',
        'is_pinned': 'bool',
        'source_email_id': 'str',
        'metadata': 'object',
        'parent_comment_id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'author': 'str',
        'author_id': 'str',
        'author_user_type': 'str',
        'attachments': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'content': 'content',
        'content_html': 'contentHtml',
        'content_markdown': 'contentMarkdown',
        'is_edited': 'isEdited',
        'thread_name': 'threadName',
        'comment_visibility': 'commentVisibility',
        'comment_type': 'commentType',
        'is_pinned': 'isPinned',
        'source_email_id': 'sourceEmailId',
        'metadata': 'metadata',
        'parent_comment_id': 'parentCommentId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'author': 'author',
        'author_id': 'authorId',
        'author_user_type': 'authorUserType',
        'attachments': 'attachments'
    }

    def __init__(self, id=None, content=None, content_html=None, content_markdown=None, is_edited=None, thread_name=None, comment_visibility=None, comment_type=None, is_pinned=None, source_email_id=None, metadata=None, parent_comment_id=None, created_at=None, updated_at=None, author=None, author_id=None, author_user_type=None, attachments=None):  # noqa: E501
        """CommentResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content = None
        self._content_html = None
        self._content_markdown = None
        self._is_edited = None
        self._thread_name = None
        self._comment_visibility = None
        self._comment_type = None
        self._is_pinned = None
        self._source_email_id = None
        self._metadata = None
        self._parent_comment_id = None
        self._created_at = None
        self._updated_at = None
        self._author = None
        self._author_id = None
        self._author_user_type = None
        self._attachments = None
        self.discriminator = None
        self.id = id
        self.content = content
        self.content_html = content_html
        self.content_markdown = content_markdown
        self.is_edited = is_edited
        self.thread_name = thread_name
        self.comment_visibility = comment_visibility
        self.comment_type = comment_type
        self.is_pinned = is_pinned
        self.source_email_id = source_email_id
        self.metadata = metadata
        self.parent_comment_id = parent_comment_id
        self.created_at = created_at
        self.updated_at = updated_at
        self.author = author
        self.author_id = author_id
        self.author_user_type = author_user_type
        self.attachments = attachments

    @property
    def id(self):
        """Gets the id of this CommentResponseDto.  # noqa: E501

        The unique identifier of the comment  # noqa: E501

        :return: The id of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommentResponseDto.

        The unique identifier of the comment  # noqa: E501

        :param id: The id of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def content(self):
        """Gets the content of this CommentResponseDto.  # noqa: E501

        The content of the comment  # noqa: E501

        :return: The content of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CommentResponseDto.

        The content of the comment  # noqa: E501

        :param content: The content of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def content_html(self):
        """Gets the content_html of this CommentResponseDto.  # noqa: E501

        The HTML content of the comment  # noqa: E501

        :return: The content_html of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._content_html

    @content_html.setter
    def content_html(self, content_html):
        """Sets the content_html of this CommentResponseDto.

        The HTML content of the comment  # noqa: E501

        :param content_html: The content_html of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if content_html is None:
            raise ValueError("Invalid value for `content_html`, must not be `None`")  # noqa: E501

        self._content_html = content_html

    @property
    def content_markdown(self):
        """Gets the content_markdown of this CommentResponseDto.  # noqa: E501

        The markdown content of the comment  # noqa: E501

        :return: The content_markdown of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._content_markdown

    @content_markdown.setter
    def content_markdown(self, content_markdown):
        """Sets the content_markdown of this CommentResponseDto.

        The markdown content of the comment  # noqa: E501

        :param content_markdown: The content_markdown of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if content_markdown is None:
            raise ValueError("Invalid value for `content_markdown`, must not be `None`")  # noqa: E501

        self._content_markdown = content_markdown

    @property
    def is_edited(self):
        """Gets the is_edited of this CommentResponseDto.  # noqa: E501

        Indicates if the comment is edited  # noqa: E501

        :return: The is_edited of this CommentResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_edited

    @is_edited.setter
    def is_edited(self, is_edited):
        """Sets the is_edited of this CommentResponseDto.

        Indicates if the comment is edited  # noqa: E501

        :param is_edited: The is_edited of this CommentResponseDto.  # noqa: E501
        :type: bool
        """
        if is_edited is None:
            raise ValueError("Invalid value for `is_edited`, must not be `None`")  # noqa: E501

        self._is_edited = is_edited

    @property
    def thread_name(self):
        """Gets the thread_name of this CommentResponseDto.  # noqa: E501

        The name of the comment thread  # noqa: E501

        :return: The thread_name of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._thread_name

    @thread_name.setter
    def thread_name(self, thread_name):
        """Sets the thread_name of this CommentResponseDto.

        The name of the comment thread  # noqa: E501

        :param thread_name: The thread_name of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if thread_name is None:
            raise ValueError("Invalid value for `thread_name`, must not be `None`")  # noqa: E501

        self._thread_name = thread_name

    @property
    def comment_visibility(self):
        """Gets the comment_visibility of this CommentResponseDto.  # noqa: E501

        The visibility of the comment  # noqa: E501

        :return: The comment_visibility of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._comment_visibility

    @comment_visibility.setter
    def comment_visibility(self, comment_visibility):
        """Sets the comment_visibility of this CommentResponseDto.

        The visibility of the comment  # noqa: E501

        :param comment_visibility: The comment_visibility of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if comment_visibility is None:
            raise ValueError("Invalid value for `comment_visibility`, must not be `None`")  # noqa: E501

        self._comment_visibility = comment_visibility

    @property
    def comment_type(self):
        """Gets the comment_type of this CommentResponseDto.  # noqa: E501

        The type of the comment  # noqa: E501

        :return: The comment_type of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._comment_type

    @comment_type.setter
    def comment_type(self, comment_type):
        """Sets the comment_type of this CommentResponseDto.

        The type of the comment  # noqa: E501

        :param comment_type: The comment_type of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if comment_type is None:
            raise ValueError("Invalid value for `comment_type`, must not be `None`")  # noqa: E501

        self._comment_type = comment_type

    @property
    def is_pinned(self):
        """Gets the is_pinned of this CommentResponseDto.  # noqa: E501

        Indicates if the comment is pinned  # noqa: E501

        :return: The is_pinned of this CommentResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned):
        """Sets the is_pinned of this CommentResponseDto.

        Indicates if the comment is pinned  # noqa: E501

        :param is_pinned: The is_pinned of this CommentResponseDto.  # noqa: E501
        :type: bool
        """
        if is_pinned is None:
            raise ValueError("Invalid value for `is_pinned`, must not be `None`")  # noqa: E501

        self._is_pinned = is_pinned

    @property
    def source_email_id(self):
        """Gets the source_email_id of this CommentResponseDto.  # noqa: E501

        The source email ID of the comment  # noqa: E501

        :return: The source_email_id of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._source_email_id

    @source_email_id.setter
    def source_email_id(self, source_email_id):
        """Sets the source_email_id of this CommentResponseDto.

        The source email ID of the comment  # noqa: E501

        :param source_email_id: The source_email_id of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if source_email_id is None:
            raise ValueError("Invalid value for `source_email_id`, must not be `None`")  # noqa: E501

        self._source_email_id = source_email_id

    @property
    def metadata(self):
        """Gets the metadata of this CommentResponseDto.  # noqa: E501

        The metadata of the comment  # noqa: E501

        :return: The metadata of this CommentResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CommentResponseDto.

        The metadata of the comment  # noqa: E501

        :param metadata: The metadata of this CommentResponseDto.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this CommentResponseDto.  # noqa: E501

        The parent comment ID of the comment  # noqa: E501

        :return: The parent_comment_id of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this CommentResponseDto.

        The parent comment ID of the comment  # noqa: E501

        :param parent_comment_id: The parent_comment_id of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if parent_comment_id is None:
            raise ValueError("Invalid value for `parent_comment_id`, must not be `None`")  # noqa: E501

        self._parent_comment_id = parent_comment_id

    @property
    def created_at(self):
        """Gets the created_at of this CommentResponseDto.  # noqa: E501

        The creation date of the comment  # noqa: E501

        :return: The created_at of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CommentResponseDto.

        The creation date of the comment  # noqa: E501

        :param created_at: The created_at of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CommentResponseDto.  # noqa: E501

        The update date of the comment  # noqa: E501

        :return: The updated_at of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CommentResponseDto.

        The update date of the comment  # noqa: E501

        :param updated_at: The updated_at of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def author(self):
        """Gets the author of this CommentResponseDto.  # noqa: E501

        The author of the comment  # noqa: E501

        :return: The author of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommentResponseDto.

        The author of the comment  # noqa: E501

        :param author: The author of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def author_id(self):
        """Gets the author_id of this CommentResponseDto.  # noqa: E501

        The unique identifier of the author of the comment  # noqa: E501

        :return: The author_id of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this CommentResponseDto.

        The unique identifier of the author of the comment  # noqa: E501

        :param author_id: The author_id of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def author_user_type(self):
        """Gets the author_user_type of this CommentResponseDto.  # noqa: E501

        The user type of the author of the comment  # noqa: E501

        :return: The author_user_type of this CommentResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._author_user_type

    @author_user_type.setter
    def author_user_type(self, author_user_type):
        """Sets the author_user_type of this CommentResponseDto.

        The user type of the author of the comment  # noqa: E501

        :param author_user_type: The author_user_type of this CommentResponseDto.  # noqa: E501
        :type: str
        """
        if author_user_type is None:
            raise ValueError("Invalid value for `author_user_type`, must not be `None`")  # noqa: E501

        self._author_user_type = author_user_type

    @property
    def attachments(self):
        """Gets the attachments of this CommentResponseDto.  # noqa: E501

        The attachments of the comment  # noqa: E501

        :return: The attachments of this CommentResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CommentResponseDto.

        The attachments of the comment  # noqa: E501

        :param attachments: The attachments of this CommentResponseDto.  # noqa: E501
        :type: list[str]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommentResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
