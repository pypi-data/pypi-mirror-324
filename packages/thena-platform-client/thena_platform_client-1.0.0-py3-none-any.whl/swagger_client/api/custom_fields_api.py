# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomFieldsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_custom_field_delete_post(self, body, **kwargs):  # noqa: E501
        """Delete custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_delete_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteCustomFieldDto body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_delete_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_delete_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_custom_field_delete_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_delete_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteCustomFieldDto body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_custom_field_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_custom_field_fetch_by_ids_get(self, **kwargs):  # noqa: E501
        """Get custom fields by IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_fetch_by_ids_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAllCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_fetch_by_ids_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_fetch_by_ids_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_custom_field_fetch_by_ids_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get custom fields by IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_fetch_by_ids_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAllCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_fetch_by_ids_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field/fetchByIds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_custom_field_get(self, limit, offset, team_id, only_team_fields, **kwargs):  # noqa: E501
        """Get all custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_get(limit, offset, team_id, only_team_fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit: (required)
        :param float offset: (required)
        :param str team_id: (required)
        :param bool only_team_fields: (required)
        :return: GetAllCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_get_with_http_info(limit, offset, team_id, only_team_fields, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_get_with_http_info(limit, offset, team_id, only_team_fields, **kwargs)  # noqa: E501
            return data

    def v1_custom_field_get_with_http_info(self, limit, offset, team_id, only_team_fields, **kwargs):  # noqa: E501
        """Get all custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_get_with_http_info(limit, offset, team_id, only_team_fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit: (required)
        :param float offset: (required)
        :param str team_id: (required)
        :param bool only_team_fields: (required)
        :return: GetAllCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'team_id', 'only_team_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `v1_custom_field_get`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `v1_custom_field_get`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `v1_custom_field_get`")  # noqa: E501
        # verify the required parameter 'only_team_fields' is set
        if ('only_team_fields' not in params or
                params['only_team_fields'] is None):
            raise ValueError("Missing the required parameter `only_team_fields` when calling `v1_custom_field_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'only_team_fields' in params:
            query_params.append(('onlyTeamFields', params['only_team_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_custom_field_patch(self, body, **kwargs):  # noqa: E501
        """Update custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_patch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCustomFieldDto body: (required)
        :return: BatchCustomFieldResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_patch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_patch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_custom_field_patch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update custom fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_patch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCustomFieldDto body: (required)
        :return: BatchCustomFieldResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_custom_field_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchCustomFieldResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_custom_field_post(self, body, **kwargs):  # noqa: E501
        """Create a custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomFieldDto body: (required)
        :return: CustomFieldResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_custom_field_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a custom field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomFieldDto body: (required)
        :return: CustomFieldResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_custom_field_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomFieldResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_custom_field_search_get(self, term, team_id, only_team_fields, **kwargs):  # noqa: E501
        """Search custom field using name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_search_get(term, team_id, only_team_fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: (required)
        :param str team_id: (required)
        :param bool only_team_fields: (required)
        :return: GetAllCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_search_get_with_http_info(term, team_id, only_team_fields, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_search_get_with_http_info(term, team_id, only_team_fields, **kwargs)  # noqa: E501
            return data

    def v1_custom_field_search_get_with_http_info(self, term, team_id, only_team_fields, **kwargs):  # noqa: E501
        """Search custom field using name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_search_get_with_http_info(term, team_id, only_team_fields, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: (required)
        :param str team_id: (required)
        :param bool only_team_fields: (required)
        :return: GetAllCustomFieldsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term', 'team_id', 'only_team_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `v1_custom_field_search_get`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `v1_custom_field_search_get`")  # noqa: E501
        # verify the required parameter 'only_team_fields' is set
        if ('only_team_fields' not in params or
                params['only_team_fields'] is None):
            raise ValueError("Missing the required parameter `only_team_fields` when calling `v1_custom_field_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'term' in params:
            query_params.append(('term', params['term']))  # noqa: E501
        if 'team_id' in params:
            query_params.append(('teamId', params['team_id']))  # noqa: E501
        if 'only_team_fields' in params:
            query_params.append(('onlyTeamFields', params['only_team_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllCustomFieldsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_custom_field_types_get(self, **kwargs):  # noqa: E501
        """Get all custom field types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAllCustomFieldTypesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_custom_field_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_custom_field_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_custom_field_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all custom field types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_custom_field_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAllCustomFieldTypesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_custom_field_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/custom-field/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllCustomFieldTypesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
