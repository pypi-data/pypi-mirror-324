# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamMemberResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'email': 'str',
        'invited_by': 'str',
        'team_id': 'str',
        'team_name': 'str',
        'is_active': 'bool',
        'role': 'str',
        'is_owner': 'bool',
        'joined_at': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'invited_by': 'invitedBy',
        'team_id': 'teamId',
        'team_name': 'teamName',
        'is_active': 'isActive',
        'role': 'role',
        'is_owner': 'isOwner',
        'joined_at': 'joinedAt',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, name=None, email=None, invited_by=None, team_id=None, team_name=None, is_active=None, role=None, is_owner=None, joined_at=None, created_at=None):  # noqa: E501
        """TeamMemberResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._email = None
        self._invited_by = None
        self._team_id = None
        self._team_name = None
        self._is_active = None
        self._role = None
        self._is_owner = None
        self._joined_at = None
        self._created_at = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.email = email
        if invited_by is not None:
            self.invited_by = invited_by
        self.team_id = team_id
        self.team_name = team_name
        self.is_active = is_active
        self.role = role
        self.is_owner = is_owner
        self.joined_at = joined_at
        self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this TeamMemberResponseDto.  # noqa: E501

        The ID of the team member  # noqa: E501

        :return: The id of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamMemberResponseDto.

        The ID of the team member  # noqa: E501

        :param id: The id of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TeamMemberResponseDto.  # noqa: E501

        The name of the team member  # noqa: E501

        :return: The name of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamMemberResponseDto.

        The name of the team member  # noqa: E501

        :param name: The name of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this TeamMemberResponseDto.  # noqa: E501

        The email of the team member  # noqa: E501

        :return: The email of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TeamMemberResponseDto.

        The email of the team member  # noqa: E501

        :param email: The email of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def invited_by(self):
        """Gets the invited_by of this TeamMemberResponseDto.  # noqa: E501

        The name of the user who invited the team member  # noqa: E501

        :return: The invited_by of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this TeamMemberResponseDto.

        The name of the user who invited the team member  # noqa: E501

        :param invited_by: The invited_by of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """

        self._invited_by = invited_by

    @property
    def team_id(self):
        """Gets the team_id of this TeamMemberResponseDto.  # noqa: E501

        The ID of the team  # noqa: E501

        :return: The team_id of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamMemberResponseDto.

        The ID of the team  # noqa: E501

        :param team_id: The team_id of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this TeamMemberResponseDto.  # noqa: E501

        The name of the team  # noqa: E501

        :return: The team_name of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this TeamMemberResponseDto.

        The name of the team  # noqa: E501

        :param team_name: The team_name of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if team_name is None:
            raise ValueError("Invalid value for `team_name`, must not be `None`")  # noqa: E501

        self._team_name = team_name

    @property
    def is_active(self):
        """Gets the is_active of this TeamMemberResponseDto.  # noqa: E501

        Whether the team member is active  # noqa: E501

        :return: The is_active of this TeamMemberResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TeamMemberResponseDto.

        Whether the team member is active  # noqa: E501

        :param is_active: The is_active of this TeamMemberResponseDto.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def role(self):
        """Gets the role of this TeamMemberResponseDto.  # noqa: E501

        The role of the team member  # noqa: E501

        :return: The role of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TeamMemberResponseDto.

        The role of the team member  # noqa: E501

        :param role: The role of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def is_owner(self):
        """Gets the is_owner of this TeamMemberResponseDto.  # noqa: E501

        Whether the team member is the owner of the team  # noqa: E501

        :return: The is_owner of this TeamMemberResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this TeamMemberResponseDto.

        Whether the team member is the owner of the team  # noqa: E501

        :param is_owner: The is_owner of this TeamMemberResponseDto.  # noqa: E501
        :type: bool
        """
        if is_owner is None:
            raise ValueError("Invalid value for `is_owner`, must not be `None`")  # noqa: E501

        self._is_owner = is_owner

    @property
    def joined_at(self):
        """Gets the joined_at of this TeamMemberResponseDto.  # noqa: E501

        The joined date of the team member  # noqa: E501

        :return: The joined_at of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._joined_at

    @joined_at.setter
    def joined_at(self, joined_at):
        """Sets the joined_at of this TeamMemberResponseDto.

        The joined date of the team member  # noqa: E501

        :param joined_at: The joined_at of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if joined_at is None:
            raise ValueError("Invalid value for `joined_at`, must not be `None`")  # noqa: E501

        self._joined_at = joined_at

    @property
    def created_at(self):
        """Gets the created_at of this TeamMemberResponseDto.  # noqa: E501

        The created date of the team member  # noqa: E501

        :return: The created_at of this TeamMemberResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamMemberResponseDto.

        The created date of the team member  # noqa: E501

        :param created_at: The created_at of this TeamMemberResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamMemberResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamMemberResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
