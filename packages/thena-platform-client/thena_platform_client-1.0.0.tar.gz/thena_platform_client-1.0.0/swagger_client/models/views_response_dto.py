# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ViewsResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'team_id': 'str',
        'view_id': 'float',
        'name': 'str',
        'description': 'str',
        'configuration': 'object',
        'views_type_id': 'str',
        'views_type': 'str',
        'owner': 'str',
        'owner_id': 'str',
        'is_shared': 'bool',
        'is_personal': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'team_id': 'teamId',
        'view_id': 'viewId',
        'name': 'name',
        'description': 'description',
        'configuration': 'configuration',
        'views_type_id': 'viewsTypeId',
        'views_type': 'viewsType',
        'owner': 'owner',
        'owner_id': 'ownerId',
        'is_shared': 'isShared',
        'is_personal': 'isPersonal',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, team_id=None, view_id=None, name=None, description=None, configuration=None, views_type_id=None, views_type=None, owner=None, owner_id=None, is_shared=None, is_personal=None, created_at=None, updated_at=None):  # noqa: E501
        """ViewsResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._team_id = None
        self._view_id = None
        self._name = None
        self._description = None
        self._configuration = None
        self._views_type_id = None
        self._views_type = None
        self._owner = None
        self._owner_id = None
        self._is_shared = None
        self._is_personal = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.team_id = team_id
        self.view_id = view_id
        self.name = name
        self.description = description
        self.configuration = configuration
        self.views_type_id = views_type_id
        self.views_type = views_type
        self.owner = owner
        self.owner_id = owner_id
        self.is_shared = is_shared
        self.is_personal = is_personal
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this ViewsResponseDto.  # noqa: E501

        The unique identifier of the view  # noqa: E501

        :return: The id of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ViewsResponseDto.

        The unique identifier of the view  # noqa: E501

        :param id: The id of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def team_id(self):
        """Gets the team_id of this ViewsResponseDto.  # noqa: E501

        The unique identifier of the team of the view  # noqa: E501

        :return: The team_id of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ViewsResponseDto.

        The unique identifier of the team of the view  # noqa: E501

        :param team_id: The team_id of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def view_id(self):
        """Gets the view_id of this ViewsResponseDto.  # noqa: E501

        The view ID of the view  # noqa: E501

        :return: The view_id of this ViewsResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewsResponseDto.

        The view ID of the view  # noqa: E501

        :param view_id: The view_id of this ViewsResponseDto.  # noqa: E501
        :type: float
        """
        if view_id is None:
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    @property
    def name(self):
        """Gets the name of this ViewsResponseDto.  # noqa: E501

        The name of the view  # noqa: E501

        :return: The name of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ViewsResponseDto.

        The name of the view  # noqa: E501

        :param name: The name of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ViewsResponseDto.  # noqa: E501

        The description of the view  # noqa: E501

        :return: The description of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ViewsResponseDto.

        The description of the view  # noqa: E501

        :param description: The description of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def configuration(self):
        """Gets the configuration of this ViewsResponseDto.  # noqa: E501

        The JSON configuration containing view settings and filters  # noqa: E501

        :return: The configuration of this ViewsResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ViewsResponseDto.

        The JSON configuration containing view settings and filters  # noqa: E501

        :param configuration: The configuration of this ViewsResponseDto.  # noqa: E501
        :type: object
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")  # noqa: E501

        self._configuration = configuration

    @property
    def views_type_id(self):
        """Gets the views_type_id of this ViewsResponseDto.  # noqa: E501

        The views type ID of the view  # noqa: E501

        :return: The views_type_id of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._views_type_id

    @views_type_id.setter
    def views_type_id(self, views_type_id):
        """Sets the views_type_id of this ViewsResponseDto.

        The views type ID of the view  # noqa: E501

        :param views_type_id: The views_type_id of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if views_type_id is None:
            raise ValueError("Invalid value for `views_type_id`, must not be `None`")  # noqa: E501

        self._views_type_id = views_type_id

    @property
    def views_type(self):
        """Gets the views_type of this ViewsResponseDto.  # noqa: E501

        The views type of the view  # noqa: E501

        :return: The views_type of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._views_type

    @views_type.setter
    def views_type(self, views_type):
        """Sets the views_type of this ViewsResponseDto.

        The views type of the view  # noqa: E501

        :param views_type: The views_type of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if views_type is None:
            raise ValueError("Invalid value for `views_type`, must not be `None`")  # noqa: E501

        self._views_type = views_type

    @property
    def owner(self):
        """Gets the owner of this ViewsResponseDto.  # noqa: E501

        The name of the owner of the view  # noqa: E501

        :return: The owner of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ViewsResponseDto.

        The name of the owner of the view  # noqa: E501

        :param owner: The owner of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def owner_id(self):
        """Gets the owner_id of this ViewsResponseDto.  # noqa: E501

        The unique identifier of the owner of the view  # noqa: E501

        :return: The owner_id of this ViewsResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ViewsResponseDto.

        The unique identifier of the owner of the view  # noqa: E501

        :param owner_id: The owner_id of this ViewsResponseDto.  # noqa: E501
        :type: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def is_shared(self):
        """Gets the is_shared of this ViewsResponseDto.  # noqa: E501

        Indicates if the view is shared  # noqa: E501

        :return: The is_shared of this ViewsResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this ViewsResponseDto.

        Indicates if the view is shared  # noqa: E501

        :param is_shared: The is_shared of this ViewsResponseDto.  # noqa: E501
        :type: bool
        """
        if is_shared is None:
            raise ValueError("Invalid value for `is_shared`, must not be `None`")  # noqa: E501

        self._is_shared = is_shared

    @property
    def is_personal(self):
        """Gets the is_personal of this ViewsResponseDto.  # noqa: E501

        Indicates if the view is personal  # noqa: E501

        :return: The is_personal of this ViewsResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_personal

    @is_personal.setter
    def is_personal(self, is_personal):
        """Sets the is_personal of this ViewsResponseDto.

        Indicates if the view is personal  # noqa: E501

        :param is_personal: The is_personal of this ViewsResponseDto.  # noqa: E501
        :type: bool
        """
        if is_personal is None:
            raise ValueError("Invalid value for `is_personal`, must not be `None`")  # noqa: E501

        self._is_personal = is_personal

    @property
    def created_at(self):
        """Gets the created_at of this ViewsResponseDto.  # noqa: E501

        The creation date of the view  # noqa: E501

        :return: The created_at of this ViewsResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ViewsResponseDto.

        The creation date of the view  # noqa: E501

        :param created_at: The created_at of this ViewsResponseDto.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ViewsResponseDto.  # noqa: E501

        The update date of the view  # noqa: E501

        :return: The updated_at of this ViewsResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ViewsResponseDto.

        The update date of the view  # noqa: E501

        :param updated_at: The updated_at of this ViewsResponseDto.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViewsResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewsResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
