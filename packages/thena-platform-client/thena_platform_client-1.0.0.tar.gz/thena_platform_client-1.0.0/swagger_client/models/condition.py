# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Condition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trigger_field_id': 'str',
        'trigger_field_value': 'object',
        'condition_type': 'str',
        'target_fields': 'list[TargetField]',
        'for_vendor': 'bool',
        'for_user': 'bool',
        'team_id': 'str'
    }

    attribute_map = {
        'trigger_field_id': 'triggerFieldId',
        'trigger_field_value': 'triggerFieldValue',
        'condition_type': 'conditionType',
        'target_fields': 'targetFields',
        'for_vendor': 'forVendor',
        'for_user': 'forUser',
        'team_id': 'teamId'
    }

    def __init__(self, trigger_field_id=None, trigger_field_value=None, condition_type=None, target_fields=None, for_vendor=None, for_user=None, team_id=None):  # noqa: E501
        """Condition - a model defined in Swagger"""  # noqa: E501
        self._trigger_field_id = None
        self._trigger_field_value = None
        self._condition_type = None
        self._target_fields = None
        self._for_vendor = None
        self._for_user = None
        self._team_id = None
        self.discriminator = None
        self.trigger_field_id = trigger_field_id
        self.trigger_field_value = trigger_field_value
        self.condition_type = condition_type
        self.target_fields = target_fields
        if for_vendor is not None:
            self.for_vendor = for_vendor
        if for_user is not None:
            self.for_user = for_user
        if team_id is not None:
            self.team_id = team_id

    @property
    def trigger_field_id(self):
        """Gets the trigger_field_id of this Condition.  # noqa: E501

        The ID of the trigger field  # noqa: E501

        :return: The trigger_field_id of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._trigger_field_id

    @trigger_field_id.setter
    def trigger_field_id(self, trigger_field_id):
        """Sets the trigger_field_id of this Condition.

        The ID of the trigger field  # noqa: E501

        :param trigger_field_id: The trigger_field_id of this Condition.  # noqa: E501
        :type: str
        """
        if trigger_field_id is None:
            raise ValueError("Invalid value for `trigger_field_id`, must not be `None`")  # noqa: E501

        self._trigger_field_id = trigger_field_id

    @property
    def trigger_field_value(self):
        """Gets the trigger_field_value of this Condition.  # noqa: E501

        The value of the trigger field  # noqa: E501

        :return: The trigger_field_value of this Condition.  # noqa: E501
        :rtype: object
        """
        return self._trigger_field_value

    @trigger_field_value.setter
    def trigger_field_value(self, trigger_field_value):
        """Sets the trigger_field_value of this Condition.

        The value of the trigger field  # noqa: E501

        :param trigger_field_value: The trigger_field_value of this Condition.  # noqa: E501
        :type: object
        """
        if trigger_field_value is None:
            raise ValueError("Invalid value for `trigger_field_value`, must not be `None`")  # noqa: E501

        self._trigger_field_value = trigger_field_value

    @property
    def condition_type(self):
        """Gets the condition_type of this Condition.  # noqa: E501

        The type of the condition  # noqa: E501

        :return: The condition_type of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this Condition.

        The type of the condition  # noqa: E501

        :param condition_type: The condition_type of this Condition.  # noqa: E501
        :type: str
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")  # noqa: E501

        self._condition_type = condition_type

    @property
    def target_fields(self):
        """Gets the target_fields of this Condition.  # noqa: E501

        The target fields  # noqa: E501

        :return: The target_fields of this Condition.  # noqa: E501
        :rtype: list[TargetField]
        """
        return self._target_fields

    @target_fields.setter
    def target_fields(self, target_fields):
        """Sets the target_fields of this Condition.

        The target fields  # noqa: E501

        :param target_fields: The target_fields of this Condition.  # noqa: E501
        :type: list[TargetField]
        """
        if target_fields is None:
            raise ValueError("Invalid value for `target_fields`, must not be `None`")  # noqa: E501

        self._target_fields = target_fields

    @property
    def for_vendor(self):
        """Gets the for_vendor of this Condition.  # noqa: E501

        Indicates if the form is for vendor  # noqa: E501

        :return: The for_vendor of this Condition.  # noqa: E501
        :rtype: bool
        """
        return self._for_vendor

    @for_vendor.setter
    def for_vendor(self, for_vendor):
        """Sets the for_vendor of this Condition.

        Indicates if the form is for vendor  # noqa: E501

        :param for_vendor: The for_vendor of this Condition.  # noqa: E501
        :type: bool
        """

        self._for_vendor = for_vendor

    @property
    def for_user(self):
        """Gets the for_user of this Condition.  # noqa: E501

        Indicates if the form is for user  # noqa: E501

        :return: The for_user of this Condition.  # noqa: E501
        :rtype: bool
        """
        return self._for_user

    @for_user.setter
    def for_user(self, for_user):
        """Sets the for_user of this Condition.

        Indicates if the form is for user  # noqa: E501

        :param for_user: The for_user of this Condition.  # noqa: E501
        :type: bool
        """

        self._for_user = for_user

    @property
    def team_id(self):
        """Gets the team_id of this Condition.  # noqa: E501

        The ID of the team  # noqa: E501

        :return: The team_id of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Condition.

        The ID of the team  # noqa: E501

        :param team_id: The team_id of this Condition.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Condition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
