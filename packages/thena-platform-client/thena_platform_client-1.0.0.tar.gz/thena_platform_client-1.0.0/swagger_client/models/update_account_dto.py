# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateAccountDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'source': 'str',
        'account_owner_id': 'str',
        'logo': 'str',
        'status': 'str',
        'classification': 'str',
        'health': 'str',
        'industry': 'str',
        'secondary_domain': 'str',
        'annual_revenue': 'float',
        'employees': 'float',
        'website': 'str',
        'billing_address': 'str',
        'shipping_address': 'str',
        'custom_field_values': 'list[ExternalCustomFieldValuesDto]',
        'add_existing_users_to_account_contacts': 'bool',
        'name': 'str',
        'primary_domain': 'str'
    }

    attribute_map = {
        'description': 'description',
        'source': 'source',
        'account_owner_id': 'accountOwnerId',
        'logo': 'logo',
        'status': 'status',
        'classification': 'classification',
        'health': 'health',
        'industry': 'industry',
        'secondary_domain': 'secondaryDomain',
        'annual_revenue': 'annualRevenue',
        'employees': 'employees',
        'website': 'website',
        'billing_address': 'billingAddress',
        'shipping_address': 'shippingAddress',
        'custom_field_values': 'customFieldValues',
        'add_existing_users_to_account_contacts': 'addExistingUsersToAccountContacts',
        'name': 'name',
        'primary_domain': 'primaryDomain'
    }

    def __init__(self, description=None, source=None, account_owner_id=None, logo=None, status=None, classification=None, health=None, industry=None, secondary_domain=None, annual_revenue=None, employees=None, website=None, billing_address=None, shipping_address=None, custom_field_values=None, add_existing_users_to_account_contacts=None, name=None, primary_domain=None):  # noqa: E501
        """UpdateAccountDto - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._source = None
        self._account_owner_id = None
        self._logo = None
        self._status = None
        self._classification = None
        self._health = None
        self._industry = None
        self._secondary_domain = None
        self._annual_revenue = None
        self._employees = None
        self._website = None
        self._billing_address = None
        self._shipping_address = None
        self._custom_field_values = None
        self._add_existing_users_to_account_contacts = None
        self._name = None
        self._primary_domain = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if source is not None:
            self.source = source
        if account_owner_id is not None:
            self.account_owner_id = account_owner_id
        if logo is not None:
            self.logo = logo
        if status is not None:
            self.status = status
        if classification is not None:
            self.classification = classification
        if health is not None:
            self.health = health
        if industry is not None:
            self.industry = industry
        if secondary_domain is not None:
            self.secondary_domain = secondary_domain
        if annual_revenue is not None:
            self.annual_revenue = annual_revenue
        if employees is not None:
            self.employees = employees
        if website is not None:
            self.website = website
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if custom_field_values is not None:
            self.custom_field_values = custom_field_values
        if add_existing_users_to_account_contacts is not None:
            self.add_existing_users_to_account_contacts = add_existing_users_to_account_contacts
        if name is not None:
            self.name = name
        if primary_domain is not None:
            self.primary_domain = primary_domain

    @property
    def description(self):
        """Gets the description of this UpdateAccountDto.  # noqa: E501

        The description of the account  # noqa: E501

        :return: The description of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAccountDto.

        The description of the account  # noqa: E501

        :param description: The description of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def source(self):
        """Gets the source of this UpdateAccountDto.  # noqa: E501

        The source of the account  # noqa: E501

        :return: The source of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UpdateAccountDto.

        The source of the account  # noqa: E501

        :param source: The source of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def account_owner_id(self):
        """Gets the account_owner_id of this UpdateAccountDto.  # noqa: E501

        The user identifier of the account owner  # noqa: E501

        :return: The account_owner_id of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._account_owner_id

    @account_owner_id.setter
    def account_owner_id(self, account_owner_id):
        """Sets the account_owner_id of this UpdateAccountDto.

        The user identifier of the account owner  # noqa: E501

        :param account_owner_id: The account_owner_id of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._account_owner_id = account_owner_id

    @property
    def logo(self):
        """Gets the logo of this UpdateAccountDto.  # noqa: E501

        The URL of the account logo  # noqa: E501

        :return: The logo of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this UpdateAccountDto.

        The URL of the account logo  # noqa: E501

        :param logo: The logo of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def status(self):
        """Gets the status of this UpdateAccountDto.  # noqa: E501

        The identifier / value of the status attribute  # noqa: E501

        :return: The status of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAccountDto.

        The identifier / value of the status attribute  # noqa: E501

        :param status: The status of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def classification(self):
        """Gets the classification of this UpdateAccountDto.  # noqa: E501

        The identifier / value of the classification attribute  # noqa: E501

        :return: The classification of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this UpdateAccountDto.

        The identifier / value of the classification attribute  # noqa: E501

        :param classification: The classification of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._classification = classification

    @property
    def health(self):
        """Gets the health of this UpdateAccountDto.  # noqa: E501

        The identifier / value of the health attribute  # noqa: E501

        :return: The health of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this UpdateAccountDto.

        The identifier / value of the health attribute  # noqa: E501

        :param health: The health of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def industry(self):
        """Gets the industry of this UpdateAccountDto.  # noqa: E501

        The identifier / value of the industry attribute  # noqa: E501

        :return: The industry of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this UpdateAccountDto.

        The identifier / value of the industry attribute  # noqa: E501

        :param industry: The industry of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def secondary_domain(self):
        """Gets the secondary_domain of this UpdateAccountDto.  # noqa: E501

        The secondary domain of the account  # noqa: E501

        :return: The secondary_domain of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._secondary_domain

    @secondary_domain.setter
    def secondary_domain(self, secondary_domain):
        """Sets the secondary_domain of this UpdateAccountDto.

        The secondary domain of the account  # noqa: E501

        :param secondary_domain: The secondary_domain of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._secondary_domain = secondary_domain

    @property
    def annual_revenue(self):
        """Gets the annual_revenue of this UpdateAccountDto.  # noqa: E501

        The annual revenue of the account  # noqa: E501

        :return: The annual_revenue of this UpdateAccountDto.  # noqa: E501
        :rtype: float
        """
        return self._annual_revenue

    @annual_revenue.setter
    def annual_revenue(self, annual_revenue):
        """Sets the annual_revenue of this UpdateAccountDto.

        The annual revenue of the account  # noqa: E501

        :param annual_revenue: The annual_revenue of this UpdateAccountDto.  # noqa: E501
        :type: float
        """

        self._annual_revenue = annual_revenue

    @property
    def employees(self):
        """Gets the employees of this UpdateAccountDto.  # noqa: E501

        The number of employees of the account  # noqa: E501

        :return: The employees of this UpdateAccountDto.  # noqa: E501
        :rtype: float
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this UpdateAccountDto.

        The number of employees of the account  # noqa: E501

        :param employees: The employees of this UpdateAccountDto.  # noqa: E501
        :type: float
        """

        self._employees = employees

    @property
    def website(self):
        """Gets the website of this UpdateAccountDto.  # noqa: E501

        The website of the account  # noqa: E501

        :return: The website of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this UpdateAccountDto.

        The website of the account  # noqa: E501

        :param website: The website of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def billing_address(self):
        """Gets the billing_address of this UpdateAccountDto.  # noqa: E501

        The billing address of the account  # noqa: E501

        :return: The billing_address of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this UpdateAccountDto.

        The billing address of the account  # noqa: E501

        :param billing_address: The billing_address of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this UpdateAccountDto.  # noqa: E501

        The shipping address of the account  # noqa: E501

        :return: The shipping_address of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this UpdateAccountDto.

        The shipping address of the account  # noqa: E501

        :param shipping_address: The shipping_address of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._shipping_address = shipping_address

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this UpdateAccountDto.  # noqa: E501

        The custom field values of the account  # noqa: E501

        :return: The custom_field_values of this UpdateAccountDto.  # noqa: E501
        :rtype: list[ExternalCustomFieldValuesDto]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this UpdateAccountDto.

        The custom field values of the account  # noqa: E501

        :param custom_field_values: The custom_field_values of this UpdateAccountDto.  # noqa: E501
        :type: list[ExternalCustomFieldValuesDto]
        """

        self._custom_field_values = custom_field_values

    @property
    def add_existing_users_to_account_contacts(self):
        """Gets the add_existing_users_to_account_contacts of this UpdateAccountDto.  # noqa: E501

        Whether to add existing users matching the email domain to account contacts (false by default)  # noqa: E501

        :return: The add_existing_users_to_account_contacts of this UpdateAccountDto.  # noqa: E501
        :rtype: bool
        """
        return self._add_existing_users_to_account_contacts

    @add_existing_users_to_account_contacts.setter
    def add_existing_users_to_account_contacts(self, add_existing_users_to_account_contacts):
        """Sets the add_existing_users_to_account_contacts of this UpdateAccountDto.

        Whether to add existing users matching the email domain to account contacts (false by default)  # noqa: E501

        :param add_existing_users_to_account_contacts: The add_existing_users_to_account_contacts of this UpdateAccountDto.  # noqa: E501
        :type: bool
        """

        self._add_existing_users_to_account_contacts = add_existing_users_to_account_contacts

    @property
    def name(self):
        """Gets the name of this UpdateAccountDto.  # noqa: E501

        The name of the account  # noqa: E501

        :return: The name of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAccountDto.

        The name of the account  # noqa: E501

        :param name: The name of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_domain(self):
        """Gets the primary_domain of this UpdateAccountDto.  # noqa: E501

        The primary domain of the account  # noqa: E501

        :return: The primary_domain of this UpdateAccountDto.  # noqa: E501
        :rtype: str
        """
        return self._primary_domain

    @primary_domain.setter
    def primary_domain(self, primary_domain):
        """Sets the primary_domain of this UpdateAccountDto.

        The primary domain of the account  # noqa: E501

        :param primary_domain: The primary_domain of this UpdateAccountDto.  # noqa: E501
        :type: str
        """

        self._primary_domain = primary_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAccountDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAccountDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
