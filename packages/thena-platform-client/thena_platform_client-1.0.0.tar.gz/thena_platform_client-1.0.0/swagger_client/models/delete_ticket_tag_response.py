# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeleteTicketTagResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'bool',
        'message': 'str',
        'timestamp': 'datetime',
        'ticket_id': 'str',
        'removed_tag_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'timestamp': 'timestamp',
        'ticket_id': 'ticketId',
        'removed_tag_id': 'removedTagId'
    }

    def __init__(self, status=True, message='Success', timestamp=None, ticket_id=None, removed_tag_id=None):  # noqa: E501
        """DeleteTicketTagResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._message = None
        self._timestamp = None
        self._ticket_id = None
        self._removed_tag_id = None
        self.discriminator = None
        self.status = status
        self.message = message
        self.timestamp = timestamp
        self.ticket_id = ticket_id
        self.removed_tag_id = removed_tag_id

    @property
    def status(self):
        """Gets the status of this DeleteTicketTagResponse.  # noqa: E501

        The status of the response  # noqa: E501

        :return: The status of this DeleteTicketTagResponse.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeleteTicketTagResponse.

        The status of the response  # noqa: E501

        :param status: The status of this DeleteTicketTagResponse.  # noqa: E501
        :type: bool
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this DeleteTicketTagResponse.  # noqa: E501

        The message of the response  # noqa: E501

        :return: The message of this DeleteTicketTagResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeleteTicketTagResponse.

        The message of the response  # noqa: E501

        :param message: The message of this DeleteTicketTagResponse.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this DeleteTicketTagResponse.  # noqa: E501

        The timestamp of the response  # noqa: E501

        :return: The timestamp of this DeleteTicketTagResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeleteTicketTagResponse.

        The timestamp of the response  # noqa: E501

        :param timestamp: The timestamp of this DeleteTicketTagResponse.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def ticket_id(self):
        """Gets the ticket_id of this DeleteTicketTagResponse.  # noqa: E501

        The ticket ID  # noqa: E501

        :return: The ticket_id of this DeleteTicketTagResponse.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this DeleteTicketTagResponse.

        The ticket ID  # noqa: E501

        :param ticket_id: The ticket_id of this DeleteTicketTagResponse.  # noqa: E501
        :type: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")  # noqa: E501

        self._ticket_id = ticket_id

    @property
    def removed_tag_id(self):
        """Gets the removed_tag_id of this DeleteTicketTagResponse.  # noqa: E501

        The ID of the removed tag  # noqa: E501

        :return: The removed_tag_id of this DeleteTicketTagResponse.  # noqa: E501
        :rtype: str
        """
        return self._removed_tag_id

    @removed_tag_id.setter
    def removed_tag_id(self, removed_tag_id):
        """Sets the removed_tag_id of this DeleteTicketTagResponse.

        The ID of the removed tag  # noqa: E501

        :param removed_tag_id: The removed_tag_id of this DeleteTicketTagResponse.  # noqa: E501
        :type: str
        """
        if removed_tag_id is None:
            raise ValueError("Invalid value for `removed_tag_id`, must not be `None`")  # noqa: E501

        self._removed_tag_id = removed_tag_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeleteTicketTagResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteTicketTagResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
