# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAccountActivityDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'activity_timestamp': 'str',
        'duration': 'float',
        'location': 'str',
        'type': 'str',
        'status': 'str',
        'participants': 'list[str]',
        'attachment_urls': 'list[str]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'activity_timestamp': 'activityTimestamp',
        'duration': 'duration',
        'location': 'location',
        'type': 'type',
        'status': 'status',
        'participants': 'participants',
        'attachment_urls': 'attachmentUrls'
    }

    def __init__(self, account_id=None, activity_timestamp=None, duration=None, location=None, type=None, status=None, participants=None, attachment_urls=None):  # noqa: E501
        """CreateAccountActivityDto - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._activity_timestamp = None
        self._duration = None
        self._location = None
        self._type = None
        self._status = None
        self._participants = None
        self._attachment_urls = None
        self.discriminator = None
        self.account_id = account_id
        self.activity_timestamp = activity_timestamp
        self.duration = duration
        self.location = location
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if participants is not None:
            self.participants = participants
        if attachment_urls is not None:
            self.attachment_urls = attachment_urls

    @property
    def account_id(self):
        """Gets the account_id of this CreateAccountActivityDto.  # noqa: E501

        The identifier of the account to create the activity for  # noqa: E501

        :return: The account_id of this CreateAccountActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAccountActivityDto.

        The identifier of the account to create the activity for  # noqa: E501

        :param account_id: The account_id of this CreateAccountActivityDto.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def activity_timestamp(self):
        """Gets the activity_timestamp of this CreateAccountActivityDto.  # noqa: E501

        The timestamp of the activity  # noqa: E501

        :return: The activity_timestamp of this CreateAccountActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_timestamp

    @activity_timestamp.setter
    def activity_timestamp(self, activity_timestamp):
        """Sets the activity_timestamp of this CreateAccountActivityDto.

        The timestamp of the activity  # noqa: E501

        :param activity_timestamp: The activity_timestamp of this CreateAccountActivityDto.  # noqa: E501
        :type: str
        """
        if activity_timestamp is None:
            raise ValueError("Invalid value for `activity_timestamp`, must not be `None`")  # noqa: E501

        self._activity_timestamp = activity_timestamp

    @property
    def duration(self):
        """Gets the duration of this CreateAccountActivityDto.  # noqa: E501

        The duration of the activity in minutes  # noqa: E501

        :return: The duration of this CreateAccountActivityDto.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateAccountActivityDto.

        The duration of the activity in minutes  # noqa: E501

        :param duration: The duration of this CreateAccountActivityDto.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def location(self):
        """Gets the location of this CreateAccountActivityDto.  # noqa: E501

        The location of the activity  # noqa: E501

        :return: The location of this CreateAccountActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateAccountActivityDto.

        The location of the activity  # noqa: E501

        :param location: The location of this CreateAccountActivityDto.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def type(self):
        """Gets the type of this CreateAccountActivityDto.  # noqa: E501

        The identifier / value of the Type attribute of the activity  # noqa: E501

        :return: The type of this CreateAccountActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateAccountActivityDto.

        The identifier / value of the Type attribute of the activity  # noqa: E501

        :param type: The type of this CreateAccountActivityDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this CreateAccountActivityDto.  # noqa: E501

        The identifier / value of the Status attribute of the activity  # noqa: E501

        :return: The status of this CreateAccountActivityDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateAccountActivityDto.

        The identifier / value of the Status attribute of the activity  # noqa: E501

        :param status: The status of this CreateAccountActivityDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def participants(self):
        """Gets the participants of this CreateAccountActivityDto.  # noqa: E501

        The identifiers of the participants of the activity  # noqa: E501

        :return: The participants of this CreateAccountActivityDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this CreateAccountActivityDto.

        The identifiers of the participants of the activity  # noqa: E501

        :param participants: The participants of this CreateAccountActivityDto.  # noqa: E501
        :type: list[str]
        """

        self._participants = participants

    @property
    def attachment_urls(self):
        """Gets the attachment_urls of this CreateAccountActivityDto.  # noqa: E501

        The URLs of the attachments to attach to the note  # noqa: E501

        :return: The attachment_urls of this CreateAccountActivityDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_urls

    @attachment_urls.setter
    def attachment_urls(self, attachment_urls):
        """Sets the attachment_urls of this CreateAccountActivityDto.

        The URLs of the attachments to attach to the note  # noqa: E501

        :param attachment_urls: The attachment_urls of this CreateAccountActivityDto.  # noqa: E501
        :type: list[str]
        """

        self._attachment_urls = attachment_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountActivityDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountActivityDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
