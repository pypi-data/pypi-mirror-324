# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateCustomerContactDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'contact_type': 'str',
        'account_ids': 'list[str]'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'contact_type': 'contactType',
        'account_ids': 'accountIds'
    }

    def __init__(self, first_name=None, last_name=None, email=None, phone_number=None, contact_type=None, account_ids=None):  # noqa: E501
        """UpdateCustomerContactDto - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone_number = None
        self._contact_type = None
        self._account_ids = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if contact_type is not None:
            self.contact_type = contact_type
        if account_ids is not None:
            self.account_ids = account_ids

    @property
    def first_name(self):
        """Gets the first_name of this UpdateCustomerContactDto.  # noqa: E501

        First name of the customer contact  # noqa: E501

        :return: The first_name of this UpdateCustomerContactDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UpdateCustomerContactDto.

        First name of the customer contact  # noqa: E501

        :param first_name: The first_name of this UpdateCustomerContactDto.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UpdateCustomerContactDto.  # noqa: E501

        Last name of the customer contact  # noqa: E501

        :return: The last_name of this UpdateCustomerContactDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UpdateCustomerContactDto.

        Last name of the customer contact  # noqa: E501

        :param last_name: The last_name of this UpdateCustomerContactDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UpdateCustomerContactDto.  # noqa: E501

        Email of the customer contact  # noqa: E501

        :return: The email of this UpdateCustomerContactDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateCustomerContactDto.

        Email of the customer contact  # noqa: E501

        :param email: The email of this UpdateCustomerContactDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this UpdateCustomerContactDto.  # noqa: E501

        Phone number of the customer contact with country code  # noqa: E501

        :return: The phone_number of this UpdateCustomerContactDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UpdateCustomerContactDto.

        Phone number of the customer contact with country code  # noqa: E501

        :param phone_number: The phone_number of this UpdateCustomerContactDto.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def contact_type(self):
        """Gets the contact_type of this UpdateCustomerContactDto.  # noqa: E501

        Contact type of the customer contact  # noqa: E501

        :return: The contact_type of this UpdateCustomerContactDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this UpdateCustomerContactDto.

        Contact type of the customer contact  # noqa: E501

        :param contact_type: The contact_type of this UpdateCustomerContactDto.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    @property
    def account_ids(self):
        """Gets the account_ids of this UpdateCustomerContactDto.  # noqa: E501

        Account IDs of the customer contact. This will replace the existing account IDs of the customer contact  # noqa: E501

        :return: The account_ids of this UpdateCustomerContactDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this UpdateCustomerContactDto.

        Account IDs of the customer contact. This will replace the existing account IDs of the customer contact  # noqa: E501

        :param account_ids: The account_ids of this UpdateCustomerContactDto.  # noqa: E501
        :type: list[str]
        """

        self._account_ids = account_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCustomerContactDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCustomerContactDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
