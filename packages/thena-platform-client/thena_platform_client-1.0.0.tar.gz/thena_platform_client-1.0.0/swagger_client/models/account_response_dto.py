# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'source': 'str',
        'logo': 'str',
        'status_id': 'str',
        'status': 'str',
        'classification_id': 'str',
        'classification': 'str',
        'health_id': 'str',
        'health': 'str',
        'industry_id': 'str',
        'industry': 'str',
        'primary_domain': 'str',
        'secondary_domain': 'str',
        'account_owner': 'str',
        'account_owner_id': 'str',
        'account_owner_email': 'str',
        'annual_revenue': 'float',
        'employees': 'float',
        'website': 'str',
        'billing_address': 'str',
        'shipping_address': 'str',
        'custom_field_values': 'list[str]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'source': 'source',
        'logo': 'logo',
        'status_id': 'statusId',
        'status': 'status',
        'classification_id': 'classificationId',
        'classification': 'classification',
        'health_id': 'healthId',
        'health': 'health',
        'industry_id': 'industryId',
        'industry': 'industry',
        'primary_domain': 'primaryDomain',
        'secondary_domain': 'secondaryDomain',
        'account_owner': 'accountOwner',
        'account_owner_id': 'accountOwnerId',
        'account_owner_email': 'accountOwnerEmail',
        'annual_revenue': 'annualRevenue',
        'employees': 'employees',
        'website': 'website',
        'billing_address': 'billingAddress',
        'shipping_address': 'shippingAddress',
        'custom_field_values': 'customFieldValues',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, name=None, description=None, source=None, logo=None, status_id=None, status=None, classification_id=None, classification=None, health_id=None, health=None, industry_id=None, industry=None, primary_domain=None, secondary_domain=None, account_owner=None, account_owner_id=None, account_owner_email=None, annual_revenue=None, employees=None, website=None, billing_address=None, shipping_address=None, custom_field_values=None, created_at=None, updated_at=None):  # noqa: E501
        """AccountResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._source = None
        self._logo = None
        self._status_id = None
        self._status = None
        self._classification_id = None
        self._classification = None
        self._health_id = None
        self._health = None
        self._industry_id = None
        self._industry = None
        self._primary_domain = None
        self._secondary_domain = None
        self._account_owner = None
        self._account_owner_id = None
        self._account_owner_email = None
        self._annual_revenue = None
        self._employees = None
        self._website = None
        self._billing_address = None
        self._shipping_address = None
        self._custom_field_values = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.source = source
        if logo is not None:
            self.logo = logo
        self.status_id = status_id
        self.status = status
        self.classification_id = classification_id
        self.classification = classification
        self.health_id = health_id
        self.health = health
        self.industry_id = industry_id
        self.industry = industry
        self.primary_domain = primary_domain
        if secondary_domain is not None:
            self.secondary_domain = secondary_domain
        if account_owner is not None:
            self.account_owner = account_owner
        if account_owner_id is not None:
            self.account_owner_id = account_owner_id
        if account_owner_email is not None:
            self.account_owner_email = account_owner_email
        if annual_revenue is not None:
            self.annual_revenue = annual_revenue
        if employees is not None:
            self.employees = employees
        if website is not None:
            self.website = website
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_address is not None:
            self.shipping_address = shipping_address
        self.custom_field_values = custom_field_values
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this AccountResponseDto.  # noqa: E501

        Unique identifier of the account  # noqa: E501

        :return: The id of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountResponseDto.

        Unique identifier of the account  # noqa: E501

        :param id: The id of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountResponseDto.  # noqa: E501

        Name of the account  # noqa: E501

        :return: The name of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResponseDto.

        Name of the account  # noqa: E501

        :param name: The name of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AccountResponseDto.  # noqa: E501

        The description of the account  # noqa: E501

        :return: The description of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountResponseDto.

        The description of the account  # noqa: E501

        :param description: The description of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def source(self):
        """Gets the source of this AccountResponseDto.  # noqa: E501

        The source of the account  # noqa: E501

        :return: The source of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AccountResponseDto.

        The source of the account  # noqa: E501

        :param source: The source of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def logo(self):
        """Gets the logo of this AccountResponseDto.  # noqa: E501

        The URL of the account logo  # noqa: E501

        :return: The logo of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this AccountResponseDto.

        The URL of the account logo  # noqa: E501

        :param logo: The logo of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def status_id(self):
        """Gets the status_id of this AccountResponseDto.  # noqa: E501

        The identifier of the status of the account  # noqa: E501

        :return: The status_id of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AccountResponseDto.

        The identifier of the status of the account  # noqa: E501

        :param status_id: The status_id of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def status(self):
        """Gets the status of this AccountResponseDto.  # noqa: E501

        The status of the account  # noqa: E501

        :return: The status of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountResponseDto.

        The status of the account  # noqa: E501

        :param status: The status of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def classification_id(self):
        """Gets the classification_id of this AccountResponseDto.  # noqa: E501

        The identifier of the classification of the account  # noqa: E501

        :return: The classification_id of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._classification_id

    @classification_id.setter
    def classification_id(self, classification_id):
        """Sets the classification_id of this AccountResponseDto.

        The identifier of the classification of the account  # noqa: E501

        :param classification_id: The classification_id of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if classification_id is None:
            raise ValueError("Invalid value for `classification_id`, must not be `None`")  # noqa: E501

        self._classification_id = classification_id

    @property
    def classification(self):
        """Gets the classification of this AccountResponseDto.  # noqa: E501

        The classification of the account  # noqa: E501

        :return: The classification of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this AccountResponseDto.

        The classification of the account  # noqa: E501

        :param classification: The classification of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")  # noqa: E501

        self._classification = classification

    @property
    def health_id(self):
        """Gets the health_id of this AccountResponseDto.  # noqa: E501

        The identifier of the health attribute  # noqa: E501

        :return: The health_id of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._health_id

    @health_id.setter
    def health_id(self, health_id):
        """Sets the health_id of this AccountResponseDto.

        The identifier of the health attribute  # noqa: E501

        :param health_id: The health_id of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if health_id is None:
            raise ValueError("Invalid value for `health_id`, must not be `None`")  # noqa: E501

        self._health_id = health_id

    @property
    def health(self):
        """Gets the health of this AccountResponseDto.  # noqa: E501

        The health of the account  # noqa: E501

        :return: The health of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this AccountResponseDto.

        The health of the account  # noqa: E501

        :param health: The health of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if health is None:
            raise ValueError("Invalid value for `health`, must not be `None`")  # noqa: E501

        self._health = health

    @property
    def industry_id(self):
        """Gets the industry_id of this AccountResponseDto.  # noqa: E501

        The identifier of the industry attribute  # noqa: E501

        :return: The industry_id of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._industry_id

    @industry_id.setter
    def industry_id(self, industry_id):
        """Sets the industry_id of this AccountResponseDto.

        The identifier of the industry attribute  # noqa: E501

        :param industry_id: The industry_id of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if industry_id is None:
            raise ValueError("Invalid value for `industry_id`, must not be `None`")  # noqa: E501

        self._industry_id = industry_id

    @property
    def industry(self):
        """Gets the industry of this AccountResponseDto.  # noqa: E501

        The industry of the account  # noqa: E501

        :return: The industry of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this AccountResponseDto.

        The industry of the account  # noqa: E501

        :param industry: The industry of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if industry is None:
            raise ValueError("Invalid value for `industry`, must not be `None`")  # noqa: E501

        self._industry = industry

    @property
    def primary_domain(self):
        """Gets the primary_domain of this AccountResponseDto.  # noqa: E501

        Primary domain of the account  # noqa: E501

        :return: The primary_domain of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._primary_domain

    @primary_domain.setter
    def primary_domain(self, primary_domain):
        """Sets the primary_domain of this AccountResponseDto.

        Primary domain of the account  # noqa: E501

        :param primary_domain: The primary_domain of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if primary_domain is None:
            raise ValueError("Invalid value for `primary_domain`, must not be `None`")  # noqa: E501

        self._primary_domain = primary_domain

    @property
    def secondary_domain(self):
        """Gets the secondary_domain of this AccountResponseDto.  # noqa: E501

        Secondary domain of the account  # noqa: E501

        :return: The secondary_domain of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._secondary_domain

    @secondary_domain.setter
    def secondary_domain(self, secondary_domain):
        """Sets the secondary_domain of this AccountResponseDto.

        Secondary domain of the account  # noqa: E501

        :param secondary_domain: The secondary_domain of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._secondary_domain = secondary_domain

    @property
    def account_owner(self):
        """Gets the account_owner of this AccountResponseDto.  # noqa: E501

        Name of the account owner  # noqa: E501

        :return: The account_owner of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_owner

    @account_owner.setter
    def account_owner(self, account_owner):
        """Sets the account_owner of this AccountResponseDto.

        Name of the account owner  # noqa: E501

        :param account_owner: The account_owner of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._account_owner = account_owner

    @property
    def account_owner_id(self):
        """Gets the account_owner_id of this AccountResponseDto.  # noqa: E501

        Unique identifier of the account owner  # noqa: E501

        :return: The account_owner_id of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_owner_id

    @account_owner_id.setter
    def account_owner_id(self, account_owner_id):
        """Sets the account_owner_id of this AccountResponseDto.

        Unique identifier of the account owner  # noqa: E501

        :param account_owner_id: The account_owner_id of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._account_owner_id = account_owner_id

    @property
    def account_owner_email(self):
        """Gets the account_owner_email of this AccountResponseDto.  # noqa: E501

        Email of the account owner  # noqa: E501

        :return: The account_owner_email of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_owner_email

    @account_owner_email.setter
    def account_owner_email(self, account_owner_email):
        """Sets the account_owner_email of this AccountResponseDto.

        Email of the account owner  # noqa: E501

        :param account_owner_email: The account_owner_email of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._account_owner_email = account_owner_email

    @property
    def annual_revenue(self):
        """Gets the annual_revenue of this AccountResponseDto.  # noqa: E501

        Annual revenue of the account  # noqa: E501

        :return: The annual_revenue of this AccountResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._annual_revenue

    @annual_revenue.setter
    def annual_revenue(self, annual_revenue):
        """Sets the annual_revenue of this AccountResponseDto.

        Annual revenue of the account  # noqa: E501

        :param annual_revenue: The annual_revenue of this AccountResponseDto.  # noqa: E501
        :type: float
        """

        self._annual_revenue = annual_revenue

    @property
    def employees(self):
        """Gets the employees of this AccountResponseDto.  # noqa: E501

        Number of employees of the account  # noqa: E501

        :return: The employees of this AccountResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this AccountResponseDto.

        Number of employees of the account  # noqa: E501

        :param employees: The employees of this AccountResponseDto.  # noqa: E501
        :type: float
        """

        self._employees = employees

    @property
    def website(self):
        """Gets the website of this AccountResponseDto.  # noqa: E501

        Website of the account  # noqa: E501

        :return: The website of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this AccountResponseDto.

        Website of the account  # noqa: E501

        :param website: The website of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def billing_address(self):
        """Gets the billing_address of this AccountResponseDto.  # noqa: E501

        Billing address of the account  # noqa: E501

        :return: The billing_address of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this AccountResponseDto.

        Billing address of the account  # noqa: E501

        :param billing_address: The billing_address of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this AccountResponseDto.  # noqa: E501

        Shipping address of the account  # noqa: E501

        :return: The shipping_address of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this AccountResponseDto.

        Shipping address of the account  # noqa: E501

        :param shipping_address: The shipping_address of this AccountResponseDto.  # noqa: E501
        :type: str
        """

        self._shipping_address = shipping_address

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this AccountResponseDto.  # noqa: E501

        The custom field values  # noqa: E501

        :return: The custom_field_values of this AccountResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this AccountResponseDto.

        The custom field values  # noqa: E501

        :param custom_field_values: The custom_field_values of this AccountResponseDto.  # noqa: E501
        :type: list[str]
        """
        if custom_field_values is None:
            raise ValueError("Invalid value for `custom_field_values`, must not be `None`")  # noqa: E501

        self._custom_field_values = custom_field_values

    @property
    def created_at(self):
        """Gets the created_at of this AccountResponseDto.  # noqa: E501

        Creation date of the account  # noqa: E501

        :return: The created_at of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountResponseDto.

        Creation date of the account  # noqa: E501

        :param created_at: The created_at of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AccountResponseDto.  # noqa: E501

        Last update date of the account  # noqa: E501

        :return: The updated_at of this AccountResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AccountResponseDto.

        Last update date of the account  # noqa: E501

        :param updated_at: The updated_at of this AccountResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
