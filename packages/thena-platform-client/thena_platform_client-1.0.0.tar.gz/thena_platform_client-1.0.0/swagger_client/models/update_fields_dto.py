# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateFieldsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'is_active': 'bool',
        'options': 'list[str]',
        'default_value': 'str',
        'regex_for_validation': 'str',
        'mandatory_on_creation': 'bool',
        'mandatory_on_close': 'bool',
        'visible_to_customer': 'bool',
        'editable_by_customer': 'bool',
        'auto_add_to_all_forms': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'is_active': 'isActive',
        'options': 'options',
        'default_value': 'defaultValue',
        'regex_for_validation': 'regexForValidation',
        'mandatory_on_creation': 'mandatoryOnCreation',
        'mandatory_on_close': 'mandatoryOnClose',
        'visible_to_customer': 'visibleToCustomer',
        'editable_by_customer': 'editableByCustomer',
        'auto_add_to_all_forms': 'auto_add_to_all_forms'
    }

    def __init__(self, name=None, description=None, is_active=None, options=None, default_value=None, regex_for_validation=None, mandatory_on_creation=None, mandatory_on_close=None, visible_to_customer=None, editable_by_customer=None, auto_add_to_all_forms=None):  # noqa: E501
        """UpdateFieldsDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._is_active = None
        self._options = None
        self._default_value = None
        self._regex_for_validation = None
        self._mandatory_on_creation = None
        self._mandatory_on_close = None
        self._visible_to_customer = None
        self._editable_by_customer = None
        self._auto_add_to_all_forms = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_active is not None:
            self.is_active = is_active
        if options is not None:
            self.options = options
        if default_value is not None:
            self.default_value = default_value
        if regex_for_validation is not None:
            self.regex_for_validation = regex_for_validation
        if mandatory_on_creation is not None:
            self.mandatory_on_creation = mandatory_on_creation
        if mandatory_on_close is not None:
            self.mandatory_on_close = mandatory_on_close
        if visible_to_customer is not None:
            self.visible_to_customer = visible_to_customer
        if editable_by_customer is not None:
            self.editable_by_customer = editable_by_customer
        if auto_add_to_all_forms is not None:
            self.auto_add_to_all_forms = auto_add_to_all_forms

    @property
    def name(self):
        """Gets the name of this UpdateFieldsDto.  # noqa: E501


        :return: The name of this UpdateFieldsDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateFieldsDto.


        :param name: The name of this UpdateFieldsDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateFieldsDto.  # noqa: E501


        :return: The description of this UpdateFieldsDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateFieldsDto.


        :param description: The description of this UpdateFieldsDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_active(self):
        """Gets the is_active of this UpdateFieldsDto.  # noqa: E501


        :return: The is_active of this UpdateFieldsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UpdateFieldsDto.


        :param is_active: The is_active of this UpdateFieldsDto.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def options(self):
        """Gets the options of this UpdateFieldsDto.  # noqa: E501


        :return: The options of this UpdateFieldsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this UpdateFieldsDto.


        :param options: The options of this UpdateFieldsDto.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def default_value(self):
        """Gets the default_value of this UpdateFieldsDto.  # noqa: E501


        :return: The default_value of this UpdateFieldsDto.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this UpdateFieldsDto.


        :param default_value: The default_value of this UpdateFieldsDto.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def regex_for_validation(self):
        """Gets the regex_for_validation of this UpdateFieldsDto.  # noqa: E501


        :return: The regex_for_validation of this UpdateFieldsDto.  # noqa: E501
        :rtype: str
        """
        return self._regex_for_validation

    @regex_for_validation.setter
    def regex_for_validation(self, regex_for_validation):
        """Sets the regex_for_validation of this UpdateFieldsDto.


        :param regex_for_validation: The regex_for_validation of this UpdateFieldsDto.  # noqa: E501
        :type: str
        """

        self._regex_for_validation = regex_for_validation

    @property
    def mandatory_on_creation(self):
        """Gets the mandatory_on_creation of this UpdateFieldsDto.  # noqa: E501


        :return: The mandatory_on_creation of this UpdateFieldsDto.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_on_creation

    @mandatory_on_creation.setter
    def mandatory_on_creation(self, mandatory_on_creation):
        """Sets the mandatory_on_creation of this UpdateFieldsDto.


        :param mandatory_on_creation: The mandatory_on_creation of this UpdateFieldsDto.  # noqa: E501
        :type: bool
        """

        self._mandatory_on_creation = mandatory_on_creation

    @property
    def mandatory_on_close(self):
        """Gets the mandatory_on_close of this UpdateFieldsDto.  # noqa: E501


        :return: The mandatory_on_close of this UpdateFieldsDto.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_on_close

    @mandatory_on_close.setter
    def mandatory_on_close(self, mandatory_on_close):
        """Sets the mandatory_on_close of this UpdateFieldsDto.


        :param mandatory_on_close: The mandatory_on_close of this UpdateFieldsDto.  # noqa: E501
        :type: bool
        """

        self._mandatory_on_close = mandatory_on_close

    @property
    def visible_to_customer(self):
        """Gets the visible_to_customer of this UpdateFieldsDto.  # noqa: E501


        :return: The visible_to_customer of this UpdateFieldsDto.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_customer

    @visible_to_customer.setter
    def visible_to_customer(self, visible_to_customer):
        """Sets the visible_to_customer of this UpdateFieldsDto.


        :param visible_to_customer: The visible_to_customer of this UpdateFieldsDto.  # noqa: E501
        :type: bool
        """

        self._visible_to_customer = visible_to_customer

    @property
    def editable_by_customer(self):
        """Gets the editable_by_customer of this UpdateFieldsDto.  # noqa: E501


        :return: The editable_by_customer of this UpdateFieldsDto.  # noqa: E501
        :rtype: bool
        """
        return self._editable_by_customer

    @editable_by_customer.setter
    def editable_by_customer(self, editable_by_customer):
        """Sets the editable_by_customer of this UpdateFieldsDto.


        :param editable_by_customer: The editable_by_customer of this UpdateFieldsDto.  # noqa: E501
        :type: bool
        """

        self._editable_by_customer = editable_by_customer

    @property
    def auto_add_to_all_forms(self):
        """Gets the auto_add_to_all_forms of this UpdateFieldsDto.  # noqa: E501


        :return: The auto_add_to_all_forms of this UpdateFieldsDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_add_to_all_forms

    @auto_add_to_all_forms.setter
    def auto_add_to_all_forms(self, auto_add_to_all_forms):
        """Sets the auto_add_to_all_forms of this UpdateFieldsDto.


        :param auto_add_to_all_forms: The auto_add_to_all_forms of this UpdateFieldsDto.  # noqa: E501
        :type: bool
        """

        self._auto_add_to_all_forms = auto_add_to_all_forms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateFieldsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateFieldsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
