# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketTimeLogResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_id': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'description': 'str',
        'time_spent_minutes': 'float',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'ticket_id': 'ticketId',
        'user_id': 'userId',
        'user_name': 'userName',
        'description': 'description',
        'time_spent_minutes': 'timeSpentMinutes',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, ticket_id=None, user_id=None, user_name=None, description=None, time_spent_minutes=None, created_at=None, updated_at=None):  # noqa: E501
        """TicketTimeLogResponseDto - a model defined in Swagger"""  # noqa: E501
        self._ticket_id = None
        self._user_id = None
        self._user_name = None
        self._description = None
        self._time_spent_minutes = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.ticket_id = ticket_id
        self.user_id = user_id
        self.user_name = user_name
        self.description = description
        self.time_spent_minutes = time_spent_minutes
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def ticket_id(self):
        """Gets the ticket_id of this TicketTimeLogResponseDto.  # noqa: E501

        Unique identifier of the ticket for which time is logged  # noqa: E501

        :return: The ticket_id of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this TicketTimeLogResponseDto.

        Unique identifier of the ticket for which time is logged  # noqa: E501

        :param ticket_id: The ticket_id of this TicketTimeLogResponseDto.  # noqa: E501
        :type: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")  # noqa: E501

        self._ticket_id = ticket_id

    @property
    def user_id(self):
        """Gets the user_id of this TicketTimeLogResponseDto.  # noqa: E501

        Unique identifier of the user who logged the time  # noqa: E501

        :return: The user_id of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TicketTimeLogResponseDto.

        Unique identifier of the user who logged the time  # noqa: E501

        :param user_id: The user_id of this TicketTimeLogResponseDto.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this TicketTimeLogResponseDto.  # noqa: E501

        Name of the user who logged the time  # noqa: E501

        :return: The user_name of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this TicketTimeLogResponseDto.

        Name of the user who logged the time  # noqa: E501

        :param user_name: The user_name of this TicketTimeLogResponseDto.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def description(self):
        """Gets the description of this TicketTimeLogResponseDto.  # noqa: E501

        Description of the time logged  # noqa: E501

        :return: The description of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketTimeLogResponseDto.

        Description of the time logged  # noqa: E501

        :param description: The description of this TicketTimeLogResponseDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def time_spent_minutes(self):
        """Gets the time_spent_minutes of this TicketTimeLogResponseDto.  # noqa: E501

        Time spent in minutes  # noqa: E501

        :return: The time_spent_minutes of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._time_spent_minutes

    @time_spent_minutes.setter
    def time_spent_minutes(self, time_spent_minutes):
        """Sets the time_spent_minutes of this TicketTimeLogResponseDto.

        Time spent in minutes  # noqa: E501

        :param time_spent_minutes: The time_spent_minutes of this TicketTimeLogResponseDto.  # noqa: E501
        :type: float
        """
        if time_spent_minutes is None:
            raise ValueError("Invalid value for `time_spent_minutes`, must not be `None`")  # noqa: E501

        self._time_spent_minutes = time_spent_minutes

    @property
    def created_at(self):
        """Gets the created_at of this TicketTimeLogResponseDto.  # noqa: E501

        The created date of the ticket time log  # noqa: E501

        :return: The created_at of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketTimeLogResponseDto.

        The created date of the ticket time log  # noqa: E501

        :param created_at: The created_at of this TicketTimeLogResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketTimeLogResponseDto.  # noqa: E501

        The updated date of the ticket time log  # noqa: E501

        :return: The updated_at of this TicketTimeLogResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketTimeLogResponseDto.

        The updated date of the ticket time log  # noqa: E501

        :param updated_at: The updated_at of this TicketTimeLogResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketTimeLogResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketTimeLogResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
