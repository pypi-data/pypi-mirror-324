# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormFieldDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'default_value': 'object',
        'mandatory_on_creation': 'bool',
        'mandatory_on_close': 'bool',
        'visible_to_customer': 'bool',
        'editable_by_customer': 'bool'
    }

    attribute_map = {
        'field': 'field',
        'default_value': 'defaultValue',
        'mandatory_on_creation': 'mandatoryOnCreation',
        'mandatory_on_close': 'mandatoryOnClose',
        'visible_to_customer': 'visibleToCustomer',
        'editable_by_customer': 'editableByCustomer'
    }

    def __init__(self, field=None, default_value=None, mandatory_on_creation=None, mandatory_on_close=None, visible_to_customer=None, editable_by_customer=None):  # noqa: E501
        """FormFieldDto - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._default_value = None
        self._mandatory_on_creation = None
        self._mandatory_on_close = None
        self._visible_to_customer = None
        self._editable_by_customer = None
        self.discriminator = None
        self.field = field
        if default_value is not None:
            self.default_value = default_value
        if mandatory_on_creation is not None:
            self.mandatory_on_creation = mandatory_on_creation
        if mandatory_on_close is not None:
            self.mandatory_on_close = mandatory_on_close
        if visible_to_customer is not None:
            self.visible_to_customer = visible_to_customer
        self.editable_by_customer = editable_by_customer

    @property
    def field(self):
        """Gets the field of this FormFieldDto.  # noqa: E501

        The field  # noqa: E501

        :return: The field of this FormFieldDto.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FormFieldDto.

        The field  # noqa: E501

        :param field: The field of this FormFieldDto.  # noqa: E501
        :type: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def default_value(self):
        """Gets the default_value of this FormFieldDto.  # noqa: E501

        The default value  # noqa: E501

        :return: The default_value of this FormFieldDto.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this FormFieldDto.

        The default value  # noqa: E501

        :param default_value: The default_value of this FormFieldDto.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    @property
    def mandatory_on_creation(self):
        """Gets the mandatory_on_creation of this FormFieldDto.  # noqa: E501

        Indicates if the field is mandatory on creation  # noqa: E501

        :return: The mandatory_on_creation of this FormFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_on_creation

    @mandatory_on_creation.setter
    def mandatory_on_creation(self, mandatory_on_creation):
        """Sets the mandatory_on_creation of this FormFieldDto.

        Indicates if the field is mandatory on creation  # noqa: E501

        :param mandatory_on_creation: The mandatory_on_creation of this FormFieldDto.  # noqa: E501
        :type: bool
        """

        self._mandatory_on_creation = mandatory_on_creation

    @property
    def mandatory_on_close(self):
        """Gets the mandatory_on_close of this FormFieldDto.  # noqa: E501

        Indicates if the field is mandatory on close  # noqa: E501

        :return: The mandatory_on_close of this FormFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory_on_close

    @mandatory_on_close.setter
    def mandatory_on_close(self, mandatory_on_close):
        """Sets the mandatory_on_close of this FormFieldDto.

        Indicates if the field is mandatory on close  # noqa: E501

        :param mandatory_on_close: The mandatory_on_close of this FormFieldDto.  # noqa: E501
        :type: bool
        """

        self._mandatory_on_close = mandatory_on_close

    @property
    def visible_to_customer(self):
        """Gets the visible_to_customer of this FormFieldDto.  # noqa: E501

        Indicates if the field is visible to customer  # noqa: E501

        :return: The visible_to_customer of this FormFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_customer

    @visible_to_customer.setter
    def visible_to_customer(self, visible_to_customer):
        """Sets the visible_to_customer of this FormFieldDto.

        Indicates if the field is visible to customer  # noqa: E501

        :param visible_to_customer: The visible_to_customer of this FormFieldDto.  # noqa: E501
        :type: bool
        """

        self._visible_to_customer = visible_to_customer

    @property
    def editable_by_customer(self):
        """Gets the editable_by_customer of this FormFieldDto.  # noqa: E501

        Indicates if the field is editable by customer  # noqa: E501

        :return: The editable_by_customer of this FormFieldDto.  # noqa: E501
        :rtype: bool
        """
        return self._editable_by_customer

    @editable_by_customer.setter
    def editable_by_customer(self, editable_by_customer):
        """Sets the editable_by_customer of this FormFieldDto.

        Indicates if the field is editable by customer  # noqa: E501

        :param editable_by_customer: The editable_by_customer of this FormFieldDto.  # noqa: E501
        :type: bool
        """
        if editable_by_customer is None:
            raise ValueError("Invalid value for `editable_by_customer`, must not be `None`")  # noqa: E501

        self._editable_by_customer = editable_by_customer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormFieldDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormFieldDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
