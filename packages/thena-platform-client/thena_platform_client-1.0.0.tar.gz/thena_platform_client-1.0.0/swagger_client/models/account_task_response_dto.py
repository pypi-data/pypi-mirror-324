# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountTaskResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'account': 'str',
        'activity_id': 'str',
        'title': 'str',
        'description': 'str',
        'assignee_id': 'str',
        'type': 'str',
        'type_id': 'str',
        'status': 'str',
        'status_id': 'str',
        'priority': 'str',
        'priority_id': 'str',
        'attachments': 'list[str]',
        'is_active': 'bool',
        'creator': 'str',
        'creator_id': 'str',
        'creator_email': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'account': 'account',
        'activity_id': 'activityId',
        'title': 'title',
        'description': 'description',
        'assignee_id': 'assigneeId',
        'type': 'type',
        'type_id': 'typeId',
        'status': 'status',
        'status_id': 'statusId',
        'priority': 'priority',
        'priority_id': 'priorityId',
        'attachments': 'attachments',
        'is_active': 'isActive',
        'creator': 'creator',
        'creator_id': 'creatorId',
        'creator_email': 'creatorEmail',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, account_id=None, account=None, activity_id=None, title=None, description=None, assignee_id=None, type=None, type_id=None, status=None, status_id=None, priority=None, priority_id=None, attachments=None, is_active=None, creator=None, creator_id=None, creator_email=None, created_at=None, updated_at=None):  # noqa: E501
        """AccountTaskResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._account = None
        self._activity_id = None
        self._title = None
        self._description = None
        self._assignee_id = None
        self._type = None
        self._type_id = None
        self._status = None
        self._status_id = None
        self._priority = None
        self._priority_id = None
        self._attachments = None
        self._is_active = None
        self._creator = None
        self._creator_id = None
        self._creator_email = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.account_id = account_id
        self.account = account
        self.activity_id = activity_id
        self.title = title
        self.description = description
        self.assignee_id = assignee_id
        self.type = type
        self.type_id = type_id
        self.status = status
        self.status_id = status_id
        self.priority = priority
        self.priority_id = priority_id
        self.attachments = attachments
        self.is_active = is_active
        self.creator = creator
        self.creator_id = creator_id
        self.creator_email = creator_email
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the task  # noqa: E501

        :return: The id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountTaskResponseDto.

        The identifier of the task  # noqa: E501

        :param id: The id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the account  # noqa: E501

        :return: The account_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountTaskResponseDto.

        The identifier of the account  # noqa: E501

        :param account_id: The account_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this AccountTaskResponseDto.  # noqa: E501

        The name of the account  # noqa: E501

        :return: The account of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountTaskResponseDto.

        The name of the account  # noqa: E501

        :param account: The account of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def activity_id(self):
        """Gets the activity_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the activity  # noqa: E501

        :return: The activity_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this AccountTaskResponseDto.

        The identifier of the activity  # noqa: E501

        :param activity_id: The activity_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def title(self):
        """Gets the title of this AccountTaskResponseDto.  # noqa: E501

        The title of the task  # noqa: E501

        :return: The title of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AccountTaskResponseDto.

        The title of the task  # noqa: E501

        :param title: The title of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this AccountTaskResponseDto.  # noqa: E501

        The description of the task  # noqa: E501

        :return: The description of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountTaskResponseDto.

        The description of the task  # noqa: E501

        :param description: The description of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def assignee_id(self):
        """Gets the assignee_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the assignee  # noqa: E501

        :return: The assignee_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this AccountTaskResponseDto.

        The identifier of the assignee  # noqa: E501

        :param assignee_id: The assignee_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if assignee_id is None:
            raise ValueError("Invalid value for `assignee_id`, must not be `None`")  # noqa: E501

        self._assignee_id = assignee_id

    @property
    def type(self):
        """Gets the type of this AccountTaskResponseDto.  # noqa: E501

        The type of the task  # noqa: E501

        :return: The type of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountTaskResponseDto.

        The type of the task  # noqa: E501

        :param type: The type of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def type_id(self):
        """Gets the type_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the type  # noqa: E501

        :return: The type_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AccountTaskResponseDto.

        The identifier of the type  # noqa: E501

        :param type_id: The type_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def status(self):
        """Gets the status of this AccountTaskResponseDto.  # noqa: E501

        The status of the task  # noqa: E501

        :return: The status of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountTaskResponseDto.

        The status of the task  # noqa: E501

        :param status: The status of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_id(self):
        """Gets the status_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the status  # noqa: E501

        :return: The status_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this AccountTaskResponseDto.

        The identifier of the status  # noqa: E501

        :param status_id: The status_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def priority(self):
        """Gets the priority of this AccountTaskResponseDto.  # noqa: E501

        The priority of the task  # noqa: E501

        :return: The priority of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AccountTaskResponseDto.

        The priority of the task  # noqa: E501

        :param priority: The priority of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def priority_id(self):
        """Gets the priority_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the priority  # noqa: E501

        :return: The priority_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this AccountTaskResponseDto.

        The identifier of the priority  # noqa: E501

        :param priority_id: The priority_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if priority_id is None:
            raise ValueError("Invalid value for `priority_id`, must not be `None`")  # noqa: E501

        self._priority_id = priority_id

    @property
    def attachments(self):
        """Gets the attachments of this AccountTaskResponseDto.  # noqa: E501

        The attachments of the task  # noqa: E501

        :return: The attachments of this AccountTaskResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AccountTaskResponseDto.

        The attachments of the task  # noqa: E501

        :param attachments: The attachments of this AccountTaskResponseDto.  # noqa: E501
        :type: list[str]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def is_active(self):
        """Gets the is_active of this AccountTaskResponseDto.  # noqa: E501

        Whether the task is active  # noqa: E501

        :return: The is_active of this AccountTaskResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AccountTaskResponseDto.

        Whether the task is active  # noqa: E501

        :param is_active: The is_active of this AccountTaskResponseDto.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def creator(self):
        """Gets the creator of this AccountTaskResponseDto.  # noqa: E501

        The creator of the task  # noqa: E501

        :return: The creator of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AccountTaskResponseDto.

        The creator of the task  # noqa: E501

        :param creator: The creator of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def creator_id(self):
        """Gets the creator_id of this AccountTaskResponseDto.  # noqa: E501

        The identifier of the creator  # noqa: E501

        :return: The creator_id of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this AccountTaskResponseDto.

        The identifier of the creator  # noqa: E501

        :param creator_id: The creator_id of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def creator_email(self):
        """Gets the creator_email of this AccountTaskResponseDto.  # noqa: E501

        The email of the creator  # noqa: E501

        :return: The creator_email of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this AccountTaskResponseDto.

        The email of the creator  # noqa: E501

        :param creator_email: The creator_email of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if creator_email is None:
            raise ValueError("Invalid value for `creator_email`, must not be `None`")  # noqa: E501

        self._creator_email = creator_email

    @property
    def created_at(self):
        """Gets the created_at of this AccountTaskResponseDto.  # noqa: E501

        The creation date of the task  # noqa: E501

        :return: The created_at of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountTaskResponseDto.

        The creation date of the task  # noqa: E501

        :param created_at: The created_at of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AccountTaskResponseDto.  # noqa: E501

        The update date of the task  # noqa: E501

        :return: The updated_at of this AccountTaskResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AccountTaskResponseDto.

        The update date of the task  # noqa: E501

        :param updated_at: The updated_at of this AccountTaskResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountTaskResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountTaskResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
