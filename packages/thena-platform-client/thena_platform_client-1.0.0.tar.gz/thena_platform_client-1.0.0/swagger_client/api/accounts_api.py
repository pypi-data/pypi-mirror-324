# coding: utf-8

"""
    Thena Platform

    The Thena Platform API description  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_accounts_activities_activity_id_attachments_attachment_id_delete(self, activity_id, attachment_id, **kwargs):  # noqa: E501
        """Removes an attachment from an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_activity_id_attachments_attachment_id_delete(activity_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activity_id: (required)
        :param str attachment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_activities_activity_id_attachments_attachment_id_delete_with_http_info(activity_id, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_activities_activity_id_attachments_attachment_id_delete_with_http_info(activity_id, attachment_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_activities_activity_id_attachments_attachment_id_delete_with_http_info(self, activity_id, attachment_id, **kwargs):  # noqa: E501
        """Removes an attachment from an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_activity_id_attachments_attachment_id_delete_with_http_info(activity_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activity_id: (required)
        :param str attachment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id', 'attachment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_activities_activity_id_attachments_attachment_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `v1_accounts_activities_activity_id_attachments_attachment_id_delete`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `v1_accounts_activities_activity_id_attachments_attachment_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/activities/{activityId}/attachments/{attachmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_activities_activity_id_delete(self, activity_id, **kwargs):  # noqa: E501
        """Deletes an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_activity_id_delete(activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activity_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_activities_activity_id_delete_with_http_info(activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_activities_activity_id_delete_with_http_info(activity_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_activities_activity_id_delete_with_http_info(self, activity_id, **kwargs):  # noqa: E501
        """Deletes an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_activity_id_delete_with_http_info(activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activity_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_activities_activity_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `v1_accounts_activities_activity_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/activities/{activityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_activities_activity_id_put(self, body, activity_id, **kwargs):  # noqa: E501
        """Updates an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_activity_id_put(body, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountActivityDto body: (required)
        :param str activity_id: (required)
        :return: AccountActivityResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_activities_activity_id_put_with_http_info(body, activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_activities_activity_id_put_with_http_info(body, activity_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_activities_activity_id_put_with_http_info(self, body, activity_id, **kwargs):  # noqa: E501
        """Updates an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_activity_id_put_with_http_info(body, activity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountActivityDto body: (required)
        :param str activity_id: (required)
        :return: AccountActivityResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'activity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_activities_activity_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_activities_activity_id_put`")  # noqa: E501
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `v1_accounts_activities_activity_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/activities/{activityId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountActivityResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_activities_get(self, **kwargs):  # noqa: E501
        """Fetches all account activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The identifier of the account to find activities for
        :param str type: The identifier / value of the type of the activity
        :param str status: The identifier / value of the status of the activity
        :param float page: The page number
        :param float limit: The limit number of activities to fetch
        :return: AccountActivityResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_activities_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_activities_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_activities_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all account activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The identifier of the account to find activities for
        :param str type: The identifier / value of the type of the activity
        :param str status: The identifier / value of the status of the activity
        :param float page: The page number
        :param float limit: The limit number of activities to fetch
        :return: AccountActivityResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'type', 'status', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_activities_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountActivityResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_activities_post(self, body, **kwargs):  # noqa: E501
        """Creates an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountActivityDto body: (required)
        :return: AccountActivityResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_activities_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_activities_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_activities_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an account activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_activities_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountActivityDto body: (required)
        :return: AccountActivityResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_activities_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_activities_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/activities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountActivityResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_attributes_get(self, attribute, **kwargs):  # noqa: E501
        """Gets all account attribute values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_get(attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute: Attribute type (required)
        :return: AccountAttributeValueResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_attributes_get_with_http_info(attribute, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_attributes_get_with_http_info(attribute, **kwargs)  # noqa: E501
            return data

    def v1_accounts_attributes_get_with_http_info(self, attribute, **kwargs):  # noqa: E501
        """Gets all account attribute values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_get_with_http_info(attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute: Attribute type (required)
        :return: AccountAttributeValueResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_attributes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute' is set
        if ('attribute' not in params or
                params['attribute'] is None):
            raise ValueError("Missing the required parameter `attribute` when calling `v1_accounts_attributes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountAttributeValueResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_attributes_id_delete(self, id, force_delete, **kwargs):  # noqa: E501
        """Deletes an account attribute value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_id_delete(id, force_delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param bool force_delete: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_attributes_id_delete_with_http_info(id, force_delete, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_attributes_id_delete_with_http_info(id, force_delete, **kwargs)  # noqa: E501
            return data

    def v1_accounts_attributes_id_delete_with_http_info(self, id, force_delete, **kwargs):  # noqa: E501
        """Deletes an account attribute value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_id_delete_with_http_info(id, force_delete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param bool force_delete: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'force_delete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_attributes_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_attributes_id_delete`")  # noqa: E501
        # verify the required parameter 'force_delete' is set
        if ('force_delete' not in params or
                params['force_delete'] is None):
            raise ValueError("Missing the required parameter `force_delete` when calling `v1_accounts_attributes_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'force_delete' in params:
            query_params.append(('forceDelete', params['force_delete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/attributes/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_attributes_id_put(self, body, id, **kwargs):  # noqa: E501
        """Updates an account attribute value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountAttributeValueDto body: (required)
        :param str id: (required)
        :return: AccountAttributeValueResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_attributes_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_attributes_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_attributes_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Updates an account attribute value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountAttributeValueDto body: (required)
        :param str id: (required)
        :return: AccountAttributeValueResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_attributes_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_attributes_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_attributes_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/attributes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountAttributeValueResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_attributes_post(self, body, **kwargs):  # noqa: E501
        """Creates an account attribute value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountAttributeValueDto body: (required)
        :return: AccountAttributeValueResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_attributes_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_attributes_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_attributes_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an account attribute value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_attributes_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountAttributeValueDto body: (required)
        :return: AccountAttributeValueResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_attributes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_attributes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountAttributeValueResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_contacts_bulk_post(self, body, **kwargs):  # noqa: E501
        """Bulk create customer contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_bulk_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreateCustomerContactsDto body: (required)
        :return: CustomerContactBulkResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_contacts_bulk_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_contacts_bulk_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_contacts_bulk_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Bulk create customer contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_bulk_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCreateCustomerContactsDto body: (required)
        :return: CustomerContactBulkResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_contacts_bulk_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_contacts_bulk_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/contacts/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerContactBulkResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_contacts_contact_id_delete(self, contact_id, **kwargs):  # noqa: E501
        """Delete a customer contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_contact_id_delete(contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_contacts_contact_id_delete_with_http_info(contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_contacts_contact_id_delete_with_http_info(contact_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_contacts_contact_id_delete_with_http_info(self, contact_id, **kwargs):  # noqa: E501
        """Delete a customer contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_contact_id_delete_with_http_info(contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_contacts_contact_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `v1_accounts_contacts_contact_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/contacts/{contactId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_contacts_contact_id_put(self, body, contact_id, **kwargs):  # noqa: E501
        """Update a customer contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_contact_id_put(body, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCustomerContactDto body: (required)
        :param str contact_id: (required)
        :return: CustomerContactResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_contacts_contact_id_put_with_http_info(body, contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_contacts_contact_id_put_with_http_info(body, contact_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_contacts_contact_id_put_with_http_info(self, body, contact_id, **kwargs):  # noqa: E501
        """Update a customer contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_contact_id_put_with_http_info(body, contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCustomerContactDto body: (required)
        :param str contact_id: (required)
        :return: CustomerContactResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'contact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_contacts_contact_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_contacts_contact_id_put`")  # noqa: E501
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `v1_accounts_contacts_contact_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/contacts/{contactId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerContactResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_contacts_get(self, **kwargs):  # noqa: E501
        """Get all customer contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID of the customer contact
        :param str contact_type: Contact type of the customer contact to find. (Fetches all contacts satisfying other conditions if not provided)
        :param float page: The page number
        :param float limit: The limit number of contacts to fetch
        :return: list[CustomerContactResponseDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_contacts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_contacts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_contacts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all customer contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID of the customer contact
        :param str contact_type: Contact type of the customer contact to find. (Fetches all contacts satisfying other conditions if not provided)
        :param float page: The page number
        :param float limit: The limit number of contacts to fetch
        :return: list[CustomerContactResponseDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'contact_type', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_contacts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'contact_type' in params:
            query_params.append(('contactType', params['contact_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomerContactResponseDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_contacts_ingest_post(self, body, **kwargs):  # noqa: E501
        """Ingest users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_ingest_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IngestCustomerContactDTO body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_contacts_ingest_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_contacts_ingest_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_contacts_ingest_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Ingest users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_ingest_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IngestCustomerContactDTO body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_contacts_ingest_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_contacts_ingest_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/contacts/ingest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_contacts_post(self, body, **kwargs):  # noqa: E501
        """Create a customer contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerContactDto body: (required)
        :return: CustomerContactResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_contacts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_contacts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_contacts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a customer contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_contacts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerContactDto body: (required)
        :return: CustomerContactResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_contacts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_contacts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerContactResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_get(self, **kwargs):  # noqa: E501
        """Get all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: The source of the accounts to find
        :param str status: The identifier / value of the status attribute
        :param str classification: The identifier / value of the classification attribute
        :param str health: The identifier / value of the health attribute
        :param str industry: The identifier / value of the industry attribute
        :param str account_owner_id: The identifier of the account owner
        :param float page: The page number
        :param float limit: The limit number of accounts to fetch
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: The source of the accounts to find
        :param str status: The identifier / value of the status attribute
        :param str classification: The identifier / value of the classification attribute
        :param str health: The identifier / value of the health attribute
        :param str industry: The identifier / value of the industry attribute
        :param str account_owner_id: The identifier of the account owner
        :param float page: The page number
        :param float limit: The limit number of accounts to fetch
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'status', 'classification', 'health', 'industry', 'account_owner_id', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'classification' in params:
            query_params.append(('classification', params['classification']))  # noqa: E501
        if 'health' in params:
            query_params.append(('health', params['health']))  # noqa: E501
        if 'industry' in params:
            query_params.append(('industry', params['industry']))  # noqa: E501
        if 'account_owner_id' in params:
            query_params.append(('accountOwnerId', params['account_owner_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_id_get(self, id, **kwargs):  # noqa: E501
        """Get account details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get account details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_id_put(self, body, id, **kwargs):  # noqa: E501
        """Update an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountDto body: (required)
        :param str id: (required)
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountDto body: (required)
        :param str id: (required)
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_notes_get(self, **kwargs):  # noqa: E501
        """Fetches all account notes by account ID or by note ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The identifier of the account to find notes for
        :param str type: The identifier / value of the type attribute of the note
        :param float page: The page number
        :param float limit: The limit number of notes to fetch
        :return: AccountNoteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_notes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_notes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_notes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all account notes by account ID or by note ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The identifier of the account to find notes for
        :param str type: The identifier / value of the type attribute of the note
        :param float page: The page number
        :param float limit: The limit number of notes to fetch
        :return: AccountNoteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'type', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_notes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountNoteResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_notes_note_id_attachments_attachment_id_delete(self, note_id, attachment_id, **kwargs):  # noqa: E501
        """Removes an attachment from an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_note_id_attachments_attachment_id_delete(note_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str note_id: (required)
        :param str attachment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_notes_note_id_attachments_attachment_id_delete_with_http_info(note_id, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_notes_note_id_attachments_attachment_id_delete_with_http_info(note_id, attachment_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_notes_note_id_attachments_attachment_id_delete_with_http_info(self, note_id, attachment_id, **kwargs):  # noqa: E501
        """Removes an attachment from an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_note_id_attachments_attachment_id_delete_with_http_info(note_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str note_id: (required)
        :param str attachment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id', 'attachment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_notes_note_id_attachments_attachment_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `v1_accounts_notes_note_id_attachments_attachment_id_delete`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `v1_accounts_notes_note_id_attachments_attachment_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/notes/{noteId}/attachments/{attachmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_notes_note_id_delete(self, note_id, **kwargs):  # noqa: E501
        """Deletes an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_note_id_delete(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str note_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_notes_note_id_delete_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_notes_note_id_delete_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_notes_note_id_delete_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """Deletes an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_note_id_delete_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str note_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_notes_note_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `v1_accounts_notes_note_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/notes/{noteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_notes_note_id_put(self, body, note_id, **kwargs):  # noqa: E501
        """Updates an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_note_id_put(body, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountNoteDto body: (required)
        :param str note_id: (required)
        :return: AccountNoteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_notes_note_id_put_with_http_info(body, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_notes_note_id_put_with_http_info(body, note_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_notes_note_id_put_with_http_info(self, body, note_id, **kwargs):  # noqa: E501
        """Updates an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_note_id_put_with_http_info(body, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountNoteDto body: (required)
        :param str note_id: (required)
        :return: AccountNoteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_notes_note_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_notes_note_id_put`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `v1_accounts_notes_note_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/notes/{noteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountNoteResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_notes_post(self, body, **kwargs):  # noqa: E501
        """Creates an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountNoteDto body: (required)
        :return: AccountNoteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_notes_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_notes_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_notes_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an account note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_notes_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountNoteDto body: (required)
        :return: AccountNoteResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_notes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_notes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountNoteResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_post(self, body, **kwargs):  # noqa: E501
        """Create an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountDto body: (required)
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountDto body: (required)
        :return: AccountResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_get(self, **kwargs):  # noqa: E501
        """Get all account relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID
        :param str relationship_type_id: The identifier of the relationship type attribute
        :param float page: The page number
        :param float limit: The limit number of relationships to fetch
        :return: list[AccountRelationshipResponseDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all account relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID
        :param str relationship_type_id: The identifier of the relationship type attribute
        :param float page: The page number
        :param float limit: The limit number of relationships to fetch
        :return: list[AccountRelationshipResponseDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'relationship_type_id', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'relationship_type_id' in params:
            query_params.append(('relationshipTypeId', params['relationship_type_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountRelationshipResponseDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete an account relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an account relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_relationships_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_id_put(self, body, id, **kwargs):  # noqa: E501
        """Update an account relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountRelationshipDto body: (required)
        :param str id: (required)
        :return: AccountRelationshipResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update an account relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountRelationshipDto body: (required)
        :param str id: (required)
        :return: AccountRelationshipResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_relationships_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_relationships_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountRelationshipResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_post(self, body, **kwargs):  # noqa: E501
        """Create an account relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountRelationshipDto body: (required)
        :return: AccountRelationshipResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an account relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountRelationshipDto body: (required)
        :return: AccountRelationshipResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_relationships_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountRelationshipResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_types_get(self, **kwargs):  # noqa: E501
        """Get all account relationship types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountRelationshipTypeResponseDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all account relationship types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountRelationshipTypeResponseDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountRelationshipTypeResponseDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_types_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete an account relationship type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_types_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_types_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_types_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an account relationship type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_types_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_relationships_types_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships/types/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_types_id_put(self, body, id, **kwargs):  # noqa: E501
        """Update an account relationship type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountRelationshipTypeDto body: (required)
        :param str id: (required)
        :return: AccountRelationshipTypeResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_types_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_types_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_types_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update an account relationship type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountRelationshipTypeDto body: (required)
        :param str id: (required)
        :return: AccountRelationshipTypeResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_types_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_relationships_types_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_accounts_relationships_types_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships/types/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountRelationshipTypeResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_relationships_types_post(self, body, **kwargs):  # noqa: E501
        """Create an account relationship type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountRelationshipTypeDto body: (required)
        :return: AccountRelationshipTypeResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_relationships_types_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_relationships_types_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_relationships_types_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an account relationship type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_relationships_types_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountRelationshipTypeDto body: (required)
        :return: AccountRelationshipTypeResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_relationships_types_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_relationships_types_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/relationships/types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountRelationshipTypeResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_tasks_get(self, **kwargs):  # noqa: E501
        """Fetches all account tasks by account ID or by task ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The identifier of the account to find tasks for
        :param str activity_id: The identifier of the activity to find tasks for
        :param str assignee_id: The identifier of the assignee to find tasks for
        :param str type: The identifier / value of the type attribute of the task
        :param str status: The identifier / value of the status attribute of the task
        :param str priority: The identifier / value of the priority attribute of the task
        :param float page: The page number
        :param float limit: The limit number of tasks to fetch
        :return: AccountTaskResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_tasks_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_tasks_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_accounts_tasks_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all account tasks by account ID or by task ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The identifier of the account to find tasks for
        :param str activity_id: The identifier of the activity to find tasks for
        :param str assignee_id: The identifier of the assignee to find tasks for
        :param str type: The identifier / value of the type attribute of the task
        :param str status: The identifier / value of the status attribute of the task
        :param str priority: The identifier / value of the priority attribute of the task
        :param float page: The page number
        :param float limit: The limit number of tasks to fetch
        :return: AccountTaskResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'activity_id', 'assignee_id', 'type', 'status', 'priority', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'activity_id' in params:
            query_params.append(('activityId', params['activity_id']))  # noqa: E501
        if 'assignee_id' in params:
            query_params.append(('assigneeId', params['assignee_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'priority' in params:
            query_params.append(('priority', params['priority']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountTaskResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_tasks_post(self, body, **kwargs):  # noqa: E501
        """Creates an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountTaskDto body: (required)
        :return: AccountTaskResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_tasks_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_tasks_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v1_accounts_tasks_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountTaskDto body: (required)
        :return: AccountTaskResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_tasks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_tasks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountTaskResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_tasks_task_id_attachments_attachment_id_delete(self, task_id, attachment_id, **kwargs):  # noqa: E501
        """Removes an attachment from an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_task_id_attachments_attachment_id_delete(task_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: (required)
        :param str attachment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_tasks_task_id_attachments_attachment_id_delete_with_http_info(task_id, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_tasks_task_id_attachments_attachment_id_delete_with_http_info(task_id, attachment_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_tasks_task_id_attachments_attachment_id_delete_with_http_info(self, task_id, attachment_id, **kwargs):  # noqa: E501
        """Removes an attachment from an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_task_id_attachments_attachment_id_delete_with_http_info(task_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: (required)
        :param str attachment_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'attachment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_tasks_task_id_attachments_attachment_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `v1_accounts_tasks_task_id_attachments_attachment_id_delete`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `v1_accounts_tasks_task_id_attachments_attachment_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/tasks/{taskId}/attachments/{attachmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_tasks_task_id_delete(self, task_id, **kwargs):  # noqa: E501
        """Deletes an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_task_id_delete(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_tasks_task_id_delete_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_tasks_task_id_delete_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_tasks_task_id_delete_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Deletes an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_task_id_delete_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_tasks_task_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `v1_accounts_tasks_task_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/tasks/{taskId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_tasks_task_id_put(self, body, task_id, **kwargs):  # noqa: E501
        """Updates an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_task_id_put(body, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountTaskDto body: (required)
        :param str task_id: (required)
        :return: AccountTaskResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_tasks_task_id_put_with_http_info(body, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_tasks_task_id_put_with_http_info(body, task_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_tasks_task_id_put_with_http_info(self, body, task_id, **kwargs):  # noqa: E501
        """Updates an account task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_tasks_task_id_put_with_http_info(body, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAccountTaskDto body: (required)
        :param str task_id: (required)
        :return: AccountTaskResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_tasks_task_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_accounts_tasks_task_id_put`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `v1_accounts_tasks_task_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'Bearer', 'OrgId']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/tasks/{taskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountTaskResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
