from _typeshed import Incomplete
from clickpy.queries import BaseClickPyQuery as BaseClickPyQuery, KeywordDownloadsResumeQuery as KeywordDownloadsResumeQuery, KeywordPackagesResumeQuery as KeywordPackagesResumeQuery, KeywordReleasesResumeQuery as KeywordReleasesResumeQuery, KeywordsByReleasesQuery as KeywordsByReleasesQuery, PackageDownloadsByVersionQuery as PackageDownloadsByVersionQuery, PackageDownloadsPerMonthQuery as PackageDownloadsPerMonthQuery, PackageDownloadsResumeQuery as PackageDownloadsResumeQuery, PackageReleasesResumeQuery as PackageReleasesResumeQuery, TablesQuery as TablesQuery
from clickpy.settings import CLICK_PY_DATA_BASE_SETTING as CLICK_PY_DATA_BASE_SETTING
from pydantic import BaseModel
from typing import Any, TypeVar

logger: Incomplete
TModel = TypeVar('TModel')

class ClickHouseResponse(BaseModel):
    class ClickHouseStatisticsResponse(BaseModel):
        elapsed: float
        rows_read: int
        bytes_read: int
    meta: list[dict[str, str]]
    rows: int
    statistics: ClickHouseStatisticsResponse
    data: Any

class ClickPyClient:
    http_client: Incomplete
    def __init__(self) -> None: ...
    async def lifespan(self, *args: Any, **kwargs: Any): ...
    async def query(self, method: BaseClickPyQuery[TModel]) -> TModel: ...
    async def get_tables(self, databases: list[str] | None = None) -> TablesQuery.Model: ...
    async def get_keywords_by_releases(self, *args: Any, **kwargs: Any) -> KeywordsByReleasesQuery.Model: ...
    async def get_package_downloads_resume(self, package: str) -> PackageDownloadsResumeQuery.Model: ...
    async def get_package_releases_resume(self, package: str) -> PackageReleasesResumeQuery.Model: ...
    async def get_keyword_releases_resume(self, keyword: str) -> KeywordReleasesResumeQuery.Model: ...
    async def get_keyword_packages_resume(self, keyword: str) -> KeywordPackagesResumeQuery.Model: ...
    async def get_keyword_downloads_resume(self, keyword: str) -> KeywordDownloadsResumeQuery.Model: ...
    async def get_package_downloads_by_version(self, package: str) -> PackageDownloadsByVersionQuery.Model: ...
    async def get_package_downloads_per_month(self, package: str) -> PackageDownloadsPerMonthQuery.Model: ...
