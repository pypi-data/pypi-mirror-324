---
description: python code rules
globs: 
---
---
description: Developing the graphcap python client and server
globs: *.py
---
# Python rules 
- use >3.11 python standards
- Do not use outdated typing style
Union -> type | type
Dict -> dict
List -> list
Type -> type
And so on
- Adhere to strong typing
- Avoid the Any tag\
- use | for unions instead of Union
- use @override for overriden methods
- Try to avoid casting values where possible
# Server Libraries Documentation

| Library | Description | Documentation |
|---------|-------------|---------------|
| **click** | Command-line interface creation toolkit, used for CLI tools and commands. | [Click Documentation](mdc:https:/click.palletsprojects.com) |
| **datasets** | Library by Hugging Face for easily accessing and sharing datasets. | [Datasets Documentation](mdc:https:/huggingface.co/docs/datasets) |
| **FastAPI** | Modern, fast web framework for building APIs with Python based on standard type hints. | [FastAPI Documentation](mdc:https:/fastapi.tiangolo.com) |
| **httpx** | Fully featured HTTP client for Python 3, supporting async operations. | [HTTPX Documentation](mdc:https:/www.python-httpx.org) |
| **huggingface-hub** | Client library for interacting with the Hugging Face Hub. | [Hugging Face Hub Documentation](mdc:https:/huggingface.co/docs/huggingface_hub) |
| **loguru** | Python logging made simple and powerful. | [Loguru Documentation](mdc:https:/loguru.readthedocs.io) |
| **openai** | Official OpenAI API client library for Python. | [OpenAI Documentation](mdc:https:/platform.openai.com/docs/api-reference) |
| **pydantic** | Data validation using Python type annotations. | [Pydantic Documentation](mdc:https:/docs.pydantic.dev) |
| **pytest-watcher** | Automatically runs tests when files change. | [Pytest Watcher Documentation](mdc:https:/pypi.org/project/pytest-watcher) |
| **python-dotenv** | Reads key-value pairs from .env files and sets them as environment variables. | [Python-dotenv Documentation](mdc:https:/github.com/theskumar/python-dotenv) |
| **python-multipart** | Streaming multipart parser for Python. | [Python-multipart Documentation](mdc:https:/github.com/andrew-d/python-multipart) |
| **tenacity** | General-purpose retrying library for Python. | [Tenacity Documentation](mdc:https:/tenacity.readthedocs.io) |
| **termcolor** | ANSI color formatting for terminal output. | [Termcolor Documentation](mdc:https:/pypi.org/project/termcolor) |
| **uvicorn** | Lightning-fast ASGI server implementation. | [Uvicorn Documentation](mdc:https:/www.uvicorn.org) | 
| **uv** | Package and runtime python manager | [UV Docs](mdc:https:/docs.astral.sh/uv) |

"""
graphcap.caption
Caption Module

This module provides functionality for generating different types of structured captions
for images using vision AI models. It supports multiple caption formats and versions
through a decoupled architecture.

Key features:
- Multiple caption type support (graph, art critic, etc.)
- Shared vision model integration
- Structured data validation
- Configurable prompting system

Caption Types:
    GraphCaption: Structured analysis with tags and descriptions
    ArtCritic: Artistic analysis focusing on composition and technique
"""

"""

"""
graphcap.dataset

This module provides functionality for managing image datasets with captions and metadata.
It handles dataset creation, export, and upload to Hugging Face Hub.

Key features:
- Dataset creation and management
- File handling and persistence
- HuggingFace Hub integration
- Metadata generation and validation

Directory Structure:
    When uploaded to HuggingFace Hub, graphcapdatasets follow this structure:

    dataset_name/
    ├── README.md                  # Dataset card with description and usage
    ├── dataset-metadata.json      # Dataset metadata and configuration
    └── data/
        ├── config.yaml           # Dataset split configuration
        ├── metadata.jsonl        # Image metadata and captions
        ├── captions.jsonl        # Raw caption data
        └── images/              # Image files (if include_images=True)
            ├── image1.jpg
            ├── image2.jpg
            └── ...

Files:
    - README.md: Contains dataset description, usage examples, and citation info
    - dataset-metadata.json: Technical metadata about features and splits
    - config.yaml: Configuration for dataset splits and file paths
    - metadata.jsonl: Structured metadata for each image including captions
    - captions.jsonl: Raw caption data from vision models
    - images/: Directory containing the original images (optional)

Note:
    Image paths in metadata.jsonl and captions.jsonl are relative to the data/
    directory using the format "./images/filename.jpg"
"""

"""
graphcap.utils

Collection of utility functions and helpers used throughout the GraphCap server.

Key features:
- Logging configuration
- JSON formatting
- Error handling
- Common utilities

Components:
    logger: Configured loguru logger with JSON formatting
"""

