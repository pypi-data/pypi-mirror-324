---
description: Docstring or Module string generation
globs: *.tsx, *.ts, *.py
---
# Documentation Policy

## General Guidelines

1. All code files must include a license header:
```python
# SPDX-License-Identifier: Apache-2.0
graphcap.module.path
```

2. Documentation should be:
- Short and concise
- Easily readable
- Focused on behavior rather than implementation
- Written in complete sentences
- Updated when code changes

## Python Documentation

### Module Docstrings

Every Python module should have a docstring that includes:

1. License header
2. Brief description of the module's purpose
3. List of key functionality
4. List of classes/functions (if applicable)
5. Usage examples (if complex)

Example:
```python
"""
# SPDX-License-Identifier: Apache-2.0
Module Name

Brief description of what this module does.

Key features:
- Feature 1
- Feature 2

Classes:
    ClassName: Brief description
"""
```

### Class Docstrings

Classes should include:

1. Brief description (1-3 lines)
2. Detailed description of behavior
3. List of public attributes with types and descriptions
4. List of methods with brief descriptions (optional)

Example:
```python
class MyClass:
    """
    Brief description of the class.

    Detailed description of the class behavior and usage.
    Multiple lines are allowed.

    Attributes:
        attr_name (type): Description of attribute
        other_attr (type): Description of other attribute
    """
```

### Method/Function Docstrings

Methods and functions should include:

1. Brief description
2. Args with types and descriptions
3. Returns with type and description
4. Raises with exception types and conditions
5. Notes or examples if needed

Example:
```python
def my_function(arg1: str, arg2: int) -> bool:
    """
    Brief description of what the function does.

    Args:
        arg1: Description of first argument
        arg2: Description of second argument

    Returns:
        Description of return value

    Raises:
        ValueError: Description of when this error occurs
        TypeError: Description of when this error occurs

    Note:
        Any additional information about usage
    """
```
Warning : Do not claim capability that does not exist. We should only document current functionality.

## JavaScript Documentation

### Module Documentation

JavaScript modules should include:

1. License header
2. Brief description
3. List of exports
4. Usage examples

Example:
```javascript
/**
 * @license Apache-2.0
 * 
 * Brief description of module purpose
 * 
 * @module ModuleName
 * 
 * @exports {Class} ClassName
 * @exports {function} functionName
 */
```

### Class Documentation

JavaScript classes should include:

1. Brief description
2. Constructor parameters
3. Properties
4. Methods

Example:
```javascript
/**
 * Brief description of the class
 * 
 * @class
 * @property {type} propertyName - Description
 */
class ClassName {
    /**
     * Create an instance
     * @param {type} param - Parameter description
     */
    constructor(param) {
        // ...
    }
}
```

### Function Documentation

Functions should include:

1. Brief description
2. Parameters with types
3. Return value
4. Thrown errors

Example:
```javascript
/**
 * Brief description of function
 * 
 * @param {type} paramName - Parameter description
 * @returns {type} Description of return value
 * @throws {ErrorType} Description of error condition
 */
function functionName(paramName) {
    // ...
}
```

## Best Practices

1. Keep docstrings focused on behavior rather than implementation
2. Update documentation when changing code
3. Include examples for complex functionality
4. Document all public APIs
5. Use type hints/JSDoc types consistently
6. Document error conditions and edge cases
7. Follow consistent formatting within project

## Tools

- Python: Use tools like `pydocstyle` for validation
- JavaScript: Use ESLint with JSDoc rules
- Consider using documentation generators:
  - Python: Sphinx
  - JavaScript: JSDoc

