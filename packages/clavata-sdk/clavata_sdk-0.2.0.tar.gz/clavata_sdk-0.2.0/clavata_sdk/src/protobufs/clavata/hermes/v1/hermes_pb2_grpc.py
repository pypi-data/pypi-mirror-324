# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from ...hermes.v1 import hermes_pb2 as clavata_dot_hermes_dot_v1_dot_hermes__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in clavata/hermes/v1/hermes_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class HermesServiceStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DispatchQuery = channel.unary_unary(
                '/clavata.hermes.v1.HermesService/DispatchQuery',
                request_serializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryRequest.SerializeToString,
                response_deserializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryResponse.FromString,
                _registered_method=True)
        self.DispatchQueryStream = channel.stream_stream(
                '/clavata.hermes.v1.HermesService/DispatchQueryStream',
                request_serializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryStreamRequest.SerializeToString,
                response_deserializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryStreamResponse.FromString,
                _registered_method=True)
        self.DispatchQueryBatch = channel.unary_unary(
                '/clavata.hermes.v1.HermesService/DispatchQueryBatch',
                request_serializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryBatchRequest.SerializeToString,
                response_deserializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryBatchResponse.FromString,
                _registered_method=True)


class HermesServiceServicer(object):
    """The service definition.
    """

    def DispatchQuery(self, request, context):
        """Dispatches a block of content with additional query data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DispatchQueryStream(self, request_iterator, context):
        """Dispatches multiple queries in a row, so long as the answers continue to be true
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DispatchQueryBatch(self, request, context):
        """Dispatch a batch of queries at the same time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HermesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DispatchQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.DispatchQuery,
                    request_deserializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryRequest.FromString,
                    response_serializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryResponse.SerializeToString,
            ),
            'DispatchQueryStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DispatchQueryStream,
                    request_deserializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryStreamRequest.FromString,
                    response_serializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryStreamResponse.SerializeToString,
            ),
            'DispatchQueryBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DispatchQueryBatch,
                    request_deserializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryBatchRequest.FromString,
                    response_serializer=clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clavata.hermes.v1.HermesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('clavata.hermes.v1.HermesService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HermesService(object):
    """The service definition.
    """

    @staticmethod
    def DispatchQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clavata.hermes.v1.HermesService/DispatchQuery',
            clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryRequest.SerializeToString,
            clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DispatchQueryStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/clavata.hermes.v1.HermesService/DispatchQueryStream',
            clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryStreamRequest.SerializeToString,
            clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DispatchQueryBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clavata.hermes.v1.HermesService/DispatchQueryBatch',
            clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryBatchRequest.SerializeToString,
            clavata_dot_hermes_dot_v1_dot_hermes__pb2.DispatchQueryBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
