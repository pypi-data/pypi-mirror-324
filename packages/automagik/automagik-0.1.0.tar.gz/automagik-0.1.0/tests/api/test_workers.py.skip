"""Tests for the workers API endpoints."""
import pytest
from uuid import uuid4
from datetime import datetime, timezone
from sqlalchemy import select, delete

from automagik.core.database.models import Worker
from automagik.api.models import WorkerStatus

MOCK_API_KEY = "mock-api-key-12345"
HEADERS = {"X-API-Key": MOCK_API_KEY}

@pytest.mark.asyncio
async def test_list_workers_empty(client, session):
    """Test listing workers when there are none."""
    # Clear any existing workers
    async with session.begin():
        await session.execute(delete(Worker))

    response = client.get("/api/v1/workers", headers=HEADERS)
    assert response.status_code == 200
    assert response.json() == []

@pytest.mark.asyncio
async def test_list_workers(client, session):
    """Test listing workers."""
    # Create a test worker
    worker_id = uuid4()
    worker = Worker(
        id=worker_id,
        hostname="test-host",
        pid=1234,
        status="active",
        stats={},
        last_heartbeat=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(worker)

    response = client.get("/api/v1/workers", headers=HEADERS)
    assert response.status_code == 200
    workers = response.json()
    assert len(workers) == 1
    assert workers[0]["id"] == str(worker_id)
    assert workers[0]["status"] == "active"

@pytest.mark.asyncio
async def test_get_worker(client, session):
    """Test getting a specific worker."""
    # Create a test worker
    worker_id = uuid4()
    worker = Worker(
        id=worker_id,
        hostname="test-host",
        pid=1234,
        status="active",
        stats={},
        last_heartbeat=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(worker)

    response = client.get(f"/api/v1/workers/{worker_id}", headers=HEADERS)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(worker_id)
    assert data["status"] == "active"

@pytest.mark.asyncio
async def test_get_worker_not_found(client):
    """Test getting a non-existent worker."""
    response = client.get(f"/api/v1/workers/{uuid4()}", headers=HEADERS)
    assert response.status_code == 404

@pytest.mark.asyncio
async def test_pause_worker(client, session):
    """Test pausing a worker."""
    # Create a test worker
    worker_id = uuid4()
    worker = Worker(
        id=worker_id,
        hostname="test-host",
        pid=1234,
        status="active",
        stats={},
        last_heartbeat=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(worker)

    response = client.post(f"/api/v1/workers/{worker_id}/pause", headers=HEADERS)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(worker_id)
    assert data["status"] == "paused"

    # Verify in database
    async with session.begin():
        result = await session.execute(select(Worker).filter(Worker.id == worker_id))
        worker = result.scalar_one()
        assert worker.status == "paused"

@pytest.mark.asyncio
async def test_resume_worker(client, session):
    """Test resuming a worker."""
    # Create a test worker
    worker_id = uuid4()
    worker = Worker(
        id=worker_id,
        hostname="test-host",
        pid=1234,
        status="paused",
        stats={},
        last_heartbeat=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(worker)

    response = client.post(f"/api/v1/workers/{worker_id}/resume", headers=HEADERS)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(worker_id)
    assert data["status"] == "active"

    # Verify in database
    async with session.begin():
        result = await session.execute(select(Worker).filter(Worker.id == worker_id))
        worker = result.scalar_one()
        assert worker.status == "active"

@pytest.mark.asyncio
async def test_stop_worker(client, session):
    """Test stopping a worker."""
    # Create a test worker
    worker_id = uuid4()
    worker = Worker(
        id=worker_id,
        hostname="test-host",
        pid=1234,
        status="active",
        stats={},
        last_heartbeat=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(worker)

    response = client.post(f"/api/v1/workers/{worker_id}/stop", headers=HEADERS)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(worker_id)
    assert data["status"] == "stopped"

    # Verify in database
    async with session.begin():
        result = await session.execute(select(Worker).filter(Worker.id == worker_id))
        worker = result.scalar_one()
        assert worker.status == "stopped"

def test_worker_status_model():
    """Test the WorkerStatus model."""
    worker_id = str(uuid4())
    now = datetime.now(timezone.utc)
    status = WorkerStatus(
        id=worker_id,
        status="active",
        last_heartbeat=now,
        current_task=None,
        stats={"processed": 10}
    )

    assert status.id == worker_id
    assert status.status == "active"
    assert status.last_heartbeat == now
    assert status.current_task is None
    assert status.stats == {"processed": 10}
