[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.poetry]
authors = ["Martin Hjelmare <marhje52@gmail.com>"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries",
]
description = "An asyncio client for the Home Connect API."
documentation = "https://aiohomeconnect.readthedocs.io"
license = "Apache-2.0"
name = "aiohomeconnect"
packages = [
  {include = "aiohomeconnect", from = "src"},
]
readme = "README.md"
repository = "https://github.com/MartinHjelmare/aiohomeconnect"
version = "0.12.3"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/MartinHjelmare/aiohomeconnect/issues"
"Changelog" = "https://github.com/MartinHjelmare/aiohomeconnect/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
authlib = "^1.3.0"
fastapi = "^0.115.0"
httpx = "^0.28.0"
httpx-sse = "^0.4.0"
mashumaro = "^3.13.1"
python = "^3.11"
typer = "^0.15.0"
uvicorn = "^0.34.0"

[tool.poetry.extras]
cli = ["authlib", "fastapi", "typer", "uvicorn"]

[tool.poetry.group.dev.dependencies]
codespell = "^2.3.0"
copier = "^9.3.1"
mypy = "^1.0"
pre-commit = "^4.0.0"
pytest = "^8.0.0"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
pytest-httpx = "^0.35.0"
python-semantic-release = "^9.14.0"
ruff = "^0.9.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
furo = {version = ">=2023.5.20", python = ">=3.11"}
myst-parser = {version = ">=0.16", python = ">=3.11"}
sphinx = {version = ">=4.0", python = ">=3.11"}
sphinx-autobuild = {version = ">=2024.0.0", python = ">=3.11"}

[tool.poetry.scripts]
aiohomeconnect = "aiohomeconnect.cli:cli"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING",
  "raise NotImplementedError",
  'if __name__ == "__main__":',
]

[tool.coverage.run]
branch = true

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = [
  'docs/.*',
  'setup.py',
]
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
allow_untyped_defs = true
module = "tests.*"

[[tool.mypy.overrides]]
ignore_errors = true
module = "docs.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "authlib.*"

[tool.pytest.ini_options]
addopts = """\
    -Wdefault
    --cov=aiohomeconnect
    --cov-report=term-missing:skip-covered
    --cov-report=xml
    """
asyncio_mode = "auto"
pythonpath = ["src"]

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "ANN401", # any-type
  "COM812", # missing-trailing-comma
  "D203", # 1 blank line required before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "D417", # False positives in some occasions
  "EM101", # raw-string-in-exception
  "EM102", # f-string-in-exception
  "ISC001", # single-line-implicit-string-concatenation
  "PLR0913", # too-many-arguments
  "PLR2004", # magic-value-comparison
  "TC001", # typing-only-first-party-import
  "TC002", # typing-only-third-party-import
  "TC003", # typing-only-stdlib-import
  "TRY003", # raise-vanilla-args
]
select = [
  "ALL", # all rules
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["aiohomeconnect", "tests"]

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = ["D100"]
"scripts/*" = ["ARG002", "ERA001", "PLR0911", "T201"]
"setup.py" = ["D100"]
"src/aiohomeconnect/cli/*" = ["T201"]
"tests/**/*" = [
  "S101",
  "S105",
]

[tool.semantic_release]
build_command = "pip install poetry && poetry build"
major_on_zero = false
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
  "src/aiohomeconnect/__init__.py:__version__",
  "docs/conf.py:release",
]

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  "^Bump.*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true
