Metadata-Version: 2.1
Name: cirq
Version: 1.5.0.dev20250131051046
Summary: A framework for creating, editing, and invoking Noisy Intermediate Scale Quantum (NISQ) circuits.
Home-page: http://github.com/quantumlib/cirq
Author: The Cirq Developers
Author-email: cirq-dev@googlegroups.com
Maintainer: Google Quantum AI open-source maintainers
Maintainer-email: quantum-oss-maintainers@google.com
License: Apache 2
Keywords: algorithms,api,cirq,google,google quantum,nisq,python,quantum,quantum algorithms,quantum circuit,quantum circuit simulator,quantum computer simulator,quantum computing,quantum development kit,quantum information,quantum programming,quantum programming language,quantum simulation,sdk,simulation
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Quantum Computing
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Typing :: Typed
Requires-Python: >=3.10.0
License-File: LICENSE
License-File: AUTHORS
Requires-Dist: cirq-aqt==1.5.0.dev20250131051046
Requires-Dist: cirq-core==1.5.0.dev20250131051046
Requires-Dist: cirq-google==1.5.0.dev20250131051046
Requires-Dist: cirq-ionq==1.5.0.dev20250131051046
Requires-Dist: cirq-pasqal==1.5.0.dev20250131051046
Requires-Dist: cirq-rigetti==1.5.0.dev20250131051046
Requires-Dist: cirq-web==1.5.0.dev20250131051046
Provides-Extra: dev_env
Requires-Dist: mypy==1.14.1; extra == "dev-env"
Requires-Dist: types-protobuf>=4.24; extra == "dev-env"
Requires-Dist: types-requests==2.32.0.20241016; extra == "dev-env"
Requires-Dist: pytest; extra == "dev-env"
Requires-Dist: pytest-asyncio; extra == "dev-env"
Requires-Dist: pytest-cov; extra == "dev-env"
Requires-Dist: pytest-randomly; extra == "dev-env"
Requires-Dist: coverage~=7.4; extra == "dev-env"
Requires-Dist: pytest-xdist; extra == "dev-env"
Requires-Dist: filelock~=3.1; extra == "dev-env"
Requires-Dist: freezegun; extra == "dev-env"
Requires-Dist: importlib-metadata; extra == "dev-env"
Requires-Dist: virtualenv~=20.23; extra == "dev-env"
Requires-Dist: virtualenv-clone; extra == "dev-env"
Requires-Dist: black==24.10.0; extra == "dev-env"
Requires-Dist: pylint~=3.3.1; extra == "dev-env"
Requires-Dist: grpcio-tools~=1.62.3; extra == "dev-env"
Requires-Dist: mypy-protobuf~=3.6; extra == "dev-env"
Requires-Dist: typedunits; extra == "dev-env"
Requires-Dist: ipython~=8.10; extra == "dev-env"
Requires-Dist: notebook~=7.0; extra == "dev-env"
Requires-Dist: ipykernel~=6.29; extra == "dev-env"
Requires-Dist: papermill~=2.6; extra == "dev-env"
Requires-Dist: ply>=3.6; extra == "dev-env"
Requires-Dist: pylatex~=1.4; extra == "dev-env"
Requires-Dist: quimb>=1.8; extra == "dev-env"
Requires-Dist: opt-einsum; extra == "dev-env"
Requires-Dist: seaborn~=0.12; extra == "dev-env"
Requires-Dist: tensorflow-docs==2024.2.5.73858; extra == "dev-env"
Requires-Dist: virtualenv; extra == "dev-env"
Requires-Dist: setuptools; extra == "dev-env"
Requires-Dist: wheel; extra == "dev-env"
Requires-Dist: twine; extra == "dev-env"
Requires-Dist: asv; extra == "dev-env"
Requires-Dist: qiskit-aer~=0.12.0; extra == "dev-env"
Requires-Dist: rstcheck; extra == "dev-env"
Requires-Dist: codeowners; platform_system != "Windows" and extra == "dev_env"

**This is a development version of Cirq and may be unstable.**

**For the latest stable release of Cirq see**
`here <https://pypi.org/project/cirq>`__.

.. image:: https://raw.githubusercontent.com/quantumlib/Cirq/main/docs/images/Cirq_logo_color.png
  :target: https://github.com/quantumlib/cirq
  :alt: Cirq
  :width: 500px

Cirq is a Python library for writing, manipulating, and optimizing quantum
circuits and running them against quantum computers and simulators.

.. image:: https://github.com/quantumlib/Cirq/actions/workflows/ci.yml/badge.svg?event=schedule
  :target: https://github.com/quantumlib/Cirq
  :alt: Build Status

.. image:: https://codecov.io/gh/quantumlib/Cirq/branch/main/graph/badge.svg
  :target: https://codecov.io/gh/quantumlib/Cirq

.. image:: https://badge.fury.io/py/cirq.svg
  :target: https://badge.fury.io/py/cirq


Installation and Documentation
------------------------------

Cirq documentation is available at `quantumai.google/cirq <https://quantumai.google/cirq>`_.

Documentation for the latest **pre-release** version of cirq (tracks the repository's main branch; what you get if you ``pip install cirq~=1.0.dev``), is available `here <https://quantumai.google/reference/python/cirq/all_symbols?version=nightly>`__.

Documentation for the latest **stable** version of cirq (what you get if you ``pip install cirq``) is available `here <https://quantumai.google/reference/python/cirq/all_symbols>`__.


- `Installation <https://quantumai.google/cirq/start/install>`_
- `Documentation <https://quantumai.google/cirq>`_
- `Tutorials <https://quantumai.google/cirq/build>`_

For a comprehensive list all of the interactive Jupyter Notebooks in our repo (including the ones not yet published to the site) open our repo in `Colab <https://colab.research.google.com/github/quantumlib/Cirq>`_.

For the latest news regarding Cirq, sign up to the `Cirq-announce email list <https://groups.google.com/forum/#!forum/cirq-announce>`__!


Hello Qubit
-----------

A simple example to get you up and running:

.. code-block:: python

  import cirq

  # Pick a qubit.
  qubit = cirq.GridQubit(0, 0)

  # Create a circuit
  circuit = cirq.Circuit(
      cirq.X(qubit)**0.5,  # Square root of NOT.
      cirq.measure(qubit, key='m')  # Measurement.
  )
  print("Circuit:")
  print(circuit)

  # Simulate the circuit several times.
  simulator = cirq.Simulator()
  result = simulator.run(circuit, repetitions=20)
  print("Results:")
  print(result)

Example output:

.. code-block::

  Circuit:
  (0, 0): ───X^0.5───M('m')───
  Results:
  m=11000111111011001000


Feature requests / Bugs / Questions
-----------------------------------

If you have feature requests or you found a bug, please `file them on GitHub <https://github.com/quantumlib/Cirq/issues/new/choose>`__.

For questions about how to use Cirq post to
`Quantum Computing Stack Exchange <https://quantumcomputing.stackexchange.com/>`__ with the
`cirq <https://quantumcomputing.stackexchange.com/questions/tagged/cirq>`__ tag.

How to cite Cirq
----------------

Cirq is uploaded to Zenodo automatically. Click on the badge below to see all the citation formats for all versions.

.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4062499.svg
  :target: https://doi.org/10.5281/zenodo.4062499
  :alt: DOI

Cirq Contributors Community
---------------------------

We welcome contributions! Before opening your first PR, a good place to start is to read our
`guidelines <https://github.com/quantumlib/cirq/blob/main/CONTRIBUTING.md>`__.

We are dedicated to cultivating an open and inclusive community to build software for near term quantum computers.
Please read our `code of conduct <https://github.com/quantumlib/cirq/blob/main/CODE_OF_CONDUCT.md>`__ for the rules of engagement within our community.

**Cirq Cynque** is our weekly meeting for contributors to discuss upcoming features, designs, issues, community and status of different efforts.
To get an invitation please join the `cirq-dev email list <https://groups.google.com/forum/#!forum/cirq-dev>`__ which also serves as yet another platform to discuss contributions and design ideas.

See Also
--------

For those interested in using quantum computers to solve problems in
chemistry and materials science, we encourage exploring
`OpenFermion <https://github.com/quantumlib/openfermion>`__ and
its sister library for compiling quantum simulation algorithms in Cirq,
`OpenFermion-Cirq <https://github.com/quantumlib/openfermion-cirq>`__.

For machine learning enthusiasts, `Tensorflow Quantum <https://github.com/tensorflow/quantum>`__ is a great project to check out!

For a powerful quantum circuit simulator that integrates well with Cirq, we recommend looking at `qsim <https://github.com/quantumlib/qsim>`__.

Finally, `ReCirq <https://github.com/quantumlib/ReCirq>`__ contains real world experiments using Cirq.

Contact
-------

For any questions or concerns not addressed here, please feel free to reach out to
quantumai-oss-maintainers@googlegroups.com.

Cirq is not an official Google product. Copyright 2019 The Cirq Developers
