# make_partially_linear_dataset_simple { #caml.extensions.synthetic_data.make_partially_linear_dataset_simple }

```python
make_partially_linear_dataset_simple(
    n_obs=1000,
    n_confounders=5,
    dim_heterogeneity=2,
    binary_treatment=True,
    seed=None,
)
```

Simulate data generating process from a partially linear model with a simple 1 or 2 dimensional CATE function.

The outcome is continuous and the treatment can be binary or continuous. The dataset is generated using the `make_heterogeneous_data` function from the [`doubleml` package](https://docs.doubleml.org/stable/index.html).

The general form of the data generating process is, in the case of dim_heterogeneity=1:

$$
y_i= \\tau (x_0) d_i + g(\mathbf{X_i})+\epsilon_i
$$
$$
d_i=f(\mathbf{X_i})+\eta_i
$$

or, in the case of dim_heterogeneity=2:

$$
y_i= \\tau (x_0,x_1) d_i + g(\mathbf{X_i})+\epsilon_i
$$
$$
d_i=f(\mathbf{X_i})+\eta_i
$$

where $y_i$ is the outcome, $d_i$ is the treatment, $\mathbf{X_i}$ are the confounders, $\epsilon_i$ and $\eta_i$ are the error terms, $\\tau$ is the CATE function, $g$ is the outcome function, and $f$ is the treatment function.

See the `doubleml` documentation for more details on the specific functional forms of the data generating process.

Here the ATE is defined as the average of the CATE function over all observations: $\mathbb{E}[\\tau (\cdot)]$

As a DAG, the data generating process can be roughly represented as:

<div style="text-align: center;">
```{mermaid}
flowchart TD;
    Xn((X))-->d((d));
    Xn((X))-->y((y));
    d((d))-->|"Ï„(x0,x1)"|y((y));

    linkStyle 0,1 stroke:black,stroke-width:2px
    linkStyle 1,2 stroke:black,stroke-width:2px
```
</div>

## Parameters {.doc-section .doc-section-parameters}

| Name              | Type        | Description                                                                  | Default   |
|-------------------|-------------|------------------------------------------------------------------------------|-----------|
| n_obs             | int         | The number of observations to generate.                                      | `1000`    |
| n_confounders     | int         | The number of confounders $X$.                                               | `5`       |
| dim_heterogeneity | int         | The dimension of the heterogeneity $x_0$ or $(x_0,x_1)$. Can only be 1 or 2. | `2`       |
| binary_treatment  | bool        | Whether the treatment $d$ is binary or continuous.                           | `True`    |
| seed              | int \| None | The seed to use for the random number generator.                             | `None`    |

## Returns {.doc-section .doc-section-returns}

| Name       | Type             | Description                                                                                                                                    |
|------------|------------------|------------------------------------------------------------------------------------------------------------------------------------------------|
| df         | pandas.DataFrame | The generated dataset where y is the outcome, d is the treatment, and X are the confounders with a 1d or 2d subset utilized for heterogeneity. |
| true_cates | numpy.ndarray    | The true conditional average treatment effects.                                                                                                |
| true_ate   | float            | The true average treatment effect.                                                                                                             |

## Examples {.doc-section .doc-section-examples}

```{python}
from caml.extensions.synthetic_data import make_partially_linear_dataset_simple
df, true_cates, true_ate = make_partially_linear_dataset_simple(n_obs=1000,
                                                                n_confounders=5,
                                                                dim_heterogeneity=2,
                                                                binary_treatment=True,
                                                                seed=1)

print(f"True CATES: {true_cates[:5]}")
print(f"True ATE: {true_ate}")
print(df.head())
```