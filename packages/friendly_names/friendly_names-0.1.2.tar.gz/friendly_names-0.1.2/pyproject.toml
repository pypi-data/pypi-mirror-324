[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "friendly_names"
dynamic = ["version"]
description = 'Generate friendly, readable names by combining adjectives, nouns and verbs'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["names", "generator", "friendly", "readable"]
authors = [
  { name = "James Kassemi", email = "james@kassemi.org" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing :: General",
  "Topic :: Utilities"
]
dependencies = []

[project.urls]
Documentation = "https://github.com/jkassemi/friendly_names#readme"
Issues = "https://github.com/jkassemi/friendly_names/issues"
Source = "https://github.com/jkassemi/friendly_names"

[tool.hatch.version]
path = "src/friendly_names/__about__.py"

[tool.hatch.envs.types]
dependencies = [
  "pytest>=7.0.0",
]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/friendly_names tests}"

[tool.hatch.envs.test]
dependencies = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
coverage = "pytest --cov {args:tests}"

[tool.coverage.run]
source_pkgs = ["friendly_names", "tests"]
branch = true
parallel = true
omit = [
  "src/friendly_names/__about__.py",
]

[tool.coverage.paths]
friendly_names = ["src/friendly_names", "*/friendly_names/src/friendly_names"]
tests = ["tests", "*/friendly_names/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.envs.lint]
dependencies = [
  "black>=23.0.0",
  "ruff>=0.1.0",
]

[tool.hatch.envs.lint.scripts]
style = [
  "ruff check {args:.}",
  "ruff format --check {args:.}",
]
fmt = [
  "ruff check --fix {args:.}",
  "ruff format {args:.}",
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C",    # flake8-comprehensions
  "E",    # pycodestyle errors
  "F",    # pyflakes
  "I",    # isort
  "N",    # pep8-naming
  "Q",    # flake8-quotes
  "RUF",  # ruff-specific rules
  "S",    # flake8-bandit
  "T",    # flake8-print
  "UP",   # pyupgrade
  "W",    # pycodestyle warnings
]
ignore = ["S101", "S311"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.isort]
known-first-party = ["friendly_names"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
