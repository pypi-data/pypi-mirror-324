from typing import Any, Callable, Dict, List, Optional, Tuple, Union

from numpy import dtype

from .python_serde import PythonSerde

class DynPyAnySerde: ...

class PyAnySerdeFactory:
    @staticmethod
    def bool_serde() -> DynPyAnySerde: ...
    @staticmethod
    def bytes_serde() -> DynPyAnySerde: ...
    @staticmethod
    def complex_serde() -> DynPyAnySerde: ...
    @staticmethod
    def dict_serde(
        key_serde_option: Optional[DynPyAnySerde],
        value_serde_option: Optional[DynPyAnySerde],
    ) -> DynPyAnySerde: ...
    @staticmethod
    def dynamic_serde() -> DynPyAnySerde: ...
    @staticmethod
    def float_serde() -> DynPyAnySerde: ...
    @staticmethod
    def int_serde() -> DynPyAnySerde: ...
    @staticmethod
    def list_serde(
        items_serde_option: Optional[DynPyAnySerde],
    ) -> DynPyAnySerde: ...
    @staticmethod
    def numpy_dynamic_shape_serde(py_dtype: dtype) -> DynPyAnySerde: ...
    @staticmethod
    def option_serde(value_serde_option: Optional[DynPyAnySerde]) -> DynPyAnySerde: ...
    @staticmethod
    def pickle_serde() -> DynPyAnySerde: ...
    @staticmethod
    def python_serde_serde(python_serde: PythonSerde) -> DynPyAnySerde: ...
    @staticmethod
    def set_serde(
        items_serde_option: Optional[DynPyAnySerde],
    ) -> DynPyAnySerde: ...
    @staticmethod
    def string_serde() -> DynPyAnySerde: ...
    @staticmethod
    def tuple_serde(item_serdes: List[Optional[DynPyAnySerde]]) -> DynPyAnySerde: ...
    @staticmethod
    def typed_dict_serde(
        serde_kv_list: Union[
            List[Tuple[str, Optional[DynPyAnySerde]]],
            Dict[str, Optional[DynPyAnySerde]],
        ]
    ) -> DynPyAnySerde: ...
    @staticmethod
    def union_serde(
        serde_options: List[Optional[DynPyAnySerde]],
        serde_choice_fn: Callable[[Any], int],
    ): ...
