// This file generated for packaging, do not edit.
// To edit, see original source:
// /home/runner/work/farm-ng-amiga/farm-ng-amiga/protos/farm_ng/canbus/amiga_v6.proto.
//
// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "farm_ng/canbus/canbus.proto";

package farm_ng.canbus.proto;

enum AmigaControlState {
  STATE_BOOT = 0;          // Dashboard is booting
  STATE_MANUAL_READY = 1;  // Transistory state before manual control is active
  STATE_MANUAL_ACTIVE = 2; // Amiga is under manual control
  STATE_CC_ACTIVE = 3;     // Amiga is under cruise control
  STATE_AUTO_READY = 4;    // Amiga is ready to accept auto control commands
  STATE_AUTO_ACTIVE = 5;   // Amiga is under auto control
  STATE_ESTOPPED = 6;      // Amiga is in an E-stop state
}

message AmigaTpdo1 {
  /*
  State, speed, and angular rate of the Amiga vehicle control unit (VCU).

  New in fw v0.1.9 / farm-ng-amiga v0.0.7:
    - Add pto & hbridge control.
    - Message data is now 8 bytes (was 5).
  */
  uint32 node_id = 1;                   // Node ID of sender
  double stamp = 2;                     // Received time, in host monotonic clock (seconds)

  AmigaControlState control_state = 3;  // See AmigaControlState
  double measured_speed = 4;            // Based on unicycle model
  double measured_angular_rate = 5;     // Based on unicycle model
  uint32 pto_bits = 6;                  // bit masked PTO device states
  uint32 hbridge_bits = 7;              // bit masked H-bridge device states
  uint32 state_of_charge = 8;           // Battery state of charge (0-100%)
}

message AmigaPdo2 {
  /*
  Contains a request or reply of RPM for each in individual motor (0xA - 0xD).

  Identical packet for RPDO (request = control) & TPDO (reply = measured).
  Should be used in conjunction with AmigaRpdo1 / AmigaTpdo1 for auto control.

  Introduced in fw version v0.2.0
  */
  uint32 node_id = 1;  // Node ID of sender
  double stamp = 2;    // Received or creation time, in host monotonic clock (seconds)

  int32 motor_a_rpm = 3;  // RPM of motor A
  int32 motor_b_rpm = 4;  // RPM of motor B
  int32 motor_c_rpm = 5;  // RPM of motor C
  int32 motor_d_rpm = 6;  // RPM of motor D
}

message AmigaV6CanbusState {
  /*
  State of the Amiga CAN bus.
  Encapsulates key information required to evaluate the state of the Amiga robot.
  */
  AmigaTpdo1 amiga_tpdo1 = 1;  // State of the Amiga vehicle control unit (VCU)
  farm_ng.canbus.proto.MotorStates motor_states = 2;  // State of the Amiga motors
  // Relative battery charge level on range [0.0, 1.0].
  // Will be negative if the charge level cannot be measured.
  double battery_charge_level = 3;
  bool send_error = 4;  // True if recent send on the CAN bus failed
  bool recv_error = 5;  // True if recent recv on the CAN bus indicated an error
}

message PendantState {
  /*
  State of the wired Pendant connected to the Amiga.
  */
  uint32 node_id = 1;  // Node ID of sender
  double stamp = 2;    // Received time, in host monotonic clock (seconds)

  double x = 3;        // Joystick X axis
  double y = 4;        // Joystick Y axis
  uint32 buttons = 5;  // Buttons pressed, bit masked. See PendantButtons in packet.py
}

// Operation IDs for configuration request and reply operations.
// These IDs are used for querying and setting values on a dashboard.
enum ConfigOperationIds {
  NO_OPERATION = 0; // No operation, indicating no specific operation.
  READ = 1;         // Read operation, to query the current value of a property.
  WRITE = 2;        // Write operation, to set the value of a property.
  STORE = 3;        // Store operation, to persistently set the value of all written properties.
}

// Value IDs for configuration request and reply operations with associated properties.
// These IDs are used for querying and setting values on a dashboard.
//
// Note that not all values can be set persistently, denoted by "Non-persistent value".
enum ConfigValueIds {
  NO_VALUE = 0;           // No operation, indicating no specific value.
  VEL_MAX = 10;           // Max linear velocity of the robot. Non-persistent value.
  FLIP_JOYSTICK = 11;     // Invert the forward / reverse joystick input.
  MAX_TURN_RATE = 20;     // Maximum turning rate, used at low speeds.
  MIN_TURN_RATE = 21;     // Minimum turning rate, used at high speeds.
  MAX_ANG_ACC = 23;       // Maximum angular acceleration.
  M10_ON = 30;            // Enables / disables motor control signals for motor 10 (A).
  M11_ON = 31;            // Enables / disables motor control signals for motor 11 (B).
  M12_ON = 32;            // Enables / disables motor control signals for motor 12 (C).
  M13_ON = 33;            // Enables / disables motor control signals for motor 13 (D).
  BATT_LO = 40;           // Battery voltage low indicator.
  BATT_HI = 41;           // Battery voltage high indicator.
  TURTLE_V = 45;          // Turtle mode linear velocity.
  TURTLE_W = 46;          // Turtle mode angular velocity.
  WHEEL_TRACK = 50;       // Wheel track width. Distance between the centers of two wheels on the same axle.
  WHEEL_GEAR_RATIO = 52;  // Gear ratio of the wheels. Non-persistent value.
  WHEEL_RADIUS = 53;      // Radius of the wheels. Non-persistent value.
  PTO_CUR_DEV = 80;       // Current PTO device to change settings of. Non-persistent value.
  PTO_CUR_RPM = 81;       // Current RPM setting for the PTO device output shaft. Non-persistent value.
  PTO_MIN_RPM = 82;       // Minimum RPM setting for the PTO device output shaft.
  PTO_MAX_RPM = 83;       // Maximum RPM setting for the PTO device output shaft.
  PTO_DEF_RPM = 84;       // Default RPM setting for the PTO device output shaft.
  PTO_GEAR_RATIO = 85;    // Gear ratio for the PTO device, used to calculate the output shaft RPM.
  STEERING_GAMMA = 90;    // Adjusts the steering response curve.
}

// Units for configuration request and reply values (ConfigValueIds)
// to specify the unit of measurement for each value.
// These units are used for querying and setting values on a dashboard.
enum ConfigValueUnits {
  NO_UNITS = 0; // No operation, indicating no specific unit.
  UNITLESS = 1; // Unitless, applicable to values that do not require units.
  METERS = 4;   // Meters, for distances.
  MPS = 10;     // Meters per second, for velocities.
  RADPS = 15;   // Radians per second, for angular velocities.
  RPM = 16;     // Revolutions per minute, for rotational speeds.
  MS2 = 20;     // Meters per second squared, for linear accelerations.
  RADS2 = 21;   // Radians per second squared, for angular accelerations.
  VOLTS = 25;   // Volts, for electrical potentials.
}

// ConfigRequestReply encapsulates an operation ID, value ID, unit of measurement,
// value, and success status for a configuration request or reply operation.
//
// NOTE: The success field is only used for replies.
// NOTE: The value field may be outside of the valid range for the value ID.
message ConfigRequestReply {
  uint32 node_id = 1;           // Node ID of the receiver (request) == sender (reply)
  double stamp = 2;             // Received time, in host monotonic clock (seconds)

  ConfigOperationIds op_id = 3; // The operation ID of the request/reply. REQUIRED for all operations.
  ConfigValueIds val_id = 4;    // The value ID of the request/reply. REQUIRED for READ & WRITE operations.
  ConfigValueUnits unit = 5;    // The unit of measurement for the value. REQUIRED for READ & WRITE operations.
  bool success = 6;             // For replies, true if the request was successful, false otherwise.

  oneof value {                 // Set one of the following fields based on the value ID.
                                // Can be left unset for READ & STORE operations.
    int32 int_value = 7;        // Used for integer values, e.g. PTO_CUR_DEV
    double double_value = 8;    // Used for floating-point values, e.g. VEL_MAX
    bool bool_value = 9;        // Used for boolean values, e.g. M10_ON
  }
}
