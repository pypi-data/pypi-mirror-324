//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

wxEventType wxEVT_NOTIFICATION_MESSAGE_CLICK   /PyName=wxEVT_NOTIFICATION_MESSAGE_CLICK/;

wxEventType wxEVT_NOTIFICATION_MESSAGE_DISMISSED   /PyName=wxEVT_NOTIFICATION_MESSAGE_DISMISSED/;

wxEventType wxEVT_NOTIFICATION_MESSAGE_ACTION   /PyName=wxEVT_NOTIFICATION_MESSAGE_ACTION/;

class wxNotificationMessage : wxEvtHandler
{
    %Docstring
        NotificationMessage() -> None
        NotificationMessage(title : str, message: str='', parent: Optional[wx.Window]=None, flags: int=wx.ICON_INFORMATION) -> None
        
        This class allows showing the user a message non intrusively.
    %End
    %TypeHeaderCode
        #include <wx/notifmsg.h>
    %End

public:
    enum 
    {
        Timeout_Auto,
        Timeout_Never    
    };

    wxNotificationMessage();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxNotificationMessage(
        const wxString & title,
        const wxString & message = wxEmptyString,
        wxWindow * parent = NULL,
        int flags = wxICON_INFORMATION
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxNotificationMessage();

    bool AddAction(
        wxWindowID actionid,
        const wxString & label = wxString()
    );
    %Docstring
        AddAction(actionid : int, label: str="") -> bool
        
        Add an action to the notification.
    %End

    bool Close();
    %Docstring
        Close() -> bool
        
        Hides the notification.
    %End

    void SetFlags(
        int flags
    );
    %Docstring
        SetFlags(flags : int) -> None
        
        This parameter can be currently used to specify the icon to show in
        the notification.
    %End

    void SetIcon(
        const wxIcon & icon
    );
    %Docstring
        SetIcon(icon : wx.Icon) -> None
        
        Specify a custom icon to be displayed in the notification.
    %End

    void SetMessage(
        const wxString & message
    );
    %Docstring
        SetMessage(message : str) -> None
        
        Set the main text of the notification.
    %End

    void SetParent(
        wxWindow * parent
    );
    %Docstring
        SetParent(parent : wx.Window) -> None
        
        Set the parent for this notification: the notification will be
        associated with the top level parent of this window or, if this method
        is not called, with the main application window by default.
    %End

    void SetTitle(
        const wxString & title
    );
    %Docstring
        SetTitle(title : str) -> None
        
        Set the title, it must be a concise string (not more than 64
        characters), use SetMessage() to give the user more details.
    %End

    bool Show(
        int timeout = Timeout_Auto
    );
    %Docstring
        Show(timeout: int=Timeout_Auto) -> bool
        
        Show the notification to the user and hides it after timeout seconds are elapsed.
    %End

    static
    wxTaskBarIcon * UseTaskBarIcon(
        wxTaskBarIcon * icon
    );
    %Docstring
        UseTaskBarIcon(icon : TaskBarIcon) -> TaskBarIcon
        
        If the application already uses a wxTaskBarIcon, it should be
        connected to notifications by using this method.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxNotificationMessage_UseTaskBarIcon(icon);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxTaskBarIcon * _wxNotificationMessage_UseTaskBarIcon(wxTaskBarIcon *icon)
    {
        #ifdef __WXMSW__
            return wxNotificationMessage::UseTaskBarIcon(icon);
        #else
            wxPyRaiseNotImplemented();
            return NULL;
        #endif
    }
    %End

    static
    bool MSWUseToasts(
        const wxString & shortcutPath = wxString(),
        const wxString & appId = wxString()
    );
    %Docstring
        MSWUseToasts(shortcutPath: str="", appId: str="") -> bool
        
        Enables toast notifications available since Windows 8 and suppresses
        the additional icon in the notification area on Windows 10.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxNotificationMessage_MSWUseToasts(shortcutPath, appId);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxNotificationMessage_MSWUseToasts(const wxString *shortcutPath, const wxString *appId)
    {
        #ifdef __WXMSW__
            return wxNotificationMessage::MSWUseToasts(*shortcutPath, *appId);
        #else
            wxPyRaiseNotImplemented();
            return false;
        #endif
    }
    %End

    public:


};  // end of class wxNotificationMessage



//---------------------------------------------------------------------------

