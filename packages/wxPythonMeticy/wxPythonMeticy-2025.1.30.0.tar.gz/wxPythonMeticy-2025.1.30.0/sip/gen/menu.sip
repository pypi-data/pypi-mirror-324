//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxMenu : wxEvtHandler
{
    %Docstring
        Menu() -> None
        Menu(style : int) -> None
        Menu(title : str, style: int=0) -> None
        
        A menu is a popup (or pull down) list of items, one of which may be
        selected before the menu goes away (clicking elsewhere dismisses the
        menu).
    %End
    %TypeHeaderCode
        #include <wx/menu.h>
    %End

public:
    wxMenu();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxMenu(
        long style
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxMenu(
        const wxString & title,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxMenu();

    wxMenuItemList & GetMenuItems()   /NoCopy/;
    %Docstring
        GetMenuItems() -> MenuItemList
        
        Returns the list of items in the menu.
    %End

    wxMenuItem * Append(
        int id,
        const wxString & item = wxEmptyString,
        const wxString & helpString = wxEmptyString,
        wxItemKind kind = wxITEM_NORMAL
    );
    %Docstring
        Append(id : int, item: str='', helpString: str='', kind: ItemKind=ITEM_NORMAL) -> MenuItem
        Append(id : int, item : str, subMenu : Menu, helpString: str='') -> MenuItem
        Append(menuItem : MenuItem) -> MenuItem
        
        Adds a menu item.
    %End

    wxMenuItem * Append(
        int id,
        const wxString & item,
        wxMenu * subMenu   /Transfer/,
        const wxString & helpString = wxEmptyString
    )   /Deprecated/;

    wxMenuItem * Append(
        wxMenuItem * menuItem   /Transfer/
    );

    wxMenuItem * AppendCheckItem(
        int id,
        const wxString & item,
        const wxString & help = wxEmptyString
    );
    %Docstring
        AppendCheckItem(id : int, item : str, help: str='') -> MenuItem
        
        Adds a checkable item to the end of the menu.
    %End

    wxMenuItem * AppendRadioItem(
        int id,
        const wxString & item,
        const wxString & help = wxEmptyString
    );
    %Docstring
        AppendRadioItem(id : int, item : str, help: str='') -> MenuItem
        
        Adds a radio item to the end of the menu.
    %End

    wxMenuItem * AppendSeparator();
    %Docstring
        AppendSeparator() -> MenuItem
        
        Adds a separator to the end of the menu.
    %End

    wxMenuItem * AppendSubMenu(
        wxMenu * submenu   /Transfer/,
        const wxString & text,
        const wxString & help = wxEmptyString
    );
    %Docstring
        AppendSubMenu(submenu : Menu, text : str, help: str='') -> MenuItem
        
        Adds the given submenu to this menu.
    %End

    void Break();
    %Docstring
        Break() -> None
        
        Inserts a break in a menu, causing the next appended item to appear in
        a new column.
    %End

    void Check(
        int id,
        bool check
    );
    %Docstring
        Check(id : int, check : bool) -> None
        
        Checks or unchecks the menu item.
    %End

    bool Delete(
        int id
    );
    %Docstring
        Delete(id : int) -> bool
        Delete(item : MenuItem) -> bool
        
        Deletes the menu item from the menu.
    %End

    bool Delete(
        wxMenuItem * item
    );

    bool Destroy(
        int id
    )   /PyName=DestroyItem/;
    %Docstring
        DestroyItem(id : int) -> bool
        DestroyItem(item : MenuItem) -> bool
        
        Deletes the menu item from the menu.
    %End

    bool Destroy(
        wxMenuItem * item
    )   /PyName=DestroyItem/;

    void Enable(
        int id,
        bool enable
    );
    %Docstring
        Enable(id : int, enable : bool) -> None
        
        Enables or disables (greys out) a menu item.
    %End

    wxMenuItem * FindChildItem(
        int id,
        size_t * pos   /Out/ = NULL
    ) const;
    %Docstring
        FindChildItem(id : int) -> Tuple[MenuItem, int]
        
        Finds the menu item object associated with the given menu item
        identifier and, optionally, the position of the item in the menu.
    %End

    int FindItem(
        const wxString & itemString
    ) const;
    %Docstring
        FindItem(itemString : str) -> int
        FindItem(id : int) -> Tuple[MenuItem, Menu]
        
        Finds the menu id for a menu item string.
    %End

    wxMenuItem * FindItem(
        int id,
        wxMenu ** menu   /Out/ = NULL
    ) const;

    wxMenuItem * FindItemByPosition(
        size_t position
    ) const;
    %Docstring
        FindItemByPosition(position : int) -> MenuItem
        
        Returns the wxMenuItem given a position in the menu.
    %End

    wxString GetHelpString(
        int id
    ) const;
    %Docstring
        GetHelpString(id : int) -> str
        
        Returns the help string associated with a menu item.
    %End

    wxString GetLabel(
        int id
    ) const;
    %Docstring
        GetLabel(id : int) -> str
        
        Returns a menu item label.
    %End

    wxString GetLabelText(
        int id
    ) const;
    %Docstring
        GetLabelText(id : int) -> str
        
        Returns a menu item label, without any of the original mnemonics and
        accelerators.
    %End

    size_t GetMenuItemCount() const;
    %Docstring
        GetMenuItemCount() -> int
        
        Returns the number of items in the menu.
    %End

    const wxString & GetTitle() const;
    %Docstring
        GetTitle() -> str
        
        Returns the title of the menu.
    %End

    wxMenuItem * Insert(
        size_t pos,
        wxMenuItem * menuItem   /Transfer/
    );
    %Docstring
        Insert(pos : int, menuItem : MenuItem) -> MenuItem
        Insert(pos : int, id : int, item: str='', helpString: str='', kind: ItemKind=ITEM_NORMAL) -> MenuItem
        Insert(pos : int, id : int, text : str, submenu : Menu, help: str='') -> MenuItem
        
        Inserts the given item before the position pos.
    %End

    wxMenuItem * Insert(
        size_t pos,
        int id,
        const wxString & item = wxEmptyString,
        const wxString & helpString = wxEmptyString,
        wxItemKind kind = wxITEM_NORMAL
    );

    wxMenuItem * Insert(
        size_t pos,
        int id,
        const wxString & text,
        wxMenu * submenu   /Transfer/,
        const wxString & help = wxEmptyString
    );

    wxMenuItem * InsertCheckItem(
        size_t pos,
        int id,
        const wxString & item,
        const wxString & helpString = wxEmptyString
    );
    %Docstring
        InsertCheckItem(pos : int, id : int, item : str, helpString: str='') -> MenuItem
        
        Inserts a checkable item at the given position.
    %End

    wxMenuItem * InsertRadioItem(
        size_t pos,
        int id,
        const wxString & item,
        const wxString & helpString = wxEmptyString
    );
    %Docstring
        InsertRadioItem(pos : int, id : int, item : str, helpString: str='') -> MenuItem
        
        Inserts a radio item at the given position.
    %End

    wxMenuItem * InsertSeparator(
        size_t pos
    );
    %Docstring
        InsertSeparator(pos : int) -> MenuItem
        
        Inserts a separator at the given position.
    %End

    bool IsChecked(
        int id
    ) const;
    %Docstring
        IsChecked(id : int) -> bool
        
        Determines whether a menu item is checked.
    %End

    bool IsEnabled(
        int id
    ) const;
    %Docstring
        IsEnabled(id : int) -> bool
        
        Determines whether a menu item is enabled.
    %End

    wxMenuItem * Prepend(
        wxMenuItem * menuItem   /Transfer/
    );
    %Docstring
        Prepend(menuItem : MenuItem) -> MenuItem
        Prepend(id : int, item: str='', helpString: str='', kind: ItemKind=ITEM_NORMAL) -> MenuItem
        Prepend(id : int, text : str, subMenu : Menu, help: str='') -> MenuItem
        
        Inserts the given item at position 0, i.e. before all the other
        existing items.
    %End

    wxMenuItem * Prepend(
        int id,
        const wxString & item = wxEmptyString,
        const wxString & helpString = wxEmptyString,
        wxItemKind kind = wxITEM_NORMAL
    );

    wxMenuItem * Prepend(
        int id,
        const wxString & text,
        wxMenu * subMenu   /Transfer/,
        const wxString & help = wxEmptyString
    );

    wxMenuItem * PrependCheckItem(
        int id,
        const wxString & item,
        const wxString & helpString = wxEmptyString
    );
    %Docstring
        PrependCheckItem(id : int, item : str, helpString: str='') -> MenuItem
        
        Inserts a checkable item at position 0.
    %End

    wxMenuItem * PrependRadioItem(
        int id,
        const wxString & item,
        const wxString & helpString = wxEmptyString
    );
    %Docstring
        PrependRadioItem(id : int, item : str, helpString: str='') -> MenuItem
        
        Inserts a radio item at position 0.
    %End

    wxMenuItem * PrependSeparator();
    %Docstring
        PrependSeparator() -> MenuItem
        
        Inserts a separator at position 0.
    %End

    wxMenuItem * Remove(
        int id
    )   /TransferBack/;
    %Docstring
        Remove(id : int) -> MenuItem
        Remove(item : MenuItem) -> MenuItem
        
        Removes the menu item from the menu but doesn't delete the associated C++ object.
    %End

    wxMenuItem * Remove(
        wxMenuItem * item
    )   /TransferBack/;

    void SetHelpString(
        int id,
        const wxString & helpString
    );
    %Docstring
        SetHelpString(id : int, helpString : str) -> None
        
        Sets an item's help string.
    %End

    void SetLabel(
        int id,
        const wxString & label
    );
    %Docstring
        SetLabel(id : int, label : str) -> None
        
        Sets the label of a menu item.
    %End

    void SetTitle(
        const wxString & title
    );
    %Docstring
        SetTitle(title : str) -> None
        
        Sets the title of the menu.
    %End

    void UpdateUI(
        wxEvtHandler * source = NULL
    );
    %Docstring
        UpdateUI(source: Optional[EvtHandler]=None) -> None
        
        Update the state of all menu items, recursively, by generating
        wxEVT_UPDATE_UI events for them.
    %End

    void SetInvokingWindow(
        wxWindow * win
    );
    %Docstring
        SetInvokingWindow(win : Window) -> None
    %End

    wxWindow * GetInvokingWindow() const;
    %Docstring
        GetInvokingWindow() -> Window
    %End

    wxWindow * GetWindow() const;
    %Docstring
        GetWindow() -> Window
    %End

    long GetStyle() const;
    %Docstring
        GetStyle() -> int
    %End

    void SetParent(
        wxMenu * parent
    );
    %Docstring
        SetParent(parent : Menu) -> None
    %End

    wxMenu * GetParent() const;
    %Docstring
        GetParent() -> Menu
    %End

    void Attach(
        wxMenuBar * menubar
    );
    %Docstring
        Attach(menubar : MenuBar) -> None
    %End

    void Detach();
    %Docstring
        Detach() -> None
    %End

    bool IsAttached() const;
    %Docstring
        IsAttached() -> bool
    %End

    wxMenuItem* FindItemById(int id) const;
    %Docstring
        FindItemById(id: int) -> MenuItem
        
        FindItemById(id) -> MenuItem
        
        Finds the menu item object associated with the given menu item
        identifier.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenu_FindItemById(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxMenuItem* _wxMenu_FindItemById(const wxMenu* self, int id)
    {
        return self->FindItem(id);
    }
    %End

    public:


    %Property(name=InvokingWindow, get=GetInvokingWindow, set=SetInvokingWindow)
    %Property(name=MenuItemCount, get=GetMenuItemCount)
    %Property(name=MenuItems, get=GetMenuItems)
    %Property(name=Parent, get=GetParent, set=SetParent)
    %Property(name=Style, get=GetStyle)
    %Property(name=Title, get=GetTitle, set=SetTitle)
    %Property(name=Window, get=GetWindow)
};  // end of class wxMenu


%Extract(id=pycode_core)
def _Menu_AppendMenu(self, id, item, subMenu, help=""):
    return self.Append(id, item, subMenu, help)
Menu.AppendMenu = wx.deprecated(_Menu_AppendMenu, "Use Append instead.")
del _Menu_AppendMenu
%End

%Extract(id=pycode_core)
def _Menu_AppendItem(self, menuItem):
    return self.Append(menuItem)
Menu.AppendItem = wx.deprecated(_Menu_AppendItem, "Use Append instead.")
del _Menu_AppendItem
%End

%Extract(id=pycode_core)
def _Menu_InsertMenu(self, pos, id, item, subMenu, help=""):
    return self.Insert(pos, id, item, subMenu, help)
Menu.InsertMenu = wx.deprecated(_Menu_InsertMenu, "Use Insert instead.")
del _Menu_InsertMenu
%End

%Extract(id=pycode_core)
def _Menu_InsertItem(self, pos, menuItem):
    return self.Insert(pos, menuItem)
Menu.InsertItem = wx.deprecated(_Menu_InsertItem, "Use Insert instead.")
del _Menu_InsertItem
%End

%Extract(id=pycode_core)
def _Menu_PrependMenu(self, id, item, subMenu, help=""):
    return self.Prepend(id, item, subMenu, help)
Menu.PrependMenu = wx.deprecated(_Menu_PrependMenu, "Use Prepend instead.")
del _Menu_PrependMenu
%End

%Extract(id=pycode_core)
def _Menu_PrependItem(self, menuItem):
    return self.Prepend(menuItem)
Menu.PrependItem = wx.deprecated(_Menu_PrependItem, "Use Prepend instead.")
del _Menu_PrependItem
%End

%Extract(id=pycode_core)
def _Menu_RemoveMenu(self, id, item, subMenu, help=""):
    return self.Remove(id, item, subMenu, help)
Menu.RemoveMenu = wx.deprecated(_Menu_RemoveMenu, "Use Remove instead.")
del _Menu_RemoveMenu
%End

%Extract(id=pycode_core)
def _Menu_RemoveItem(self, menuItem):
    return self.Remove(menuItem)
Menu.RemoveItem = wx.deprecated(_Menu_RemoveItem, "Use Remove instead.")
del _Menu_RemoveItem
%End

class wxMenuBar : wxWindow
{
    %Docstring
        MenuBar(style: int=0) -> None
        
        A menu bar is a series of menus accessible from the top of a frame.
    %End
    %TypeHeaderCode
        #include <wx/menu.h>
    %End

public:
    wxMenuBar(
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxMenuBar();

    bool Append(
        wxMenu * menu   /Transfer/,
        const wxString & title
    );
    %Docstring
        Append(menu : Menu, title : str) -> bool
        
        Adds the item to the end of the menu bar.
    %End

    void Check(
        int id,
        bool check
    );
    %Docstring
        Check(id : int, check : bool) -> None
        
        Checks or unchecks a menu item.
    %End

    void Enable(
        int id,
        bool enable
    );
    %Docstring
        Enable(id : int, enable : bool) -> None
        
        Enables or disables (greys out) a menu item.
    %End

    bool IsEnabledTop(
        size_t pos
    ) const;
    %Docstring
        IsEnabledTop(pos : int) -> bool
        
        Returns true if the menu with the given index is enabled.
    %End

    void EnableTop(
        size_t pos,
        bool enable
    );
    %Docstring
        EnableTop(pos : int, enable : bool) -> None
        
        Enables or disables a whole menu.
    %End

    wxMenuItem * FindItem(
        int id,
        wxMenu ** menu   /Out/ = NULL
    ) const;
    %Docstring
        FindItem(id : int) -> Tuple[MenuItem, Menu]
        
        Finds the menu item object associated with the given menu item
        identifier.
    %End

    int FindMenu(
        const wxString & title
    ) const;
    %Docstring
        FindMenu(title : str) -> int
        
        Returns the index of the menu with the given title or wxNOT_FOUND if
        no such menu exists in this menubar.
    %End

    int FindMenuItem(
        const wxString & menuString,
        const wxString & itemString
    ) const;
    %Docstring
        FindMenuItem(menuString : str, itemString : str) -> int
        
        Finds the menu item id for a menu name/menu item string pair.
    %End

    wxString GetHelpString(
        int id
    ) const;
    %Docstring
        GetHelpString(id : int) -> str
        
        Gets the help string associated with the menu item identifier.
    %End

    wxString GetLabel(
        int id
    ) const;
    %Docstring
        GetLabel(id : int) -> str
        
        Gets the label associated with a menu item.
    %End

    wxMenu * GetMenu(
        size_t menuIndex
    ) const;
    %Docstring
        GetMenu(menuIndex : int) -> Menu
        
        Returns the menu at menuIndex (zero-based).
    %End

    size_t GetMenuCount() const;
    %Docstring
        GetMenuCount() -> int
        
        Returns the number of menus in this menubar.
    %End

    wxString GetMenuLabel(
        size_t pos
    ) const;
    %Docstring
        GetMenuLabel(pos : int) -> str
        
        Returns the label of a top-level menu.
    %End

    wxString GetMenuLabelText(
        size_t pos
    ) const;
    %Docstring
        GetMenuLabelText(pos : int) -> str
        
        Returns the label of a top-level menu.
    %End

    bool Insert(
        size_t pos,
        wxMenu * menu   /Transfer/,
        const wxString & title
    );
    %Docstring
        Insert(pos : int, menu : Menu, title : str) -> bool
        
        Inserts the menu at the given position into the menu bar.
    %End

    bool IsChecked(
        int id
    ) const;
    %Docstring
        IsChecked(id : int) -> bool
        
        Determines whether an item is checked.
    %End

    bool IsEnabled(
        int id
    ) const;
    %Docstring
        IsEnabled(id : int) -> bool
        
        Determines whether an item is enabled.
    %End

    void Refresh(
        bool eraseBackground = true,
        const wxRect * rect = NULL
    );
    %Docstring
        Refresh(eraseBackground: bool=True, rect: Optional[Rect]=None) -> None
        
        Redraw the menu bar.
    %End

    wxMenu * Remove(
        size_t pos
    )   /TransferBack/;
    %Docstring
        Remove(pos : int) -> Menu
        
        Removes the menu from the menu bar and returns the menu object - the caller is responsible for deleting it.
    %End

    wxMenu * Replace(
        size_t pos,
        wxMenu * menu   /Transfer/,
        const wxString & title
    )   /TransferBack/;
    %Docstring
        Replace(pos : int, menu : Menu, title : str) -> Menu
        
        Replaces the menu at the given position with another one.
    %End

    void SetHelpString(
        int id,
        const wxString & helpString
    );
    %Docstring
        SetHelpString(id : int, helpString : str) -> None
        
        Sets the help string associated with a menu item.
    %End

    void SetLabel(
        int id,
        const wxString & label
    );
    %Docstring
        SetLabel(id : int, label : str) -> None
        
        Sets the label of a menu item.
    %End

    void SetMenuLabel(
        size_t pos,
        const wxString & label
    );
    %Docstring
        SetMenuLabel(pos : int, label : str) -> None
        
        Sets the label of a top-level menu.
    %End

    wxMenu * OSXGetAppleMenu() const;
    %Docstring
        OSXGetAppleMenu() -> Menu
        
        Returns the Apple menu.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuBar_OSXGetAppleMenu(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxMenu * _wxMenuBar_OSXGetAppleMenu(const wxMenuBar* self)
    {
        #ifdef __WXMAC__
            return self->OSXGetAppleMenu();
        #else
            return NULL;
        #endif
    }
    %End

    wxFrame * GetFrame() const;
    %Docstring
        GetFrame() -> Frame
    %End

    bool IsAttached() const;
    %Docstring
        IsAttached() -> bool
    %End

    void Attach(
        wxFrame * frame
    );
    %Docstring
        Attach(frame : Frame) -> None
    %End

    void Detach();
    %Docstring
        Detach() -> None
    %End

    static
    void MacSetCommonMenuBar(
        wxMenuBar * menubar
    );
    %Docstring
        MacSetCommonMenuBar(menubar : MenuBar) -> None
        
        Enables you to set the global menubar on Mac, that is, the menubar
        displayed when the app is running without any frames open.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuBar_MacSetCommonMenuBar(menubar);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuBar_MacSetCommonMenuBar(wxMenuBar *menubar)
    {
        #ifdef __WXMAC__
            wxMenuBar::MacSetCommonMenuBar(menubar);
        #endif
    }
    %End

    static
    wxMenuBar * MacGetCommonMenuBar();
    %Docstring
        MacGetCommonMenuBar() -> MenuBar
        
        Enables you to get the global menubar on Mac, that is, the menubar
        displayed when the app is running without any frames open.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuBar_MacGetCommonMenuBar();
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxMenuBar * _wxMenuBar_MacGetCommonMenuBar()
    {
        #ifdef __WXMAC__
            return wxMenuBar::MacGetCommonMenuBar();
        #else
            return NULL;
        #endif
    }
    %End

    wxMenuItem* FindItemById(int id) const;
    %Docstring
        FindItemById(id: int) -> MenuItem
        
        FindItemById(id) -> MenuItem
        
        Finds the menu item object associated with the given menu item
        identifier.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuBar_FindItemById(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxMenuItem* _wxMenuBar_FindItemById(const wxMenuBar* self, int id)
    {
        return self->FindItem(id);
    }
    %End

};  // end of class wxMenuBar


%Extract(id=pycode_core)
def _MenuBar_GetMenus(self):
    """
    GetMenus() -> (menu, label)
    
    Return a list of (menu, label) items for the menus in the :class:`MenuBar`.
    """
    return [(self.GetMenu(i), self.GetMenuLabel(i)) for i in range(self.GetMenuCount())]
MenuBar.GetMenus = _MenuBar_GetMenus
del _MenuBar_GetMenus
%End

%Extract(id=pycode_core)
def _MenuBar_SetMenus(self, items):
    """
    SetMenus()
    
    Clear and add new menus to the :class:`MenuBar` from a list of (menu, label) items.
    """
    for i in range(self.GetMenuCount()-1, -1, -1):
        self.Remove(i)
    for m, l in items:
        self.Append(m, l)
MenuBar.SetMenus = _MenuBar_SetMenus
del _MenuBar_SetMenus
%End

%Extract(id=pycode_core)
MenuBar.Menus = property(MenuBar.GetMenus, MenuBar.SetMenus)
%End

class wxMenuList_iterator /Abstract/
{
    // the C++ implementation of this class
    %TypeHeaderCode
        
        
        class wxMenuList_iterator {
        public:
            wxMenuList_iterator(wxMenuList::compatibility_iterator start)
                : m_node(start) {}

            wxMenu* __next__() {
                wxMenu* obj = NULL;
                if (m_node) {
                    obj = (wxMenu*) m_node->GetData();
                    m_node = m_node->GetNext();
                }
                else {
                    PyErr_SetString(PyExc_StopIteration, "");
                }
                return (wxMenu*)obj;
            }
        private:
            wxMenuList::compatibility_iterator m_node;
        };
    %End
public:
    wxMenu* __next__();
    %MethodCode
        sipRes = sipCpp->__next__();
        if (PyErr_Occurred())
            return NULL;
    %End

    PyObject* __iter__();
    %MethodCode
        return PyObject_SelfIter(sipSelf);
    %End
};

class wxMenuList
{
    %TypeHeaderCode
        
        
    %End
public:
    Py_ssize_t __len__();
    %MethodCode
        sipRes = sipCpp->size();
    %End

    wxMenu* __getitem__(long index);
    %MethodCode
        if (0 > index)
            index += sipCpp->size();

        if (index < sipCpp->size() && (0 <= index)) {
            wxMenuList::compatibility_iterator node = sipCpp->Item(index);
            if (node)
                sipRes = (wxMenu*)node->GetData();
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }
    %End

    int __contains__(const wxMenu* obj);
    %MethodCode
        wxMenuList::compatibility_iterator node;
        node = sipCpp->Find((wxMenu*)obj);
        sipRes = node != NULL;
    %End

    wxMenuList_iterator* __iter__() /Factory/;
    %MethodCode
        sipRes =  new wxMenuList_iterator(sipCpp->GetFirst());
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxMenu* obj);
    %MethodCode
        int idx = sipCpp->IndexOf((wxMenu*)obj);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
        }
        sipRes = idx;
    %End

    
};

%Extract(id=pycode_core)
def _MenuList___repr__(self):
    return "MenuList: " + repr(list(self))
MenuList.__repr__ = _MenuList___repr__
del _MenuList___repr__
%End



//---------------------------------------------------------------------------

