//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/bmpcbox.h>
%End


//---------------------------------------------------------------------------

const char* wxBitmapComboBoxNameStr;

class wxBitmapComboBox : wxControl, wxTextEntry, wxItemContainer
{
    %Docstring
        BitmapComboBox() -> None
        BitmapComboBox(parent : wx.Window, id: int=wx.ID_ANY, value: str='', pos: wx.Point=wx.DefaultPosition, size: wx.Size=wx.DefaultSize, choices: List[str]=[], style: int=0, validator: wx.Validator=wx.DefaultValidator, name: str=BitmapComboBoxNameStr) -> None
        
        A combobox that displays bitmap in front of the list items.
    %End
    %TypeHeaderCode
        #include <wx/bmpcbox.h>
    %End

public:
    wxBitmapComboBox();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxBitmapComboBox(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxBitmapComboBoxNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxBitmapComboBox();

    int Append(
        const wxString & item,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %Docstring
        Append(item : str, bitmap: wx.Bitmap=wx.NullBitmap) -> int
        Append(item : str, bitmap : wx.Bitmap, clientData : ClientData) -> int
        
        Adds the item to the end of the combo box.
    %End

    int Append(
        const wxString & item,
        const wxBitmap & bitmap,
        wxClientData * clientData   /Transfer/
    );

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxBitmapComboBoxNameStr
    );
    %Docstring
        Create(parent : wx.Window, id: int=wx.ID_ANY, value: str='', pos: wx.Point=wx.DefaultPosition, size: wx.Size=wx.DefaultSize, choices: List[str]=[], style: int=0, validator: wx.Validator=wx.DefaultValidator, name: str=BitmapComboBoxNameStr) -> bool
        
        Creates the combobox for two-step construction.
    %End

    wxSize GetBitmapSize() const;
    %Docstring
        GetBitmapSize() -> wx.Size
        
        Returns the size of the bitmaps used in the combo box.
    %End

    wxBitmap GetItemBitmap(
        unsigned int n
    ) const;
    %Docstring
        GetItemBitmap(n : int) -> wx.Bitmap
        
        Returns the bitmap of the item with the given index.
    %End

    int Insert(
        const wxString & item,
        const wxBitmap & bitmap,
        unsigned int pos
    );
    %Docstring
        Insert(item : str, bitmap : wx.Bitmap, pos : int) -> int
        Insert(item : str, bitmap : wx.Bitmap, pos : int, clientData : ClientData) -> int
        
        Inserts the item into the list before pos.
    %End

    int Insert(
        const wxString & item,
        const wxBitmap & bitmap,
        unsigned int pos,
        wxClientData * clientData   /Transfer/
    );

    void SetItemBitmap(
        unsigned int n,
        const wxBitmapBundle & bitmap
    );
    %Docstring
        SetItemBitmap(n : int, bitmap : wx.BitmapBundle) -> None
        
        Sets the bitmap for the given item.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant: wx.WindowVariant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    long GetInsertionPoint() const;
    %Docstring
        GetInsertionPoint() -> int
        
        Same as wxTextEntry::GetInsertionPoint().
    %End

    bool IsListEmpty() const;
    %Docstring
        IsListEmpty() -> bool
        
        Returns true if the list of combobox choices is empty.
    %End

    bool IsTextEmpty() const;
    %Docstring
        IsTextEmpty() -> bool
        
        Returns true if the text of the combobox is empty.
    %End

    void SetSelection(
        long from_,
        long to_
    );
    %Docstring
        SetSelection(from_ : int, to_ : int) -> None
        SetSelection(n : int) -> None
        
        Same as wxTextEntry::SetSelection().
    %End

    void SetSelection(
        int n
    );

    void SetTextSelection(long from_,  long to_);
    %Docstring
        SetTextSelection(from_: int, to_: int) -> None
        
        Same as wxTextEntry::SetSelection().
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxBitmapComboBox_SetTextSelection(sipCpp, from_, to_);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxBitmapComboBox_SetTextSelection(wxBitmapComboBox* self, long from_, long to_)
    {
        self->SetSelection(from_, to_);
    }
    %End

    void SetValue(
        const wxString & text
    );
    %Docstring
        SetValue(text : str) -> None
        
        Sets the text for the combobox text field.
    %End

    void Popup();
    %Docstring
        Popup() -> None
        
        Shows the list box portion of the combo box.
    %End

    void Dismiss();
    %Docstring
        Dismiss() -> None
        
        Hides the list box portion of the combo box.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Returns the index of the selected item or wxNOT_FOUND if no item is
        selected.
    %End

    void GetSelection(
        long * from   /Out/,
        long * to   /Out/
    ) const   /PyName=GetTextSelection/;
    %Docstring
        GetTextSelection() -> Tuple[int, int]
        
        Gets the current selection span.
    %End

    int FindString(
        const wxString & string,
        bool caseSensitive = false
    ) const;
    %Docstring
        FindString(string : str, caseSensitive: bool=False) -> int
        
        Finds an item whose label matches the given string.
    %End

    wxString GetString(
        unsigned int n
    ) const;
    %Docstring
        GetString(n : int) -> str
        
        Returns the label of the item with the given index.
    %End

    void SetString(
        unsigned int n,
        const wxString & text
    );
    %Docstring
        SetString(n : int, text : str) -> None
        
        Changes the text of the specified combobox item.
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> int
        
        Returns the number of items in the control.
    %End

            virtual wxString GetStringSelection() const;
            %MethodCode
                sipRes = new wxString(sipCpp->wxItemContainerImmutable::GetStringSelection());
            %End
            %VirtualCallCode
                sipRes = wxItemContainerImmutable::GetStringSelection();
            %End


    public:


    %Property(name=BitmapSize, get=GetBitmapSize)
    %Property(name=Count, get=GetCount)
    %Property(name=InsertionPoint, get=GetInsertionPoint)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
};  // end of class wxBitmapComboBox



//---------------------------------------------------------------------------

