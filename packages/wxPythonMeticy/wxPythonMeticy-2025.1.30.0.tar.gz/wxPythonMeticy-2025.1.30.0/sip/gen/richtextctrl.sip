//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _richtext.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxRE_READONLY;
const int wxRE_MULTILINE;
const int wxRE_CENTRE_CARET;
const int wxRE_CENTER_CARET;
const int wxRICHTEXT_SHIFT_DOWN;
const int wxRICHTEXT_CTRL_DOWN;
const int wxRICHTEXT_ALT_DOWN;
const int wxRICHTEXT_EX_NO_GUIDELINES;
const int wxID_RICHTEXT_PROPERTIES1;
const int wxID_RICHTEXT_PROPERTIES2;
const int wxID_RICHTEXT_PROPERTIES3;
enum wxRichTextCtrlSelectionState
{
    wxRichTextCtrlSelectionState_Normal,
    wxRichTextCtrlSelectionState_CommonAncestor
};

wxEventType wxEVT_RICHTEXT_LEFT_CLICK   /PyName=wxEVT_RICHTEXT_LEFT_CLICK/;

wxEventType wxEVT_RICHTEXT_RIGHT_CLICK   /PyName=wxEVT_RICHTEXT_RIGHT_CLICK/;

wxEventType wxEVT_RICHTEXT_MIDDLE_CLICK   /PyName=wxEVT_RICHTEXT_MIDDLE_CLICK/;

wxEventType wxEVT_RICHTEXT_LEFT_DCLICK   /PyName=wxEVT_RICHTEXT_LEFT_DCLICK/;

wxEventType wxEVT_RICHTEXT_RETURN   /PyName=wxEVT_RICHTEXT_RETURN/;

wxEventType wxEVT_RICHTEXT_CHARACTER   /PyName=wxEVT_RICHTEXT_CHARACTER/;

wxEventType wxEVT_RICHTEXT_CONSUMING_CHARACTER   /PyName=wxEVT_RICHTEXT_CONSUMING_CHARACTER/;

wxEventType wxEVT_RICHTEXT_DELETE   /PyName=wxEVT_RICHTEXT_DELETE/;

wxEventType wxEVT_RICHTEXT_STYLESHEET_CHANGING   /PyName=wxEVT_RICHTEXT_STYLESHEET_CHANGING/;

wxEventType wxEVT_RICHTEXT_STYLESHEET_CHANGED   /PyName=wxEVT_RICHTEXT_STYLESHEET_CHANGED/;

wxEventType wxEVT_RICHTEXT_STYLESHEET_REPLACING   /PyName=wxEVT_RICHTEXT_STYLESHEET_REPLACING/;

wxEventType wxEVT_RICHTEXT_STYLESHEET_REPLACED   /PyName=wxEVT_RICHTEXT_STYLESHEET_REPLACED/;

wxEventType wxEVT_RICHTEXT_CONTENT_INSERTED   /PyName=wxEVT_RICHTEXT_CONTENT_INSERTED/;

wxEventType wxEVT_RICHTEXT_CONTENT_DELETED   /PyName=wxEVT_RICHTEXT_CONTENT_DELETED/;

wxEventType wxEVT_RICHTEXT_STYLE_CHANGED   /PyName=wxEVT_RICHTEXT_STYLE_CHANGED/;

wxEventType wxEVT_RICHTEXT_PROPERTIES_CHANGED   /PyName=wxEVT_RICHTEXT_PROPERTIES_CHANGED/;

wxEventType wxEVT_RICHTEXT_SELECTION_CHANGED   /PyName=wxEVT_RICHTEXT_SELECTION_CHANGED/;

wxEventType wxEVT_RICHTEXT_BUFFER_RESET   /PyName=wxEVT_RICHTEXT_BUFFER_RESET/;

wxEventType wxEVT_RICHTEXT_FOCUS_OBJECT_CHANGED   /PyName=wxEVT_RICHTEXT_FOCUS_OBJECT_CHANGED/;

class wxRichTextContextMenuPropertiesInfo
{
    %Docstring
        RichTextContextMenuPropertiesInfo() -> None
        
        wxRichTextContextMenuPropertiesInfo keeps track of objects that appear
        in the context menu, whose properties are available to be edited.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextctrl.h>
    %End

public:
    wxRichTextContextMenuPropertiesInfo();

    wxRichTextObjectPtrArray m_objects;

    wxArrayString m_labels;

    void Init();
    %Docstring
        Init() -> None
        
        Initialisation.
    %End

    bool AddItem(
        const wxString & label,
        wxRichTextObject * obj
    );
    %Docstring
        AddItem(label : str, obj : RichTextObject) -> bool
        
        Adds an item.
    %End

    int AddMenuItems(
        wxMenu * menu,
        int startCmd = wxID_RICHTEXT_PROPERTIES1
    ) const;
    %Docstring
        AddMenuItems(menu : wx.Menu, startCmd: int=ID_RICHTEXT_PROPERTIES1) -> int
        
        Returns the number of menu items that were added.
    %End

    int AddItems(
        wxRichTextCtrl * ctrl,
        wxRichTextObject * container,
        wxRichTextObject * obj
    );
    %Docstring
        AddItems(ctrl : RichTextCtrl, container : RichTextObject, obj : RichTextObject) -> int
        
        Adds appropriate menu items for the current container and clicked on
        object (and container's parent, if appropriate).
    %End

    void Clear();
    %Docstring
        Clear() -> None
        
        Clears the items.
    %End

    wxString GetLabel(
        int n
    ) const;
    %Docstring
        GetLabel(n : int) -> str
        
        Returns the nth label.
    %End

    wxRichTextObject * GetObject(
        int n
    ) const;
    %Docstring
        GetObject(n : int) -> RichTextObject
        
        Returns the nth object.
    %End

    wxRichTextObjectPtrArray & GetObjects();
    %Docstring
        GetObjects() -> RichTextObjectPtrArray
        
        Returns the array of objects.
    %End

    wxArrayString & GetLabels();
    %Docstring
        GetLabels() -> List[str]
        
        Returns the array of labels.
    %End

    int GetCount() const;
    %Docstring
        GetCount() -> int
        
        Returns the number of items.
    %End

    public:


    %Property(name=Count, get=GetCount)
    %Property(name=Labels, get=GetLabels)
    %Property(name=Objects, get=GetObjects)
};  // end of class wxRichTextContextMenuPropertiesInfo


class wxRichTextCtrl : wxControl
{
    %Docstring
        RichTextCtrl() -> None
        RichTextCtrl(parent : wx.Window, id: int=-1, value: str='', pos: wx.Point=wx.DefaultPosition, size: wx.Size=wx.DefaultSize, style: int=RE_MULTILINE, validator: wx.Validator=wx.DefaultValidator, name: str=wx.TextCtrlNameStr) -> None
        
        wxRichTextCtrl provides a generic, ground-up implementation of a text
        control capable of showing multiple styles and images.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextctrl.h>
    %End

public:
    wxRichTextCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRichTextCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = -1,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxRE_MULTILINE,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxTextCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRichTextCtrl();

    wxRichTextSelection & GetSelection();
    %Docstring
        GetSelection() -> RichTextSelection
        
        Returns the range of the current selection.
    %End

    wxRichTextContextMenuPropertiesInfo & GetContextMenuPropertiesInfo();
    %Docstring
        GetContextMenuPropertiesInfo() -> RichTextContextMenuPropertiesInfo
        
        Returns an object that stores information about context menu property
        item(s), in order to communicate between the context menu event
        handler and the code that responds to it.
    %End

    bool GetStyle(
        long position,
        wxTextAttr & style
    );
    %Docstring
        GetStyle(position : int, style : wx.TextAttr) -> bool
        GetStyle(position : int, style : RichTextAttr) -> bool
        GetStyle(position : int, style : RichTextAttr, container : RichTextParagraphLayoutBox) -> bool
        
        Gets the attributes at the given position.
    %End

    bool GetStyle(
        long position,
        wxRichTextAttr & style
    );

    bool GetStyle(
        long position,
        wxRichTextAttr & style,
        wxRichTextParagraphLayoutBox * container
    );

    bool SetStyle(
        long start,
        long end,
        const wxTextAttr & style
    );
    %Docstring
        SetStyle(start : int, end : int, style : wx.TextAttr) -> bool
        SetStyle(start : int, end : int, style : RichTextAttr) -> bool
        SetStyle(range : RichTextRange, style : wx.TextAttr) -> bool
        SetStyle(range : RichTextRange, style : RichTextAttr) -> bool
        SetStyle(obj : RichTextObject, textAttr : RichTextAttr, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO) -> None
        
        Sets the attributes for the given range.
    %End

    bool SetStyle(
        long start,
        long end,
        const wxRichTextAttr & style
    );

    bool SetStyle(
        const wxRichTextRange & range,
        const wxTextAttr & style
    );

    bool SetStyle(
        const wxRichTextRange & range,
        const wxRichTextAttr & style
    );

    void SetStyle(
        wxRichTextObject * obj,
        const wxRichTextAttr & textAttr,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    );

    bool GetStyleForRange(
        const wxRichTextRange & range,
        wxTextAttr & style
    );
    %Docstring
        GetStyleForRange(range : RichTextRange, style : wx.TextAttr) -> bool
        GetStyleForRange(range : RichTextRange, style : RichTextAttr) -> bool
        GetStyleForRange(range : RichTextRange, style : RichTextAttr, container : RichTextParagraphLayoutBox) -> bool
        
        Gets the attributes common to the specified range.
    %End

    bool GetStyleForRange(
        const wxRichTextRange & range,
        wxRichTextAttr & style
    );

    bool GetStyleForRange(
        const wxRichTextRange & range,
        wxRichTextAttr & style,
        wxRichTextParagraphLayoutBox * container
    );

    bool GetUncombinedStyle(
        long position,
        wxRichTextAttr & style
    );
    %Docstring
        GetUncombinedStyle(position : int, style : RichTextAttr) -> bool
        GetUncombinedStyle(position : int, style : RichTextAttr, container : RichTextParagraphLayoutBox) -> bool
        
        Gets the attributes at the given position.
    %End

    bool GetUncombinedStyle(
        long position,
        wxRichTextAttr & style,
        wxRichTextParagraphLayoutBox * container
    );

    bool SetDefaultStyle(
        const wxTextAttr & style
    );
    %Docstring
        SetDefaultStyle(style : wx.TextAttr) -> bool
        SetDefaultStyle(style : RichTextAttr) -> bool
        
        Sets the current default style, which can be used to change how
        subsequently inserted text is displayed.
    %End

    bool SetDefaultStyle(
        const wxRichTextAttr & style
    );

    bool SetListStyle(
        const wxRichTextRange & range,
        wxRichTextListStyleDefinition * styleDef,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO,
        int startFrom = 1,
        int specifiedLevel = -1
    );
    %Docstring
        SetListStyle(range : RichTextRange, styleDef : RichTextListStyleDefinition, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom: int=1, specifiedLevel: int=-1) -> bool
        SetListStyle(range : RichTextRange, defName : str, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom: int=1, specifiedLevel: int=-1) -> bool
        
        Sets the list attributes for the given range, passing flags to
        determine how the attributes are set.
    %End

    bool SetListStyle(
        const wxRichTextRange & range,
        const wxString & defName,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO,
        int startFrom = 1,
        int specifiedLevel = -1
    );

    bool NumberList(
        const wxRichTextRange & range,
        wxRichTextListStyleDefinition * def = NULL,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO,
        int startFrom = 1,
        int specifiedLevel = -1
    );
    %Docstring
        NumberList(range : RichTextRange, _def: Optional[RichTextListStyleDefinition]=None, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom: int=1, specifiedLevel: int=-1) -> bool
        NumberList(range : RichTextRange, defName : str, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom: int=1, specifiedLevel: int=-1) -> bool
        
        Numbers the paragraphs in the given range.
    %End

    bool NumberList(
        const wxRichTextRange & range,
        const wxString & defName,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO,
        int startFrom = 1,
        int specifiedLevel = -1
    );

    bool PromoteList(
        int promoteBy,
        const wxRichTextRange & range,
        wxRichTextListStyleDefinition * def = NULL,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO,
        int specifiedLevel = -1
    );
    %Docstring
        PromoteList(promoteBy : int, range : RichTextRange, _def: Optional[RichTextListStyleDefinition]=None, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO, specifiedLevel: int=-1) -> bool
        PromoteList(promoteBy : int, range : RichTextRange, defName : str, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO, specifiedLevel: int=-1) -> bool
        
        Promotes or demotes the paragraphs in the given range.
    %End

    bool PromoteList(
        int promoteBy,
        const wxRichTextRange & range,
        const wxString & defName,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO,
        int specifiedLevel = -1
    );

    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        long * pos   /Out/
    ) const;
    %Docstring
        HitTest(pt : wx.Point) -> Tuple[wx.TextCtrlHitTestResult, int]
        
        Finds the character at the given position in pixels.
    %End

    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        wxTextCoord * col   /Out/,
        wxTextCoord * row   /Out/
    ) const   /PyName=HitTestXY/;
    %Docstring
        HitTestXY(pt : wx.Point) -> Tuple[wx.TextCtrlHitTestResult, TextCoord, TextCoord]
        
        Finds the character at the given position in pixels.
    %End

    wxRichTextParagraphLayoutBox * FindContainerAtPoint(
        const wxPoint pt,
        long & position,
        int & hit,
        wxRichTextObject * hitObj,
        int flags = 0
    );
    %Docstring
        FindContainerAtPoint(pt : wx.Point, position : int, hit : int, hitObj : RichTextObject, flags: int=0) -> RichTextParagraphLayoutBox
        
        Finds the container at the given point, which is assumed to be in
        client coordinates.
    %End

    void SetSelection(
        long from_,
        long to_
    );
    %Docstring
        SetSelection(from_ : int, to_ : int) -> None
        SetSelection(sel : RichTextSelection) -> None
        
        Sets the selection to the given range.
    %End

    void SetSelection(
        const wxRichTextSelection & sel
    );

    bool WriteImage(
        const wxImage & image,
        wxBitmapType bitmapType = wxBITMAP_TYPE_PNG,
        const wxRichTextAttr & textAttr = wxRichTextAttr()
    );
    %Docstring
        WriteImage(image : wx.Image, bitmapType: wx.BitmapType=wx.BITMAP_TYPE_PNG, textAttr: RichTextAttr=RichTextAttr()) -> bool
        WriteImage(bitmap : wx.Bitmap, bitmapType: wx.BitmapType=wx.BITMAP_TYPE_PNG, textAttr: RichTextAttr=RichTextAttr()) -> bool
        WriteImage(filename : str, bitmapType : wx.BitmapType, textAttr: RichTextAttr=RichTextAttr()) -> bool
        WriteImage(imageBlock : RichTextImageBlock, textAttr: RichTextAttr=RichTextAttr()) -> bool
        
        Write a bitmap or image at the current insertion point.
    %End

    bool WriteImage(
        const wxBitmap & bitmap,
        wxBitmapType bitmapType = wxBITMAP_TYPE_PNG,
        const wxRichTextAttr & textAttr = wxRichTextAttr()
    );

    bool WriteImage(
        const wxString & filename,
        wxBitmapType bitmapType,
        const wxRichTextAttr & textAttr = wxRichTextAttr()
    );

    bool WriteImage(
        const wxRichTextImageBlock & imageBlock,
        const wxRichTextAttr & textAttr = wxRichTextAttr()
    );

    wxRichTextBuffer & GetBuffer();
    %Docstring
        GetBuffer() -> RichTextBuffer
        
        Returns the buffer associated with the control.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = -1,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxRE_MULTILINE,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxTextCtrlNameStr
    );
    %Docstring
        Create(parent : wx.Window, id: int=-1, value: str='', pos: wx.Point=wx.DefaultPosition, size: wx.Size=wx.DefaultSize, style: int=RE_MULTILINE, validator: wx.Validator=wx.DefaultValidator, name: str=wx.TextCtrlNameStr) -> bool
        
        Creates the underlying window.
    %End

    void Init();
    %Docstring
        Init() -> None
        
        Initialises the members of the control.
    %End

    wxString GetRange(
        long from_,
        long to_
    ) const;
    %Docstring
        GetRange(from_ : int, to_ : int) -> str
        
        Gets the text for the given range.
    %End

    int GetLineLength(
        long lineNo
    ) const;
    %Docstring
        GetLineLength(lineNo : int) -> int
        
        Returns the length of the specified line in characters.
    %End

    wxString GetLineText(
        long lineNo
    ) const;
    %Docstring
        GetLineText(lineNo : int) -> str
        
        Returns the text for the given line.
    %End

    int GetNumberOfLines() const;
    %Docstring
        GetNumberOfLines() -> int
        
        Returns the number of lines in the buffer.
    %End

    bool IsModified() const;
    %Docstring
        IsModified() -> bool
        
        Returns true if the buffer has been modified.
    %End

    bool IsEditable() const;
    %Docstring
        IsEditable() -> bool
        
        Returns true if the control is editable.
    %End

    bool IsSingleLine() const;
    %Docstring
        IsSingleLine() -> bool
        
        Returns true if the control is single-line.
    %End

    bool IsMultiLine() const;
    %Docstring
        IsMultiLine() -> bool
        
        Returns true if the control is multiline.
    %End

    wxString GetStringSelection() const;
    %Docstring
        GetStringSelection() -> str
        
        Returns the text within the current selection range, if any.
    %End

    wxString GetFilename() const;
    %Docstring
        GetFilename() -> str
        
        Gets the current filename associated with the control.
    %End

    void SetFilename(
        const wxString & filename
    );
    %Docstring
        SetFilename(filename : str) -> None
        
        Sets the current filename.
    %End

    void SetDelayedLayoutThreshold(
        long threshold
    );
    %Docstring
        SetDelayedLayoutThreshold(threshold : int) -> None
        
        Sets the size of the buffer beyond which layout is delayed during
        resizing.
    %End

    long GetDelayedLayoutThreshold() const;
    %Docstring
        GetDelayedLayoutThreshold() -> int
        
        Gets the size of the buffer beyond which layout is delayed during
        resizing.
    %End

    bool GetFullLayoutRequired() const;
    %Docstring
        GetFullLayoutRequired() -> bool
    %End

    void SetFullLayoutRequired(
        bool b
    );
    %Docstring
        SetFullLayoutRequired(b : bool) -> None
    %End

    wxLongLong GetFullLayoutTime() const;
    %Docstring
        GetFullLayoutTime() -> int
    %End

    void SetFullLayoutTime(
        wxLongLong t
    );
    %Docstring
        SetFullLayoutTime(t : int) -> None
    %End

    long GetFullLayoutSavedPosition() const;
    %Docstring
        GetFullLayoutSavedPosition() -> int
    %End

    void SetFullLayoutSavedPosition(
        long p
    );
    %Docstring
        SetFullLayoutSavedPosition(p : int) -> None
    %End

    void ForceDelayedLayout();
    %Docstring
        ForceDelayedLayout() -> None
    %End

    void SetTextCursor(
        const wxCursor & cursor
    );
    %Docstring
        SetTextCursor(cursor : wx.Cursor) -> None
        
        Sets the text (normal) cursor.
    %End

    wxCursor GetTextCursor() const;
    %Docstring
        GetTextCursor() -> wx.Cursor
        
        Returns the text (normal) cursor.
    %End

    void SetURLCursor(
        const wxCursor & cursor
    );
    %Docstring
        SetURLCursor(cursor : wx.Cursor) -> None
        
        Sets the cursor to be used over URLs.
    %End

    wxCursor GetURLCursor() const;
    %Docstring
        GetURLCursor() -> wx.Cursor
        
        Returns the cursor to be used over URLs.
    %End

    bool GetCaretAtLineStart() const;
    %Docstring
        GetCaretAtLineStart() -> bool
        
        Returns true if we are showing the caret position at the start of a
        line instead of at the end of the previous one.
    %End

    void SetCaretAtLineStart(
        bool atStart
    );
    %Docstring
        SetCaretAtLineStart(atStart : bool) -> None
        
        Sets a flag to remember that we are showing the caret position at the
        start of a line instead of at the end of the previous one.
    %End

    bool GetDragging() const;
    %Docstring
        GetDragging() -> bool
        
        Returns true if we are extending a selection.
    %End

    void SetDragging(
        bool dragging
    );
    %Docstring
        SetDragging(dragging : bool) -> None
        
        Sets a flag to remember if we are extending a selection.
    %End

    bool GetPreDrag() const;
    %Docstring
        GetPreDrag() -> bool
        
        Are we trying to start Drag'n'Drop?
    %End

    void SetPreDrag(
        bool pd
    );
    %Docstring
        SetPreDrag(pd : bool) -> None
        
        Set if we're trying to start Drag'n'Drop.
    %End

    const wxPoint GetDragStartPoint() const;
    %Docstring
        GetDragStartPoint() -> wx.Point
        
        Get the possible Drag'n'Drop start point.
    %End

    void SetDragStartPoint(
        wxPoint sp
    );
    %Docstring
        SetDragStartPoint(sp : wx.Point) -> None
        
        Set the possible Drag'n'Drop start point.
    %End

    const wxDateTime GetDragStartTime() const;
    %Docstring
        GetDragStartTime() -> wx.DateTime
        
        Get the possible Drag'n'Drop start time.
    %End

    void SetDragStartTime(
        wxDateTime st
    );
    %Docstring
        SetDragStartTime(st : wx.DateTime) -> None
        
        Set the possible Drag'n'Drop start time.
    %End

    wxMenu * GetContextMenu() const;
    %Docstring
        GetContextMenu() -> wx.Menu
        
        Returns the current context menu.
    %End

    void SetContextMenu(
        wxMenu * menu
    );
    %Docstring
        SetContextMenu(menu : wx.Menu) -> None
        
        Sets the current context menu.
    %End

    long GetSelectionAnchor() const;
    %Docstring
        GetSelectionAnchor() -> int
        
        Returns an anchor so we know how to extend the selection.
    %End

    void SetSelectionAnchor(
        long anchor
    );
    %Docstring
        SetSelectionAnchor(anchor : int) -> None
        
        Sets an anchor so we know how to extend the selection.
    %End

    wxRichTextObject * GetSelectionAnchorObject() const;
    %Docstring
        GetSelectionAnchorObject() -> RichTextObject
        
        Returns the anchor object if selecting multiple containers.
    %End

    void SetSelectionAnchorObject(
        wxRichTextObject * anchor
    );
    %Docstring
        SetSelectionAnchorObject(anchor : RichTextObject) -> None
        
        Sets the anchor object if selecting multiple containers.
    %End

    wxRichTextParagraphLayoutBox * GetFocusObject() const;
    %Docstring
        GetFocusObject() -> RichTextParagraphLayoutBox
        
        Returns the wxRichTextObject object that currently has the editing
        focus.
    %End

    void StoreFocusObject(
        wxRichTextParagraphLayoutBox * obj
    );
    %Docstring
        StoreFocusObject(obj : RichTextParagraphLayoutBox) -> None
        
        Setter for m_focusObject.
    %End

    bool SetFocusObject(
        wxRichTextParagraphLayoutBox * obj,
        bool setCaretPosition = true
    );
    %Docstring
        SetFocusObject(obj : RichTextParagraphLayoutBox, setCaretPosition: bool=True) -> bool
        
        Sets the wxRichTextObject object that currently has the editing focus.
    %End

    void Invalidate();
    %Docstring
        Invalidate() -> None
        
        Invalidates the whole buffer to trigger painting later.
    %End

    void Clear();
    %Docstring
        Clear() -> None
        
        Clears the buffer content, leaving a single empty paragraph.
    %End

    void Replace(
        long from_,
        long to_,
        const wxString & value
    );
    %Docstring
        Replace(from_ : int, to_ : int, value : str) -> None
        
        Replaces the content in the specified range with the string specified by value.
    %End

    void Remove(
        long from_,
        long to_
    );
    %Docstring
        Remove(from_ : int, to_ : int) -> None
        
        Removes the content in the specified range.
    %End

    bool LoadFile(
        const wxString & file,
        int type = wxRICHTEXT_TYPE_ANY
    );
    %Docstring
        LoadFile(file : str, type: int=RICHTEXT_TYPE_ANY) -> bool
        
        Loads content into the control's buffer using the given type.
    %End

    bool DoLoadFile(
        const wxString & file,
        int fileType
    );
    %Docstring
        DoLoadFile(file : str, fileType : int) -> bool
        
        Helper function for LoadFile().
    %End

    bool SaveFile(
        const wxString & file = wxEmptyString,
        int type = wxRICHTEXT_TYPE_ANY
    );
    %Docstring
        SaveFile(file: str='', type: int=RICHTEXT_TYPE_ANY) -> bool
        
        Saves the buffer content using the given type.
    %End

    bool DoSaveFile(
        const wxString & file = wxEmptyString,
        int fileType = wxRICHTEXT_TYPE_ANY
    );
    %Docstring
        DoSaveFile(file: str='', fileType: int=RICHTEXT_TYPE_ANY) -> bool
        
        Helper function for SaveFile().
    %End

    void SetHandlerFlags(
        int flags
    );
    %Docstring
        SetHandlerFlags(flags : int) -> None
        
        Sets flags that change the behaviour of loading or saving.
    %End

    int GetHandlerFlags() const;
    %Docstring
        GetHandlerFlags() -> int
        
        Returns flags that change the behaviour of loading or saving.
    %End

    void MarkDirty();
    %Docstring
        MarkDirty() -> None
        
        Marks the buffer as modified.
    %End

    void DiscardEdits();
    %Docstring
        DiscardEdits() -> None
        
        Sets the buffer's modified status to false, and clears the buffer's
        command history.
    %End

    void SetModified(
        bool modified
    );
    %Docstring
        SetModified(modified : bool) -> None
    %End

    void SetMaxLength(
        unsigned long len
    );
    %Docstring
        SetMaxLength(len : int) -> None
        
        Sets the maximum number of characters that may be entered in a single
        line text control.
    %End

    void WriteText(
        const wxString & text
    );
    %Docstring
        WriteText(text : str) -> None
        
        Writes text at the current position.
    %End

    void AppendText(
        const wxString & text
    );
    %Docstring
        AppendText(text : str) -> None
        
        Sets the insertion point to the end of the buffer and writes the text.
    %End

    bool SetStyleEx(
        const wxRichTextRange & range,
        const wxRichTextAttr & style,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    );
    %Docstring
        SetStyleEx(range : RichTextRange, style : RichTextAttr, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO) -> bool
        
        Sets the attributes for the given range, passing flags to determine
        how the attributes are set.
    %End

    const wxRichTextAttr & GetDefaultStyleEx() const;
    %Docstring
        GetDefaultStyleEx() -> RichTextAttr
        
        Returns the current default style, which can be used to change how
        subsequently inserted text is displayed.
    %End

    bool ClearListStyle(
        const wxRichTextRange & range,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    );
    %Docstring
        ClearListStyle(range : RichTextRange, flags: int=RICHTEXT_SETSTYLE_WITH_UNDO) -> bool
        
        Clears the list style from the given range, clearing list-related
        attributes and applying any named paragraph style associated with each
        paragraph.
    %End

    bool SetProperties(
        const wxRichTextRange & range,
        const wxRichTextProperties & properties,
        int flags = wxRICHTEXT_SETPROPERTIES_WITH_UNDO
    );
    %Docstring
        SetProperties(range : RichTextRange, properties : RichTextProperties, flags: int=RICHTEXT_SETPROPERTIES_WITH_UNDO) -> bool
        
        Sets the properties for the given range, passing flags to determine
        how the attributes are set.
    %End

    bool Delete(
        const wxRichTextRange & range
    );
    %Docstring
        Delete(range : RichTextRange) -> bool
        
        Deletes the content within the given range.
    %End

    long XYToPosition(
        long x,
        long y
    ) const;
    %Docstring
        XYToPosition(x : int, y : int) -> int
        
        Translates from column and line number to position.
    %End

    bool PositionToXY(
        long pos,
        long * x   /Out/,
        long * y   /Out/
    ) const;
    %Docstring
        PositionToXY(pos : int) -> Tuple[bool, int, int]
        
        Converts a text position to zero-based column and line numbers.
    %End

    void ShowPosition(
        long pos
    );
    %Docstring
        ShowPosition(pos : int) -> None
        
        Scrolls the buffer so that the given position is in view.
    %End

    virtual
    void Copy();
    %Docstring
        Copy() -> None
        
        Copies the selected content (if any) to the clipboard.
    %End

    virtual
    void Cut();
    %Docstring
        Cut() -> None
        
        Copies the selected content (if any) to the clipboard and deletes the
        selection.
    %End

    virtual
    void Paste();
    %Docstring
        Paste() -> None
        
        Pastes content from the clipboard to the buffer.
    %End

    void DeleteSelection();
    %Docstring
        DeleteSelection() -> None
        
        Deletes the content in the selection, if any.
    %End

    virtual
    bool CanCopy() const;
    %Docstring
        CanCopy() -> bool
        
        Returns true if selected content can be copied to the clipboard.
    %End

    virtual
    bool CanCut() const;
    %Docstring
        CanCut() -> bool
        
        Returns true if selected content can be copied to the clipboard and
        deleted.
    %End

    virtual
    bool CanPaste() const;
    %Docstring
        CanPaste() -> bool
        
        Returns true if the clipboard content can be pasted to the buffer.
    %End

    bool CanDeleteSelection() const;
    %Docstring
        CanDeleteSelection() -> bool
        
        Returns true if selected content can be deleted.
    %End

    virtual
    void Undo();
    %Docstring
        Undo() -> None
        
        Undoes the command at the top of the command history, if there is one.
    %End

    virtual
    void Redo();
    %Docstring
        Redo() -> None
        
        Redoes the current command.
    %End

    virtual
    bool CanUndo() const;
    %Docstring
        CanUndo() -> bool
        
        Returns true if there is a command in the command history that can be
        undone.
    %End

    virtual
    bool CanRedo() const;
    %Docstring
        CanRedo() -> bool
        
        Returns true if there is a command in the command history that can be
        redone.
    %End

    void SetInsertionPoint(
        long pos
    );
    %Docstring
        SetInsertionPoint(pos : int) -> None
        
        Sets the insertion point and causes the current editing style to be
        taken from the new position (unlike wxRichTextCtrl::SetCaretPosition).
    %End

    void SetInsertionPointEnd();
    %Docstring
        SetInsertionPointEnd() -> None
        
        Sets the insertion point to the end of the text control.
    %End

    long GetInsertionPoint() const;
    %Docstring
        GetInsertionPoint() -> int
        
        Returns the current insertion point.
    %End

    wxTextPos GetLastPosition() const;
    %Docstring
        GetLastPosition() -> TextPos
        
        Returns the last position in the buffer.
    %End

    void SelectAll();
    %Docstring
        SelectAll() -> None
        
        Selects all the text in the buffer.
    %End

    void SetEditable(
        bool editable
    );
    %Docstring
        SetEditable(editable : bool) -> None
        
        Makes the control editable, or not.
    %End

    bool HasSelection() const;
    %Docstring
        HasSelection() -> bool
        
        Returns true if there is a selection and the object containing the
        selection was the same as the current focus object.
    %End

    bool HasUnfocusedSelection() const;
    %Docstring
        HasUnfocusedSelection() -> bool
        
        Returns true if there was a selection, whether or not the current
        focus object is the same as the selection's container object.
    %End

    wxRichTextBox * WriteTextBox(
        const wxRichTextAttr & textAttr = wxRichTextAttr()
    );
    %Docstring
        WriteTextBox(textAttr: RichTextAttr=RichTextAttr()) -> RichTextBox
        
        Write a text box at the current insertion point, returning the text
        box.
    %End

    wxRichTextField * WriteField(
        const wxString & fieldType,
        const wxRichTextProperties & properties,
        const wxRichTextAttr & textAttr = wxRichTextAttr()
    );
    %Docstring
        WriteField(fieldType : str, properties : RichTextProperties, textAttr: RichTextAttr=RichTextAttr()) -> RichTextField
        
        Writes a field at the current insertion point.
    %End

    wxRichTextTable * WriteTable(
        int rows,
        int cols,
        const wxRichTextAttr & tableAttr = wxRichTextAttr(),
        const wxRichTextAttr & cellAttr = wxRichTextAttr()
    );
    %Docstring
        WriteTable(rows : int, cols : int, tableAttr: RichTextAttr=RichTextAttr(), cellAttr: RichTextAttr=RichTextAttr()) -> RichTextTable
        
        Write a table at the current insertion point, returning the table.
    %End

    bool Newline();
    %Docstring
        Newline() -> bool
        
        Inserts a new paragraph at the current insertion point.
    %End

    bool LineBreak();
    %Docstring
        LineBreak() -> bool
        
        Inserts a line break at the current insertion point.
    %End

    void SetBasicStyle(
        const wxRichTextAttr & style
    );
    %Docstring
        SetBasicStyle(style : RichTextAttr) -> None
        
        Sets the basic (overall) style.
    %End

    const wxRichTextAttr & GetBasicStyle() const;
    %Docstring
        GetBasicStyle() -> RichTextAttr
        
        Gets the basic (overall) style.
    %End

    bool BeginStyle(
        const wxRichTextAttr & style
    );
    %Docstring
        BeginStyle(style : RichTextAttr) -> bool
        
        Begins applying a style.
    %End

    bool EndStyle();
    %Docstring
        EndStyle() -> bool
        
        Ends the current style.
    %End

    bool EndAllStyles();
    %Docstring
        EndAllStyles() -> bool
        
        Ends application of all styles in the current style stack.
    %End

    bool BeginBold();
    %Docstring
        BeginBold() -> bool
        
        Begins using bold.
    %End

    bool EndBold();
    %Docstring
        EndBold() -> bool
        
        Ends using bold.
    %End

    bool BeginItalic();
    %Docstring
        BeginItalic() -> bool
        
        Begins using italic.
    %End

    bool EndItalic();
    %Docstring
        EndItalic() -> bool
        
        Ends using italic.
    %End

    bool BeginUnderline();
    %Docstring
        BeginUnderline() -> bool
        
        Begins using underlining.
    %End

    bool EndUnderline();
    %Docstring
        EndUnderline() -> bool
        
        End applying underlining.
    %End

    bool BeginFontSize(
        int pointSize
    );
    %Docstring
        BeginFontSize(pointSize : int) -> bool
        
        Begins using the given point size.
    %End

    bool EndFontSize();
    %Docstring
        EndFontSize() -> bool
        
        Ends using a point size.
    %End

    bool BeginFont(
        const wxFont & font
    );
    %Docstring
        BeginFont(font : wx.Font) -> bool
        
        Begins using this font.
    %End

    bool EndFont();
    %Docstring
        EndFont() -> bool
        
        Ends using a font.
    %End

    bool BeginTextColour(
        const wxColour & colour
    );
    %Docstring
        BeginTextColour(colour : wx.Colour) -> bool
        
        Begins using this colour.
    %End

    bool EndTextColour();
    %Docstring
        EndTextColour() -> bool
        
        Ends applying a text colour.
    %End

    bool BeginAlignment(
        wxTextAttrAlignment alignment
    );
    %Docstring
        BeginAlignment(alignment : wx.TextAttrAlignment) -> bool
        
        Begins using alignment.
    %End

    bool EndAlignment();
    %Docstring
        EndAlignment() -> bool
        
        Ends alignment.
    %End

    bool BeginLeftIndent(
        int leftIndent,
        int leftSubIndent = 0
    );
    %Docstring
        BeginLeftIndent(leftIndent : int, leftSubIndent: int=0) -> bool
        
        Begins applying a left indent and subindent in tenths of a millimetre.
    %End

    bool EndLeftIndent();
    %Docstring
        EndLeftIndent() -> bool
        
        Ends left indent.
    %End

    bool BeginRightIndent(
        int rightIndent
    );
    %Docstring
        BeginRightIndent(rightIndent : int) -> bool
        
        Begins a right indent, specified in tenths of a millimetre.
    %End

    bool EndRightIndent();
    %Docstring
        EndRightIndent() -> bool
        
        Ends right indent.
    %End

    bool BeginParagraphSpacing(
        int before,
        int after
    );
    %Docstring
        BeginParagraphSpacing(before : int, after : int) -> bool
        
        Begins paragraph spacing; pass the before-paragraph and after-
        paragraph spacing in tenths of a millimetre.
    %End

    bool EndParagraphSpacing();
    %Docstring
        EndParagraphSpacing() -> bool
        
        Ends paragraph spacing.
    %End

    bool BeginLineSpacing(
        int lineSpacing
    );
    %Docstring
        BeginLineSpacing(lineSpacing : int) -> bool
        
        Begins applying line spacing.
    %End

    bool EndLineSpacing();
    %Docstring
        EndLineSpacing() -> bool
        
        Ends line spacing.
    %End

    bool BeginNumberedBullet(
        int bulletNumber,
        int leftIndent,
        int leftSubIndent,
        int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC|wxTEXT_ATTR_BULLET_STYLE_PERIOD
    );
    %Docstring
        BeginNumberedBullet(bulletNumber : int, leftIndent : int, leftSubIndent : int, bulletStyle: int=wx.TEXT_ATTR_BULLET_STYLE_ARABIC|wx.TEXT_ATTR_BULLET_STYLE_PERIOD) -> bool
        
        Begins a numbered bullet.
    %End

    bool EndNumberedBullet();
    %Docstring
        EndNumberedBullet() -> bool
        
        Ends application of a numbered bullet.
    %End

    bool BeginSymbolBullet(
        const wxString & symbol,
        int leftIndent,
        int leftSubIndent,
        int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL
    );
    %Docstring
        BeginSymbolBullet(symbol : str, leftIndent : int, leftSubIndent : int, bulletStyle: int=wx.TEXT_ATTR_BULLET_STYLE_SYMBOL) -> bool
        
        Begins applying a symbol bullet, using a character from the current
        font.
    %End

    bool EndSymbolBullet();
    %Docstring
        EndSymbolBullet() -> bool
        
        Ends applying a symbol bullet.
    %End

    bool BeginStandardBullet(
        const wxString & bulletName,
        int leftIndent,
        int leftSubIndent,
        int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD
    );
    %Docstring
        BeginStandardBullet(bulletName : str, leftIndent : int, leftSubIndent : int, bulletStyle: int=wx.TEXT_ATTR_BULLET_STYLE_STANDARD) -> bool
        
        Begins applying a symbol bullet.
    %End

    bool EndStandardBullet();
    %Docstring
        EndStandardBullet() -> bool
        
        Begins applying a standard bullet.
    %End

    bool BeginCharacterStyle(
        const wxString & characterStyle
    );
    %Docstring
        BeginCharacterStyle(characterStyle : str) -> bool
        
        Begins using the named character style.
    %End

    bool EndCharacterStyle();
    %Docstring
        EndCharacterStyle() -> bool
        
        Ends application of a named character style.
    %End

    bool BeginParagraphStyle(
        const wxString & paragraphStyle
    );
    %Docstring
        BeginParagraphStyle(paragraphStyle : str) -> bool
        
        Begins applying the named paragraph style.
    %End

    bool EndParagraphStyle();
    %Docstring
        EndParagraphStyle() -> bool
        
        Ends application of a named paragraph style.
    %End

    bool BeginListStyle(
        const wxString & listStyle,
        int level = 1,
        int number = 1
    );
    %Docstring
        BeginListStyle(listStyle : str, level: int=1, number: int=1) -> bool
        
        Begins using a specified list style.
    %End

    bool EndListStyle();
    %Docstring
        EndListStyle() -> bool
        
        Ends using a specified list style.
    %End

    bool BeginURL(
        const wxString & url,
        const wxString & characterStyle = wxEmptyString
    );
    %Docstring
        BeginURL(url : str, characterStyle: str='') -> bool
        
        Begins applying wxTEXT_ATTR_URL to the content.
    %End

    bool EndURL();
    %Docstring
        EndURL() -> bool
        
        Ends applying a URL.
    %End

    bool SetDefaultStyleToCursorStyle();
    %Docstring
        SetDefaultStyleToCursorStyle() -> bool
        
        Sets the default style to the style under the cursor.
    %End

    void SelectNone();
    %Docstring
        SelectNone() -> None
        
        Cancels any selection.
    %End

    bool SelectWord(
        long position
    );
    %Docstring
        SelectWord(position : int) -> bool
        
        Selects the word at the given character position.
    %End

    wxRichTextRange GetSelectionRange() const;
    %Docstring
        GetSelectionRange() -> RichTextRange
        
        Returns the selection range in character positions.
    %End

    void SetSelectionRange(
        const wxRichTextRange & range
    );
    %Docstring
        SetSelectionRange(range : RichTextRange) -> None
        
        Sets the selection to the given range.
    %End

    wxRichTextRange GetInternalSelectionRange() const;
    %Docstring
        GetInternalSelectionRange() -> RichTextRange
        
        Returns the selection range in character positions.
    %End

    void SetInternalSelectionRange(
        const wxRichTextRange & range
    );
    %Docstring
        SetInternalSelectionRange(range : RichTextRange) -> None
        
        Sets the selection range in character positions.
    %End

    wxRichTextRange AddParagraph(
        const wxString & text
    );
    %Docstring
        AddParagraph(text : str) -> RichTextRange
        
        Adds a new paragraph of text to the end of the buffer.
    %End

    wxRichTextRange AddImage(
        const wxImage & image
    );
    %Docstring
        AddImage(image : wx.Image) -> RichTextRange
        
        Adds an image to the control's buffer.
    %End

    bool LayoutContent(
        bool onlyVisibleRect = false
    );
    %Docstring
        LayoutContent(onlyVisibleRect: bool=False) -> bool
        
        Lays out the buffer, which must be done before certain operations,
        such as setting the caret position.
    %End

    void DoLayoutBuffer(
        wxRichTextBuffer & buffer,
        wxDC & dc,
        wxRichTextDrawingContext & context,
        const wxRect & rect,
        const wxRect & parentRect,
        int flags
    );
    %Docstring
        DoLayoutBuffer(buffer : RichTextBuffer, dc : wx.DC, context : RichTextDrawingContext, rect : wx.Rect, parentRect : wx.Rect, flags : int) -> None
        
        Implements layout.
    %End

    bool MoveCaret(
        long pos,
        bool showAtLineStart = false,
        wxRichTextParagraphLayoutBox * container = NULL
    );
    %Docstring
        MoveCaret(pos : int, showAtLineStart: bool=False, container: Optional[RichTextParagraphLayoutBox]=None) -> bool
        
        Move the caret to the given character position.
    %End

    bool MoveRight(
        int noPositions = 1,
        int flags = 0
    );
    %Docstring
        MoveRight(noPositions: int=1, flags: int=0) -> bool
        
        Moves right.
    %End

    bool MoveLeft(
        int noPositions = 1,
        int flags = 0
    );
    %Docstring
        MoveLeft(noPositions: int=1, flags: int=0) -> bool
        
        Moves left.
    %End

    bool MoveUp(
        int noLines = 1,
        int flags = 0
    );
    %Docstring
        MoveUp(noLines: int=1, flags: int=0) -> bool
        
        Moves to the start of the paragraph.
    %End

    bool MoveDown(
        int noLines = 1,
        int flags = 0
    );
    %Docstring
        MoveDown(noLines: int=1, flags: int=0) -> bool
        
        Moves the caret down.
    %End

    bool MoveToLineEnd(
        int flags = 0
    );
    %Docstring
        MoveToLineEnd(flags: int=0) -> bool
        
        Moves to the end of the line.
    %End

    bool MoveToLineStart(
        int flags = 0
    );
    %Docstring
        MoveToLineStart(flags: int=0) -> bool
        
        Moves to the start of the line.
    %End

    bool MoveToParagraphEnd(
        int flags = 0
    );
    %Docstring
        MoveToParagraphEnd(flags: int=0) -> bool
        
        Moves to the end of the paragraph.
    %End

    bool MoveToParagraphStart(
        int flags = 0
    );
    %Docstring
        MoveToParagraphStart(flags: int=0) -> bool
        
        Moves to the start of the paragraph.
    %End

    bool MoveHome(
        int flags = 0
    );
    %Docstring
        MoveHome(flags: int=0) -> bool
        
        Moves to the start of the buffer.
    %End

    bool MoveEnd(
        int flags = 0
    );
    %Docstring
        MoveEnd(flags: int=0) -> bool
        
        Moves to the end of the buffer.
    %End

    bool PageUp(
        int noPages = 1,
        int flags = 0
    );
    %Docstring
        PageUp(noPages: int=1, flags: int=0) -> bool
        
        Moves one or more pages up.
    %End

    bool PageDown(
        int noPages = 1,
        int flags = 0
    );
    %Docstring
        PageDown(noPages: int=1, flags: int=0) -> bool
        
        Moves one or more pages down.
    %End

    bool WordLeft(
        int noPages = 1,
        int flags = 0
    );
    %Docstring
        WordLeft(noPages: int=1, flags: int=0) -> bool
        
        Moves a number of words to the left.
    %End

    bool WordRight(
        int noPages = 1,
        int flags = 0
    );
    %Docstring
        WordRight(noPages: int=1, flags: int=0) -> bool
        
        Move a number of words to the right.
    %End

    bool BeginBatchUndo(
        const wxString & cmdName
    );
    %Docstring
        BeginBatchUndo(cmdName : str) -> bool
        
        Starts batching undo history for commands.
    %End

    bool EndBatchUndo();
    %Docstring
        EndBatchUndo() -> bool
        
        Ends batching undo command history.
    %End

    bool BatchingUndo() const;
    %Docstring
        BatchingUndo() -> bool
        
        Returns true if undo commands are being batched.
    %End

    bool BeginSuppressUndo();
    %Docstring
        BeginSuppressUndo() -> bool
        
        Starts suppressing undo history for commands.
    %End

    bool EndSuppressUndo();
    %Docstring
        EndSuppressUndo() -> bool
        
        Ends suppressing undo command history.
    %End

    bool SuppressingUndo() const;
    %Docstring
        SuppressingUndo() -> bool
        
        Returns true if undo history suppression is on.
    %End

    bool HasCharacterAttributes(
        const wxRichTextRange & range,
        const wxRichTextAttr & style
    ) const;
    %Docstring
        HasCharacterAttributes(range : RichTextRange, style : RichTextAttr) -> bool
        
        Test if this whole range has character attributes of the specified
        kind.
    %End

    bool HasParagraphAttributes(
        const wxRichTextRange & range,
        const wxRichTextAttr & style
    ) const;
    %Docstring
        HasParagraphAttributes(range : RichTextRange, style : RichTextAttr) -> bool
        
        Test if this whole range has paragraph attributes of the specified
        kind.
    %End

    bool IsSelectionBold();
    %Docstring
        IsSelectionBold() -> bool
        
        Returns true if all of the selection, or the content at the caret
        position, is bold.
    %End

    bool IsSelectionItalics();
    %Docstring
        IsSelectionItalics() -> bool
        
        Returns true if all of the selection, or the content at the caret
        position, is italic.
    %End

    bool IsSelectionUnderlined();
    %Docstring
        IsSelectionUnderlined() -> bool
        
        Returns true if all of the selection, or the content at the caret
        position, is underlined.
    %End

    bool DoesSelectionHaveTextEffectFlag(
        int flag
    );
    %Docstring
        DoesSelectionHaveTextEffectFlag(flag : int) -> bool
        
        Returns true if all of the selection, or the content at the current
        caret position, has the supplied wxTextAttrEffects flag(s).
    %End

    bool IsSelectionAligned(
        wxTextAttrAlignment alignment
    );
    %Docstring
        IsSelectionAligned(alignment : wx.TextAttrAlignment) -> bool
        
        Returns true if all of the selection is aligned according to the
        specified flag.
    %End

    bool ApplyBoldToSelection();
    %Docstring
        ApplyBoldToSelection() -> bool
        
        Apples bold to the selection or the default style (undoable).
    %End

    bool ApplyItalicToSelection();
    %Docstring
        ApplyItalicToSelection() -> bool
        
        Applies italic to the selection or the default style (undoable).
    %End

    bool ApplyUnderlineToSelection();
    %Docstring
        ApplyUnderlineToSelection() -> bool
        
        Applies underline to the selection or the default style (undoable).
    %End

    bool ApplyTextEffectToSelection(
        int flags
    );
    %Docstring
        ApplyTextEffectToSelection(flags : int) -> bool
        
        Applies one or more wxTextAttrEffects flags to the selection
        (undoable).
    %End

    bool ApplyAlignmentToSelection(
        wxTextAttrAlignment alignment
    );
    %Docstring
        ApplyAlignmentToSelection(alignment : wx.TextAttrAlignment) -> bool
        
        Applies the given alignment to the selection or the default style
        (undoable).
    %End

    bool ApplyStyle(
        wxRichTextStyleDefinition * styleDef
    );
    %Docstring
        ApplyStyle(styleDef : RichTextStyleDefinition) -> bool
        
        Applies the style sheet to the buffer, matching paragraph styles in
        the sheet against named styles in the buffer.
    %End

    void SetStyleSheet(
        wxRichTextStyleSheet * styleSheet
    );
    %Docstring
        SetStyleSheet(styleSheet : RichTextStyleSheet) -> None
        
        Sets the style sheet associated with the control.
    %End

    wxRichTextStyleSheet * GetStyleSheet() const;
    %Docstring
        GetStyleSheet() -> RichTextStyleSheet
        
        Returns the style sheet associated with the control, if any.
    %End

    bool PushStyleSheet(
        wxRichTextStyleSheet * styleSheet
    );
    %Docstring
        PushStyleSheet(styleSheet : RichTextStyleSheet) -> bool
        
        Push the style sheet to top of stack.
    %End

    wxRichTextStyleSheet * PopStyleSheet();
    %Docstring
        PopStyleSheet() -> RichTextStyleSheet
        
        Pops the style sheet from top of stack.
    %End

    bool ApplyStyleSheet(
        wxRichTextStyleSheet * styleSheet = NULL
    );
    %Docstring
        ApplyStyleSheet(styleSheet: Optional[RichTextStyleSheet]=None) -> bool
        
        Applies the style sheet to the buffer, for example if the styles have
        changed.
    %End

    bool ShowContextMenu(
        wxMenu * menu,
        const wxPoint & pt,
        bool addPropertyCommands
    );
    %Docstring
        ShowContextMenu(menu : wx.Menu, pt : wx.Point, addPropertyCommands : bool) -> bool
        
        Shows the given context menu, optionally adding appropriate property-
        editing commands for the current position in the object hierarchy.
    %End

    int PrepareContextMenu(
        wxMenu * menu,
        const wxPoint & pt,
        bool addPropertyCommands
    );
    %Docstring
        PrepareContextMenu(menu : wx.Menu, pt : wx.Point, addPropertyCommands : bool) -> int
        
        Prepares the context menu, optionally adding appropriate property-
        editing commands.
    %End

    bool CanEditProperties(
        wxRichTextObject * obj
    ) const;
    %Docstring
        CanEditProperties(obj : RichTextObject) -> bool
        
        Returns true if we can edit the object's properties via a GUI.
    %End

    bool EditProperties(
        wxRichTextObject * obj,
        wxWindow * parent
    );
    %Docstring
        EditProperties(obj : RichTextObject, parent : wx.Window) -> bool
        
        Edits the object's properties via a GUI.
    %End

    wxString GetPropertiesMenuLabel(
        wxRichTextObject * obj
    );
    %Docstring
        GetPropertiesMenuLabel(obj : RichTextObject) -> str
        
        Gets the object's properties menu label.
    %End

    void PrepareContent(
        wxRichTextParagraphLayoutBox & container
    );
    %Docstring
        PrepareContent(container : RichTextParagraphLayoutBox) -> None
        
        Prepares the content just before insertion (or after buffer reset).
    %End

    bool CanDeleteRange(
        wxRichTextParagraphLayoutBox & container,
        const wxRichTextRange & range
    ) const;
    %Docstring
        CanDeleteRange(container : RichTextParagraphLayoutBox, range : RichTextRange) -> bool
        
        Can we delete this range? Sends an event to the control.
    %End

    bool CanInsertContent(
        wxRichTextParagraphLayoutBox & container,
        long pos
    ) const;
    %Docstring
        CanInsertContent(container : RichTextParagraphLayoutBox, pos : int) -> bool
        
        Can we insert content at this position? Sends an event to the control.
    %End

    void EnableVerticalScrollbar(
        bool enable
    );
    %Docstring
        EnableVerticalScrollbar(enable : bool) -> None
        
        Enable or disable the vertical scrollbar.
    %End

    bool GetVerticalScrollbarEnabled() const;
    %Docstring
        GetVerticalScrollbarEnabled() -> bool
        
        Returns true if the vertical scrollbar is enabled.
    %End

    void SetFontScale(
        double fontScale,
        bool refresh = false
    );
    %Docstring
        SetFontScale(fontScale : float, refresh: bool=False) -> None
        
        Sets the scale factor for displaying fonts, for example for more
        comfortable editing.
    %End

    double GetFontScale() const;
    %Docstring
        GetFontScale() -> float
        
        Returns the scale factor for displaying fonts, for example for more
        comfortable editing.
    %End

    void SetDimensionScale(
        double dimScale,
        bool refresh = false
    );
    %Docstring
        SetDimensionScale(dimScale : float, refresh: bool=False) -> None
        
        Sets the scale factor for displaying certain dimensions such as
        indentation and inter-paragraph spacing.
    %End

    double GetDimensionScale() const;
    %Docstring
        GetDimensionScale() -> float
        
        Returns the scale factor for displaying certain dimensions such as
        indentation and inter-paragraph spacing.
    %End

    void SetScale(
        double scale,
        bool refresh = false
    );
    %Docstring
        SetScale(scale : float, refresh: bool=False) -> None
        
        Sets an overall scale factor for displaying and editing the content.
    %End

    double GetScale() const;
    %Docstring
        GetScale() -> float
        
        Returns an overall scale factor for displaying and editing the
        content.
    %End

    wxPoint GetUnscaledPoint(
        const wxPoint & pt
    ) const;
    %Docstring
        GetUnscaledPoint(pt : wx.Point) -> wx.Point
        
        Returns an unscaled point.
    %End

    wxPoint GetScaledPoint(
        const wxPoint & pt
    ) const;
    %Docstring
        GetScaledPoint(pt : wx.Point) -> wx.Point
        
        Returns a scaled point.
    %End

    wxSize GetUnscaledSize(
        const wxSize & sz
    ) const;
    %Docstring
        GetUnscaledSize(sz : wx.Size) -> wx.Size
        
        Returns an unscaled size.
    %End

    wxSize GetScaledSize(
        const wxSize & sz
    ) const;
    %Docstring
        GetScaledSize(sz : wx.Size) -> wx.Size
        
        Returns a scaled size.
    %End

    wxRect GetUnscaledRect(
        const wxRect & rect
    ) const;
    %Docstring
        GetUnscaledRect(rect : wx.Rect) -> wx.Rect
        
        Returns an unscaled rectangle.
    %End

    wxRect GetScaledRect(
        const wxRect & rect
    ) const;
    %Docstring
        GetScaledRect(rect : wx.Rect) -> wx.Rect
        
        Returns a scaled rectangle.
    %End

    bool GetVirtualAttributesEnabled() const;
    %Docstring
        GetVirtualAttributesEnabled() -> bool
        
        Returns true if this control can use virtual attributes and virtual
        text.
    %End

    void EnableVirtualAttributes(
        bool b
    );
    %Docstring
        EnableVirtualAttributes(b : bool) -> None
        
        Pass true to let the control use virtual attributes.
    %End

    void Command(
        wxCommandEvent & event
    );
    %Docstring
        Command(event : wx.CommandEvent) -> None
        
        Sends the event to the control.
    %End

    void OnDropFiles(
        wxDropFilesEvent & event
    );
    %Docstring
        OnDropFiles(event : wx.DropFilesEvent) -> None
        
        Loads the first dropped file.
    %End

    void OnCaptureLost(
        wxMouseCaptureLostEvent & event
    );
    %Docstring
        OnCaptureLost(event : wx.MouseCaptureLostEvent) -> None
    %End

    void OnSysColourChanged(
        wxSysColourChangedEvent & event
    );
    %Docstring
        OnSysColourChanged(event : wx.SysColourChangedEvent) -> None
    %End

    void OnCut(
        wxCommandEvent & event
    );
    %Docstring
        OnCut(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_CUT command.
    %End

    void OnCopy(
        wxCommandEvent & event
    );
    %Docstring
        OnCopy(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_COPY command.
    %End

    void OnPaste(
        wxCommandEvent & event
    );
    %Docstring
        OnPaste(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_PASTE command.
    %End

    void OnUndo(
        wxCommandEvent & event
    );
    %Docstring
        OnUndo(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_UNDO command.
    %End

    void OnRedo(
        wxCommandEvent & event
    );
    %Docstring
        OnRedo(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_REDO command.
    %End

    void OnSelectAll(
        wxCommandEvent & event
    );
    %Docstring
        OnSelectAll(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_SELECTALL command.
    %End

    void OnProperties(
        wxCommandEvent & event
    );
    %Docstring
        OnProperties(event : wx.CommandEvent) -> None
        
        Standard handler for property commands.
    %End

    void OnClear(
        wxCommandEvent & event
    );
    %Docstring
        OnClear(event : wx.CommandEvent) -> None
        
        Standard handler for the wxID_CLEAR command.
    %End

    void OnUpdateCut(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateCut(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_CUT command.
    %End

    void OnUpdateCopy(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateCopy(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_COPY command.
    %End

    void OnUpdatePaste(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdatePaste(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_PASTE command.
    %End

    void OnUpdateUndo(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateUndo(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_UNDO command.
    %End

    void OnUpdateRedo(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateRedo(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_REDO command.
    %End

    void OnUpdateSelectAll(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateSelectAll(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_SELECTALL command.
    %End

    void OnUpdateProperties(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateProperties(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for property commands.
    %End

    void OnUpdateClear(
        wxUpdateUIEvent & event
    );
    %Docstring
        OnUpdateClear(event : wx.UpdateUIEvent) -> None
        
        Standard update handler for the wxID_CLEAR command.
    %End

    void OnContextMenu(
        wxContextMenuEvent & event
    );
    %Docstring
        OnContextMenu(event : wx.ContextMenuEvent) -> None
        
        Shows a standard context menu with undo, redo, cut, copy, paste,
        clear, and select all commands.
    %End

    void OnPaint(
        wxPaintEvent & event
    );
    %Docstring
        OnPaint(event : wx.PaintEvent) -> None
    %End

    void OnEraseBackground(
        wxEraseEvent & event
    );
    %Docstring
        OnEraseBackground(event : wx.EraseEvent) -> None
    %End

    void OnLeftClick(
        wxMouseEvent & event
    );
    %Docstring
        OnLeftClick(event : wx.MouseEvent) -> None
    %End

    void OnLeftUp(
        wxMouseEvent & event
    );
    %Docstring
        OnLeftUp(event : wx.MouseEvent) -> None
    %End

    void OnMoveMouse(
        wxMouseEvent & event
    );
    %Docstring
        OnMoveMouse(event : wx.MouseEvent) -> None
    %End

    void OnLeftDClick(
        wxMouseEvent & event
    );
    %Docstring
        OnLeftDClick(event : wx.MouseEvent) -> None
    %End

    void OnMiddleClick(
        wxMouseEvent & event
    );
    %Docstring
        OnMiddleClick(event : wx.MouseEvent) -> None
    %End

    void OnRightClick(
        wxMouseEvent & event
    );
    %Docstring
        OnRightClick(event : wx.MouseEvent) -> None
    %End

    void OnChar(
        wxKeyEvent & event
    );
    %Docstring
        OnChar(event : wx.KeyEvent) -> None
    %End

    void OnSize(
        wxSizeEvent & event
    );
    %Docstring
        OnSize(event : wx.SizeEvent) -> None
    %End

    void OnSetFocus(
        wxFocusEvent & event
    );
    %Docstring
        OnSetFocus(event : wx.FocusEvent) -> None
    %End

    void OnKillFocus(
        wxFocusEvent & event
    );
    %Docstring
        OnKillFocus(event : wx.FocusEvent) -> None
    %End

    void OnIdle(
        wxIdleEvent & event
    );
    %Docstring
        OnIdle(event : wx.IdleEvent) -> None
    %End

    void OnScroll(
        wxScrollWinEvent & event
    );
    %Docstring
        OnScroll(event : wx.ScrollWinEvent) -> None
    %End

    bool SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font : wx.Font) -> bool
        
        Sets the font, and also the basic and default attributes (see
        wxRichTextCtrl::SetDefaultStyle).
    %End

    void SetupScrollbars(
        bool atTop = false
    );
    %Docstring
        SetupScrollbars(atTop: bool=False) -> None
        
        A helper function setting up scrollbars, for example after a resize.
    %End

    bool KeyboardNavigate(
        int keyCode,
        int flags
    );
    %Docstring
        KeyboardNavigate(keyCode : int, flags : int) -> bool
        
        Helper function implementing keyboard navigation.
    %End

    void PaintBackground(
        wxDC & dc
    );
    %Docstring
        PaintBackground(dc : wx.DC) -> None
        
        Paints the background.
    %End

    void PaintAboveContent(
        wxDC & WXUNUSED
    );
    %Docstring
        PaintAboveContent(WXUNUSED : wx.DC) -> None
        
        Other user defined painting after everything else (i.e. all text) is
        painted.
    %End

    void DoWriteText(
        const wxString & value,
        int flags = 0
    );
    %Docstring
        DoWriteText(value : str, flags: int=0) -> None
    %End

    virtual
    bool ShouldInheritColours() const;
    %Docstring
        ShouldInheritColours() -> bool
        
        Return true from here to allow the colours of this window to be
        changed by InheritAttributes().
    %End

    void PositionCaret(
        wxRichTextParagraphLayoutBox * container = NULL
    );
    %Docstring
        PositionCaret(container: Optional[RichTextParagraphLayoutBox]=None) -> None
        
        Internal function to position the visible caret according to the
        current caret position.
    %End

    bool ExtendSelection(
        long oldPosition,
        long newPosition,
        int flags
    );
    %Docstring
        ExtendSelection(oldPosition : int, newPosition : int, flags : int) -> bool
        
        Helper function for extending the selection, returning true if the
        selection was changed.
    %End

    bool ExtendCellSelection(
        wxRichTextTable * table,
        int noRowSteps,
        int noColSteps
    );
    %Docstring
        ExtendCellSelection(table : RichTextTable, noRowSteps : int, noColSteps : int) -> bool
        
        Extends a table selection in the given direction.
    %End

    bool StartCellSelection(
        wxRichTextTable * table,
        wxRichTextParagraphLayoutBox * newCell
    );
    %Docstring
        StartCellSelection(table : RichTextTable, newCell : RichTextParagraphLayoutBox) -> bool
        
        Starts selecting table cells.
    %End

    bool ScrollIntoView(
        long position,
        int keyCode
    );
    %Docstring
        ScrollIntoView(position : int, keyCode : int) -> bool
        
        Scrolls position into view.
    %End

    bool RefreshForSelectionChange(
        const wxRichTextSelection & oldSelection,
        const wxRichTextSelection & newSelection
    );
    %Docstring
        RefreshForSelectionChange(oldSelection : RichTextSelection, newSelection : RichTextSelection) -> bool
        
        Refreshes the area affected by a selection change.
    %End

    void SetCaretPosition(
        long position,
        bool showAtLineStart = false
    );
    %Docstring
        SetCaretPosition(position : int, showAtLineStart: bool=False) -> None
        
        Sets the caret position.
    %End

    long GetCaretPosition() const;
    %Docstring
        GetCaretPosition() -> int
        
        Returns the current caret position.
    %End

    long GetAdjustedCaretPosition(
        long caretPos
    ) const;
    %Docstring
        GetAdjustedCaretPosition(caretPos : int) -> int
        
        The adjusted caret position is the character position adjusted to take
        into account whether we're at the start of a paragraph, in which case
        style information should be taken from the next position, not current
        one.
    %End

    void MoveCaretForward(
        long oldPosition
    );
    %Docstring
        MoveCaretForward(oldPosition : int) -> None
        
        Move the caret one visual step forward: this may mean setting a flag
        and keeping the same position if we're going from the end of one line
        to the start of the next, which may be the exact same caret position.
    %End

    void MoveCaretBack(
        long oldPosition
    );
    %Docstring
        MoveCaretBack(oldPosition : int) -> None
        
        Move the caret one visual step forward: this may mean setting a flag
        and keeping the same position if we're going from the end of one line
        to the start of the next, which may be the exact same caret position.
    %End

    bool GetCaretPositionForIndex(
        long position,
        wxRect & rect,
        wxRichTextParagraphLayoutBox * container = NULL
    );
    %Docstring
        GetCaretPositionForIndex(position : int, rect : wx.Rect, container: Optional[RichTextParagraphLayoutBox]=None) -> bool
        
        Returns the caret height and position for the given character
        position.
    %End

    wxRichTextLine * GetVisibleLineForCaretPosition(
        long caretPosition
    ) const;
    %Docstring
        GetVisibleLineForCaretPosition(caretPosition : int) -> RichTextLine
        
        Internal helper function returning the line for the visible caret
        position.
    %End

    wxCommandProcessor * GetCommandProcessor() const;
    %Docstring
        GetCommandProcessor() -> wx.CommandProcessor
        
        Gets the command processor associated with the control's buffer.
    %End

    bool DeleteSelectedContent(
        long * newPos = NULL
    );
    %Docstring
        DeleteSelectedContent(newPos: Optional[int]=None) -> bool
        
        Deletes content if there is a selection, e.g.
    %End

    wxPoint GetPhysicalPoint(
        const wxPoint & ptLogical
    ) const;
    %Docstring
        GetPhysicalPoint(ptLogical : wx.Point) -> wx.Point
        
        Transforms logical (unscrolled) position to physical window position.
    %End

    wxPoint GetLogicalPoint(
        const wxPoint & ptPhysical
    ) const;
    %Docstring
        GetLogicalPoint(ptPhysical : wx.Point) -> wx.Point
        
        Transforms physical window position to logical (unscrolled) position.
    %End

    long FindNextWordPosition(
        int direction = 1
    ) const;
    %Docstring
        FindNextWordPosition(direction: int=1) -> int
        
        Helper function for finding the caret position for the next word.
    %End

    bool IsPositionVisible(
        long pos
    ) const;
    %Docstring
        IsPositionVisible(pos : int) -> bool
        
        Returns true if the given position is visible on the screen.
    %End

    long GetFirstVisiblePosition() const;
    %Docstring
        GetFirstVisiblePosition() -> int
        
        Returns the first visible position in the current view.
    %End

    void EnableImages(
        bool b
    );
    %Docstring
        EnableImages(b : bool) -> None
        
        Enable or disable images.
    %End

    bool GetImagesEnabled() const;
    %Docstring
        GetImagesEnabled() -> bool
        
        Returns true if images are enabled.
    %End

    void EnableDelayedImageLoading(
        bool b
    );
    %Docstring
        EnableDelayedImageLoading(b : bool) -> None
        
        Enable or disable delayed image loading.
    %End

    bool GetDelayedImageLoading() const;
    %Docstring
        GetDelayedImageLoading() -> bool
        
        Returns true if delayed image loading is enabled.
    %End

    bool GetDelayedImageProcessingRequired() const;
    %Docstring
        GetDelayedImageProcessingRequired() -> bool
        
        Gets the flag indicating that delayed image processing is required.
    %End

    void SetDelayedImageProcessingRequired(
        bool b
    );
    %Docstring
        SetDelayedImageProcessingRequired(b : bool) -> None
        
        Sets the flag indicating that delayed image processing is required.
    %End

    wxLongLong GetDelayedImageProcessingTime() const;
    %Docstring
        GetDelayedImageProcessingTime() -> int
        
        Returns the last time delayed image processing was performed.
    %End

    void SetDelayedImageProcessingTime(
        wxLongLong t
    );
    %Docstring
        SetDelayedImageProcessingTime(t : int) -> None
        
        Sets the last time delayed image processing was performed.
    %End

    long GetCaretPositionForDefaultStyle() const;
    %Docstring
        GetCaretPositionForDefaultStyle() -> int
        
        Returns the caret position since the default formatting was changed.
    %End

    void SetCaretPositionForDefaultStyle(
        long pos
    );
    %Docstring
        SetCaretPositionForDefaultStyle(pos : int) -> None
        
        Set the caret position for the default style that the user is
        selecting.
    %End

    bool IsDefaultStyleShowing() const;
    %Docstring
        IsDefaultStyleShowing() -> bool
        
        Returns true if the user has recently set the default style without
        moving the caret, and therefore the UI needs to reflect the default
        style and not the style at the caret.
    %End

    void SetAndShowDefaultStyle(
        const wxRichTextAttr & attr
    );
    %Docstring
        SetAndShowDefaultStyle(attr : RichTextAttr) -> None
        
        Sets attr as the default style and tells the control that the UI
        should reflect this attribute until the user moves the caret.
    %End

    wxPoint GetFirstVisiblePoint() const;
    %Docstring
        GetFirstVisiblePoint() -> wx.Point
        
        Returns the first visible point in the window.
    %End

    wxString GetValue() const;
    %Docstring
        GetValue() -> str
        
        Returns the content of the entire control as a string.
    %End

    void SetValue(
        const wxString & value
    );
    %Docstring
        SetValue(value : str) -> None
        
        Replaces existing content with the given text.
    %End

    bool ProcessBackKey(
        wxKeyEvent & event,
        int flags
    );
    %Docstring
        ProcessBackKey(event : wx.KeyEvent, flags : int) -> bool
        
        Processes the back key.
    %End

    wxRichTextRange FindRangeForList(
        long pos,
        bool & isNumberedList
    );
    %Docstring
        FindRangeForList(pos : int, isNumberedList : bool) -> RichTextRange
        
        Given a character position at which there is a list style, find the
        range encompassing the same list style by looking backwards and
        forwards.
    %End

    bool SetCaretPositionAfterClick(
        wxRichTextParagraphLayoutBox * container,
        long position,
        int hitTestFlags,
        bool extendSelection = false
    );
    %Docstring
        SetCaretPositionAfterClick(container : RichTextParagraphLayoutBox, position : int, hitTestFlags : int, extendSelection: bool=False) -> bool
        
        Sets up the caret for the given position and container, after a mouse
        click.
    %End

    long FindCaretPositionForCharacterPosition(
        long position,
        int hitTestFlags,
        wxRichTextParagraphLayoutBox * container,
        bool & caretLineStart
    );
    %Docstring
        FindCaretPositionForCharacterPosition(position : int, hitTestFlags : int, container : RichTextParagraphLayoutBox, caretLineStart : bool) -> int
        
        Find the caret position for the combination of hit-test flags and
        character position.
    %End

    bool ProcessMouseMovement(
        wxRichTextParagraphLayoutBox * container,
        wxRichTextObject * obj,
        long position,
        const wxPoint & pos
    );
    %Docstring
        ProcessMouseMovement(container : RichTextParagraphLayoutBox, obj : RichTextObject, position : int, pos : wx.Point) -> bool
        
        Processes mouse movement in order to change the cursor.
    %End

    wxString DoGetValue() const;
    %Docstring
        DoGetValue() -> str
    %End

    bool ProcessDelayedImageLoading(
        bool refresh
    );
    %Docstring
        ProcessDelayedImageLoading(refresh : bool) -> bool
        ProcessDelayedImageLoading(screenRect : wx.Rect, box : RichTextParagraphLayoutBox, loadCount : int) -> bool
        
        Do delayed image loading and garbage-collect other images.
    %End

    bool ProcessDelayedImageLoading(
        const wxRect & screenRect,
        wxRichTextParagraphLayoutBox * box,
        int & loadCount
    );

    void RequestDelayedImageProcessing();
    %Docstring
        RequestDelayedImageProcessing() -> None
        
        Request delayed image processing.
    %End

    void OnTimer(
        wxTimerEvent & event
    );
    %Docstring
        OnTimer(event : wx.TimerEvent) -> None
        
        Respond to timer events.
    %End

    static
    const wxArrayString & GetAvailableFontNames();
    %Docstring
        GetAvailableFontNames() -> List[str]
        
        Font names take a long time to retrieve, so cache them (on demand).
    %End

    static
    void ClearAvailableFontNames();
    %Docstring
        ClearAvailableFontNames() -> None
        
        Clears the cache of available font names.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant: wx.WindowVariant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool SetMargins(
        const wxPoint & pt
    );
    %Docstring
        SetMargins(pt : Point) -> bool
        SetMargins(left : int, top: int=-1) -> bool
        
        Attempts to set the control margins.
    %End

    bool SetMargins(
        wxCoord left,
        wxCoord top = -1
    );

    bool AutoComplete(
        const wxArrayString & choices
    );
    %Docstring
        AutoComplete(choices : List[str]) -> bool
        AutoComplete(completer : TextCompleter) -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using the given choices.
    %End

    bool AutoComplete(
        wxTextCompleter * completer   /Transfer/
    );

    bool AutoCompleteFileNames();
    %Docstring
        AutoCompleteFileNames() -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using all valid file system paths.
    %End

    bool AutoCompleteDirectories();
    %Docstring
        AutoCompleteDirectories() -> bool
        
        Call this function to enable auto-completion of the text using the
        file system directories.
    %End

    void ChangeValue(
        const wxString & value
    );
    %Docstring
        ChangeValue(value : str) -> None
        
        Sets the new text control value.
    %End

    void ForceUpper();
    %Docstring
        ForceUpper() -> None
        
        Convert all text entered into the control to upper case.
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Returns true if the control is currently empty.
    %End

    bool SetHint(
        const wxString & hint
    );
    %Docstring
        SetHint(hint : str) -> bool
        
        Sets a hint shown in an empty unfocused text control.
    %End

    wxString GetHint() const;
    %Docstring
        GetHint() -> str
        
        Returns the current hint string.
    %End

    wxPoint GetMargins() const;
    %Docstring
        GetMargins() -> Point
        
        Returns the margins used by the control.
    %End

    public:


    %Property(name=BasicStyle, get=GetBasicStyle, set=SetBasicStyle)
    %Property(name=Buffer, get=GetBuffer)
    %Property(name=CaretAtLineStart, get=GetCaretAtLineStart, set=SetCaretAtLineStart)
    %Property(name=CaretPosition, get=GetCaretPosition, set=SetCaretPosition)
    %Property(name=CaretPositionForDefaultStyle, get=GetCaretPositionForDefaultStyle, set=SetCaretPositionForDefaultStyle)
    %Property(name=CommandProcessor, get=GetCommandProcessor)
    %Property(name=ContextMenu, get=GetContextMenu, set=SetContextMenu)
    %Property(name=ContextMenuPropertiesInfo, get=GetContextMenuPropertiesInfo)
    %Property(name=DefaultStyleEx, get=GetDefaultStyleEx)
    %Property(name=DelayedImageLoading, get=GetDelayedImageLoading)
    %Property(name=DelayedImageProcessingRequired, get=GetDelayedImageProcessingRequired, set=SetDelayedImageProcessingRequired)
    %Property(name=DelayedImageProcessingTime, get=GetDelayedImageProcessingTime, set=SetDelayedImageProcessingTime)
    %Property(name=DelayedLayoutThreshold, get=GetDelayedLayoutThreshold, set=SetDelayedLayoutThreshold)
    %Property(name=DimensionScale, get=GetDimensionScale, set=SetDimensionScale)
    %Property(name=DragStartPoint, get=GetDragStartPoint, set=SetDragStartPoint)
    %Property(name=DragStartTime, get=GetDragStartTime, set=SetDragStartTime)
    %Property(name=Dragging, get=GetDragging, set=SetDragging)
    %Property(name=Filename, get=GetFilename, set=SetFilename)
    %Property(name=FirstVisiblePoint, get=GetFirstVisiblePoint)
    %Property(name=FirstVisiblePosition, get=GetFirstVisiblePosition)
    %Property(name=FocusObject, get=GetFocusObject, set=SetFocusObject)
    %Property(name=FontScale, get=GetFontScale, set=SetFontScale)
    %Property(name=FullLayoutRequired, get=GetFullLayoutRequired, set=SetFullLayoutRequired)
    %Property(name=FullLayoutSavedPosition, get=GetFullLayoutSavedPosition, set=SetFullLayoutSavedPosition)
    %Property(name=FullLayoutTime, get=GetFullLayoutTime, set=SetFullLayoutTime)
    %Property(name=HandlerFlags, get=GetHandlerFlags, set=SetHandlerFlags)
    %Property(name=Hint, get=GetHint, set=SetHint)
    %Property(name=ImagesEnabled, get=GetImagesEnabled)
    %Property(name=InsertionPoint, get=GetInsertionPoint, set=SetInsertionPoint)
    %Property(name=InternalSelectionRange, get=GetInternalSelectionRange, set=SetInternalSelectionRange)
    %Property(name=LastPosition, get=GetLastPosition)
    %Property(name=Margins, get=GetMargins, set=SetMargins)
    %Property(name=NumberOfLines, get=GetNumberOfLines)
    %Property(name=PreDrag, get=GetPreDrag, set=SetPreDrag)
    %Property(name=Scale, get=GetScale, set=SetScale)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
    %Property(name=SelectionAnchor, get=GetSelectionAnchor, set=SetSelectionAnchor)
    %Property(name=SelectionAnchorObject, get=GetSelectionAnchorObject, set=SetSelectionAnchorObject)
    %Property(name=SelectionRange, get=GetSelectionRange, set=SetSelectionRange)
    %Property(name=StringSelection, get=GetStringSelection)
    %Property(name=StyleSheet, get=GetStyleSheet, set=SetStyleSheet)
    %Property(name=TextCursor, get=GetTextCursor, set=SetTextCursor)
    %Property(name=URLCursor, get=GetURLCursor, set=SetURLCursor)
    %Property(name=Value, get=GetValue, set=SetValue)
    %Property(name=VerticalScrollbarEnabled, get=GetVerticalScrollbarEnabled)
    %Property(name=VirtualAttributesEnabled, get=GetVirtualAttributesEnabled)

protected:
    virtual
    wxSize DoGetBestSize() const;
    %Docstring
        DoGetBestSize() -> wx.Size
        
        Currently this simply returns wxSize(10, 10).
    %End

    virtual
    void DoThaw();
    %Docstring
        DoThaw() -> None
    %End

};  // end of class wxRichTextCtrl


%Extract(id=pycode_richtext)
def _RichTextCtrl_GetDefaultStyle(self):
    return self.GetDefaultStyleEx()
RichTextCtrl.GetDefaultStyle = wx.deprecated(_RichTextCtrl_GetDefaultStyle, "Use GetDefaultStyleEx instead")
del _RichTextCtrl_GetDefaultStyle
%End

%Extract(id=pycode_richtext)
RichTextCtrl.DefaultStyle = property(RichTextCtrl.GetDefaultStyle, RichTextCtrl.SetDefaultStyle)
%End

class wxRichTextEvent : wxNotifyEvent
{
    %Docstring
        RichTextEvent(commandType: EventType=wx.wxEVT_NULL, winid: int=0) -> None
        RichTextEvent(event : RichTextEvent) -> None
        
        This is the event class for wxRichTextCtrl notifications.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextctrl.h>
    %End

public:
    wxRichTextEvent(
        wxEventType commandType = wxEVT_NULL,
        int winid = 0
    );

    wxRichTextEvent(
        const wxRichTextEvent & event
    );

    long GetPosition() const;
    %Docstring
        GetPosition() -> int
        
        Returns the buffer position at which the event occurred.
    %End

    void SetPosition(
        long pos
    );
    %Docstring
        SetPosition(pos : int) -> None
        
        Sets the buffer position variable.
    %End

    int GetFlags() const;
    %Docstring
        GetFlags() -> int
        
        Returns flags indicating modifier keys pressed.
    %End

    void SetFlags(
        int flags
    );
    %Docstring
        SetFlags(flags : int) -> None
        
        Sets flags indicating modifier keys pressed.
    %End

    wxRichTextStyleSheet * GetOldStyleSheet() const;
    %Docstring
        GetOldStyleSheet() -> RichTextStyleSheet
        
        Returns the old style sheet.
    %End

    void SetOldStyleSheet(
        wxRichTextStyleSheet * sheet
    );
    %Docstring
        SetOldStyleSheet(sheet : RichTextStyleSheet) -> None
        
        Sets the old style sheet variable.
    %End

    wxRichTextStyleSheet * GetNewStyleSheet() const;
    %Docstring
        GetNewStyleSheet() -> RichTextStyleSheet
        
        Returns the new style sheet.
    %End

    void SetNewStyleSheet(
        wxRichTextStyleSheet * sheet
    );
    %Docstring
        SetNewStyleSheet(sheet : RichTextStyleSheet) -> None
        
        Sets the new style sheet variable.
    %End

    const wxRichTextRange & GetRange() const;
    %Docstring
        GetRange() -> RichTextRange
        
        Gets the range for the current operation.
    %End

    void SetRange(
        const wxRichTextRange & range
    );
    %Docstring
        SetRange(range : RichTextRange) -> None
        
        Sets the range variable.
    %End

    wxChar GetCharacter() const;
    %Docstring
        GetCharacter() -> str
        
        Returns the character pressed, within a wxEVT_RICHTEXT_CHARACTER
        event.
    %End

    void SetCharacter(
        wxChar ch
    );
    %Docstring
        SetCharacter(ch : str) -> None
        
        Sets the character variable.
    %End

    wxRichTextParagraphLayoutBox * GetContainer() const;
    %Docstring
        GetContainer() -> RichTextParagraphLayoutBox
        
        Returns the container for which the event is relevant.
    %End

    void SetContainer(
        wxRichTextParagraphLayoutBox * container
    );
    %Docstring
        SetContainer(container : RichTextParagraphLayoutBox) -> None
        
        Sets the container for which the event is relevant.
    %End

    wxRichTextParagraphLayoutBox * GetOldContainer() const;
    %Docstring
        GetOldContainer() -> RichTextParagraphLayoutBox
        
        Returns the old container, for a focus change event.
    %End

    void SetOldContainer(
        wxRichTextParagraphLayoutBox * container
    );
    %Docstring
        SetOldContainer(container : RichTextParagraphLayoutBox) -> None
        
        Sets the old container, for a focus change event.
    %End

    virtual
    wxEvent * Clone() const   /Factory/;
    %Docstring
        Clone() -> wx.Event
        
        Returns a copy of the event.
    %End

    private:
        wxRichTextEvent& operator=(const wxRichTextEvent&);


    public:


    %Property(name=Character, get=GetCharacter, set=SetCharacter)
    %Property(name=Container, get=GetContainer, set=SetContainer)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=NewStyleSheet, get=GetNewStyleSheet, set=SetNewStyleSheet)
    %Property(name=OldContainer, get=GetOldContainer, set=SetOldContainer)
    %Property(name=OldStyleSheet, get=GetOldStyleSheet, set=SetOldStyleSheet)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    %Property(name=Range, get=GetRange, set=SetRange)
};  // end of class wxRichTextEvent


%Extract(id=pycode_richtext)
EVT_RICHTEXT_LEFT_CLICK = wx.PyEventBinder(wxEVT_RICHTEXT_LEFT_CLICK)
EVT_RICHTEXT_RIGHT_CLICK = wx.PyEventBinder(wxEVT_RICHTEXT_RIGHT_CLICK)
EVT_RICHTEXT_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_RICHTEXT_MIDDLE_CLICK)
EVT_RICHTEXT_LEFT_DCLICK = wx.PyEventBinder(wxEVT_RICHTEXT_LEFT_DCLICK)
EVT_RICHTEXT_RETURN = wx.PyEventBinder(wxEVT_RICHTEXT_RETURN)
EVT_RICHTEXT_CHARACTER = wx.PyEventBinder(wxEVT_RICHTEXT_CHARACTER)
EVT_RICHTEXT_DELETE = wx.PyEventBinder(wxEVT_RICHTEXT_DELETE)

EVT_RICHTEXT_STYLESHEET_CHANGING = wx.PyEventBinder(wxEVT_RICHTEXT_STYLESHEET_CHANGING)
EVT_RICHTEXT_STYLESHEET_CHANGED = wx.PyEventBinder(wxEVT_RICHTEXT_STYLESHEET_CHANGED)
EVT_RICHTEXT_STYLESHEET_REPLACING = wx.PyEventBinder(wxEVT_RICHTEXT_STYLESHEET_REPLACING)
EVT_RICHTEXT_STYLESHEET_REPLACED = wx.PyEventBinder(wxEVT_RICHTEXT_STYLESHEET_REPLACED)

EVT_RICHTEXT_CONTENT_INSERTED = wx.PyEventBinder(wxEVT_RICHTEXT_CONTENT_INSERTED)
EVT_RICHTEXT_CONTENT_DELETED = wx.PyEventBinder(wxEVT_RICHTEXT_CONTENT_DELETED)
EVT_RICHTEXT_STYLE_CHANGED = wx.PyEventBinder(wxEVT_RICHTEXT_STYLE_CHANGED)
EVT_RICHTEXT_STYLE_CHANGED = wx.PyEventBinder(wxEVT_RICHTEXT_PROPERTIES_CHANGED)
EVT_RICHTEXT_SELECTION_CHANGED = wx.PyEventBinder(wxEVT_RICHTEXT_SELECTION_CHANGED)
EVT_RICHTEXT_BUFFER_RESET = wx.PyEventBinder(wxEVT_RICHTEXT_BUFFER_RESET)
EVT_RICHTEXT_FOCUS_OBJECT_CHANGED = wx.PyEventBinder(wxEVT_RICHTEXT_FOCUS_OBJECT_CHANGED)

%End


//---------------------------------------------------------------------------

