//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _ribbon.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/ribbon/toolbar.h>
%End


//---------------------------------------------------------------------------

        // forward declarations
        class wxRibbonToolBarToolBase;


wxEventType wxEVT_RIBBONTOOLBAR_CLICKED   /PyName=wxEVT_RIBBONTOOLBAR_CLICKED/;

wxEventType wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED   /PyName=wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED/;

class wxRibbonToolBar : wxRibbonControl
{
    %Docstring
        RibbonToolBar() -> None
        RibbonToolBar(parent : wx.Window, id: int=wx.ID_ANY, pos: wx.Point=wx.DefaultPosition, size: wx.Size=wx.DefaultSize, style: int=0) -> None
        
        A ribbon tool bar is similar to a traditional toolbar which has no
        labels.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/toolbar.h>
    %End

public:
    wxRibbonToolBar();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRibbonToolBar(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRibbonToolBar();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent : wx.Window, id: int=wx.ID_ANY, pos: wx.Point=wx.DefaultPosition, size: wx.Size=wx.DefaultSize, style: int=0) -> bool
        
        Create a tool bar in two-step tool bar construction.
    %End

    wxRibbonToolBarToolBase * AddTool(
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL
    );
    %Docstring
        AddTool(tool_id : int, bitmap : wx.Bitmap, help_string : str, kind: RibbonButtonKind=RIBBON_BUTTON_NORMAL) -> RibbonToolBarToolBase
        AddTool(tool_id : int, bitmap : wx.Bitmap, bitmap_disabled: wx.Bitmap=wx.NullBitmap, help_string: str='', kind: RibbonButtonKind=RIBBON_BUTTON_NORMAL, clientData: Optional[PyUserData]=None) -> RibbonToolBarToolBase
        
        Add a tool to the tool bar (simple version).
    %End

    wxRibbonToolBarToolBase * AddTool(
        int tool_id,
        const wxBitmap & bitmap,
        const wxBitmap & bitmap_disabled = wxNullBitmap,
        const wxString & help_string = wxEmptyString,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
        wxPyUserData* clientData   /Transfer/ = NULL
    );

    wxRibbonToolBarToolBase * AddDropdownTool(
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        AddDropdownTool(tool_id : int, bitmap : wx.Bitmap, help_string: str='') -> RibbonToolBarToolBase
        
        Add a dropdown tool to the tool bar (simple version).
    %End

    wxRibbonToolBarToolBase * AddHybridTool(
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        AddHybridTool(tool_id : int, bitmap : wx.Bitmap, help_string: str='') -> RibbonToolBarToolBase
        
        Add a hybrid tool to the tool bar (simple version).
    %End

    wxRibbonToolBarToolBase * AddToggleTool(
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string
    );
    %Docstring
        AddToggleTool(tool_id : int, bitmap : wx.Bitmap, help_string : str) -> RibbonToolBarToolBase
        
        Add a toggle tool to the tool bar (simple version).
    %End

    wxRibbonToolBarToolBase * AddSeparator();
    %Docstring
        AddSeparator() -> RibbonToolBarToolBase
        
        Add a separator to the tool bar.
    %End

    wxRibbonToolBarToolBase * InsertTool(
        size_t pos,
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL
    );
    %Docstring
        InsertTool(pos : int, tool_id : int, bitmap : wx.Bitmap, help_string : str, kind: RibbonButtonKind=RIBBON_BUTTON_NORMAL) -> RibbonToolBarToolBase
        InsertTool(pos : int, tool_id : int, bitmap : wx.Bitmap, bitmap_disabled: wx.Bitmap=wx.NullBitmap, help_string: str='', kind: RibbonButtonKind=RIBBON_BUTTON_NORMAL, clientData: Optional[PyUserData]=None) -> RibbonToolBarToolBase
        
        Insert a tool to the tool bar (simple version) as the specified
        position.
    %End

    wxRibbonToolBarToolBase * InsertTool(
        size_t pos,
        int tool_id,
        const wxBitmap & bitmap,
        const wxBitmap & bitmap_disabled = wxNullBitmap,
        const wxString & help_string = wxEmptyString,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
        wxPyUserData* clientData   /Transfer/ = NULL
    );

    wxRibbonToolBarToolBase * InsertDropdownTool(
        size_t pos,
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        InsertDropdownTool(pos : int, tool_id : int, bitmap : wx.Bitmap, help_string: str='') -> RibbonToolBarToolBase
        
        Insert a dropdown tool to the tool bar (simple version) as the
        specified position.
    %End

    wxRibbonToolBarToolBase * InsertHybridTool(
        size_t pos,
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        InsertHybridTool(pos : int, tool_id : int, bitmap : wx.Bitmap, help_string: str='') -> RibbonToolBarToolBase
        
        Insert a hybrid tool to the tool bar (simple version) as the specified
        position.
    %End

    wxRibbonToolBarToolBase * InsertToggleTool(
        size_t pos,
        int tool_id,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        InsertToggleTool(pos : int, tool_id : int, bitmap : wx.Bitmap, help_string: str='') -> RibbonToolBarToolBase
        
        Insert a toggle tool to the tool bar (simple version) as the specified
        position.
    %End

    wxRibbonToolBarToolBase * InsertSeparator(
        size_t pos
    );
    %Docstring
        InsertSeparator(pos : int) -> RibbonToolBarToolBase
        
        Insert a separator to the tool bar at the specified position.
    %End

    void ClearTools();
    %Docstring
        ClearTools() -> None
        
        Deletes all the tools in the toolbar.
    %End

    bool DeleteTool(
        int tool_id
    );
    %Docstring
        DeleteTool(tool_id : int) -> bool
        
        Removes the specified tool from the toolbar and deletes it.
    %End

    bool DeleteToolByPos(
        size_t pos
    );
    %Docstring
        DeleteToolByPos(pos : int) -> bool
        
        This function behaves like DeleteTool() but it deletes the tool at the
        specified position and not the one with the given id.
    %End

    wxRibbonToolBarToolBase * FindById(
        int tool_id
    ) const;
    %Docstring
        FindById(tool_id : int) -> RibbonToolBarToolBase
        
        Returns a pointer to the tool opaque structure by id or NULL if no
        corresponding tool is found.
    %End

    wxRibbonToolBarToolBase * GetToolByPos(
        size_t pos
    ) const;
    %Docstring
        GetToolByPos(pos : int) -> RibbonToolBarToolBase
        GetToolByPos(x : int, y : int) -> RibbonToolBarToolBase
        
        Return the opaque pointer corresponding to the given tool.
    %End

    wxRibbonToolBarToolBase * GetToolByPos(
        wxCoord x,
        wxCoord y
    ) const;

    size_t GetToolCount() const;
    %Docstring
        GetToolCount() -> int
        
        Returns the number of tools in the toolbar.
    %End

    int GetToolId(
        const wxRibbonToolBarToolBase * tool
    ) const;
    %Docstring
        GetToolId(tool : RibbonToolBarToolBase) -> int
        
        Return the id associated to the tool opaque structure.
    %End

    wxRibbonToolBarToolBase * GetActiveTool() const;
    %Docstring
        GetActiveTool() -> RibbonToolBarToolBase
        
        Returns the active item of the tool bar or NULL if there is none.
    %End

    wxPyUserData* GetToolClientData(
        int tool_id
    ) const;
    %Docstring
        GetToolClientData(tool_id : int) -> PyUserData
        
        Get any client data associated with the tool.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxRibbonToolBar_GetToolClientData(sipCpp, tool_id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxPyUserData* _wxRibbonToolBar_GetToolClientData(const wxRibbonToolBar* self, int tool_id)
    {
        return dynamic_cast<wxPyUserData*>(self->GetToolClientData(tool_id));
    }
    %End

    bool GetToolEnabled(
        int tool_id
    ) const;
    %Docstring
        GetToolEnabled(tool_id : int) -> bool
        
        Called to determine whether a tool is enabled (responds to user
        input).
    %End

    wxString GetToolHelpString(
        int tool_id
    ) const;
    %Docstring
        GetToolHelpString(tool_id : int) -> str
        
        Returns the help string for the given tool.
    %End

    wxRibbonButtonKind GetToolKind(
        int tool_id
    ) const;
    %Docstring
        GetToolKind(tool_id : int) -> RibbonButtonKind
        
        Return the kind of the given tool.
    %End

    int GetToolPos(
        int tool_id
    ) const;
    %Docstring
        GetToolPos(tool_id : int) -> int
        
        Returns the tool position in the toolbar, or wxNOT_FOUND if the tool
        is not found.
    %End

    wxRect GetToolRect(
        int tool_id
    ) const;
    %Docstring
        GetToolRect(tool_id : int) -> wx.Rect
        
        Returns the tool's rect with coordinates relative to the toolbar's
        parent, or a default-constructed rect if the tool is not found.
    %End

    bool GetToolState(
        int tool_id
    ) const;
    %Docstring
        GetToolState(tool_id : int) -> bool
        
        Gets the on/off state of a toggle tool.
    %End

    bool Realize();
    %Docstring
        Realize() -> bool
        
        Calculate tool layouts and positions.
    %End

    void SetRows(
        int nMin,
        int nMax = -1
    );
    %Docstring
        SetRows(nMin : int, nMax: int=-1) -> None
        
        Set the number of rows to distribute tool groups over.
    %End

    void SetToolClientData(
        int tool_id,
        wxPyUserData* clientData   /Transfer/
    );
    %Docstring
        SetToolClientData(tool_id : int, clientData : PyUserData) -> None
        
        Sets the client data associated with the tool.
    %End

    void SetToolDisabledBitmap(
        int tool_id,
        const wxBitmap & bitmap
    );
    %Docstring
        SetToolDisabledBitmap(tool_id : int, bitmap : wx.Bitmap) -> None
        
        Sets the bitmap to be used by the tool with the given ID when the tool
        is in a disabled state.
    %End

    void SetToolHelpString(
        int tool_id,
        const wxString & helpString
    );
    %Docstring
        SetToolHelpString(tool_id : int, helpString : str) -> None
        
        Sets the help string shown in tooltip for the given tool.
    %End

    void SetToolNormalBitmap(
        int tool_id,
        const wxBitmap & bitmap
    );
    %Docstring
        SetToolNormalBitmap(tool_id : int, bitmap : wx.Bitmap) -> None
        
        Sets the bitmap to be used by the tool with the given ID.
    %End

    void EnableTool(
        int tool_id,
        bool enable = true
    );
    %Docstring
        EnableTool(tool_id : int, enable: bool=True) -> None
        
        Enable or disable a single tool on the bar.
    %End

    void ToggleTool(
        int tool_id,
        bool checked
    );
    %Docstring
        ToggleTool(tool_id : int, checked : bool) -> None
        
        Set a toggle tool to the checked or unchecked state.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant: wx.WindowVariant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActiveTool, get=GetActiveTool)
    %Property(name=ToolCount, get=GetToolCount)
};  // end of class wxRibbonToolBar


class wxRibbonToolBarEvent : wxCommandEvent
{
    %Docstring
        RibbonToolBarEvent(command_type: EventType=wx.wxEVT_NULL, win_id: int=0, bar: Optional[RibbonToolBar]=None) -> None
    %End
    %TypeHeaderCode
        #include <wx/ribbon/toolbar.h>
    %End

public:
    wxRibbonToolBarEvent(
        wxEventType command_type = wxEVT_NULL,
        int win_id = 0,
        wxRibbonToolBar * bar = NULL
    );

    wxRibbonToolBar * GetBar();
    %Docstring
        GetBar() -> RibbonToolBar
    %End

    void SetBar(
        wxRibbonToolBar * bar
    );
    %Docstring
        SetBar(bar : RibbonToolBar) -> None
    %End

    bool PopupMenu(
        wxMenu * menu
    );
    %Docstring
        PopupMenu(menu : wx.Menu) -> bool
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxRibbonToolBarEvent& operator=(const wxRibbonToolBarEvent&);


    public:


    %Property(name=Bar, get=GetBar, set=SetBar)
};  // end of class wxRibbonToolBarEvent


%Extract(id=pycode_ribbon)
EVT_RIBBONTOOLBAR_CLICKED = wx.PyEventBinder( wxEVT_RIBBONTOOLBAR_CLICKED, 1 )
EVT_RIBBONTOOLBAR_DROPDOWN_CLICKED = wx.PyEventBinder( wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, 1 )

%End


//---------------------------------------------------------------------------

