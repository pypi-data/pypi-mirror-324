# coding: utf-8

"""
    Computebench Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.tools_registry_controller_get_tool200_response_data_inner import ToolsRegistryControllerGetTool200ResponseDataInner

class TestToolsRegistryControllerGetTool200ResponseDataInner(unittest.TestCase):
    """ToolsRegistryControllerGetTool200ResponseDataInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolsRegistryControllerGetTool200ResponseDataInner:
        """Test ToolsRegistryControllerGetTool200ResponseDataInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolsRegistryControllerGetTool200ResponseDataInner`
        """
        model = ToolsRegistryControllerGetTool200ResponseDataInner()
        if include_optional:
            return ToolsRegistryControllerGetTool200ResponseDataInner(
                id = '',
                type = '',
                attributes = do_sdk_platform.models.tool_manifest_dto.ToolManifestDto(
                    key = '', 
                    version = '', 
                    name = '', 
                    description = '', 
                    executors = [
                        do_sdk_platform.models.tool_executor_dto.ToolExecutorDto(
                            name = '', 
                            head = do_sdk_platform.models.head.head(), 
                            type = 'job', 
                            restart_policy = 'never', 
                            phase = 1.337, 
                            image = '', 
                            command = [
                                ''
                                ], 
                            args = [
                                ''
                                ], 
                            working_directory = '', 
                            stdin = '', 
                            stdout = '', 
                            stderr = '', 
                            environment = [
                                do_sdk_platform.models.environment_variable_dto.EnvironmentVariableDto(
                                    name = '', 
                                    value = '', )
                                ], 
                            ports = [
                                do_sdk_platform.models.port_dto.PortDto(
                                    name = '', 
                                    port = 1.337, 
                                    description = '', 
                                    protocol = 'TCP', 
                                    externally_exposed = '', )
                                ], 
                            resource_requirements = null, 
                            storage_requirements = [
                                null
                                ], )
                        ], 
                    inputs = [
                        None
                        ], 
                    outputs = [
                        None
                        ], )
            )
        else:
            return ToolsRegistryControllerGetTool200ResponseDataInner(
                id = '',
                type = '',
                attributes = do_sdk_platform.models.tool_manifest_dto.ToolManifestDto(
                    key = '', 
                    version = '', 
                    name = '', 
                    description = '', 
                    executors = [
                        do_sdk_platform.models.tool_executor_dto.ToolExecutorDto(
                            name = '', 
                            head = do_sdk_platform.models.head.head(), 
                            type = 'job', 
                            restart_policy = 'never', 
                            phase = 1.337, 
                            image = '', 
                            command = [
                                ''
                                ], 
                            args = [
                                ''
                                ], 
                            working_directory = '', 
                            stdin = '', 
                            stdout = '', 
                            stderr = '', 
                            environment = [
                                do_sdk_platform.models.environment_variable_dto.EnvironmentVariableDto(
                                    name = '', 
                                    value = '', )
                                ], 
                            ports = [
                                do_sdk_platform.models.port_dto.PortDto(
                                    name = '', 
                                    port = 1.337, 
                                    description = '', 
                                    protocol = 'TCP', 
                                    externally_exposed = '', )
                                ], 
                            resource_requirements = null, 
                            storage_requirements = [
                                null
                                ], )
                        ], 
                    inputs = [
                        None
                        ], 
                    outputs = [
                        None
                        ], ),
        )
        """

    def testToolsRegistryControllerGetTool200ResponseDataInner(self):
        """Test ToolsRegistryControllerGetTool200ResponseDataInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
