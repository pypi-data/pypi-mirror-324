# coding: utf-8

"""
    Computebench Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.tools_registry_controller_get_tool200_response import ToolsRegistryControllerGetTool200Response

class TestToolsRegistryControllerGetTool200Response(unittest.TestCase):
    """ToolsRegistryControllerGetTool200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolsRegistryControllerGetTool200Response:
        """Test ToolsRegistryControllerGetTool200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolsRegistryControllerGetTool200Response`
        """
        model = ToolsRegistryControllerGetTool200Response()
        if include_optional:
            return ToolsRegistryControllerGetTool200Response(
                links = do_sdk_platform.models.http_links_dto.HttpLinksDto(
                    self = '', 
                    next = '', 
                    prev = '', 
                    first = '', ),
                data = [
                    do_sdk_platform.models.tools_registry_controller_get_tool_200_response_data_inner.ToolsRegistryController_getTool_200_response_data_inner(
                        id = '', 
                        type = '', 
                        attributes = do_sdk_platform.models.tool_manifest_dto.ToolManifestDto(
                            key = '', 
                            version = '', 
                            name = '', 
                            description = '', 
                            executors = [
                                do_sdk_platform.models.tool_executor_dto.ToolExecutorDto(
                                    name = '', 
                                    head = do_sdk_platform.models.head.head(), 
                                    type = 'job', 
                                    restart_policy = 'never', 
                                    phase = 1.337, 
                                    image = '', 
                                    command = [
                                        ''
                                        ], 
                                    args = [
                                        ''
                                        ], 
                                    working_directory = '', 
                                    stdin = '', 
                                    stdout = '', 
                                    stderr = '', 
                                    environment = [
                                        do_sdk_platform.models.environment_variable_dto.EnvironmentVariableDto(
                                            name = '', 
                                            value = '', )
                                        ], 
                                    ports = [
                                        do_sdk_platform.models.port_dto.PortDto(
                                            name = '', 
                                            port = 1.337, 
                                            description = '', 
                                            protocol = 'TCP', 
                                            externally_exposed = '', )
                                        ], 
                                    resource_requirements = null, 
                                    storage_requirements = [
                                        null
                                        ], )
                                ], 
                            inputs = [
                                None
                                ], 
                            outputs = [
                                None
                                ], ), )
                    ]
            )
        else:
            return ToolsRegistryControllerGetTool200Response(
                links = do_sdk_platform.models.http_links_dto.HttpLinksDto(
                    self = '', 
                    next = '', 
                    prev = '', 
                    first = '', ),
                data = [
                    do_sdk_platform.models.tools_registry_controller_get_tool_200_response_data_inner.ToolsRegistryController_getTool_200_response_data_inner(
                        id = '', 
                        type = '', 
                        attributes = do_sdk_platform.models.tool_manifest_dto.ToolManifestDto(
                            key = '', 
                            version = '', 
                            name = '', 
                            description = '', 
                            executors = [
                                do_sdk_platform.models.tool_executor_dto.ToolExecutorDto(
                                    name = '', 
                                    head = do_sdk_platform.models.head.head(), 
                                    type = 'job', 
                                    restart_policy = 'never', 
                                    phase = 1.337, 
                                    image = '', 
                                    command = [
                                        ''
                                        ], 
                                    args = [
                                        ''
                                        ], 
                                    working_directory = '', 
                                    stdin = '', 
                                    stdout = '', 
                                    stderr = '', 
                                    environment = [
                                        do_sdk_platform.models.environment_variable_dto.EnvironmentVariableDto(
                                            name = '', 
                                            value = '', )
                                        ], 
                                    ports = [
                                        do_sdk_platform.models.port_dto.PortDto(
                                            name = '', 
                                            port = 1.337, 
                                            description = '', 
                                            protocol = 'TCP', 
                                            externally_exposed = '', )
                                        ], 
                                    resource_requirements = null, 
                                    storage_requirements = [
                                        null
                                        ], )
                                ], 
                            inputs = [
                                None
                                ], 
                            outputs = [
                                None
                                ], ), )
                    ],
        )
        """

    def testToolsRegistryControllerGetTool200Response(self):
        """Test ToolsRegistryControllerGetTool200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
