# yapf: disable
# isort: skip_file
# ruff: noqa

# To not generate code where imported names might get shadowed when a user
# specifies some name in their proto file to be the same as one of our imported
# names, (for example: a request field named `uuid`) we bind all imports to
# names that are forbidden in 'proto' and therefore can never collide.

# Standard imports.
from __future__ import annotations as IMPORT_future_annotations

# The following MUST appear before the rest of the imports, since those imports
# may be invalid (broken) if the generated code is mismatched with the installed
# libraries.
import reboot.versioning as IMPORT_reboot_versioning
IMPORT_reboot_versioning.check_generated_code_compatible("0.23.0")

# ATTENTION: no types in this file should be imported with their unqualified
#            name (e.g. `from typing import Any`). That would cause clashes
#            with user-defined methods that have the same name. Use
#            fully-qualified names (e.g. `IMPORT_typing.Any`) instead.
import asyncio as IMPORT_asyncio
import dataclasses as IMPORT_dataclasses
import google.protobuf.descriptor as IMPORT_google_protobuf_descriptor
import google.protobuf.json_format as IMPORT_google_protobuf_json_format
import google.protobuf.message as IMPORT_google_protobuf_message
import grpc as IMPORT_grpc
import grpc_status._async as IMPORT_rpc_status_async
from grpc_status import rpc_status as IMPORT_rpc_status_sync
import json as IMPORT_json
import os as IMPORT_os
import traceback as IMPORT_traceback
import uuid as IMPORT_uuid
import pickle as IMPORT_pickle
import reboot as IMPORT_reboot
import log.log as IMPORT_log_log   # type: ignore[import]
import typing as IMPORT_typing
import reboot.aio.backoff as IMPORT_reboot_aio_backoff
import functools as IMPORT_functools
from abc import abstractmethod as IMPORT_abc_abstractmethod
from datetime import datetime as IMPORT_datetime_datetime
from datetime import timedelta as IMPORT_datetime_timedelta
from google.protobuf import timestamp_pb2 as IMPORT_google_protobuf_timestamp_pb2
from google.protobuf import wrappers_pb2 as IMPORT_google_protobuf_wrappers_pb2
import reboot.aio.tracing as IMPORT_reboot_aio_tracing
from google.rpc import status_pb2 as IMPORT_google_rpc_status_pb2
import reboot.aio.call as IMPORT_reboot_aio_call
import reboot.aio.contexts as IMPORT_reboot_aio_contexts
import reboot.aio.headers as IMPORT_reboot_aio_headers
import reboot.aio.idempotency as IMPORT_reboot_aio_idempotency
import reboot.aio.internals.channel_manager as IMPORT_reboot_aio_internals_channel_manager
import reboot.aio.internals.middleware as IMPORT_reboot_aio_internals_middleware
import reboot.aio.internals.tasks_cache as IMPORT_reboot_aio_internals_tasks_cache
import reboot.aio.internals.tasks_dispatcher as IMPORT_reboot_aio_internals_tasks_dispatcher
import reboot.aio.placement as IMPORT_reboot_aio_placement
import reboot.aio.servicers as IMPORT_reboot_aio_servicers
import reboot.aio.state_managers as IMPORT_reboot_aio_state_managers
import reboot.aio.stubs as IMPORT_reboot_aio_stubs
import reboot.aio.tasks as IMPORT_reboot_aio_tasks
import reboot.aio.types as IMPORT_reboot_aio_types
import reboot.aio.external as IMPORT_reboot_aio_external
import reboot.settings as IMPORT_reboot_settings
import rbt.v1alpha1 as IMPORT_rbt_v1alpha1

# User defined or referenced imports.
import rbt.cloud.v1alpha1.application.application_pb2
import rbt.cloud.v1alpha1.application.application_pb2_grpc
import rbt.v1alpha1.options_pb2
import rbt.v1alpha1.tasks_pb2
import rbt.v1alpha1.tasks_pb2_grpc
# Additionally re-export all messages and enums from the pb2 module.
from rbt.cloud.v1alpha1.application.application_pb2 import (
    CreateRequest,
    CreateResponse,
    DownRequest,
    DownResponse,
    DownTaskRequest,
    DownTaskResponse,
    InvalidInputError,
    Permissions,
    UpRequest,
    UpResponse,
    UpTaskResponse,
)

logger = IMPORT_log_log.get_logger(__name__)

# When we are running this code within `node` we might want to log
# things differently. For example, if we already have some logging in
# our TypeScript code these logs may be redundant. Or we want to avoid
# printing stack traces as those are Python specific.
NODEJS: bool = IMPORT_os.environ.get(
    IMPORT_reboot_settings.ENVVAR_REBOOT_NODEJS, "false"
).lower() == "true"


############################ Legacy gRPC Servicers ############################
# This section is relevant (only) for servicers that implement a legacy gRPC
# service in a Reboot context. It is irrelevant to clients.

def MakeLegacyGrpcServiceable(
    # A legacy gRPC servicer type can't be more specific than `type`,
    # because legacy gRPC servicers (as generated by the gRPC `protoc`
    # plugin) do not share any common base class other than `object`.
    servicer_type: type
) -> IMPORT_reboot_aio_servicers.Serviceable:
    raise ValueError(f"Unknown legacy gRPC servicer type '{servicer_type}'")



############################ Reboot Servicer Middlewares ############################
# This section is relevant (only) for servicers implementing a Reboot servicer. It
# is irrelevant to clients, except for the fact that some clients are _also_ such
# servicers.

# For internal calls, we can use a magic token to bypass token verification and
# authorization checks. The token provides no auth information (e.g.,
# `context.auth is None`).
__internal_magic_token__: str = f'internal-{str(IMPORT_uuid.uuid4())}'

class ApplicationServicerMiddleware(IMPORT_reboot_aio_internals_middleware.Middleware):

    def __init__(
        self,
        *,
        servicer: ApplicationServicer,
        application_id: IMPORT_reboot_aio_types.ApplicationId,
        consensus_id: IMPORT_reboot_aio_types.ConsensusId,
        state_manager: IMPORT_reboot_aio_state_managers.StateManager,
        placement_client: IMPORT_reboot_aio_placement.PlacementClient,
        channel_manager: IMPORT_reboot_aio_internals_channel_manager._ChannelManager,
        tasks_cache: IMPORT_reboot_aio_internals_tasks_cache.TasksCache,
        token_verifier: IMPORT_typing.Optional[IMPORT_reboot.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: IMPORT_reboot_aio_contexts.EffectValidation,
        app_internal_api_key_secret: str,
        ready: IMPORT_asyncio.Event,
    ):
        super().__init__(
            application_id=application_id,
            consensus_id=consensus_id,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            service_names = [
                IMPORT_reboot_aio_types.ServiceName("rbt.cloud.v1alpha1.application.ApplicationMethods"),
            ],
            placement_client=placement_client,
            channel_manager=channel_manager,
            effect_validation=effect_validation,
            app_internal_api_key_secret=app_internal_api_key_secret,
        )

        self._servicer = servicer
        self._state_manager = state_manager
        self.tasks_dispatcher = IMPORT_reboot_aio_internals_tasks_dispatcher.TasksDispatcher(
            application_id=application_id,
            dispatch=self.dispatch,
            tasks_cache=tasks_cache,
            ready=ready,
        )

        # Store the type of each method's request so that stored requests can be
        # deserialized into the correct type.
        self.request_type_by_method_name: dict[str, type[IMPORT_google_protobuf_message.Message]] = {
            'Create': rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
            'Up': rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
            'UpTask': rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
            'Down': rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
            'DownTask': rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        }

        # Create authorizer.
        self._authorizer: IMPORT_typing.Optional[IMPORT_reboot.aio.auth.authorizers.Authorizer] = servicer.authorizer()

        # Create token verifier.
        self._token_verifier: IMPORT_typing.Optional[IMPORT_reboot.aio.auth.token_verifiers.TokenVerifier] = (
            servicer.token_verifier() or token_verifier
        )

        if self._token_verifier is not None and self._authorizer is None:
            raise RuntimeError(
                f"'TokenVerifier' provided but no 'Authorizer' returned for "
                f"'rbt.cloud.v1alpha1.application.Application'"
            )

        # Since users specify errors as proto messages they can't raise them
        # directly - to do so they have to use the `Aborted` wrapper, which will
        # hold the original proto message. On errors we'll need to check whether
        # such wrappers hold a proto message for a specified error, so we can
        # avoid retrying tasks that complete with a specified error.
        self._specified_errors_by_service_method_name: dict[str, list[str]] = {
            'rbt.cloud.v1alpha1.application.ApplicationMethods.Up': [
                'rbt.cloud.v1alpha1.application.application_pb2.InvalidInputError',
            ],
        }


    def add_to_server(self, server: IMPORT_grpc.aio.Server) -> None:
        rbt.cloud.v1alpha1.application.application_pb2_grpc.add_ApplicationMethodsServicer_to_server(
            self, server
        )

    async def inspect(self, state_ref: IMPORT_reboot_aio_types.StateRef) -> IMPORT_typing.AsyncIterator[IMPORT_google_protobuf_message.Message]:
        """Implementation of `Middleware.inspect()`."""
        context = self.create_context(
            headers=IMPORT_reboot_aio_headers.Headers(
                application_id=self.application_id,
                state_ref=state_ref,
            ),
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            context_type=IMPORT_reboot_aio_contexts.ReaderContext,
        )

        async with self._state_manager.streaming_reader_idempotency_key(
            context,
            self._servicer.__state_type__,
            authorize=None,
        ) as states:
            async for (state, idempotency_key) in states:
                yield state

    async def react_query(
        self,
        headers: IMPORT_reboot_aio_headers.Headers,
        method: str,
        request_bytes: bytes,
    ) -> IMPORT_typing.AsyncIterator[tuple[IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message], list[IMPORT_uuid.UUID]]]:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes' for each state
        update that creates a different response.

        # The caller (react.py) should have already ensured that this consensus
        # is authoritative for this traffic.
        assert self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        ) == self._consensus_id

        NOTE: only unary reader methods are supported."""
        # Need to define these up here since we can only do that once.
        last_response: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
        aggregated_idempotency_keys: list[IMPORT_uuid.UUID] = []
        if method == 'Create':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        elif method == 'Up':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        elif method == 'UpTask':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        elif method == 'Down':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        elif method == 'DownTask':
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
        else:
            logger.warning(
                "Got a React query request with an invalid method name: "
                "Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )
            yield  # Unreachable but necessary for mypy.

    async def react_mutate(
        self,
        headers: IMPORT_reboot_aio_headers.Headers,
        method: str,
        request_bytes: bytes,
    ) -> IMPORT_google_protobuf_message.Message:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes'."""
        if method == 'Create':
            request = rbt.cloud.v1alpha1.application.application_pb2.CreateRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `IMPORT_grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = IMPORT_reboot_aio_backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the state), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = rbt.cloud.v1alpha1.application.application_pb2_grpc.ApplicationMethodsStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.state_ref,
                        )
                    )
                )
                call = stub.Create(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await IMPORT_rpc_status_async.from_call(call)
                    if status is not None:
                        raise Application.CreateAborted.from_status(
                            status
                        ) from None
                    raise Application.CreateAborted.from_grpc_aio_rpc_error(
                        error
                     ) from None

        elif method == 'Up':
            request = rbt.cloud.v1alpha1.application.application_pb2.UpRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `IMPORT_grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = IMPORT_reboot_aio_backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the state), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = rbt.cloud.v1alpha1.application.application_pb2_grpc.ApplicationMethodsStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.state_ref,
                        )
                    )
                )
                call = stub.Up(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await IMPORT_rpc_status_async.from_call(call)
                    if status is not None:
                        raise Application.UpAborted.from_status(
                            status
                        ) from None
                    raise Application.UpAborted.from_grpc_aio_rpc_error(
                        error
                     ) from None

        elif method == 'UpTask':
            request = rbt.cloud.v1alpha1.application.application_pb2.UpRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `IMPORT_grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = IMPORT_reboot_aio_backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the state), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = rbt.cloud.v1alpha1.application.application_pb2_grpc.ApplicationMethodsStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.state_ref,
                        )
                    )
                )
                call = stub.UpTask(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await IMPORT_rpc_status_async.from_call(call)
                    if status is not None:
                        raise Application.UpTaskAborted.from_status(
                            status
                        ) from None
                    raise Application.UpTaskAborted.from_grpc_aio_rpc_error(
                        error
                     ) from None

        elif method == 'Down':
            request = rbt.cloud.v1alpha1.application.application_pb2.DownRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `IMPORT_grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = IMPORT_reboot_aio_backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the state), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = rbt.cloud.v1alpha1.application.application_pb2_grpc.ApplicationMethodsStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.state_ref,
                        )
                    )
                )
                call = stub.Down(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await IMPORT_rpc_status_async.from_call(call)
                    if status is not None:
                        raise Application.DownAborted.from_status(
                            status
                        ) from None
                    raise Application.DownAborted.from_grpc_aio_rpc_error(
                        error
                     ) from None

        elif method == 'DownTask':
            request = rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `IMPORT_grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = IMPORT_reboot_aio_backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the state), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = rbt.cloud.v1alpha1.application.application_pb2_grpc.ApplicationMethodsStub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.state_ref,
                        )
                    )
                )
                call = stub.DownTask(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await IMPORT_rpc_status_async.from_call(call)
                    if status is not None:
                        raise Application.DownTaskAborted.from_status(
                            status
                        ) from None
                    raise Application.DownTaskAborted.from_grpc_aio_rpc_error(
                        error
                     ) from None

        else:
            logger.warning(
                "Got a react mutate request with an invalid method name: "
                "Method '{method}' is invalid for servicer Application."
                "\n"
                "Do you have an old browser tab still open for an older version "
                "of this application, or a different application all together?"
            )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )

    async def dispatch(
        self,
        task: IMPORT_reboot_aio_tasks.TaskEffect,
        *,
        only_validate: bool = False,
    ) -> IMPORT_reboot_aio_internals_tasks_dispatcher.TaskResponseOrError:
        """Dispatches the tasks to execute unless 'only_validate' is set to
        true, in which case just ensures that the task actually exists.
        Note that this function will be called *by* tasks_dispatcher; it will
        not itself call into tasks_dispatcher."""

        if 'Create' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return rbt.cloud.v1alpha1.application.application_pb2.CreateResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            async def run_Create(
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    self.tasks_dispatcher.set_complete_task(complete)

                    try:
                        response = await (ApplicationWorkflowStub(
                            context=context,
                            state_ref=context._state_ref,
                        ).Create(
                            IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.CreateRequest, task.request),
                            bearer_token=__internal_magic_token__,
                            idempotency=IMPORT_reboot_aio_idempotency.Idempotency(
                                alias=f'Task {task.task_id.task_uuid}',
                            ),
                        ))

                        await complete(task, (response, None))
                        return (response, None)

                    except IMPORT_asyncio.CancelledError:
                        # Check if the task was cancelled by a TasksServicer.
                        if self.tasks_dispatcher.is_task_cancelled(task.task_id.task_uuid):
                            # The running task was cancelled by a TasksServicer.
                            await complete(task, (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError()))
                            return (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError())
                        else:
                            raise
                    except IMPORT_reboot.aio.aborted.Aborted as aborted:
                        error_type = f'{aborted.error.__class__.__module__}.{aborted.error.__class__.__qualname__}'
                        # Do not retry a task if the error was specified in the
                        # proto file.
                        if error_type in self._specified_errors_by_service_method_name.get('rbt.cloud.v1alpha1.application.ApplicationMethods.Create', []):
                            await complete(task, (None, aborted.error))
                            return (None, aborted.error)
                        raise


            return await run_Create(
                self.create_context(
                    headers=IMPORT_reboot_aio_headers.Headers(
                        application_id=self.application_id,
                        state_ref=IMPORT_reboot_aio_types.StateRef(task.task_id.state_ref),
                    ),
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WorkflowContext,
                    task=task,
                )
            )
        elif 'Up' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return rbt.cloud.v1alpha1.application.application_pb2.UpResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            async def run_Up(
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    self.tasks_dispatcher.set_complete_task(complete)

                    try:
                        response = await (ApplicationWorkflowStub(
                            context=context,
                            state_ref=context._state_ref,
                        ).Up(
                            IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.UpRequest, task.request),
                            bearer_token=__internal_magic_token__,
                            idempotency=IMPORT_reboot_aio_idempotency.Idempotency(
                                alias=f'Task {task.task_id.task_uuid}',
                            ),
                        ))

                        await complete(task, (response, None))
                        return (response, None)

                    except IMPORT_asyncio.CancelledError:
                        # Check if the task was cancelled by a TasksServicer.
                        if self.tasks_dispatcher.is_task_cancelled(task.task_id.task_uuid):
                            # The running task was cancelled by a TasksServicer.
                            await complete(task, (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError()))
                            return (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError())
                        else:
                            raise
                    except IMPORT_reboot.aio.aborted.Aborted as aborted:
                        error_type = f'{aborted.error.__class__.__module__}.{aborted.error.__class__.__qualname__}'
                        # Do not retry a task if the error was specified in the
                        # proto file.
                        if error_type in self._specified_errors_by_service_method_name.get('rbt.cloud.v1alpha1.application.ApplicationMethods.Up', []):
                            await complete(task, (None, aborted.error))
                            return (None, aborted.error)
                        raise


            return await run_Up(
                self.create_context(
                    headers=IMPORT_reboot_aio_headers.Headers(
                        application_id=self.application_id,
                        state_ref=IMPORT_reboot_aio_types.StateRef(task.task_id.state_ref),
                    ),
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WorkflowContext,
                    task=task,
                )
            )
        elif 'UpTask' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            async def run_UpTask(
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    self.tasks_dispatcher.set_complete_task(complete)

                    try:
                        response = await (ApplicationWorkflowStub(
                            context=context,
                            state_ref=context._state_ref,
                        ).UpTask(
                            IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.UpRequest, task.request),
                            bearer_token=__internal_magic_token__,
                            idempotency=IMPORT_reboot_aio_idempotency.Idempotency(
                                alias=f'Task {task.task_id.task_uuid}',
                            ),
                        ))

                        await complete(task, (response, None))
                        return (response, None)

                    except IMPORT_asyncio.CancelledError:
                        # Check if the task was cancelled by a TasksServicer.
                        if self.tasks_dispatcher.is_task_cancelled(task.task_id.task_uuid):
                            # The running task was cancelled by a TasksServicer.
                            await complete(task, (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError()))
                            return (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError())
                        else:
                            raise
                    except IMPORT_reboot.aio.aborted.Aborted as aborted:
                        error_type = f'{aborted.error.__class__.__module__}.{aborted.error.__class__.__qualname__}'
                        # Do not retry a task if the error was specified in the
                        # proto file.
                        if error_type in self._specified_errors_by_service_method_name.get('rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask', []):
                            await complete(task, (None, aborted.error))
                            return (None, aborted.error)
                        raise


            return await run_UpTask(
                self.create_context(
                    headers=IMPORT_reboot_aio_headers.Headers(
                        application_id=self.application_id,
                        state_ref=IMPORT_reboot_aio_types.StateRef(task.task_id.state_ref),
                    ),
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WorkflowContext,
                    task=task,
                )
            )
        elif 'Down' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return rbt.cloud.v1alpha1.application.application_pb2.DownResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            async def run_Down(
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    self.tasks_dispatcher.set_complete_task(complete)

                    try:
                        response = await (ApplicationWorkflowStub(
                            context=context,
                            state_ref=context._state_ref,
                        ).Down(
                            IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.DownRequest, task.request),
                            bearer_token=__internal_magic_token__,
                            idempotency=IMPORT_reboot_aio_idempotency.Idempotency(
                                alias=f'Task {task.task_id.task_uuid}',
                            ),
                        ))

                        await complete(task, (response, None))
                        return (response, None)

                    except IMPORT_asyncio.CancelledError:
                        # Check if the task was cancelled by a TasksServicer.
                        if self.tasks_dispatcher.is_task_cancelled(task.task_id.task_uuid):
                            # The running task was cancelled by a TasksServicer.
                            await complete(task, (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError()))
                            return (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError())
                        else:
                            raise
                    except IMPORT_reboot.aio.aborted.Aborted as aborted:
                        error_type = f'{aborted.error.__class__.__module__}.{aborted.error.__class__.__qualname__}'
                        # Do not retry a task if the error was specified in the
                        # proto file.
                        if error_type in self._specified_errors_by_service_method_name.get('rbt.cloud.v1alpha1.application.ApplicationMethods.Down', []):
                            await complete(task, (None, aborted.error))
                            return (None, aborted.error)
                        raise


            return await run_Down(
                self.create_context(
                    headers=IMPORT_reboot_aio_headers.Headers(
                        application_id=self.application_id,
                        state_ref=IMPORT_reboot_aio_types.StateRef(task.task_id.state_ref),
                    ),
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WorkflowContext,
                    task=task,
                )
            )
        elif 'DownTask' == task.method_name:
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            async def run_DownTask(
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    self.tasks_dispatcher.set_complete_task(complete)

                    try:
                        response = await (ApplicationWorkflowStub(
                            context=context,
                            state_ref=context._state_ref,
                        ).DownTask(
                            IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest, task.request),
                            bearer_token=__internal_magic_token__,
                            idempotency=IMPORT_reboot_aio_idempotency.Idempotency(
                                alias=f'Task {task.task_id.task_uuid}',
                            ),
                        ))

                        await complete(task, (response, None))
                        return (response, None)

                    except IMPORT_asyncio.CancelledError:
                        # Check if the task was cancelled by a TasksServicer.
                        if self.tasks_dispatcher.is_task_cancelled(task.task_id.task_uuid):
                            # The running task was cancelled by a TasksServicer.
                            await complete(task, (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError()))
                            return (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError())
                        else:
                            raise
                    except IMPORT_reboot.aio.aborted.Aborted as aborted:
                        error_type = f'{aborted.error.__class__.__module__}.{aborted.error.__class__.__qualname__}'
                        # Do not retry a task if the error was specified in the
                        # proto file.
                        if error_type in self._specified_errors_by_service_method_name.get('rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask', []):
                            await complete(task, (None, aborted.error))
                            return (None, aborted.error)
                        raise


            return await run_DownTask(
                self.create_context(
                    headers=IMPORT_reboot_aio_headers.Headers(
                        application_id=self.application_id,
                        state_ref=IMPORT_reboot_aio_types.StateRef(task.task_id.state_ref),
                    ),
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WorkflowContext,
                    task=task,
                )
            )

        # There are no tasks for this service.
        start_or_validate = "start" if not only_validate else "validate"
        raise RuntimeError(
            f"Attempted to {start_or_validate} task '{task.method_name}' "
            f"on 'Application' which does not exist"
        )

    # Application specific methods:
    async def __Create(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        *,
        validating_effects: bool,
    ) -> Application.CreateEffects:
        try:
            response = (
                await self._servicer.Create(
                    context=context,
                    state=state,
                    request=request
                )
            )
            IMPORT_reboot_aio_types.assert_type(
                response,
                [
                    rbt.cloud.v1alpha1.application.application_pb2.CreateResponse,
                ],
            )
            # TODO: retrying a control loop might cause an effect
            # validation retry to either "hang" or "do more
            # work". It's not clear that this is always a bug, i.e.,
            # the intent of effect validation for a `workflow` method
            # is to ensure it can handle a failure and the developer
            # might have written the code to handle failures and still
            # run into the "hang" or "do more work" due to effect
            # validation. So for now, we don't bother doing effect
            # validation for loops since we'll be re-running it again.
            if not isinstance(response, IMPORT_reboot_aio_tasks.Loop):
                self.maybe_raise_effect_validation_retry(
                    logger=logger,
                    idempotency_manager=context,
                    method_name='Application.Create',
                    validating_effects=validating_effects,
                    context=context,
                )
            return Application.CreateEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except IMPORT_reboot_aio_contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except IMPORT_reboot_aio_contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except IMPORT_reboot.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `reboot/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: IMPORT_typing.Optional[type] = None
            aborted_type = Application.CreateAborted
            if isinstance(aborted, IMPORT_reboot.aio.aborted.SystemAborted):
                # Not logging when within `node` as we already log there.
                if not NODEJS:
                    logger.warning(
                        f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(IMPORT_traceback.format_exception(aborted))
                    )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    # Not logging when within `node` as we already log there.
                    if not NODEJS:
                        logger.warning(
                            f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(IMPORT_traceback.format_exception(aborted))
                        )
                    raise IMPORT_reboot.aio.aborted.SystemAborted(
                        IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {aborted}"
                    )

            raise
        except IMPORT_asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            # Not logging when within `node` as we already log there.
            if not NODEJS:
                logger.warning(
                    f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(IMPORT_traceback.format_exception(exception))
                )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Create') {type(exception).__name__}: {exception}"
            )

    @IMPORT_reboot_aio_tracing.function_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    async def _Create(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: IMPORT_typing.Optional[IMPORT_grpc.aio.ServicerContext] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = rbt.cloud.v1alpha1.application.application_pb2.CreateResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.Create',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                transaction=transaction,
                from_constructor=True,
                requires_constructor=True,
            ) as (state, writer):

                effects = await self.__Create(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await writer.complete(effects)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_Create(
        self,
        *,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        headers: IMPORT_reboot_aio_headers.Headers,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> tuple[IMPORT_reboot_aio_contexts.WriterContext, rbt.cloud.v1alpha1.application.application_pb2.CreateResponse]:
        context: IMPORT_reboot_aio_contexts.WriterContext = self.create_context(
            headers=headers,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            context_type=IMPORT_reboot_aio_contexts.WriterContext,
        )
        response = rbt.cloud.v1alpha1.application.application_pb2.CreateResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        IMPORT_reboot_aio_headers.TASK_ID_UUID,
                        str(IMPORT_uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )

            # Try to verify the token if a token verifier exists.
            context.auth = await self._maybe_verify_token(headers)

            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                transaction=transaction,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.Create',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor=True,
                requires_constructor=True
            ) as (state, writer):

                task = ApplicationServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ).Create(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = IMPORT_reboot_aio_state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                await writer.complete(effects)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            IMPORT_reboot_aio_headers.TASK_ID_UUID,
                            str(IMPORT_uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def Create(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
        headers = IMPORT_reboot_aio_headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Fail.
            await grpc_context.abort(
                IMPORT_grpc.StatusCode.UNAVAILABLE,
                f"Consensus '{self.consensus_id}' is not authoritative for this "
                f"request; consensus '{authoritative_consensus}' is.",
            )
            raise  # Unreachable but necessary for mypy.

        @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
            context: IMPORT_typing.Optional[IMPORT_reboot_aio_contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_Create(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WriterContext,
                )
                assert context is not None

                return await self._Create(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except IMPORT_reboot_aio_contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except IMPORT_reboot.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    IMPORT_rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except IMPORT_asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except BaseException as exception:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(IMPORT_traceback.format_exc() if not NODEJS else [f"{type(exception).__name__}: {exception}"])
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    async def __Up(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        *,
        validating_effects: bool,
    ) -> Application.UpEffects:
        try:
            response = (
                await self._servicer.Up(
                    context=context,
                    state=state,
                    request=request
                )
            )
            IMPORT_reboot_aio_types.assert_type(
                response,
                [
                    rbt.cloud.v1alpha1.application.application_pb2.UpResponse,
                ],
            )
            # TODO: retrying a control loop might cause an effect
            # validation retry to either "hang" or "do more
            # work". It's not clear that this is always a bug, i.e.,
            # the intent of effect validation for a `workflow` method
            # is to ensure it can handle a failure and the developer
            # might have written the code to handle failures and still
            # run into the "hang" or "do more work" due to effect
            # validation. So for now, we don't bother doing effect
            # validation for loops since we'll be re-running it again.
            if not isinstance(response, IMPORT_reboot_aio_tasks.Loop):
                self.maybe_raise_effect_validation_retry(
                    logger=logger,
                    idempotency_manager=context,
                    method_name='Application.Up',
                    validating_effects=validating_effects,
                    context=context,
                )
            return Application.UpEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except IMPORT_reboot_aio_contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except IMPORT_reboot_aio_contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except IMPORT_reboot.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `reboot/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: IMPORT_typing.Optional[type] = None
            aborted_type = Application.UpAborted
            if isinstance(aborted, IMPORT_reboot.aio.aborted.SystemAborted):
                # Not logging when within `node` as we already log there.
                if not NODEJS:
                    logger.warning(
                        f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(IMPORT_traceback.format_exception(aborted))
                    )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    # Not logging when within `node` as we already log there.
                    if not NODEJS:
                        logger.warning(
                            f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(IMPORT_traceback.format_exception(aborted))
                        )
                    raise IMPORT_reboot.aio.aborted.SystemAborted(
                        IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {aborted}"
                    )

            raise
        except IMPORT_asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            # Not logging when within `node` as we already log there.
            if not NODEJS:
                logger.warning(
                    f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(IMPORT_traceback.format_exception(exception))
                )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Up') {type(exception).__name__}: {exception}"
            )

    @IMPORT_reboot_aio_tracing.function_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    async def _Up(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: IMPORT_typing.Optional[IMPORT_grpc.aio.ServicerContext] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = rbt.cloud.v1alpha1.application.application_pb2.UpResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.Up',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                transaction=transaction,
                from_constructor=False,
                requires_constructor=True,
            ) as (state, writer):

                effects = await self.__Up(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await writer.complete(effects)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_Up(
        self,
        *,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        headers: IMPORT_reboot_aio_headers.Headers,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> tuple[IMPORT_reboot_aio_contexts.WriterContext, rbt.cloud.v1alpha1.application.application_pb2.UpResponse]:
        context: IMPORT_reboot_aio_contexts.WriterContext = self.create_context(
            headers=headers,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            context_type=IMPORT_reboot_aio_contexts.WriterContext,
        )
        response = rbt.cloud.v1alpha1.application.application_pb2.UpResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        IMPORT_reboot_aio_headers.TASK_ID_UUID,
                        str(IMPORT_uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )

            # Try to verify the token if a token verifier exists.
            context.auth = await self._maybe_verify_token(headers)

            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                transaction=transaction,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.Up',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor=False,
                requires_constructor=True
            ) as (state, writer):

                task = ApplicationServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ).Up(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = IMPORT_reboot_aio_state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                await writer.complete(effects)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            IMPORT_reboot_aio_headers.TASK_ID_UUID,
                            str(IMPORT_uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def Up(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
        headers = IMPORT_reboot_aio_headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Fail.
            await grpc_context.abort(
                IMPORT_grpc.StatusCode.UNAVAILABLE,
                f"Consensus '{self.consensus_id}' is not authoritative for this "
                f"request; consensus '{authoritative_consensus}' is.",
            )
            raise  # Unreachable but necessary for mypy.

        @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
            context: IMPORT_typing.Optional[IMPORT_reboot_aio_contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_Up(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WriterContext,
                )
                assert context is not None

                return await self._Up(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except IMPORT_reboot_aio_contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except IMPORT_reboot.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    IMPORT_rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except IMPORT_asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except BaseException as exception:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(IMPORT_traceback.format_exc() if not NODEJS else [f"{type(exception).__name__}: {exception}"])
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    async def __UpTask(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        *,
        validating_effects: bool,
    ) -> Application.UpTaskEffects:
        try:
            response = (
                await self._servicer.UpTask(
                    context=context,
                    state=state,
                    request=request
                )
            )
            IMPORT_reboot_aio_types.assert_type(
                response,
                [
                    rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse,
                ],
            )
            # TODO: retrying a control loop might cause an effect
            # validation retry to either "hang" or "do more
            # work". It's not clear that this is always a bug, i.e.,
            # the intent of effect validation for a `workflow` method
            # is to ensure it can handle a failure and the developer
            # might have written the code to handle failures and still
            # run into the "hang" or "do more work" due to effect
            # validation. So for now, we don't bother doing effect
            # validation for loops since we'll be re-running it again.
            if not isinstance(response, IMPORT_reboot_aio_tasks.Loop):
                self.maybe_raise_effect_validation_retry(
                    logger=logger,
                    idempotency_manager=context,
                    method_name='Application.UpTask',
                    validating_effects=validating_effects,
                    context=context,
                )
            return Application.UpTaskEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except IMPORT_reboot_aio_contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except IMPORT_reboot_aio_contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except IMPORT_reboot.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `reboot/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: IMPORT_typing.Optional[type] = None
            aborted_type = Application.UpTaskAborted
            if isinstance(aborted, IMPORT_reboot.aio.aborted.SystemAborted):
                # Not logging when within `node` as we already log there.
                if not NODEJS:
                    logger.warning(
                        f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(IMPORT_traceback.format_exception(aborted))
                    )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    # Not logging when within `node` as we already log there.
                    if not NODEJS:
                        logger.warning(
                            f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(IMPORT_traceback.format_exception(aborted))
                        )
                    raise IMPORT_reboot.aio.aborted.SystemAborted(
                        IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {aborted}"
                    )

            raise
        except IMPORT_asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            # Not logging when within `node` as we already log there.
            if not NODEJS:
                logger.warning(
                    f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(IMPORT_traceback.format_exception(exception))
                )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.UpTask') {type(exception).__name__}: {exception}"
            )

    @IMPORT_reboot_aio_tracing.function_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    async def _UpTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: IMPORT_typing.Optional[IMPORT_grpc.aio.ServicerContext] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                transaction=transaction,
                from_constructor=False,
                requires_constructor=True,
            ) as (state, writer):

                effects = await self.__UpTask(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await writer.complete(effects)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_UpTask(
        self,
        *,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        headers: IMPORT_reboot_aio_headers.Headers,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> tuple[IMPORT_reboot_aio_contexts.WriterContext, rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse]:
        context: IMPORT_reboot_aio_contexts.WriterContext = self.create_context(
            headers=headers,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            context_type=IMPORT_reboot_aio_contexts.WriterContext,
        )
        response = rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        IMPORT_reboot_aio_headers.TASK_ID_UUID,
                        str(IMPORT_uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )

            # Try to verify the token if a token verifier exists.
            context.auth = await self._maybe_verify_token(headers)

            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                transaction=transaction,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor=False,
                requires_constructor=True
            ) as (state, writer):

                task = ApplicationServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ).UpTask(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = IMPORT_reboot_aio_state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                await writer.complete(effects)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            IMPORT_reboot_aio_headers.TASK_ID_UUID,
                            str(IMPORT_uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def UpTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
        headers = IMPORT_reboot_aio_headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Fail.
            await grpc_context.abort(
                IMPORT_grpc.StatusCode.UNAVAILABLE,
                f"Consensus '{self.consensus_id}' is not authoritative for this "
                f"request; consensus '{authoritative_consensus}' is.",
            )
            raise  # Unreachable but necessary for mypy.

        @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
            context: IMPORT_typing.Optional[IMPORT_reboot_aio_contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_UpTask(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WriterContext,
                )
                assert context is not None

                return await self._UpTask(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except IMPORT_reboot_aio_contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except IMPORT_reboot.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    IMPORT_rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except IMPORT_asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except BaseException as exception:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(IMPORT_traceback.format_exc() if not NODEJS else [f"{type(exception).__name__}: {exception}"])
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    async def __Down(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        *,
        validating_effects: bool,
    ) -> Application.DownEffects:
        try:
            response = (
                await self._servicer.Down(
                    context=context,
                    state=state,
                    request=request
                )
            )
            IMPORT_reboot_aio_types.assert_type(
                response,
                [
                    rbt.cloud.v1alpha1.application.application_pb2.DownResponse,
                ],
            )
            # TODO: retrying a control loop might cause an effect
            # validation retry to either "hang" or "do more
            # work". It's not clear that this is always a bug, i.e.,
            # the intent of effect validation for a `workflow` method
            # is to ensure it can handle a failure and the developer
            # might have written the code to handle failures and still
            # run into the "hang" or "do more work" due to effect
            # validation. So for now, we don't bother doing effect
            # validation for loops since we'll be re-running it again.
            if not isinstance(response, IMPORT_reboot_aio_tasks.Loop):
                self.maybe_raise_effect_validation_retry(
                    logger=logger,
                    idempotency_manager=context,
                    method_name='Application.Down',
                    validating_effects=validating_effects,
                    context=context,
                )
            return Application.DownEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except IMPORT_reboot_aio_contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except IMPORT_reboot_aio_contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except IMPORT_reboot.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `reboot/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: IMPORT_typing.Optional[type] = None
            aborted_type = Application.DownAborted
            if isinstance(aborted, IMPORT_reboot.aio.aborted.SystemAborted):
                # Not logging when within `node` as we already log there.
                if not NODEJS:
                    logger.warning(
                        f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(IMPORT_traceback.format_exception(aborted))
                    )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    # Not logging when within `node` as we already log there.
                    if not NODEJS:
                        logger.warning(
                            f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(IMPORT_traceback.format_exception(aborted))
                        )
                    raise IMPORT_reboot.aio.aborted.SystemAborted(
                        IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {aborted}"
                    )

            raise
        except IMPORT_asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            # Not logging when within `node` as we already log there.
            if not NODEJS:
                logger.warning(
                    f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(IMPORT_traceback.format_exception(exception))
                )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.Down') {type(exception).__name__}: {exception}"
            )

    @IMPORT_reboot_aio_tracing.function_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    async def _Down(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: IMPORT_typing.Optional[IMPORT_grpc.aio.ServicerContext] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = rbt.cloud.v1alpha1.application.application_pb2.DownResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.Down',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                transaction=transaction,
                from_constructor=False,
                requires_constructor=True,
            ) as (state, writer):

                effects = await self.__Down(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await writer.complete(effects)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_Down(
        self,
        *,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        headers: IMPORT_reboot_aio_headers.Headers,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> tuple[IMPORT_reboot_aio_contexts.WriterContext, rbt.cloud.v1alpha1.application.application_pb2.DownResponse]:
        context: IMPORT_reboot_aio_contexts.WriterContext = self.create_context(
            headers=headers,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            context_type=IMPORT_reboot_aio_contexts.WriterContext,
        )
        response = rbt.cloud.v1alpha1.application.application_pb2.DownResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        IMPORT_reboot_aio_headers.TASK_ID_UUID,
                        str(IMPORT_uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )

            # Try to verify the token if a token verifier exists.
            context.auth = await self._maybe_verify_token(headers)

            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                transaction=transaction,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.Down',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor=False,
                requires_constructor=True
            ) as (state, writer):

                task = ApplicationServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ).Down(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = IMPORT_reboot_aio_state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                await writer.complete(effects)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            IMPORT_reboot_aio_headers.TASK_ID_UUID,
                            str(IMPORT_uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def Down(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
        headers = IMPORT_reboot_aio_headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Fail.
            await grpc_context.abort(
                IMPORT_grpc.StatusCode.UNAVAILABLE,
                f"Consensus '{self.consensus_id}' is not authoritative for this "
                f"request; consensus '{authoritative_consensus}' is.",
            )
            raise  # Unreachable but necessary for mypy.

        @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
            context: IMPORT_typing.Optional[IMPORT_reboot_aio_contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_Down(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WriterContext,
                )
                assert context is not None

                return await self._Down(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except IMPORT_reboot_aio_contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except IMPORT_reboot.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    IMPORT_rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except IMPORT_asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except BaseException as exception:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(IMPORT_traceback.format_exc() if not NODEJS else [f"{type(exception).__name__}: {exception}"])
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    async def __DownTask(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        *,
        validating_effects: bool,
    ) -> Application.DownTaskEffects:
        try:
            response = (
                await self._servicer.DownTask(
                    context=context,
                    state=state,
                    request=request
                )
            )
            IMPORT_reboot_aio_types.assert_type(
                response,
                [
                    rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse,
                ],
            )
            # TODO: retrying a control loop might cause an effect
            # validation retry to either "hang" or "do more
            # work". It's not clear that this is always a bug, i.e.,
            # the intent of effect validation for a `workflow` method
            # is to ensure it can handle a failure and the developer
            # might have written the code to handle failures and still
            # run into the "hang" or "do more work" due to effect
            # validation. So for now, we don't bother doing effect
            # validation for loops since we'll be re-running it again.
            if not isinstance(response, IMPORT_reboot_aio_tasks.Loop):
                self.maybe_raise_effect_validation_retry(
                    logger=logger,
                    idempotency_manager=context,
                    method_name='Application.DownTask',
                    validating_effects=validating_effects,
                    context=context,
                )
            return Application.DownTaskEffects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
        except IMPORT_reboot_aio_contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except IMPORT_reboot_aio_contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except IMPORT_reboot.aio.aborted.Aborted as aborted:
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `reboot/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: IMPORT_typing.Optional[type] = None
            aborted_type = Application.DownTaskAborted
            if isinstance(aborted, IMPORT_reboot.aio.aborted.SystemAborted):
                # Not logging when within `node` as we already log there.
                if not NODEJS:
                    logger.warning(
                        f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(IMPORT_traceback.format_exception(aborted))
                    )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    # Not logging when within `node` as we already log there.
                    if not NODEJS:
                        logger.warning(
                            f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(IMPORT_traceback.format_exception(aborted))
                        )
                    raise IMPORT_reboot.aio.aborted.SystemAborted(
                        IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {aborted}"
                    )

            raise
        except IMPORT_asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except BaseException as exception:
            # Not logging when within `node` as we already log there.
            if not NODEJS:
                logger.warning(
                    f"Unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(IMPORT_traceback.format_exception(exception))
                )
            raise IMPORT_reboot.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in 'rbt.cloud.v1alpha1.application.Application.DownTask') {type(exception).__name__}: {exception}"
            )

    @IMPORT_reboot_aio_tracing.function_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    async def _DownTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        validating_effects: bool,
        grpc_context: IMPORT_typing.Optional[IMPORT_grpc.aio.ServicerContext] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse()
            response.ParseFromString(idempotent_mutation.response)
            return response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                transaction=transaction,
                from_constructor=False,
                requires_constructor=True,
            ) as (state, writer):

                effects = await self.__DownTask(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await writer.complete(effects)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]

    async def _schedule_DownTask(
        self,
        *,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        headers: IMPORT_reboot_aio_headers.Headers,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> tuple[IMPORT_reboot_aio_contexts.WriterContext, rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse]:
        context: IMPORT_reboot_aio_contexts.WriterContext = self.create_context(
            headers=headers,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            context_type=IMPORT_reboot_aio_contexts.WriterContext,
        )
        response = rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse()

        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        IMPORT_reboot_aio_headers.TASK_ID_UUID,
                        str(IMPORT_uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )

            # Try to verify the token if a token verifier exists.
            context.auth = await self._maybe_verify_token(headers)

            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                transaction=transaction,
                authorize=self._maybe_authorize(
                    method_name='rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor=False,
                requires_constructor=True
            ) as (state, writer):

                task = ApplicationServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ).DownTask(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = IMPORT_reboot_aio_state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                await writer.complete(effects)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            IMPORT_reboot_aio_headers.TASK_ID_UUID,
                            str(IMPORT_uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    async def DownTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
        headers = IMPORT_reboot_aio_headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Fail.
            await grpc_context.abort(
                IMPORT_grpc.StatusCode.UNAVAILABLE,
                f"Consensus '{self.consensus_id}' is not authoritative for this "
                f"request; consensus '{authoritative_consensus}' is.",
            )
            raise  # Unreachable but necessary for mypy.

        @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
        async def _run(
            validating_effects: bool,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
            context: IMPORT_typing.Optional[IMPORT_reboot_aio_contexts.Context] = None
            try:
                if headers.task_schedule is not None:
                    context, response = await self._schedule_DownTask(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response

                context = self.create_context(
                    headers=headers,
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    context_type=IMPORT_reboot_aio_contexts.WriterContext,
                )
                assert context is not None

                return await self._DownTask(
                    request,
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
            except IMPORT_reboot_aio_contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except IMPORT_reboot.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    IMPORT_rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except IMPORT_asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except BaseException as exception:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(IMPORT_traceback.format_exc() if not NODEJS else [f"{type(exception).__name__}: {exception}"])
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        return await _run()

    def _maybe_authorize(
        self,
        *,
        method_name: str,
        headers: IMPORT_reboot_aio_headers.Headers,
        auth: IMPORT_typing.Optional[IMPORT_reboot.aio.auth.Auth],
        request: IMPORT_typing.Optional[ApplicationRequestTypes] = None,
    ) -> IMPORT_typing.Optional[IMPORT_typing.Callable[[IMPORT_typing.Optional[ApplicationStateType]], IMPORT_typing.Awaitable[None]]]:
        """Returns a function to check authorization for the given method.

        Raises `PermissionDenied` in case Authorizer is present but the request
        is not authorized.
        """
        # To authorize internal calls, we use an internal magic token.
        if headers.bearer_token == __internal_magic_token__:
            return None

        if self._authorizer is None:
            return None

        async def authorize(state: IMPORT_typing.Optional[ApplicationStateType]) -> None:
            # Mypy does not know (and technically neither do we!) that the
            # authorizer property is immutable.
            assert self._authorizer is not None

            # Create context for the authorizer. This is a `ReaderContext`
            # independently of the calling context.
            with self.use_context(
                headers=(
                    # Get headers suitable for doing authorization.
                    headers.copy_for_token_verification_and_authorization()
                ),
                state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                context_type=IMPORT_reboot_aio_contexts.ReaderContext,
            ) as context:
                context.auth = auth

                # Get the authorizer decision.
                authorization_decision = await self._authorizer.authorize(
                    method_name=method_name,
                    context=context,
                    state=state,
                    request=request,
                )

            # Enforce correct authorizer decision type.
            try:
                IMPORT_reboot_aio_types.assert_type(
                    authorization_decision,
                    [
                        IMPORT_rbt_v1alpha1.errors_pb2.Ok,
                        IMPORT_rbt_v1alpha1.errors_pb2.Unauthenticated,
                        IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied,
                    ]
                )
            except TypeError as e:
                # Retyping.cast the exception to provide more context.
                authorizer_type = f"{type(self._authorizer).__module__}.{type(self._authorizer).__name__}"
                raise TypeError(
                    f"Authorizer '{authorizer_type}' "
                    f"returned unexpected type '{type(authorization_decision).__name__}' "
                    f"for method '{method_name}' on "
                    f"`rbt.cloud.v1alpha1.application.Application('{headers.state_ref.id}')`"
                ) from e

            # If the decision is not `True`, raise a `SystemAborted` with either a
            # `PermissionDenied` error (in case of `False`) or an `Unauthenticated`
            # error.
            if not isinstance(authorization_decision, IMPORT_rbt_v1alpha1.errors_pb2.Ok):
                if isinstance(authorization_decision, IMPORT_rbt_v1alpha1.errors_pb2.Unauthenticated):
                    logger.warning(
                        f"Unauthenticated call to '{method_name}' on "
                        f"`rbt.cloud.v1alpha1.application.Application('{headers.state_ref.id}')`"
                    )

                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    authorization_decision,
                    message=
                    f"You are not authorized to call '{method_name}' on "
                    f"`rbt.cloud.v1alpha1.application.Application('{headers.state_ref.id}')`"
                )

        return authorize

    async def _maybe_verify_token(self, headers: IMPORT_reboot_aio_headers.Headers) -> IMPORT_typing.Optional[IMPORT_reboot.aio.auth.Auth]:
        """Verify the bearer token and if a token verifier is present.

        Returns the (optional) `reboot.aio.auth.Auth` object
        produced by the token verifier if the token can be verified.
        """
        auth: IMPORT_typing.Optional[IMPORT_reboot.aio.auth.Auth] = None

        if self._token_verifier is not None and headers.bearer_token is not None:
            if headers.bearer_token == __internal_magic_token__:
                return auth

            with self.use_context(
                headers=(
                    # Get headers suitable for doing token verification.
                    headers.copy_for_token_verification_and_authorization()
                ),
                state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                context_type=IMPORT_reboot_aio_contexts.ReaderContext,
            ) as context:
                auth = await self._token_verifier.verify_token(
                    context=context,
                    token=headers.bearer_token,
                )

        return auth


############################ Client Stubs ############################
# This section is relevant for clients accessing a Reboot service. Since
# servicers are themselves often clients also, this code is generated for
# them also.


class _ApplicationStub(IMPORT_reboot_aio_stubs.Stub):

    __state_type_name__ = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application')

    def __init__(
        self,
        *,
        context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        # ISSUE(https://github.com/reboot-dev/mono/issues/2258) For
        # now we do not explicitly pass on the bearer token unless it
        # is from an `ExternalContext`, as it might have security
        # implications to just pass on the token to any service we are
        # calling.
        if isinstance(context, IMPORT_reboot_aio_external.ExternalContext):
            bearer_token = context.bearer_token

        super().__init__(
            channel_manager=context.channel_manager,
            idempotency_manager=context,
            state_ref=state_ref,
            context=context if isinstance(context, IMPORT_reboot_aio_contexts.Context) else None,
            bearer_token=bearer_token,
        )

        # All the channels for all services of this state will go to the same
        # place, so we can just get a single channel and share it across all
        # stubs.
        channel = self._channel_manager.get_channel_to_state(
            self.__state_type_name__, state_ref
        )
        self._rbt_cloud_v1alpha1_application_applicationmethods_stub = rbt.cloud.v1alpha1.application.application_pb2_grpc.ApplicationMethodsStub(channel)


class ApplicationReaderStub(_ApplicationStub):

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.ReaderContext, IMPORT_reboot_aio_contexts.WriterContext, IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # Application specific methods:







class ApplicationWriterStub(_ApplicationStub):

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # Application specific methods:
    async def Create(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Create',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Create',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Create,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.CreateResponse,
                aborted_type=Application.CreateAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def Up(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Up',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Up',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Up,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.UpResponse,
                aborted_type=Application.UpAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def UpTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='UpTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'UpTask',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.UpTask,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse,
                aborted_type=Application.UpTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def Down(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Down',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Down',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Down,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.DownResponse,
                aborted_type=Application.DownAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def DownTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='DownTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'DownTask',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.DownTask,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse,
                aborted_type=Application.DownTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call


class ApplicationWorkflowStub(_ApplicationStub):

    def __init__(
        self,
        *,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # Application specific methods:
    async def Create(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Create',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Create',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Create,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.CreateResponse,
                aborted_type=Application.CreateAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def Up(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Up',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Up',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Up,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.UpResponse,
                aborted_type=Application.UpAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def UpTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='UpTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'UpTask',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.UpTask,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse,
                aborted_type=Application.UpTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def Down(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Down',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Down',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Down,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.DownResponse,
                aborted_type=Application.DownAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call

    async def DownTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='DownTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'DownTask',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.DownTask,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse,
                aborted_type=Application.DownTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call



class ApplicationTasksStub(_ApplicationStub):

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # Application specific methods:
    async def Up(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Up',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Up',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Up,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.UpResponse,
                aborted_type=Application.UpAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == IMPORT_reboot_aio_headers.TASK_ID_UUID:
                        return IMPORT_rbt_v1alpha1.tasks_pb2.TaskId(
                            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                            state_ref=self._headers.state_ref.to_str(),
                            task_uuid=IMPORT_uuid.UUID(value).bytes,
                        )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )
    async def UpTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='UpTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'UpTask',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.UpTask,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse,
                aborted_type=Application.UpTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == IMPORT_reboot_aio_headers.TASK_ID_UUID:
                        return IMPORT_rbt_v1alpha1.tasks_pb2.TaskId(
                            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                            state_ref=self._headers.state_ref.to_str(),
                            task_uuid=IMPORT_uuid.UUID(value).bytes,
                        )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )
    async def Down(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='Down',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'Down',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.Down,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.DownResponse,
                aborted_type=Application.DownAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == IMPORT_reboot_aio_headers.TASK_ID_UUID:
                        return IMPORT_rbt_v1alpha1.tasks_pb2.TaskId(
                            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                            state_ref=self._headers.state_ref.to_str(),
                            task_uuid=IMPORT_uuid.UUID(value).bytes,
                        )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )
    async def DownTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
            method='DownTask',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                'DownTask',
                self._rbt_cloud_v1alpha1_application_applicationmethods_stub.DownTask,
                request,
                unary=True,
                reader=False,
                response_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse,
                aborted_type=Application.DownTaskAborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[attr-defined]
                    if key == IMPORT_reboot_aio_headers.TASK_ID_UUID:
                        return IMPORT_rbt_v1alpha1.tasks_pb2.TaskId(
                            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                            state_ref=self._headers.state_ref.to_str(),
                            task_uuid=IMPORT_uuid.UUID(value).bytes,
                        )
                raise IMPORT_reboot.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )


class ApplicationServicerTasksStub(_ApplicationStub):

    _context: IMPORT_reboot_aio_contexts.WriterContext

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.WriterContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

        self._context = context

    # Application specific methods:
    def Create(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
        *,
        schedule: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
    ) -> IMPORT_reboot_aio_tasks.TaskEffect:
        task = IMPORT_reboot_aio_tasks.TaskEffect(
            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            method_name='Create',
            request=request,
            schedule=(IMPORT_datetime_datetime.now() + schedule) if isinstance(
                schedule, IMPORT_datetime_timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task

    def Up(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        *,
        schedule: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
    ) -> IMPORT_reboot_aio_tasks.TaskEffect:
        task = IMPORT_reboot_aio_tasks.TaskEffect(
            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            method_name='Up',
            request=request,
            schedule=(IMPORT_datetime_datetime.now() + schedule) if isinstance(
                schedule, IMPORT_datetime_timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task

    def UpTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
        *,
        schedule: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
    ) -> IMPORT_reboot_aio_tasks.TaskEffect:
        task = IMPORT_reboot_aio_tasks.TaskEffect(
            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            method_name='UpTask',
            request=request,
            schedule=(IMPORT_datetime_datetime.now() + schedule) if isinstance(
                schedule, IMPORT_datetime_timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task

    def Down(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
        *,
        schedule: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
    ) -> IMPORT_reboot_aio_tasks.TaskEffect:
        task = IMPORT_reboot_aio_tasks.TaskEffect(
            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            method_name='Down',
            request=request,
            schedule=(IMPORT_datetime_datetime.now() + schedule) if isinstance(
                schedule, IMPORT_datetime_timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task

    def DownTask(
        self,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
        *,
        schedule: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
    ) -> IMPORT_reboot_aio_tasks.TaskEffect:
        task = IMPORT_reboot_aio_tasks.TaskEffect(
            state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
            state_ref=self._headers.state_ref,
            method_name='DownTask',
            request=request,
            schedule=(IMPORT_datetime_datetime.now() + schedule) if isinstance(
                schedule, IMPORT_datetime_timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task



############################ Authorizers ############################
# Relevant to servicers; irrelevant to clients.

ApplicationStateType: IMPORT_typing.TypeAlias = rbt.cloud.v1alpha1.application.application_pb2.Application
ApplicationRequestTypes: IMPORT_typing.TypeAlias = \
        rbt.cloud.v1alpha1.application.application_pb2.CreateRequest \
        | rbt.cloud.v1alpha1.application.application_pb2.UpRequest \
        | rbt.cloud.v1alpha1.application.application_pb2.DownRequest \
        | rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest

class ApplicationAuthorizer(
    IMPORT_reboot.aio.auth.authorizers.Authorizer[ApplicationStateType, ApplicationRequestTypes],
):
    StateType: IMPORT_typing.TypeAlias = ApplicationStateType
    RequestTypes: IMPORT_typing.TypeAlias = ApplicationRequestTypes

    async def authorize(
        self,
        *,
        method_name: str,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        state: IMPORT_typing.Optional[ApplicationStateType] = None,
        request: IMPORT_typing.Optional[ApplicationRequestTypes] = None,
    ) -> IMPORT_reboot.aio.auth.authorizers.Authorizer.Decision:
        if method_name == 'rbt.cloud.v1alpha1.application.ApplicationMethods.Create':
            return await self.Create(
                context,
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.CreateRequest, request),
            )
        elif method_name == 'rbt.cloud.v1alpha1.application.ApplicationMethods.Up':
            return await self.Up(
                context,
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.Application, state),
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.UpRequest, request),
            )
        elif method_name == 'rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask':
            return await self.UpTask(
                context,
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.Application, state),
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.UpRequest, request),
            )
        elif method_name == 'rbt.cloud.v1alpha1.application.ApplicationMethods.Down':
            return await self.Down(
                context,
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.Application, state),
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.DownRequest, request),
            )
        elif method_name == 'rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask':
            return await self.DownTask(
                context,
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.Application, state),
                IMPORT_typing.cast(rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest, request),
            )
        else:
            return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Create'.
    async def Create(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
    ) -> IMPORT_reboot.aio.auth.authorizers.Authorizer.Decision:
        return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Up'.
    async def Up(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
    ) -> IMPORT_reboot.aio.auth.authorizers.Authorizer.Decision:
        return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask'.
    async def UpTask(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
    ) -> IMPORT_reboot.aio.auth.authorizers.Authorizer.Decision:
        return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Down'.
    async def Down(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
    ) -> IMPORT_reboot.aio.auth.authorizers.Authorizer.Decision:
        return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask'.
    async def DownTask(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
    ) -> IMPORT_reboot.aio.auth.authorizers.Authorizer.Decision:
        return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()



############################ Reboot Servicers ############################
# Base classes for server-side implementations of Reboot servicers.
# Irrelevant to clients.

class ApplicationServicer(IMPORT_reboot_aio_servicers.Servicer):
    Authorizer: IMPORT_typing.TypeAlias = ApplicationAuthorizer

    __service_names__ = [
        IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
    ]
    __state_type_name__ = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application')
    __state_type__ = rbt.cloud.v1alpha1.application.application_pb2.Application
    __file_descriptor__ = rbt.cloud.v1alpha1.application.application_pb2.DESCRIPTOR

    def __init__(self):
        super().__init__()
        # NOTE: need to hold on to the middleware so we can do inline
        # writes (see 'self.write(...)').
        #
        # Because '_middleware' is not really private this does mean
        # users may do possibly dangerous things, but this is no more
        # likely given they could have already overridden
        # 'create_middleware()'.
        self._middleware: IMPORT_typing.Optional[ApplicationServicerMiddleware] = None

    def create_middleware(
        self,
        *,
        application_id: IMPORT_reboot_aio_types.ApplicationId,
        consensus_id: IMPORT_reboot_aio_types.ConsensusId,
        state_manager: IMPORT_reboot_aio_state_managers.StateManager,
        placement_client: IMPORT_reboot_aio_placement.PlacementClient,
        channel_manager: IMPORT_reboot_aio_internals_channel_manager._ChannelManager,
        tasks_cache: IMPORT_reboot_aio_internals_tasks_cache.TasksCache,
        token_verifier: IMPORT_typing.Optional[IMPORT_reboot.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: IMPORT_reboot_aio_contexts.EffectValidation,
        app_internal_api_key_secret: str,
        ready: IMPORT_asyncio.Event,
    ) -> ApplicationServicerMiddleware:
        self._middleware = ApplicationServicerMiddleware(
            servicer=self,
            application_id=application_id,
            consensus_id=consensus_id,
            state_manager=state_manager,
            placement_client=placement_client,
            channel_manager=channel_manager,
            tasks_cache=tasks_cache,
            token_verifier=token_verifier,
            effect_validation=effect_validation,
            app_internal_api_key_secret=app_internal_api_key_secret,
            ready=ready,
        )
        return self._middleware

    def authorizer(self) -> IMPORT_typing.Optional[IMPORT_reboot.aio.auth.authorizers.Authorizer]:
        return None

    def token_verifier(self) -> IMPORT_typing.Optional[IMPORT_reboot.aio.auth.token_verifiers.TokenVerifier]:
        return None

    def lookup(
        self,
        *,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> Application.WeakReference[Application.WeakReference._WriterSchedule]:
        # TODO(benh): it's still possible that the `bearer_token` from
        # the context will not be sufficient for making a
        # call/schedule due to a user defined authorizer; consider
        # creating a "per middleware" bearer token that always works
        # for calls from `self.lookup()`.
        context = IMPORT_reboot_aio_contexts.Context.get()

        if context is None:
            raise RuntimeError(
                'Missing asyncio context variable `context`; '
                'are you using this class without Reboot?'
            )

        return Application.WeakReference(
            # TODO(https://github.com/reboot-dev/mono/issues/3226): add support for calling other applications.
            # For now this always stays within the application that creates the context.
            application_id=None,
            state_id=context._state_ref.id,
            schedule_type=Application.WeakReference._WriterSchedule,
            bearer_token=bearer_token or context.bearer_token,
        )

    class Effects(IMPORT_reboot_aio_state_managers.Effects):
        def __init__(
            self,
            *,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application,
            response: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [rbt.cloud.v1alpha1.application.application_pb2.Application])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Create'.
    class CreateEffects(Effects):
        def __init__(
            self,
            *,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application,
            response: rbt.cloud.v1alpha1.application.application_pb2.CreateResponse,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [rbt.cloud.v1alpha1.application.application_pb2.Application])
            IMPORT_reboot_aio_types.assert_type(response, [rbt.cloud.v1alpha1.application.application_pb2.CreateResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)


    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Up'.
    class UpEffects(Effects):
        def __init__(
            self,
            *,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application,
            response: rbt.cloud.v1alpha1.application.application_pb2.UpResponse,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [rbt.cloud.v1alpha1.application.application_pb2.Application])
            IMPORT_reboot_aio_types.assert_type(response, [rbt.cloud.v1alpha1.application.application_pb2.UpResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)


    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask'.
    class UpTaskEffects(Effects):
        def __init__(
            self,
            *,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application,
            response: rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [rbt.cloud.v1alpha1.application.application_pb2.Application])
            IMPORT_reboot_aio_types.assert_type(response, [rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)


    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Down'.
    class DownEffects(Effects):
        def __init__(
            self,
            *,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application,
            response: rbt.cloud.v1alpha1.application.application_pb2.DownResponse,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [rbt.cloud.v1alpha1.application.application_pb2.Application])
            IMPORT_reboot_aio_types.assert_type(response, [rbt.cloud.v1alpha1.application.application_pb2.DownResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)


    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask'.
    class DownTaskEffects(Effects):
        def __init__(
            self,
            *,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application,
            response: rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [rbt.cloud.v1alpha1.application.application_pb2.Application])
            IMPORT_reboot_aio_types.assert_type(response, [rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)



    InlineWriterCallableResult = IMPORT_typing.TypeVar('InlineWriterCallableResult', covariant=True)

    class InlineWriterCallable(IMPORT_typing.Protocol[InlineWriterCallableResult]):
        async def __call__(
            self,
            state: rbt.cloud.v1alpha1.application.application_pb2.Application
        ) -> ApplicationServicer.InlineWriterCallableResult:
            ...

    class _State:

        def __init__(
            self,
            servicer,
        ):
            self._servicer = servicer

        async def read(
            self, context: IMPORT_reboot_aio_contexts.WorkflowContext
        ) -> rbt.cloud.v1alpha1.application.application_pb2.Application:
            """Read the current state within a workflow."""

            IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.WorkflowContext])

            if self._servicer._middleware is None:
                raise RuntimeError(
                    'Reboot middleware was not created; '
                    'are you using this class without Reboot?'
                )

            return await self._servicer._middleware._state_manager.read(
                context, self._servicer.__state_type__
            )

        @IMPORT_typing.overload
        async def write(
            self,
            idempotency_alias: str,
            context: IMPORT_reboot_aio_contexts.WorkflowContext,
            writer: ApplicationServicer.InlineWriterCallable[None],
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            *,
            type: type = type(None),
        ) -> None:
            ...

        @IMPORT_typing.overload
        async def write(
            self,
            idempotency_alias: str,
            context: IMPORT_reboot_aio_contexts.WorkflowContext,
            writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            *,
            type: type[ApplicationServicer.InlineWriterCallableResult],
        ) -> ApplicationServicer.InlineWriterCallableResult:
            ...

        async def write(
            self,
            idempotency_alias: str,
            context: IMPORT_reboot_aio_contexts.WorkflowContext,
            writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            *,
            type: type = type(None),
        ) -> ApplicationServicer.InlineWriterCallableResult:
            """Perform an "inline write" within a workflow."""
            return await self.idempotently(idempotency_alias).write(
                context, writer, __options__, type=type
            )

        class _Idempotently:

            def __init__(
                self,
                *,
                servicer: ApplicationServicer,
                idempotency: IMPORT_reboot_aio_idempotency.Idempotency,
            ):
                self._servicer = servicer
                self._idempotency = idempotency

            @IMPORT_typing.overload
            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: ApplicationServicer.InlineWriterCallable[None],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type: type = type(None),
                check_type: bool = True,
            ) -> None:
                ...

            @IMPORT_typing.overload
            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type: type[ApplicationServicer.InlineWriterCallableResult],
                check_type: bool = True,
            ) -> ApplicationServicer.InlineWriterCallableResult:
                ...

            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type: type = type(None),
                check_type: bool = True,
            ) -> ApplicationServicer.InlineWriterCallableResult:
                return await self._write(
                    context,
                    writer,
                    __options__,
                    type_result=type,
                    check_type=check_type,
                    unidempotently=False,
                )

            async def _write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type_result: type,
                check_type: bool,
                unidempotently: bool,
            ) -> ApplicationServicer.InlineWriterCallableResult:
                return await self._write_validating_effects(
                    self._servicer,
                    self._idempotency,
                    context,
                    writer,
                    __options__,
                    type_result=type_result,
                    check_type=check_type,
                    unidempotently=unidempotently,
                )

            @staticmethod
            @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
            async def _write_validating_effects(
                validating_effects: bool,
                servicer: ApplicationServicer,
                idempotency: IMPORT_reboot_aio_idempotency.Idempotency,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type_result: type,
                check_type: bool,
                unidempotently: bool,
            ) -> ApplicationServicer.InlineWriterCallableResult:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                assert not idempotency.generate, (
                    "Inline writers are always required to specify either an "
                    "idempotency alias or an idempotency key"
                )

                IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.WorkflowContext])

                if servicer._middleware is None:
                    raise RuntimeError(
                        'Reboot middleware was not created; '
                        'are you using this class without Reboot?'
                    )

                metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None

                if __options__ is not None:
                    if __options__.metadata is not None:
                        metadata = __options__.metadata

                if metadata is None:
                    metadata = ()

                headers = IMPORT_reboot_aio_headers.Headers(
                    application_id=context.application_id,
                    state_ref=context._state_ref,
                )

                metadata += headers.to_grpc_metadata()

                idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
                with context.idempotently(
                    state_type_name=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    state_ref=context._state_ref,
                    service_name=None,  # Indicates an inline writer.
                    method=None,  # Indicates an inline writer.
                    request=None,
                    metadata=metadata,
                    idempotency=idempotency,
                ) as idempotency_key:

                    if any(t[0] == IMPORT_reboot_aio_headers.IDEMPOTENCY_KEY_HEADER for t in metadata):
                        raise ValueError(
                            f"Do not set '{IMPORT_reboot_aio_headers.IDEMPOTENCY_KEY_HEADER}' metadata yourself"
                        )

                    if idempotency_key is not None:
                        metadata += (
                            (IMPORT_reboot_aio_headers.IDEMPOTENCY_KEY_HEADER, str(idempotency_key)),
                        )

                    with servicer._middleware.use_context(
                        headers=IMPORT_reboot_aio_headers.Headers.from_grpc_metadata(metadata),
                        state_type_name = IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                        context_type=IMPORT_reboot_aio_contexts.WriterContext,
                    ) as writer_context:
                        # Check if we already have performed this mutation!
                        #
                        # We do this _before_ calling 'transactionally()' because
                        # if this call is for a transaction method _and_ we've
                        # already performed the transaction then we don't want to
                        # become a transaction participant (again) we just want to
                        # return the transaction's response.
                        idempotent_mutation = (
                            servicer._middleware._state_manager.check_for_idempotent_mutation(
                                writer_context
                            )
                        )

                        if idempotent_mutation is not None:
                            assert len(idempotent_mutation.response) != 0
                            response = IMPORT_google_protobuf_wrappers_pb2.BytesValue()
                            response.ParseFromString(idempotent_mutation.response)
                            result: ApplicationServicer.InlineWriterCallableResult = IMPORT_pickle.loads(response.value)

                            if check_type and type(result) is not type_result:
                                raise TypeError(
                                    f"Stored result of type '{type(result).__name__}' from 'writer' "
                                    f"is not of expected type '{type_result.__name__}'; have you changed "
                                    "the 'type' that you expect after having stored a result?"
                                )

                            return result

                        async with servicer._middleware._state_manager.transactionally(
                            writer_context, servicer._middleware.tasks_dispatcher
                        ) as transaction:
                            async with servicer._middleware._state_manager.writer(
                                writer_context,
                                servicer.__state_type__,
                                servicer._middleware.tasks_dispatcher,
                                # TODO: Decide if we want to do any kind of authorization for inline
                                # writers otherwise passing `None` here is fine.
                                authorize=None,
                                transaction=transaction,
                            ) as (state, state_manager_writer):
                                result = await writer(state=state)

                                if check_type and type(result) is not type_result:
                                    raise TypeError(
                                        f"Result of type '{type(result).__name__}' from 'writer' is "
                                        f"not of expected type '{type_result.__name__}'; "
                                        "did you specify an incorrect 'type'?"
                                    )

                                effects = ApplicationServicer.Effects(
                                    state=state,
                                    tasks=context._tasks,
                                    response=IMPORT_google_protobuf_wrappers_pb2.BytesValue(
                                        value=IMPORT_pickle.dumps(result)
                                    ),
                                )

                                task: IMPORT_typing.Optional[IMPORT_reboot_aio_tasks.TaskEffect] = context.task

                                assert task is not None, (
                                    "Should always have a task when running a `workflow`"
                                )

                                method_name = f"Application.{task.method_name} "

                                if unidempotently:
                                    method_name += "unidempotent inline writer"
                                elif idempotency.alias is not None:
                                    method_name += "inline writer with idempotency alias '" + idempotency.alias + "'"
                                else:
                                    assert idempotency.key is not None
                                    method_name += "inline writer with idempotency key=" + str(idempotency.key)

                                servicer._middleware.maybe_raise_effect_validation_retry(
                                    logger=logger,
                                    idempotency_manager=context,
                                    method_name=method_name,
                                    validating_effects=validating_effects,
                                    context=context,
                                )

                                await state_manager_writer.complete(effects)

                                return result

        @IMPORT_typing.overload
        def idempotently(self, alias: str, *, each_iteration: bool = False) -> ApplicationServicer._State._Idempotently:
            ...

        @IMPORT_typing.overload
        def idempotently(self, *, key: IMPORT_uuid.UUID) -> ApplicationServicer._State._Idempotently:
            ...

        def idempotently(
            self,
            alias: IMPORT_typing.Optional[str] = None,
            *,
            key: IMPORT_typing.Optional[IMPORT_uuid.UUID] = None,
            each_iteration: IMPORT_typing.Optional[bool] = None,
        ) -> ApplicationServicer._State._Idempotently:
            if alias is None and key is None:
                raise ValueError(
                    'Inline writers require either an idempotency alias or key'
                )
            return ApplicationServicer._State._Idempotently(
                servicer=self._servicer,
                idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                    key=key, alias=alias, each_iteration=each_iteration
                ),
            )

        class _Unidempotently:

            def __init__(
                self,
                *,
                servicer: ApplicationServicer,
            ):
                self._servicer = servicer

            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: ApplicationServicer.InlineWriterCallable[ApplicationServicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            ) -> ApplicationServicer.InlineWriterCallableResult:
                return await ApplicationServicer._State._Idempotently(
                    servicer=self._servicer,
                    idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                        key=IMPORT_uuid.uuid4()
                    ),
                )._write(
                    context,
                    writer,
                    __options__,
                    type_result=type(None),
                    check_type=False,
                    unidempotently=True,
                )

        def unidempotently(self):
            return ApplicationServicer._State._Unidempotently(
                servicer=self._servicer,
            )

    @property
    def state(self):
        return ApplicationServicer._State(
            servicer=self
        )

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Create'.
    @IMPORT_abc_abstractmethod
    async def Create(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
        raise NotImplementedError

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Up'.
    @IMPORT_abc_abstractmethod
    async def Up(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
        raise NotImplementedError

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.UpTask'.
    @IMPORT_abc_abstractmethod
    async def UpTask(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
        raise NotImplementedError

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.Down'.
    @IMPORT_abc_abstractmethod
    async def Down(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
        raise NotImplementedError

    # For 'rbt.cloud.v1alpha1.application.ApplicationMethods.DownTask'.
    @IMPORT_abc_abstractmethod
    async def DownTask(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
        raise NotImplementedError



############################ Clients ############################
# The main developer-facing entrypoints for any Reboot type. Relevant to both
# clients and servicers (who use it to find the right servicer base types, as well
# as often being clients themselves).

Application_ScheduleTypeVar = IMPORT_typing.TypeVar('Application_ScheduleTypeVar', 'Application.WeakReference._Schedule', 'Application.WeakReference._WriterSchedule')
Application_IdempotentlyScheduleTypeVar = IMPORT_typing.TypeVar('Application_IdempotentlyScheduleTypeVar', 'Application.WeakReference._Schedule', 'Application.WeakReference._WriterSchedule')

class Application:

    Servicer: IMPORT_typing.TypeAlias = ApplicationServicer

    Effects: IMPORT_typing.TypeAlias = ApplicationServicer.Effects

    Authorizer: IMPORT_typing.TypeAlias = ApplicationAuthorizer

    State: IMPORT_typing.TypeAlias = rbt.cloud.v1alpha1.application.application_pb2.Application

    __state_type_name__ = IMPORT_reboot_aio_types.StateTypeName("rbt.cloud.v1alpha1.application.Application")

    class CreateFuture:
        """Represents a future corresponding to a task running for the
        state. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ) -> None:
            # Depending on the context type (inside or outside a Reboot application)
            # we may or may not know the application ID. If we don't know it, then
            # the `ExternalContext.gateway` will determine it.
            #
            # TODO: in the future we expect to support cross-application calls, in
            #       which case the developer may explicitly pass in an application ID
            #       here.
            self._application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId] = None
            if isinstance(context, IMPORT_reboot_aio_contexts.Context):
                self._application_id = context.application_id
            self._channel_manager = context.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> IMPORT_typing.Generator[None, None, rbt.cloud.v1alpha1.application.application_pb2.CreateResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
                channel = self._channel_manager.get_channel_to_state(
                    self._task_id.state_type,
                    IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                )

                stub = IMPORT_rbt_v1alpha1.tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        IMPORT_rbt_v1alpha1.tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=IMPORT_reboot_aio_headers.Headers(
                            state_ref=IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                            application_id=self._application_id,
                        ).to_grpc_metadata(),
                    )
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.NOT_FOUND:
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise IMPORT_reboot.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response_or_error: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
                    is_error = False

                    if wait_for_task_response.response_or_error.WhichOneof("response_or_error") == "response":
                        response_or_error = wait_for_task_response.response_or_error.response
                    else:
                        is_error = True
                        response_or_error = wait_for_task_response.response_or_error.error

                    response = rbt.cloud.v1alpha1.application.application_pb2.CreateResponse()
                    if (
                        not is_error and response_or_error.TypeName() != response.DESCRIPTOR.full_name
                    ):
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(IMPORT_uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{response_or_error.TypeName()}' "
                            "but expecting type 'rbt.cloud.v1alpha1.application.application_pb2.CreateResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    if is_error:
                        # Currently only cancelled error is supported.
                        raise IMPORT_asyncio.CancelledError("Task was cancelled by a TasksServicer")
                    else:
                        response_or_error.Unpack(response)
                        return response

            return wait_for_task().__await__()

    CreateEffects: IMPORT_typing.TypeAlias = Servicer.CreateEffects

    class CreateAborted(IMPORT_reboot.aio.aborted.Aborted):


        Error = IMPORT_typing.Union[
            IMPORT_reboot.aio.aborted.GrpcError,
            IMPORT_reboot.aio.aborted.RebootError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.REBOOT_ERROR_TYPES
        )

        _error: Error
        _code: IMPORT_grpc.StatusCode
        _message: IMPORT_typing.Optional[str]

        def __init__(
            self,
            error:  IMPORT_reboot.aio.aborted.GrpcError,
            *,
            message: IMPORT_typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            IMPORT_reboot_aio_types.assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Reboot specific or declared method error.
                code = IMPORT_grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> IMPORT_grpc.StatusCode:
            return self._code

        @property
        def message(self) -> IMPORT_typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: IMPORT_google_rpc_status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: IMPORT_grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: IMPORT_google_protobuf_message.Message) -> bool:
            return False

    class UpFuture:
        """Represents a future corresponding to a task running for the
        state. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ) -> None:
            # Depending on the context type (inside or outside a Reboot application)
            # we may or may not know the application ID. If we don't know it, then
            # the `ExternalContext.gateway` will determine it.
            #
            # TODO: in the future we expect to support cross-application calls, in
            #       which case the developer may explicitly pass in an application ID
            #       here.
            self._application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId] = None
            if isinstance(context, IMPORT_reboot_aio_contexts.Context):
                self._application_id = context.application_id
            self._channel_manager = context.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> IMPORT_typing.Generator[None, None, rbt.cloud.v1alpha1.application.application_pb2.UpResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
                channel = self._channel_manager.get_channel_to_state(
                    self._task_id.state_type,
                    IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                )

                stub = IMPORT_rbt_v1alpha1.tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        IMPORT_rbt_v1alpha1.tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=IMPORT_reboot_aio_headers.Headers(
                            state_ref=IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                            application_id=self._application_id,
                        ).to_grpc_metadata(),
                    )
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.NOT_FOUND:
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise IMPORT_reboot.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response_or_error: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
                    is_error = False

                    if wait_for_task_response.response_or_error.WhichOneof("response_or_error") == "response":
                        response_or_error = wait_for_task_response.response_or_error.response
                    else:
                        is_error = True
                        response_or_error = wait_for_task_response.response_or_error.error

                    response = rbt.cloud.v1alpha1.application.application_pb2.UpResponse()
                    if (
                        not is_error and response_or_error.TypeName() != response.DESCRIPTOR.full_name
                    ):
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(IMPORT_uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{response_or_error.TypeName()}' "
                            "but expecting type 'rbt.cloud.v1alpha1.application.application_pb2.UpResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    if is_error:
                        # Currently only cancelled error is supported.
                        raise IMPORT_asyncio.CancelledError("Task was cancelled by a TasksServicer")
                    else:
                        response_or_error.Unpack(response)
                        return response

            return wait_for_task().__await__()

    UpEffects: IMPORT_typing.TypeAlias = Servicer.UpEffects

    class UpAborted(IMPORT_reboot.aio.aborted.Aborted):

        MethodError = IMPORT_typing.Union[
            rbt.cloud.v1alpha1.application.application_pb2.InvalidInputError        ]

        Error = IMPORT_typing.Union[
            MethodError,
            IMPORT_reboot.aio.aborted.GrpcError,
            IMPORT_reboot.aio.aborted.RebootError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
            rbt.cloud.v1alpha1.application.application_pb2.InvalidInputError        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.REBOOT_ERROR_TYPES
        )

        _error: Error
        _code: IMPORT_grpc.StatusCode
        _message: IMPORT_typing.Optional[str]

        def __init__(
            self,
            error: MethodError |  IMPORT_reboot.aio.aborted.GrpcError,
            *,
            message: IMPORT_typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            IMPORT_reboot_aio_types.assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Reboot specific or declared method error.
                code = IMPORT_grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> IMPORT_grpc.StatusCode:
            return self._code

        @property
        def message(self) -> IMPORT_typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: IMPORT_google_rpc_status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: IMPORT_grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: IMPORT_google_protobuf_message.Message) -> bool:
            if message.DESCRIPTOR.full_name == 'rbt.cloud.v1alpha1.application.InvalidInputError':
                return True
            return False

    class UpTaskFuture:
        """Represents a future corresponding to a task running for the
        state. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ) -> None:
            # Depending on the context type (inside or outside a Reboot application)
            # we may or may not know the application ID. If we don't know it, then
            # the `ExternalContext.gateway` will determine it.
            #
            # TODO: in the future we expect to support cross-application calls, in
            #       which case the developer may explicitly pass in an application ID
            #       here.
            self._application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId] = None
            if isinstance(context, IMPORT_reboot_aio_contexts.Context):
                self._application_id = context.application_id
            self._channel_manager = context.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> IMPORT_typing.Generator[None, None, rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
                channel = self._channel_manager.get_channel_to_state(
                    self._task_id.state_type,
                    IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                )

                stub = IMPORT_rbt_v1alpha1.tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        IMPORT_rbt_v1alpha1.tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=IMPORT_reboot_aio_headers.Headers(
                            state_ref=IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                            application_id=self._application_id,
                        ).to_grpc_metadata(),
                    )
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.NOT_FOUND:
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise IMPORT_reboot.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response_or_error: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
                    is_error = False

                    if wait_for_task_response.response_or_error.WhichOneof("response_or_error") == "response":
                        response_or_error = wait_for_task_response.response_or_error.response
                    else:
                        is_error = True
                        response_or_error = wait_for_task_response.response_or_error.error

                    response = rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse()
                    if (
                        not is_error and response_or_error.TypeName() != response.DESCRIPTOR.full_name
                    ):
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(IMPORT_uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{response_or_error.TypeName()}' "
                            "but expecting type 'rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    if is_error:
                        # Currently only cancelled error is supported.
                        raise IMPORT_asyncio.CancelledError("Task was cancelled by a TasksServicer")
                    else:
                        response_or_error.Unpack(response)
                        return response

            return wait_for_task().__await__()

    UpTaskEffects: IMPORT_typing.TypeAlias = Servicer.UpTaskEffects

    class UpTaskAborted(IMPORT_reboot.aio.aborted.Aborted):


        Error = IMPORT_typing.Union[
            IMPORT_reboot.aio.aborted.GrpcError,
            IMPORT_reboot.aio.aborted.RebootError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.REBOOT_ERROR_TYPES
        )

        _error: Error
        _code: IMPORT_grpc.StatusCode
        _message: IMPORT_typing.Optional[str]

        def __init__(
            self,
            error:  IMPORT_reboot.aio.aborted.GrpcError,
            *,
            message: IMPORT_typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            IMPORT_reboot_aio_types.assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Reboot specific or declared method error.
                code = IMPORT_grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> IMPORT_grpc.StatusCode:
            return self._code

        @property
        def message(self) -> IMPORT_typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: IMPORT_google_rpc_status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: IMPORT_grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: IMPORT_google_protobuf_message.Message) -> bool:
            return False

    class DownFuture:
        """Represents a future corresponding to a task running for the
        state. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ) -> None:
            # Depending on the context type (inside or outside a Reboot application)
            # we may or may not know the application ID. If we don't know it, then
            # the `ExternalContext.gateway` will determine it.
            #
            # TODO: in the future we expect to support cross-application calls, in
            #       which case the developer may explicitly pass in an application ID
            #       here.
            self._application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId] = None
            if isinstance(context, IMPORT_reboot_aio_contexts.Context):
                self._application_id = context.application_id
            self._channel_manager = context.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> IMPORT_typing.Generator[None, None, rbt.cloud.v1alpha1.application.application_pb2.DownResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
                channel = self._channel_manager.get_channel_to_state(
                    self._task_id.state_type,
                    IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                )

                stub = IMPORT_rbt_v1alpha1.tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        IMPORT_rbt_v1alpha1.tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=IMPORT_reboot_aio_headers.Headers(
                            state_ref=IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                            application_id=self._application_id,
                        ).to_grpc_metadata(),
                    )
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.NOT_FOUND:
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise IMPORT_reboot.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response_or_error: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
                    is_error = False

                    if wait_for_task_response.response_or_error.WhichOneof("response_or_error") == "response":
                        response_or_error = wait_for_task_response.response_or_error.response
                    else:
                        is_error = True
                        response_or_error = wait_for_task_response.response_or_error.error

                    response = rbt.cloud.v1alpha1.application.application_pb2.DownResponse()
                    if (
                        not is_error and response_or_error.TypeName() != response.DESCRIPTOR.full_name
                    ):
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(IMPORT_uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{response_or_error.TypeName()}' "
                            "but expecting type 'rbt.cloud.v1alpha1.application.application_pb2.DownResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    if is_error:
                        # Currently only cancelled error is supported.
                        raise IMPORT_asyncio.CancelledError("Task was cancelled by a TasksServicer")
                    else:
                        response_or_error.Unpack(response)
                        return response

            return wait_for_task().__await__()

    DownEffects: IMPORT_typing.TypeAlias = Servicer.DownEffects

    class DownAborted(IMPORT_reboot.aio.aborted.Aborted):


        Error = IMPORT_typing.Union[
            IMPORT_reboot.aio.aborted.GrpcError,
            IMPORT_reboot.aio.aborted.RebootError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.REBOOT_ERROR_TYPES
        )

        _error: Error
        _code: IMPORT_grpc.StatusCode
        _message: IMPORT_typing.Optional[str]

        def __init__(
            self,
            error:  IMPORT_reboot.aio.aborted.GrpcError,
            *,
            message: IMPORT_typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            IMPORT_reboot_aio_types.assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Reboot specific or declared method error.
                code = IMPORT_grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> IMPORT_grpc.StatusCode:
            return self._code

        @property
        def message(self) -> IMPORT_typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: IMPORT_google_rpc_status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: IMPORT_grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: IMPORT_google_protobuf_message.Message) -> bool:
            return False

    class DownTaskFuture:
        """Represents a future corresponding to a task running for the
        state. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be) and thus we are just giving you a (distributed)
        future to it.
        """

        def __init__(
            self,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ) -> None:
            # Depending on the context type (inside or outside a Reboot application)
            # we may or may not know the application ID. If we don't know it, then
            # the `ExternalContext.gateway` will determine it.
            #
            # TODO: in the future we expect to support cross-application calls, in
            #       which case the developer may explicitly pass in an application ID
            #       here.
            self._application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId] = None
            if isinstance(context, IMPORT_reboot_aio_contexts.Context):
                self._application_id = context.application_id
            self._channel_manager = context.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> IMPORT_typing.Generator[None, None, rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse]:
            """Awaits for task to finish and returns it's response."""

            async def wait_for_task() -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
                channel = self._channel_manager.get_channel_to_state(
                    self._task_id.state_type,
                    IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                )

                stub = IMPORT_rbt_v1alpha1.tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        IMPORT_rbt_v1alpha1.tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=IMPORT_reboot_aio_headers.Headers(
                            state_ref=IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                            application_id=self._application_id,
                        ).to_grpc_metadata(),
                    )
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.NOT_FOUND:
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise IMPORT_reboot.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response_or_error: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
                    is_error = False

                    if wait_for_task_response.response_or_error.WhichOneof("response_or_error") == "response":
                        response_or_error = wait_for_task_response.response_or_error.response
                    else:
                        is_error = True
                        response_or_error = wait_for_task_response.response_or_error.error

                    response = rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse()
                    if (
                        not is_error and response_or_error.TypeName() != response.DESCRIPTOR.full_name
                    ):
                        raise IMPORT_reboot.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(IMPORT_uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{response_or_error.TypeName()}' "
                            "but expecting type 'rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    if is_error:
                        # Currently only cancelled error is supported.
                        raise IMPORT_asyncio.CancelledError("Task was cancelled by a TasksServicer")
                    else:
                        response_or_error.Unpack(response)
                        return response

            return wait_for_task().__await__()

    DownTaskEffects: IMPORT_typing.TypeAlias = Servicer.DownTaskEffects

    class DownTaskAborted(IMPORT_reboot.aio.aborted.Aborted):


        Error = IMPORT_typing.Union[
            IMPORT_reboot.aio.aborted.GrpcError,
            IMPORT_reboot.aio.aborted.RebootError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES +
            IMPORT_reboot.aio.aborted.REBOOT_ERROR_TYPES
        )

        _error: Error
        _code: IMPORT_grpc.StatusCode
        _message: IMPORT_typing.Optional[str]

        def __init__(
            self,
            error:  IMPORT_reboot.aio.aborted.GrpcError,
            *,
            message: IMPORT_typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + IMPORT_reboot.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            IMPORT_reboot_aio_types.assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Reboot specific or declared method error.
                code = IMPORT_grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> IMPORT_grpc.StatusCode:
            return self._code

        @property
        def message(self) -> IMPORT_typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: IMPORT_google_rpc_status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: IMPORT_grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: IMPORT_google_protobuf_message.Message) -> bool:
            return False


    class WeakReference(IMPORT_typing.Generic[Application_ScheduleTypeVar]):

        _schedule_type: type[Application_ScheduleTypeVar]

        def __init__(
            self,
            # When application ID is None, refers to a state within the application given by the context.
            application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
            state_id: IMPORT_reboot_aio_types.StateId,
            *,
            schedule_type: type[Application_ScheduleTypeVar],
            bearer_token: IMPORT_typing.Optional[str] = None,
        ):
            self._application_id = application_id
            self._state_ref = IMPORT_reboot_aio_types.StateRef.from_id(
              Application.__state_type_name__,
              state_id,
            )
            self._schedule_type = schedule_type
            self._idempotency_manager: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.IdempotencyManager] = None
            self._reader_stub: IMPORT_typing.Optional[ApplicationReaderStub] = None
            self._writer_stub: IMPORT_typing.Optional[ApplicationWriterStub] = None
            self._workflow_stub: IMPORT_typing.Optional[ApplicationWorkflowStub] = None
            self._tasks_stub: IMPORT_typing.Optional[ApplicationTasksStub] = None
            self._bearer_token = bearer_token

        @property
        def state_id(self) -> IMPORT_reboot_aio_types.StateId:
            return self._state_ref.id

        def _reader(
            self,
            context: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> ApplicationReaderStub:
            if self._reader_stub is None:
                self._reader_stub = ApplicationReaderStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._reader_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `Application` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`Application.lookup('{self.state_id}')`."
                )
            return self._reader_stub

        def _writer(
            self,
            context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> ApplicationWriterStub:
            if self._writer_stub is None:
                self._writer_stub = ApplicationWriterStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._writer_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `Application` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`Application.lookup('{self.state_id}')`."
                )
            return self._writer_stub

        def _workflow(
            self,
            context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> ApplicationWorkflowStub:
            if self._workflow_stub is None:
                self._workflow_stub = ApplicationWorkflowStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._workflow_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `Application` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`Application.lookup('{self.state_id}')`."
                )
            return self._workflow_stub

        def _tasks(
            self,
            context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> ApplicationTasksStub:
            if self._tasks_stub is None:
                self._tasks_stub = ApplicationTasksStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._tasks_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `Application` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`Application.lookup('{self.state_id}')`."
                )
            return self._tasks_stub

        class _Reactively:

            def __init__(
                self,
                *,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                state_ref: IMPORT_reboot_aio_types.StateRef,
                bearer_token: IMPORT_typing.Optional[str] = None,
            ):
                self._application_id = application_id
                self._state_ref = state_ref
                self._bearer_token = bearer_token


        def reactively(self):
            return Application.WeakReference._Reactively(
                application_id=self._application_id,
                state_ref=self._state_ref,
                bearer_token=self._bearer_token,
            )

        class _Idempotently(IMPORT_typing.Generic[Application_IdempotentlyScheduleTypeVar]):

            _weak_reference: Application.WeakReference[Application_IdempotentlyScheduleTypeVar]

            def __init__(
                self,
                *,
                weak_reference: Application.WeakReference[Application_IdempotentlyScheduleTypeVar],
                idempotency: IMPORT_reboot_aio_idempotency.Idempotency,
            ):
                self._weak_reference = weak_reference
                self._idempotency = idempotency

            def schedule(
                self,
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
            ) -> Application_IdempotentlyScheduleTypeVar:
                return self._weak_reference._schedule_type(
                    self._weak_reference._application_id,
                    self._weak_reference._tasks,
                    when=when,
                    idempotency=self._idempotency,
                )

            async def Up(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                __options__ = IMPORT_dataclasses.replace(
                    __options__,
                    idempotency_key=__this__._idempotency.key,
                    idempotency_alias=__this__._idempotency.alias,
                    generate_idempotency=__this__._idempotency.generate,
                )

                return await __this__._weak_reference.Up(
                    __context__,
                    __options__,
                    container_image_name=container_image_name,
                )

            async def UpTask(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                __options__ = IMPORT_dataclasses.replace(
                    __options__,
                    idempotency_key=__this__._idempotency.key,
                    idempotency_alias=__this__._idempotency.alias,
                    generate_idempotency=__this__._idempotency.generate,
                )

                return await __this__._weak_reference.UpTask(
                    __context__,
                    __options__,
                    container_image_name=container_image_name,
                )

            async def Down(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)

                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                __options__ = IMPORT_dataclasses.replace(
                    __options__,
                    idempotency_key=__this__._idempotency.key,
                    idempotency_alias=__this__._idempotency.alias,
                    generate_idempotency=__this__._idempotency.generate,
                )

                return await __this__._weak_reference.Down(
                    __context__,
                    __options__,
                )

            async def DownTask(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)

                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                __options__ = IMPORT_dataclasses.replace(
                    __options__,
                    idempotency_key=__this__._idempotency.key,
                    idempotency_alias=__this__._idempotency.alias,
                    generate_idempotency=__this__._idempotency.generate,
                )

                return await __this__._weak_reference.DownTask(
                    __context__,
                    __options__,
                )


        def idempotently(
            self,
            alias: IMPORT_typing.Optional[str] = None,
            *,
            key: IMPORT_typing.Optional[IMPORT_uuid.UUID] = None,
            each_iteration: IMPORT_typing.Optional[bool] = None,
        ) -> Application.WeakReference._Idempotently[Application_ScheduleTypeVar]:
            return Application.WeakReference._Idempotently(
                weak_reference=self,
                idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                    key=key, alias=alias, each_iteration=each_iteration
                )
            )

        def unidempotently(self):
            return self.idempotently(key=IMPORT_uuid.uuid4())

        def schedule(
            self,
            *,
            when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
        ) -> Application_ScheduleTypeVar:
            return self._schedule_type(self._application_id, self._tasks, when=when)

        class _Schedule:

            def __init__(
                self,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                tasks: IMPORT_typing.Callable[[IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext], ApplicationTasksStub],
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
                idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
            ) -> None:
                self._application_id = application_id
                self._tasks = tasks
                self._when = when
                self._idempotency = idempotency

            # Application callable tasks:
            @IMPORT_typing.overload
            async def Up(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                ...

            @IMPORT_typing.overload
            async def Up(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> Application.UpFuture:
                ...

            async def Up(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect | Application.UpFuture:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

                if container_image_name is not None and not isinstance(
                    container_image_name,
                    str,
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'rbt.cloud.v1alpha1.application.application_pb2.UpRequest': field 'container_image_name' is not "
                        f"of required type 'str'"
                    )
                # TODO: mypy-protobuf declares that
                # `IMPORT_google_protobuf_message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.UpRequest(
                    container_image_name=container_image_name,  # type: ignore[arg-type]
                )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).Up(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                if isinstance(__context__, IMPORT_reboot_aio_contexts.TransactionContext):
                    return IMPORT_reboot_aio_tasks.TaskEffect(
                        state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                        state_ref=__context__._state_ref,
                        method_name='Up',
                        request=__request__,
                        task_uuid=__task_id__.task_uuid,
                        schedule=__schedule__,
                    )

                return Application.UpFuture(
                    __context__,
                    task_id=__task_id__,
                )

            @IMPORT_typing.overload
            async def UpTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                ...

            @IMPORT_typing.overload
            async def UpTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> Application.UpTaskFuture:
                ...

            async def UpTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect | Application.UpTaskFuture:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

                if container_image_name is not None and not isinstance(
                    container_image_name,
                    str,
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'rbt.cloud.v1alpha1.application.application_pb2.UpRequest': field 'container_image_name' is not "
                        f"of required type 'str'"
                    )
                # TODO: mypy-protobuf declares that
                # `IMPORT_google_protobuf_message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.UpRequest(
                    container_image_name=container_image_name,  # type: ignore[arg-type]
                )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).UpTask(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                if isinstance(__context__, IMPORT_reboot_aio_contexts.TransactionContext):
                    return IMPORT_reboot_aio_tasks.TaskEffect(
                        state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                        state_ref=__context__._state_ref,
                        method_name='UpTask',
                        request=__request__,
                        task_uuid=__task_id__.task_uuid,
                        schedule=__schedule__,
                    )

                return Application.UpTaskFuture(
                    __context__,
                    task_id=__task_id__,
                )

            @IMPORT_typing.overload
            async def Down(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                ...

            @IMPORT_typing.overload
            async def Down(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> Application.DownFuture:
                ...

            async def Down(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect | Application.DownFuture:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)

                # TODO: mypy-protobuf declares that
                # `IMPORT_google_protobuf_message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.DownRequest(
                )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).Down(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                if isinstance(__context__, IMPORT_reboot_aio_contexts.TransactionContext):
                    return IMPORT_reboot_aio_tasks.TaskEffect(
                        state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                        state_ref=__context__._state_ref,
                        method_name='Down',
                        request=__request__,
                        task_uuid=__task_id__.task_uuid,
                        schedule=__schedule__,
                    )

                return Application.DownFuture(
                    __context__,
                    task_id=__task_id__,
                )

            @IMPORT_typing.overload
            async def DownTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                ...

            @IMPORT_typing.overload
            async def DownTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> Application.DownTaskFuture:
                ...

            async def DownTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect | Application.DownTaskFuture:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)

                # TODO: mypy-protobuf declares that
                # `IMPORT_google_protobuf_message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest(
                )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).DownTask(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                if isinstance(__context__, IMPORT_reboot_aio_contexts.TransactionContext):
                    return IMPORT_reboot_aio_tasks.TaskEffect(
                        state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                        state_ref=__context__._state_ref,
                        method_name='DownTask',
                        request=__request__,
                        task_uuid=__task_id__.task_uuid,
                        schedule=__schedule__,
                    )

                return Application.DownTaskFuture(
                    __context__,
                    task_id=__task_id__,
                )


        class _WriterSchedule:

            def __init__(
                self,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                tasks: IMPORT_typing.Callable[[IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext], ApplicationTasksStub],
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
                idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
            ) -> None:
                self._tasks = tasks
                self._when = when
                self._idempotency = idempotency

            # Application callable tasks:
            async def Up(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

                if container_image_name is not None and not isinstance(
                    container_image_name,
                    str,
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'rbt.cloud.v1alpha1.application.application_pb2.UpRequest': field 'container_image_name' is not "
                        f"of required type 'str'"
                    )
                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.UpRequest(
                    container_image_name=container_image_name,  # type: ignore[arg-type]
                )
                if isinstance(__context__, IMPORT_reboot_aio_contexts.WriterContext):
                    return ApplicationServicerTasksStub(
                        context=__context__,
                        state_ref=__context__._state_ref,
                    ).Up(
                        __request__,
                        schedule=__this__._when,
                    )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency is not None:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).Up(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                return IMPORT_reboot_aio_tasks.TaskEffect(
                    state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    state_ref=__context__._state_ref,
                    method_name='Up',
                    request=__request__,
                    task_uuid=__task_id__.task_uuid,
                    schedule=__schedule__,
                )

            async def UpTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                *,
                container_image_name: IMPORT_typing.Optional[str] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

                if container_image_name is not None and not isinstance(
                    container_image_name,
                    str,
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'rbt.cloud.v1alpha1.application.application_pb2.UpRequest': field 'container_image_name' is not "
                        f"of required type 'str'"
                    )
                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.UpRequest(
                    container_image_name=container_image_name,  # type: ignore[arg-type]
                )
                if isinstance(__context__, IMPORT_reboot_aio_contexts.WriterContext):
                    return ApplicationServicerTasksStub(
                        context=__context__,
                        state_ref=__context__._state_ref,
                    ).UpTask(
                        __request__,
                        schedule=__this__._when,
                    )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency is not None:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).UpTask(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                return IMPORT_reboot_aio_tasks.TaskEffect(
                    state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    state_ref=__context__._state_ref,
                    method_name='UpTask',
                    request=__request__,
                    task_uuid=__task_id__.task_uuid,
                    schedule=__schedule__,
                )

            async def Down(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)

                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.DownRequest(
                )
                if isinstance(__context__, IMPORT_reboot_aio_contexts.WriterContext):
                    return ApplicationServicerTasksStub(
                        context=__context__,
                        state_ref=__context__._state_ref,
                    ).Down(
                        __request__,
                        schedule=__this__._when,
                    )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency is not None:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).Down(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                return IMPORT_reboot_aio_tasks.TaskEffect(
                    state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    state_ref=__context__._state_ref,
                    method_name='Down',
                    request=__request__,
                    task_uuid=__task_id__.task_uuid,
                    schedule=__schedule__,
                )

            async def DownTask(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            ) -> IMPORT_reboot_aio_tasks.TaskEffect:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)

                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest(
                )
                if isinstance(__context__, IMPORT_reboot_aio_contexts.WriterContext):
                    return ApplicationServicerTasksStub(
                        context=__context__,
                        state_ref=__context__._state_ref,
                    ).DownTask(
                        __request__,
                        schedule=__this__._when,
                    )

                __schedule__: IMPORT_typing.Optional[IMPORT_datetime_datetime] = (IMPORT_datetime_datetime.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency is not None:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).DownTask(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                return IMPORT_reboot_aio_tasks.TaskEffect(
                    state_type=IMPORT_reboot_aio_types.StateTypeName('rbt.cloud.v1alpha1.application.Application'),
                    state_ref=__context__._state_ref,
                    method_name='DownTask',
                    request=__request__,
                    task_uuid=__task_id__.task_uuid,
                    schedule=__schedule__,
                )


        # Application specific methods:
        async def Up(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            *,
            container_image_name: IMPORT_typing.Optional[str] = None,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

            if container_image_name is not None and not isinstance(
                container_image_name,
                str,
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'rbt.cloud.v1alpha1.application.application_pb2.UpRequest': field 'container_image_name' is not "
                    f"of required type 'str'"
                )
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            __request__ = rbt.cloud.v1alpha1.application.application_pb2.UpRequest(
                container_image_name=container_image_name,  # type: ignore[arg-type]
            )
            __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None
            __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
            __bearer_token__: IMPORT_typing.Optional[str] = None
            if __options__ is not None:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    __idempotency__ = __options__.idempotency
                if __options__.metadata is not None:
                    __metadata__ = __options__.metadata
                if __options__.bearer_token is not None:
                    __bearer_token__ = __options__.bearer_token

            return await __this__._writer(__context__).Up(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )

        async def UpTask(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            *,
            container_image_name: IMPORT_typing.Optional[str] = None,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.UpRequest)

            if container_image_name is not None and not isinstance(
                container_image_name,
                str,
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'rbt.cloud.v1alpha1.application.application_pb2.UpRequest': field 'container_image_name' is not "
                    f"of required type 'str'"
                )
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            __request__ = rbt.cloud.v1alpha1.application.application_pb2.UpRequest(
                container_image_name=container_image_name,  # type: ignore[arg-type]
            )
            __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None
            __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
            __bearer_token__: IMPORT_typing.Optional[str] = None
            if __options__ is not None:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    __idempotency__ = __options__.idempotency
                if __options__.metadata is not None:
                    __metadata__ = __options__.metadata
                if __options__.bearer_token is not None:
                    __bearer_token__ = __options__.bearer_token

            return await __this__._writer(__context__).UpTask(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )

        async def Down(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownRequest)

            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            __request__ = rbt.cloud.v1alpha1.application.application_pb2.DownRequest(
            )
            __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None
            __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
            __bearer_token__: IMPORT_typing.Optional[str] = None
            if __options__ is not None:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    __idempotency__ = __options__.idempotency
                if __options__.metadata is not None:
                    __metadata__ = __options__.metadata
                if __options__.bearer_token is not None:
                    __bearer_token__ = __options__.bearer_token

            return await __this__._writer(__context__).Down(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )

        async def DownTask(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
        ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest)

            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            __request__ = rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest(
            )
            __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None
            __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
            __bearer_token__: IMPORT_typing.Optional[str] = None
            if __options__ is not None:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    __idempotency__ = __options__.idempotency
                if __options__.metadata is not None:
                    __metadata__ = __options__.metadata
                if __options__.bearer_token is not None:
                    __bearer_token__ = __options__.bearer_token

            return await __this__._writer(__context__).DownTask(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )


    @classmethod
    def lookup(
        cls,
        state_id: IMPORT_reboot_aio_types.StateId,
        *,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> Application.WeakReference[Application.WeakReference._Schedule]:
        return Application.WeakReference(
            # TODO(https://github.com/reboot-dev/mono/issues/3226): add support for calling other applications.
            # For now this always stays within the application that creates the context.
            application_id=None,
            state_id=state_id,
            schedule_type=Application.WeakReference._Schedule,
            bearer_token=bearer_token,
        )

    @classmethod
    async def _Create(
        __cls__,
        *,
        __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
        __state_id__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.StateId] = None,
        __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
    ) -> tuple[Application.WeakReference, rbt.cloud.v1alpha1.application.application_pb2.CreateResponse]:
        # TODO: mypy-protobuf declares that
        # `google.protobuf.message.Message` constructor arguments are
        # always non-None, when in reality they are optional.
        __request__ = rbt.cloud.v1alpha1.application.application_pb2.CreateRequest(
        )

        __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
        __bearer_token__: IMPORT_typing.Optional[str] = None

        if __options__ is not None:
            IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
            if __options__.idempotency is not None:
                if __idempotency__ is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )
                __idempotency__ = __options__.idempotency
            if __options__.metadata is not None:
                __metadata__ = __options__.metadata
            if __options__.bearer_token is not None:
                __bearer_token__ = __options__.bearer_token

        if __state_id__ is None:
            if __idempotency__ is None:
                __state_id__ = str(IMPORT_uuid.uuid4())
            else:
                __state_id__ = __context__.generate_idempotent_state_id(
                    state_type_name=__cls__.__state_type_name__,
                    service_name=IMPORT_reboot_aio_types.ServiceName('rbt.cloud.v1alpha1.application.ApplicationMethods'),
                    method='Create',
                    idempotency=__idempotency__,
                )

        __reference__ = Application.lookup(
            __state_id__, bearer_token=__bearer_token__
        )
        __stub__ = __reference__._writer(__context__)
        return (
            __reference__,
            await __stub__.Create(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )
        )


    @IMPORT_dataclasses.dataclass(frozen=True)
    class _Construct:

        _state_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.StateId]
        _bearer_token: IMPORT_typing.Optional[str]

        def __post_init__(self) -> None:
            IMPORT_reboot_aio_call.validate_ascii(
                self._state_id,
                'state_id',
                IMPORT_reboot_settings.MAX_ACTOR_ID_LENGTH,
                length_min=IMPORT_reboot_settings.MIN_ACTOR_ID_LENGTH,
                error_type=IMPORT_reboot_aio_call.InvalidStateRefError,
                illegal_characters='\n\x00\x01',
            )

        async def Create(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
        ) -> tuple[Application.WeakReference, rbt.cloud.v1alpha1.application.application_pb2.CreateResponse]:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.CreateRequest)
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.CreateRequest)

            if __this__._bearer_token:
                if __options__:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    __options__ = IMPORT_dataclasses.replace(__options__, bearer_token=__this__._bearer_token)
                else:
                    __options__ = IMPORT_reboot_aio_call.Options(bearer_token=__this__._bearer_token)
            return await Application._Create(
                __context__=__context__,
                __options__=__options__,
                __state_id__=__this__._state_id,
            )


        @IMPORT_typing.overload
        def idempotently(self, alias: IMPORT_typing.Optional[str] = None, *, each_iteration: bool = False) -> Application._ConstructIdempotently:
            ...

        @IMPORT_typing.overload
        def idempotently(self, *, key: IMPORT_uuid.UUID) -> Application._ConstructIdempotently:
            ...

        def idempotently(
            self,
            alias: IMPORT_typing.Optional[str] = None,
            *,
            key: IMPORT_typing.Optional[IMPORT_uuid.UUID] = None,
            each_iteration: IMPORT_typing.Optional[bool] = None,
        ) -> Application._ConstructIdempotently:
            return Application._ConstructIdempotently(
                _idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                    alias=alias, key=key, each_iteration=each_iteration
                ),
                _state_id=self._state_id,
                _bearer_token=self._bearer_token,
            )

    @classmethod
    def construct(
        cls,
        *,
        id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.StateId] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> Application._Construct:
        return Application._Construct(
            _state_id=id,
            _bearer_token=bearer_token,
        )

    @IMPORT_dataclasses.dataclass(frozen=True)
    class _ConstructIdempotently:

        _idempotency: IMPORT_reboot_aio_idempotency.Idempotency
        _state_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.StateId] = None
        _bearer_token: IMPORT_typing.Optional[str] = None

        async def Create(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
        ) -> tuple[Application.WeakReference, rbt.cloud.v1alpha1.application.application_pb2.CreateResponse]:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type=rbt.cloud.v1alpha1.application.application_pb2.CreateRequest)
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type=rbt.cloud.v1alpha1.application.application_pb2.CreateRequest)

            if __this__._bearer_token:
                if __options__:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    __options__ = IMPORT_dataclasses.replace(__options__, bearer_token=__this__._bearer_token)
                else:
                    __options__ = IMPORT_reboot_aio_call.Options(bearer_token=__this__._bearer_token)
            return await Application._Create(
                __context__=__context__,
                __options__=__options__,
                __state_id__=__this__._state_id,
                __idempotency__=__this__._idempotency,
            )



############################ Servicer Node adapters ############################
# Used by Node.js servicer implementations to access Python code and vice-versa.
# Relevant to servicers, irrelevant to clients.

class ApplicationServicerNodeAdaptor(Application.Servicer):

    def __init__(self):
        self._js_servicer_reference = self._construct_js_servicer()  # type: ignore[attr-defined]

    def authorizer(self) -> IMPORT_typing.Optional[IMPORT_reboot.aio.auth.authorizers.Authorizer]:
        return self._construct_authorizer(self._js_servicer_reference)  # type: ignore[attr-defined]

    async def _read(self, context: IMPORT_reboot_aio_contexts.WorkflowContext) -> str:
        return IMPORT_google_protobuf_json_format.MessageToJson(
            await super().state.read(context)
        )

    async def _write(
        self,
        context: IMPORT_reboot_aio_contexts.WorkflowContext,
        writer: IMPORT_typing.Callable[[str], IMPORT_typing.Awaitable[str]],
        json_options: str,
    ) -> str:

        async def _writer(state: IMPORT_google_protobuf_message.Message):
            json_result_state = await writer(
                IMPORT_google_protobuf_json_format.MessageToJson(state)
            )

            result_state = IMPORT_json.loads(json_result_state)

            state.CopyFrom(
                IMPORT_google_protobuf_json_format.ParseDict(
                    result_state['state'],
                    self.__state_type__(),
                )
            )

            assert 'result' in result_state
            result = result_state['result']
            assert type(result) == str
            return result

        options = IMPORT_json.loads(json_options)

        assert 'idempotency' in options

        return await super().state.idempotently(
            alias=options['idempotency'].get('alias'),
            key=options['idempotency'].get('key'),
            each_iteration=options['idempotency'].get('eachIteration', None),
        )._write(
            context,
            _writer,
            type_result=str,
            check_type=True,
            unidempotently=options.get('unidempotently', False),
        )

    # Application specific methods:
    async def Create(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.CreateRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.CreateResponse:
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        aborted: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        try:
            json_result = await self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                'writer',
                'Create',
                context,
                aborted,
                json_state,
                json_request,
            )
        except IMPORT_asyncio.CancelledError:
            aborted.set_result(None)
            raise
        else:
            result = IMPORT_json.loads(json_result)

            if 'effects' in result:
                effects = result['effects']

                state.CopyFrom(
                    IMPORT_google_protobuf_json_format.ParseDict(
                        effects['state'],
                        rbt.cloud.v1alpha1.application.application_pb2.Application(),
                    )
                )

                assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

                return IMPORT_google_protobuf_json_format.ParseDict(
                    effects['response'],
                    rbt.cloud.v1alpha1.application.application_pb2.CreateResponse(),
                )
            elif 'status' in result:
                raise (
                    Application
                    .CreateAborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )

    async def Up(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpResponse:
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        aborted: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        try:
            json_result = await self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                'writer',
                'Up',
                context,
                aborted,
                json_state,
                json_request,
            )
        except IMPORT_asyncio.CancelledError:
            aborted.set_result(None)
            raise
        else:
            result = IMPORT_json.loads(json_result)

            if 'effects' in result:
                effects = result['effects']

                state.CopyFrom(
                    IMPORT_google_protobuf_json_format.ParseDict(
                        effects['state'],
                        rbt.cloud.v1alpha1.application.application_pb2.Application(),
                    )
                )

                assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

                return IMPORT_google_protobuf_json_format.ParseDict(
                    effects['response'],
                    rbt.cloud.v1alpha1.application.application_pb2.UpResponse(),
                )
            elif 'status' in result:
                raise (
                    Application
                    .UpAborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )

    async def UpTask(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.UpRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse:
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        aborted: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        try:
            json_result = await self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                'writer',
                'UpTask',
                context,
                aborted,
                json_state,
                json_request,
            )
        except IMPORT_asyncio.CancelledError:
            aborted.set_result(None)
            raise
        else:
            result = IMPORT_json.loads(json_result)

            if 'effects' in result:
                effects = result['effects']

                state.CopyFrom(
                    IMPORT_google_protobuf_json_format.ParseDict(
                        effects['state'],
                        rbt.cloud.v1alpha1.application.application_pb2.Application(),
                    )
                )

                assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

                return IMPORT_google_protobuf_json_format.ParseDict(
                    effects['response'],
                    rbt.cloud.v1alpha1.application.application_pb2.UpTaskResponse(),
                )
            elif 'status' in result:
                raise (
                    Application
                    .UpTaskAborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )

    async def Down(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownResponse:
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        aborted: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        try:
            json_result = await self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                'writer',
                'Down',
                context,
                aborted,
                json_state,
                json_request,
            )
        except IMPORT_asyncio.CancelledError:
            aborted.set_result(None)
            raise
        else:
            result = IMPORT_json.loads(json_result)

            if 'effects' in result:
                effects = result['effects']

                state.CopyFrom(
                    IMPORT_google_protobuf_json_format.ParseDict(
                        effects['state'],
                        rbt.cloud.v1alpha1.application.application_pb2.Application(),
                    )
                )

                assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

                return IMPORT_google_protobuf_json_format.ParseDict(
                    effects['response'],
                    rbt.cloud.v1alpha1.application.application_pb2.DownResponse(),
                )
            elif 'status' in result:
                raise (
                    Application
                    .DownAborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )

    async def DownTask(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: rbt.cloud.v1alpha1.application.application_pb2.Application,
        request: rbt.cloud.v1alpha1.application.application_pb2.DownTaskRequest,
    ) -> rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse:
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        aborted: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        try:
            json_result = await self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                'writer',
                'DownTask',
                context,
                aborted,
                json_state,
                json_request,
            )
        except IMPORT_asyncio.CancelledError:
            aborted.set_result(None)
            raise
        else:
            result = IMPORT_json.loads(json_result)

            if 'effects' in result:
                effects = result['effects']

                state.CopyFrom(
                    IMPORT_google_protobuf_json_format.ParseDict(
                        effects['state'],
                        rbt.cloud.v1alpha1.application.application_pb2.Application(),
                    )
                )

                assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

                return IMPORT_google_protobuf_json_format.ParseDict(
                    effects['response'],
                    rbt.cloud.v1alpha1.application.application_pb2.DownTaskResponse(),
                )
            elif 'status' in result:
                raise (
                    Application
                    .DownTaskAborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )



############################ Reference Node adapters ############################
# Used by Node.js WeakReference implementations to access Python code and
# vice-versa. Relevant to clients.

class ApplicationWeakReferenceNodeAdaptor(Application.WeakReference[Application.WeakReference._Schedule]):

    async def _call(  # type: ignore[override]
        self,
        *,
        callable: IMPORT_typing.Callable[[IMPORT_google_protobuf_message.Message], IMPORT_typing.Awaitable],
        aborted_type: type[IMPORT_reboot.aio.aborted.Aborted],
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        IMPORT_google_protobuf_json_format.Parse(json_request, request)

        try:
            response = await callable(request)
        except BaseException as exception:
            if isinstance(exception, aborted_type):
                return IMPORT_json.dumps(
                    {
                        'status': IMPORT_google_protobuf_json_format.MessageToDict(
                            exception.to_status()
                        )
                    }
                )
            raise
        else:
            return IMPORT_json.dumps(
                {
                    'response': IMPORT_google_protobuf_json_format.MessageToDict(
                        response
                    )
                }
            )

    async def _schedule(  # type: ignore[override]
        self,
        *,
        method: str,
        context: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        schedule: IMPORT_datetime_datetime,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency],
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        IMPORT_google_protobuf_json_format.Parse(json_request, request)

        if isinstance(context, IMPORT_reboot_aio_contexts.WriterContext):
            task = getattr(
                ApplicationServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ),
                method,
            )(request, schedule=schedule)

            return IMPORT_json.dumps(
                {
                    'taskId': IMPORT_google_protobuf_json_format.MessageToDict(
                        task.task_id
                    )
                }
            )

        # Add scheduling information to the metadata.
        metadata: IMPORT_reboot_aio_types.GrpcMetadata = (
            (IMPORT_reboot_aio_headers.TASK_SCHEDULE, schedule.isoformat()),
        )

        task_id = await getattr(super()._tasks(context), method)(
            request,
            idempotency=idempotency,
            metadata=metadata,
        )

        return IMPORT_json.dumps(
            {
                'taskId': IMPORT_google_protobuf_json_format.MessageToDict(task_id)
            }
        )

    async def _reader(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)
        method_handle = IMPORT_functools.partial(
            getattr(super()._reader(context), method),
            bearer_token=options.get("bearerToken"),
        )
        return await self._call(
            callable=method_handle,
            aborted_type=getattr(
                Application, method + 'Aborted'
            ),
            request_type=request_type,
            json_request=json_request,
        )

    async def _writer(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)

        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None

        if 'idempotency' in options:
            idempotency = IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=options['idempotency'].get('alias'),
                key=options['idempotency'].get('key'),
                each_iteration=options['idempotency'].get('eachIteration', None),
            )

        if 'schedule' in options:
            when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
            when.FromJsonString(options['schedule']['when'])
            return await self._schedule(
                method=method,
                context=context,
                schedule=when.ToDatetime(),
                idempotency=idempotency,
                request_type=request_type,
                json_request=json_request,
            )

        method_handle = IMPORT_functools.partial(
            getattr(super()._writer(context), method),
            idempotency=idempotency,
            bearer_token=options.get("bearerToken"),
        )
        return await self._call(
            callable=method_handle,
            aborted_type=getattr(
                Application, method + 'Aborted'
            ),
            request_type=request_type,
            json_request=json_request,
        )

    async def _transaction(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)

        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None

        if 'idempotency' in options:
            idempotency = IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=options['idempotency'].get('alias'),
                key=options['idempotency'].get('key'),
                each_iteration=options['idempotency'].get('eachIteration', None),
            )

        if 'schedule' in options:
            when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
            when.FromJsonString(options['schedule']['when'])
            return await self._schedule(
                method=method,
                context=context,
                schedule=when.ToDatetime(),
                idempotency=idempotency,
                request_type=request_type,
                json_request=json_request,
            )

        method_handle = IMPORT_functools.partial(
            getattr(super()._workflow(context), method),
            idempotency=idempotency,
            bearer_token=options.get("bearerToken"),
        )
        return await self._call(
            callable=method_handle,
            aborted_type=getattr(
                Application, method + 'Aborted'
            ),
            request_type=request_type,
            json_request=json_request,
        )

    async def _workflow(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)

        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None

        if 'idempotency' in options:
            idempotency = IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=options['idempotency'].get('alias'),
                key=options['idempotency'].get('key'),
                each_iteration=options['idempotency'].get('eachIteration', None),
            )

        assert 'schedule' in options

        when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
        when.FromJsonString(options['schedule']['when'])

        return await self._schedule(
            method=method,
            context=context,
            schedule=when.ToDatetime(),
            idempotency=idempotency,
            request_type=request_type,
            json_request=json_request,
        )

    async def _future_await(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        json_task_id: str,
    ) -> str:
        future = getattr(
            Application, method + 'Future'
        )(
            context,
            task_id=IMPORT_google_protobuf_json_format.Parse(
                json_task_id,
                IMPORT_rbt_v1alpha1.tasks_pb2.TaskId(),
            ),
        )

        try:
            response = await future
        except BaseException as exception:
            if isinstance(exception, IMPORT_reboot.aio.aborted.Aborted):
                return IMPORT_json.dumps(
                    {
                        'status': IMPORT_google_protobuf_json_format.MessageToDict(
                            exception.to_status()
                        )
                    }
                )
            raise
        else:
            return IMPORT_json.dumps(
                {
                    'response': IMPORT_google_protobuf_json_format.MessageToDict(
                        response
                    )
                }
            )

# yapf: enable
