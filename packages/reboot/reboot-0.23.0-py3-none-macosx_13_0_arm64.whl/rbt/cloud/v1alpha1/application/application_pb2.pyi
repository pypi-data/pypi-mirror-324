"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import rbt.v1alpha1.tasks_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Permissions(google.protobuf.message.Message):
    """///////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADMIN_USER_IDS_FIELD_NUMBER: builtins.int
    @property
    def admin_user_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        admin_user_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["admin_user_ids", b"admin_user_ids"]) -> None: ...

global___Permissions = Permissions

@typing_extensions.final
class Application(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PERMISSIONS_FIELD_NUMBER: builtins.int
    @property
    def permissions(self) -> global___Permissions: ...
    def __init__(
        self,
        *,
        permissions: global___Permissions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["permissions", b"permissions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["permissions", b"permissions"]) -> None: ...

global___Application = Application

@typing_extensions.final
class CreateRequest(google.protobuf.message.Message):
    """/////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___CreateRequest = CreateRequest

@typing_extensions.final
class CreateResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___CreateResponse = CreateResponse

@typing_extensions.final
class UpRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTAINER_IMAGE_NAME_FIELD_NUMBER: builtins.int
    container_image_name: builtins.str
    def __init__(
        self,
        *,
        container_image_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["container_image_name", b"container_image_name"]) -> None: ...

global___UpRequest = UpRequest

@typing_extensions.final
class UpResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UP_TASK_ID_FIELD_NUMBER: builtins.int
    APPLICATION_ID_FIELD_NUMBER: builtins.int
    @property
    def up_task_id(self) -> rbt.v1alpha1.tasks_pb2.TaskId:
        """The task ID of the async part of `Up`. When this task completes, the
        application will have been registered, from which point it is sensible to
        call `Down()` on it, but it may still be in the process of starting and not
        yet ready to serve traffic.
        """
    application_id: builtins.str
    """The application ID for this application."""
    def __init__(
        self,
        *,
        up_task_id: rbt.v1alpha1.tasks_pb2.TaskId | None = ...,
        application_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["up_task_id", b"up_task_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["application_id", b"application_id", "up_task_id", b"up_task_id"]) -> None: ...

global___UpResponse = UpResponse

@typing_extensions.final
class UpTaskResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___UpTaskResponse = UpTaskResponse

@typing_extensions.final
class DownRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DownRequest = DownRequest

@typing_extensions.final
class DownResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DOWN_TASK_ID_FIELD_NUMBER: builtins.int
    @property
    def down_task_id(self) -> rbt.v1alpha1.tasks_pb2.TaskId:
        """The task ID of the async part of `Down`. When this task completes, the
        application will have been deregistered, but it may still be in the process
        of tearing down.
        """
    def __init__(
        self,
        *,
        down_task_id: rbt.v1alpha1.tasks_pb2.TaskId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["down_task_id", b"down_task_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["down_task_id", b"down_task_id"]) -> None: ...

global___DownResponse = DownResponse

@typing_extensions.final
class DownTaskRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DownTaskRequest = DownTaskRequest

@typing_extensions.final
class DownTaskResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DownTaskResponse = DownTaskResponse

@typing_extensions.final
class InvalidInputError(google.protobuf.message.Message):
    """////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REASON_FIELD_NUMBER: builtins.int
    reason: builtins.str
    def __init__(
        self,
        *,
        reason: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["reason", b"reason"]) -> None: ...

global___InvalidInputError = InvalidInputError
