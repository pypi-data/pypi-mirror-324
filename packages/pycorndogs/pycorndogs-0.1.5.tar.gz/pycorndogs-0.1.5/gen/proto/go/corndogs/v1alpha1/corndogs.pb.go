// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: corndogs/v1alpha1/corndogs.proto

package corndogsv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Task struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Uuid            string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Queue           string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentState    string                 `protobuf:"bytes,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	AutoTargetState string                 `protobuf:"bytes,4,opt,name=auto_target_state,json=autoTargetState,proto3" json:"auto_target_state,omitempty"`
	SubmitTime      int64                  `protobuf:"varint,5,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	UpdateTime      int64                  `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Timeout         int64                  `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Payload         []byte                 `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	Priority        int64                  `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Task) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Task) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *Task) GetAutoTargetState() string {
	if x != nil {
		return x.AutoTargetState
	}
	return ""
}

func (x *Task) GetSubmitTime() int64 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *Task) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Task) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Task) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Task) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type SubmitTaskRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Queue           string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentState    string                 `protobuf:"bytes,2,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	AutoTargetState string                 `protobuf:"bytes,3,opt,name=auto_target_state,json=autoTargetState,proto3" json:"auto_target_state,omitempty"`
	Timeout         int64                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Payload         []byte                 `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Priority        int64                  `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubmitTaskRequest) Reset() {
	*x = SubmitTaskRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTaskRequest) ProtoMessage() {}

func (x *SubmitTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTaskRequest.ProtoReflect.Descriptor instead.
func (*SubmitTaskRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitTaskRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *SubmitTaskRequest) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *SubmitTaskRequest) GetAutoTargetState() string {
	if x != nil {
		return x.AutoTargetState
	}
	return ""
}

func (x *SubmitTaskRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SubmitTaskRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SubmitTaskRequest) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type SubmitTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTaskResponse) Reset() {
	*x = SubmitTaskResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTaskResponse) ProtoMessage() {}

func (x *SubmitTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTaskResponse.ProtoReflect.Descriptor instead.
func (*SubmitTaskResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetTaskStateByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Queue         string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStateByIDRequest) Reset() {
	*x = GetTaskStateByIDRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStateByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStateByIDRequest) ProtoMessage() {}

func (x *GetTaskStateByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStateByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTaskStateByIDRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskStateByIDRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetTaskStateByIDRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

type GetTaskStateByIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStateByIDResponse) Reset() {
	*x = GetTaskStateByIDResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStateByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStateByIDResponse) ProtoMessage() {}

func (x *GetTaskStateByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStateByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTaskStateByIDResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskStateByIDResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetNextTaskRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Queue                   string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentState            string                 `protobuf:"bytes,2,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	OverrideTimeout         int64                  `protobuf:"varint,3,opt,name=override_timeout,json=overrideTimeout,proto3" json:"override_timeout,omitempty"`
	OverrideCurrentState    string                 `protobuf:"bytes,4,opt,name=override_current_state,json=overrideCurrentState,proto3" json:"override_current_state,omitempty"`
	OverrideAutoTargetState string                 `protobuf:"bytes,5,opt,name=override_auto_target_state,json=overrideAutoTargetState,proto3" json:"override_auto_target_state,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetNextTaskRequest) Reset() {
	*x = GetNextTaskRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextTaskRequest) ProtoMessage() {}

func (x *GetNextTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextTaskRequest.ProtoReflect.Descriptor instead.
func (*GetNextTaskRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{5}
}

func (x *GetNextTaskRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *GetNextTaskRequest) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *GetNextTaskRequest) GetOverrideTimeout() int64 {
	if x != nil {
		return x.OverrideTimeout
	}
	return 0
}

func (x *GetNextTaskRequest) GetOverrideCurrentState() string {
	if x != nil {
		return x.OverrideCurrentState
	}
	return ""
}

func (x *GetNextTaskRequest) GetOverrideAutoTargetState() string {
	if x != nil {
		return x.OverrideAutoTargetState
	}
	return ""
}

type GetNextTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNextTaskResponse) Reset() {
	*x = GetNextTaskResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNextTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextTaskResponse) ProtoMessage() {}

func (x *GetNextTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextTaskResponse.ProtoReflect.Descriptor instead.
func (*GetNextTaskResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{6}
}

func (x *GetNextTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CompleteTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Queue         string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentState  string                 `protobuf:"bytes,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskRequest) Reset() {
	*x = CompleteTaskRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskRequest) ProtoMessage() {}

func (x *CompleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskRequest.ProtoReflect.Descriptor instead.
func (*CompleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{7}
}

func (x *CompleteTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CompleteTaskRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *CompleteTaskRequest) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

type CompleteTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskResponse) Reset() {
	*x = CompleteTaskResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskResponse) ProtoMessage() {}

func (x *CompleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskResponse.ProtoReflect.Descriptor instead.
func (*CompleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{8}
}

func (x *CompleteTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Uuid            string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Queue           string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentState    string                 `protobuf:"bytes,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	AutoTargetState string                 `protobuf:"bytes,4,opt,name=auto_target_state,json=autoTargetState,proto3" json:"auto_target_state,omitempty"`
	Timeout         int64                  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	NewState        string                 `protobuf:"bytes,6,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	Payload         []byte                 `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	Priority        int64                  `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateTaskRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *UpdateTaskRequest) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *UpdateTaskRequest) GetAutoTargetState() string {
	if x != nil {
		return x.AutoTargetState
	}
	return ""
}

func (x *UpdateTaskRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UpdateTaskRequest) GetNewState() string {
	if x != nil {
		return x.NewState
	}
	return ""
}

func (x *UpdateTaskRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *UpdateTaskRequest) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type UpdateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CancelTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Queue         string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	CurrentState  string                 `protobuf:"bytes,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{11}
}

func (x *CancelTaskRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CancelTaskRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *CancelTaskRequest) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

type CancelTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskResponse) Reset() {
	*x = CancelTaskResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskResponse) ProtoMessage() {}

func (x *CancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{12}
}

func (x *CancelTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CleanUpTimedOutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AtTime        int64                  `protobuf:"varint,1,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Queue         string                 `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanUpTimedOutRequest) Reset() {
	*x = CleanUpTimedOutRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanUpTimedOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanUpTimedOutRequest) ProtoMessage() {}

func (x *CleanUpTimedOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanUpTimedOutRequest.ProtoReflect.Descriptor instead.
func (*CleanUpTimedOutRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{13}
}

func (x *CleanUpTimedOutRequest) GetAtTime() int64 {
	if x != nil {
		return x.AtTime
	}
	return 0
}

func (x *CleanUpTimedOutRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

type CleanUpTimedOutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimedOut      int64                  `protobuf:"varint,1,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanUpTimedOutResponse) Reset() {
	*x = CleanUpTimedOutResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanUpTimedOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanUpTimedOutResponse) ProtoMessage() {}

func (x *CleanUpTimedOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanUpTimedOutResponse.ProtoReflect.Descriptor instead.
func (*CleanUpTimedOutResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{14}
}

func (x *CleanUpTimedOutResponse) GetTimedOut() int64 {
	if x != nil {
		return x.TimedOut
	}
	return 0
}

type GetQueuesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueuesRequest) Reset() {
	*x = GetQueuesRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueuesRequest) ProtoMessage() {}

func (x *GetQueuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueuesRequest.ProtoReflect.Descriptor instead.
func (*GetQueuesRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{15}
}

type GetQueuesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Queues         []string               `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
	TotalTaskCount int64                  `protobuf:"varint,2,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetQueuesResponse) Reset() {
	*x = GetQueuesResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueuesResponse) ProtoMessage() {}

func (x *GetQueuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueuesResponse.ProtoReflect.Descriptor instead.
func (*GetQueuesResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{16}
}

func (x *GetQueuesResponse) GetQueues() []string {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *GetQueuesResponse) GetTotalTaskCount() int64 {
	if x != nil {
		return x.TotalTaskCount
	}
	return 0
}

type GetQueueTaskCountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueueTaskCountsRequest) Reset() {
	*x = GetQueueTaskCountsRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueTaskCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueTaskCountsRequest) ProtoMessage() {}

func (x *GetQueueTaskCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueTaskCountsRequest.ProtoReflect.Descriptor instead.
func (*GetQueueTaskCountsRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{17}
}

type GetQueueTaskCountsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	QueueCounts    map[string]int64       `protobuf:"bytes,1,rep,name=queue_counts,json=queueCounts,proto3" json:"queue_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TotalTaskCount int64                  `protobuf:"varint,2,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetQueueTaskCountsResponse) Reset() {
	*x = GetQueueTaskCountsResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueTaskCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueTaskCountsResponse) ProtoMessage() {}

func (x *GetQueueTaskCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueTaskCountsResponse.ProtoReflect.Descriptor instead.
func (*GetQueueTaskCountsResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{18}
}

func (x *GetQueueTaskCountsResponse) GetQueueCounts() map[string]int64 {
	if x != nil {
		return x.QueueCounts
	}
	return nil
}

func (x *GetQueueTaskCountsResponse) GetTotalTaskCount() int64 {
	if x != nil {
		return x.TotalTaskCount
	}
	return 0
}

type GetTaskStateCountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStateCountsRequest) Reset() {
	*x = GetTaskStateCountsRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStateCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStateCountsRequest) ProtoMessage() {}

func (x *GetTaskStateCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStateCountsRequest.ProtoReflect.Descriptor instead.
func (*GetTaskStateCountsRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{19}
}

func (x *GetTaskStateCountsRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

type GetTaskStateCountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Count         int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	StateCounts   map[string]int64       `protobuf:"bytes,3,rep,name=state_counts,json=stateCounts,proto3" json:"state_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStateCountsResponse) Reset() {
	*x = GetTaskStateCountsResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStateCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStateCountsResponse) ProtoMessage() {}

func (x *GetTaskStateCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStateCountsResponse.ProtoReflect.Descriptor instead.
func (*GetTaskStateCountsResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{20}
}

func (x *GetTaskStateCountsResponse) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *GetTaskStateCountsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetTaskStateCountsResponse) GetStateCounts() map[string]int64 {
	if x != nil {
		return x.StateCounts
	}
	return nil
}

type QueueAndStateCounts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queue         string                 `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Count         int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	StateCounts   map[string]int64       `protobuf:"bytes,3,rep,name=state_counts,json=stateCounts,proto3" json:"state_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueAndStateCounts) Reset() {
	*x = QueueAndStateCounts{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueAndStateCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueAndStateCounts) ProtoMessage() {}

func (x *QueueAndStateCounts) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueAndStateCounts.ProtoReflect.Descriptor instead.
func (*QueueAndStateCounts) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{21}
}

func (x *QueueAndStateCounts) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *QueueAndStateCounts) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueueAndStateCounts) GetStateCounts() map[string]int64 {
	if x != nil {
		return x.StateCounts
	}
	return nil
}

type GetQueueAndStateCountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueueAndStateCountsRequest) Reset() {
	*x = GetQueueAndStateCountsRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueAndStateCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueAndStateCountsRequest) ProtoMessage() {}

func (x *GetQueueAndStateCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueAndStateCountsRequest.ProtoReflect.Descriptor instead.
func (*GetQueueAndStateCountsRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{22}
}

type GetQueueAndStateCountsResponse struct {
	state               protoimpl.MessageState          `protogen:"open.v1"`
	QueueAndStateCounts map[string]*QueueAndStateCounts `protobuf:"bytes,1,rep,name=queue_and_state_counts,json=queueAndStateCounts,proto3" json:"queue_and_state_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetQueueAndStateCountsResponse) Reset() {
	*x = GetQueueAndStateCountsResponse{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueAndStateCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueAndStateCountsResponse) ProtoMessage() {}

func (x *GetQueueAndStateCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueAndStateCountsResponse.ProtoReflect.Descriptor instead.
func (*GetQueueAndStateCountsResponse) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{23}
}

func (x *GetQueueAndStateCountsResponse) GetQueueAndStateCounts() map[string]*QueueAndStateCounts {
	if x != nil {
		return x.QueueAndStateCounts
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corndogs_v1alpha1_corndogs_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP(), []int{24}
}

var File_corndogs_v1alpha1_corndogs_proto protoreflect.FileDescriptor

var file_corndogs_v1alpha1_corndogs_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x93, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x41, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x43, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x22, 0x47, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xed, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x64, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x41, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x62, 0x0a, 0x11, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a,
	0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x22, 0x47, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x17, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x72,
	0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x6e, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64,
	0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0e, 0x0a, 0x0c, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x8b, 0x09, 0x0a, 0x0f,
	0x43, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e,
	0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x72,
	0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64,
	0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x6f,
	0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xe2, 0x01, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x0d, 0x43, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2f, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x72, 0x6e, 0x64,
	0x6f, 0x67, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58,
	0x58, 0xaa, 0x02, 0x11, 0x43, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x11, 0x43, 0x6f, 0x72, 0x6e, 0x64, 0x6f, 0x67, 0x73,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1d, 0x43, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x6f, 0x72, 0x6e,
	0x64, 0x6f, 0x67, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_corndogs_v1alpha1_corndogs_proto_rawDescOnce sync.Once
	file_corndogs_v1alpha1_corndogs_proto_rawDescData []byte
)

func file_corndogs_v1alpha1_corndogs_proto_rawDescGZIP() []byte {
	file_corndogs_v1alpha1_corndogs_proto_rawDescOnce.Do(func() {
		file_corndogs_v1alpha1_corndogs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_corndogs_v1alpha1_corndogs_proto_rawDesc), len(file_corndogs_v1alpha1_corndogs_proto_rawDesc)))
	})
	return file_corndogs_v1alpha1_corndogs_proto_rawDescData
}

var file_corndogs_v1alpha1_corndogs_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_corndogs_v1alpha1_corndogs_proto_goTypes = []any{
	(*Task)(nil),                           // 0: corndogs.v1alpha1.Task
	(*SubmitTaskRequest)(nil),              // 1: corndogs.v1alpha1.SubmitTaskRequest
	(*SubmitTaskResponse)(nil),             // 2: corndogs.v1alpha1.SubmitTaskResponse
	(*GetTaskStateByIDRequest)(nil),        // 3: corndogs.v1alpha1.GetTaskStateByIDRequest
	(*GetTaskStateByIDResponse)(nil),       // 4: corndogs.v1alpha1.GetTaskStateByIDResponse
	(*GetNextTaskRequest)(nil),             // 5: corndogs.v1alpha1.GetNextTaskRequest
	(*GetNextTaskResponse)(nil),            // 6: corndogs.v1alpha1.GetNextTaskResponse
	(*CompleteTaskRequest)(nil),            // 7: corndogs.v1alpha1.CompleteTaskRequest
	(*CompleteTaskResponse)(nil),           // 8: corndogs.v1alpha1.CompleteTaskResponse
	(*UpdateTaskRequest)(nil),              // 9: corndogs.v1alpha1.UpdateTaskRequest
	(*UpdateTaskResponse)(nil),             // 10: corndogs.v1alpha1.UpdateTaskResponse
	(*CancelTaskRequest)(nil),              // 11: corndogs.v1alpha1.CancelTaskRequest
	(*CancelTaskResponse)(nil),             // 12: corndogs.v1alpha1.CancelTaskResponse
	(*CleanUpTimedOutRequest)(nil),         // 13: corndogs.v1alpha1.CleanUpTimedOutRequest
	(*CleanUpTimedOutResponse)(nil),        // 14: corndogs.v1alpha1.CleanUpTimedOutResponse
	(*GetQueuesRequest)(nil),               // 15: corndogs.v1alpha1.GetQueuesRequest
	(*GetQueuesResponse)(nil),              // 16: corndogs.v1alpha1.GetQueuesResponse
	(*GetQueueTaskCountsRequest)(nil),      // 17: corndogs.v1alpha1.GetQueueTaskCountsRequest
	(*GetQueueTaskCountsResponse)(nil),     // 18: corndogs.v1alpha1.GetQueueTaskCountsResponse
	(*GetTaskStateCountsRequest)(nil),      // 19: corndogs.v1alpha1.GetTaskStateCountsRequest
	(*GetTaskStateCountsResponse)(nil),     // 20: corndogs.v1alpha1.GetTaskStateCountsResponse
	(*QueueAndStateCounts)(nil),            // 21: corndogs.v1alpha1.QueueAndStateCounts
	(*GetQueueAndStateCountsRequest)(nil),  // 22: corndogs.v1alpha1.GetQueueAndStateCountsRequest
	(*GetQueueAndStateCountsResponse)(nil), // 23: corndogs.v1alpha1.GetQueueAndStateCountsResponse
	(*EmptyRequest)(nil),                   // 24: corndogs.v1alpha1.EmptyRequest
	nil,                                    // 25: corndogs.v1alpha1.GetQueueTaskCountsResponse.QueueCountsEntry
	nil,                                    // 26: corndogs.v1alpha1.GetTaskStateCountsResponse.StateCountsEntry
	nil,                                    // 27: corndogs.v1alpha1.QueueAndStateCounts.StateCountsEntry
	nil,                                    // 28: corndogs.v1alpha1.GetQueueAndStateCountsResponse.QueueAndStateCountsEntry
}
var file_corndogs_v1alpha1_corndogs_proto_depIdxs = []int32{
	0,  // 0: corndogs.v1alpha1.SubmitTaskResponse.task:type_name -> corndogs.v1alpha1.Task
	0,  // 1: corndogs.v1alpha1.GetTaskStateByIDResponse.task:type_name -> corndogs.v1alpha1.Task
	0,  // 2: corndogs.v1alpha1.GetNextTaskResponse.task:type_name -> corndogs.v1alpha1.Task
	0,  // 3: corndogs.v1alpha1.CompleteTaskResponse.task:type_name -> corndogs.v1alpha1.Task
	0,  // 4: corndogs.v1alpha1.UpdateTaskResponse.task:type_name -> corndogs.v1alpha1.Task
	0,  // 5: corndogs.v1alpha1.CancelTaskResponse.task:type_name -> corndogs.v1alpha1.Task
	25, // 6: corndogs.v1alpha1.GetQueueTaskCountsResponse.queue_counts:type_name -> corndogs.v1alpha1.GetQueueTaskCountsResponse.QueueCountsEntry
	26, // 7: corndogs.v1alpha1.GetTaskStateCountsResponse.state_counts:type_name -> corndogs.v1alpha1.GetTaskStateCountsResponse.StateCountsEntry
	27, // 8: corndogs.v1alpha1.QueueAndStateCounts.state_counts:type_name -> corndogs.v1alpha1.QueueAndStateCounts.StateCountsEntry
	28, // 9: corndogs.v1alpha1.GetQueueAndStateCountsResponse.queue_and_state_counts:type_name -> corndogs.v1alpha1.GetQueueAndStateCountsResponse.QueueAndStateCountsEntry
	21, // 10: corndogs.v1alpha1.GetQueueAndStateCountsResponse.QueueAndStateCountsEntry.value:type_name -> corndogs.v1alpha1.QueueAndStateCounts
	1,  // 11: corndogs.v1alpha1.CorndogsService.SubmitTask:input_type -> corndogs.v1alpha1.SubmitTaskRequest
	3,  // 12: corndogs.v1alpha1.CorndogsService.GetTaskStateByID:input_type -> corndogs.v1alpha1.GetTaskStateByIDRequest
	5,  // 13: corndogs.v1alpha1.CorndogsService.GetNextTask:input_type -> corndogs.v1alpha1.GetNextTaskRequest
	9,  // 14: corndogs.v1alpha1.CorndogsService.UpdateTask:input_type -> corndogs.v1alpha1.UpdateTaskRequest
	7,  // 15: corndogs.v1alpha1.CorndogsService.CompleteTask:input_type -> corndogs.v1alpha1.CompleteTaskRequest
	11, // 16: corndogs.v1alpha1.CorndogsService.CancelTask:input_type -> corndogs.v1alpha1.CancelTaskRequest
	13, // 17: corndogs.v1alpha1.CorndogsService.CleanUpTimedOut:input_type -> corndogs.v1alpha1.CleanUpTimedOutRequest
	15, // 18: corndogs.v1alpha1.CorndogsService.GetQueues:input_type -> corndogs.v1alpha1.GetQueuesRequest
	17, // 19: corndogs.v1alpha1.CorndogsService.GetQueueTaskCounts:input_type -> corndogs.v1alpha1.GetQueueTaskCountsRequest
	19, // 20: corndogs.v1alpha1.CorndogsService.GetTaskStateCounts:input_type -> corndogs.v1alpha1.GetTaskStateCountsRequest
	22, // 21: corndogs.v1alpha1.CorndogsService.GetQueueAndStateCounts:input_type -> corndogs.v1alpha1.GetQueueAndStateCountsRequest
	2,  // 22: corndogs.v1alpha1.CorndogsService.SubmitTask:output_type -> corndogs.v1alpha1.SubmitTaskResponse
	4,  // 23: corndogs.v1alpha1.CorndogsService.GetTaskStateByID:output_type -> corndogs.v1alpha1.GetTaskStateByIDResponse
	6,  // 24: corndogs.v1alpha1.CorndogsService.GetNextTask:output_type -> corndogs.v1alpha1.GetNextTaskResponse
	10, // 25: corndogs.v1alpha1.CorndogsService.UpdateTask:output_type -> corndogs.v1alpha1.UpdateTaskResponse
	8,  // 26: corndogs.v1alpha1.CorndogsService.CompleteTask:output_type -> corndogs.v1alpha1.CompleteTaskResponse
	12, // 27: corndogs.v1alpha1.CorndogsService.CancelTask:output_type -> corndogs.v1alpha1.CancelTaskResponse
	14, // 28: corndogs.v1alpha1.CorndogsService.CleanUpTimedOut:output_type -> corndogs.v1alpha1.CleanUpTimedOutResponse
	16, // 29: corndogs.v1alpha1.CorndogsService.GetQueues:output_type -> corndogs.v1alpha1.GetQueuesResponse
	18, // 30: corndogs.v1alpha1.CorndogsService.GetQueueTaskCounts:output_type -> corndogs.v1alpha1.GetQueueTaskCountsResponse
	20, // 31: corndogs.v1alpha1.CorndogsService.GetTaskStateCounts:output_type -> corndogs.v1alpha1.GetTaskStateCountsResponse
	23, // 32: corndogs.v1alpha1.CorndogsService.GetQueueAndStateCounts:output_type -> corndogs.v1alpha1.GetQueueAndStateCountsResponse
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_corndogs_v1alpha1_corndogs_proto_init() }
func file_corndogs_v1alpha1_corndogs_proto_init() {
	if File_corndogs_v1alpha1_corndogs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_corndogs_v1alpha1_corndogs_proto_rawDesc), len(file_corndogs_v1alpha1_corndogs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_corndogs_v1alpha1_corndogs_proto_goTypes,
		DependencyIndexes: file_corndogs_v1alpha1_corndogs_proto_depIdxs,
		MessageInfos:      file_corndogs_v1alpha1_corndogs_proto_msgTypes,
	}.Build()
	File_corndogs_v1alpha1_corndogs_proto = out.File
	file_corndogs_v1alpha1_corndogs_proto_goTypes = nil
	file_corndogs_v1alpha1_corndogs_proto_depIdxs = nil
}
