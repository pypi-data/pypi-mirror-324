"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class RecipientUpdateDocumentRecipientRole(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"


class RecipientUpdateDocumentRecipientAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateDocumentRecipientActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateDocumentRecipientRecipientTypedDict(TypedDict):
    id: float
    r"""The ID of the recipient to update."""
    email: NotRequired[str]
    name: NotRequired[str]
    role: NotRequired[RecipientUpdateDocumentRecipientRole]
    signing_order: NotRequired[float]
    access_auth: NotRequired[Nullable[RecipientUpdateDocumentRecipientAccessAuth]]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: NotRequired[Nullable[RecipientUpdateDocumentRecipientActionAuth]]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateDocumentRecipientRecipient(BaseModel):
    id: float
    r"""The ID of the recipient to update."""

    email: Optional[str] = None

    name: Optional[str] = None

    role: Optional[RecipientUpdateDocumentRecipientRole] = None

    signing_order: Annotated[Optional[float], pydantic.Field(alias="signingOrder")] = (
        None
    )

    access_auth: Annotated[
        OptionalNullable[RecipientUpdateDocumentRecipientAccessAuth],
        pydantic.Field(alias="accessAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        OptionalNullable[RecipientUpdateDocumentRecipientActionAuth],
        pydantic.Field(alias="actionAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "email",
            "name",
            "role",
            "signingOrder",
            "accessAuth",
            "actionAuth",
        ]
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientRequestBodyTypedDict(TypedDict):
    document_id: float
    recipient: RecipientUpdateDocumentRecipientRecipientTypedDict


class RecipientUpdateDocumentRecipientRequestBody(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    recipient: RecipientUpdateDocumentRecipientRecipient


class RecipientUpdateDocumentRecipientDocumentsRecipientsIssuesTypedDict(TypedDict):
    message: str


class RecipientUpdateDocumentRecipientDocumentsRecipientsIssues(BaseModel):
    message: str


class RecipientUpdateDocumentRecipientDocumentsRecipientsResponseResponseBodyData(
    BaseModel
):
    message: str

    code: str

    issues: Optional[
        List[RecipientUpdateDocumentRecipientDocumentsRecipientsIssues]
    ] = None


class RecipientUpdateDocumentRecipientDocumentsRecipientsResponseResponseBody(
    Exception
):
    r"""Internal server error"""

    data: RecipientUpdateDocumentRecipientDocumentsRecipientsResponseResponseBodyData

    def __init__(
        self,
        data: RecipientUpdateDocumentRecipientDocumentsRecipientsResponseResponseBodyData,
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data,
            RecipientUpdateDocumentRecipientDocumentsRecipientsResponseResponseBodyData,
        )


class RecipientUpdateDocumentRecipientIssuesTypedDict(TypedDict):
    message: str


class RecipientUpdateDocumentRecipientIssues(BaseModel):
    message: str


class RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientUpdateDocumentRecipientIssues]] = None


class RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody(Exception):
    r"""Invalid input data"""

    data: RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData

    def __init__(
        self, data: RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data,
            RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData,
        )


class RecipientUpdateDocumentRecipientDocumentsRecipientsRole(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"


class RecipientUpdateDocumentRecipientReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class RecipientUpdateDocumentRecipientSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class RecipientUpdateDocumentRecipientSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class RecipientUpdateDocumentRecipientDocumentsRecipientsAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientUpdateDocumentRecipientDocumentsRecipientsActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientUpdateDocumentRecipientAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[RecipientUpdateDocumentRecipientDocumentsRecipientsAccessAuth]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[RecipientUpdateDocumentRecipientDocumentsRecipientsActionAuth]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientUpdateDocumentRecipientAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[RecipientUpdateDocumentRecipientDocumentsRecipientsAccessAuth],
        pydantic.Field(alias="accessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[RecipientUpdateDocumentRecipientDocumentsRecipientsActionAuth],
        pydantic.Field(alias="actionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFields9Type(
    str, Enum
):
    DROPDOWN = "dropdown"


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseValuesTypedDict(
    TypedDict
):
    value: str


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseValues(
    BaseModel
):
    value: str


class RecipientUpdateDocumentRecipientFieldMeta9TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFields9Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[
            RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseValuesTypedDict
        ]
    ]
    default_value: NotRequired[str]


class RecipientUpdateDocumentRecipientFieldMeta9(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFields9Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[
        List[RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseValues]
    ] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFields8Type(
    str, Enum
):
    CHECKBOX = "checkbox"


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsValuesTypedDict(
    TypedDict
):
    id: float
    checked: bool
    value: str


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsValues(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateDocumentRecipientFieldMeta8TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFields8Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[
            RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsValuesTypedDict
        ]
    ]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta8(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFields8Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[
        List[RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsValues]
    ] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFieldsType(
    str, Enum
):
    RADIO = "radio"


class RecipientUpdateDocumentRecipientFieldMetaValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class RecipientUpdateDocumentRecipientFieldMetaValues(BaseModel):
    id: float

    checked: bool

    value: str


class RecipientUpdateDocumentRecipientFieldMeta7TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFieldsType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[RecipientUpdateDocumentRecipientFieldMetaValuesTypedDict]]


class RecipientUpdateDocumentRecipientFieldMeta7(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyFieldsType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[RecipientUpdateDocumentRecipientFieldMetaValues]] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyType(
    str, Enum
):
    NUMBER = "number"


class RecipientUpdateDocumentRecipientFieldMeta6TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta6(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONResponseBodyType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONType(
    str, Enum
):
    TEXT = "text"


class RecipientUpdateDocumentRecipientFieldMeta5TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta5(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200ApplicationJSONType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200Type(
    str, Enum
):
    DATE = "date"


class RecipientUpdateDocumentRecipientFieldMeta4TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta4(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponse200Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseType(
    str, Enum
):
    EMAIL = "email"


class RecipientUpdateDocumentRecipientFieldMeta3TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta3(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsResponseType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsType(str, Enum):
    NAME = "name"


class RecipientUpdateDocumentRecipientFieldMeta2TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta2(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaDocumentsRecipientsType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class RecipientUpdateDocumentRecipientFieldMetaType(str, Enum):
    INITIALS = "initials"


class RecipientUpdateDocumentRecipientFieldMeta1TypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientFieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class RecipientUpdateDocumentRecipientFieldMeta1(BaseModel):
    type: RecipientUpdateDocumentRecipientFieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


RecipientUpdateDocumentRecipientFieldMetaTypedDict = TypeAliasType(
    "RecipientUpdateDocumentRecipientFieldMetaTypedDict",
    Union[
        RecipientUpdateDocumentRecipientFieldMeta1TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta2TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta3TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta4TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta7TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta9TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta5TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta8TypedDict,
        RecipientUpdateDocumentRecipientFieldMeta6TypedDict,
    ],
)


RecipientUpdateDocumentRecipientFieldMeta = TypeAliasType(
    "RecipientUpdateDocumentRecipientFieldMeta",
    Union[
        RecipientUpdateDocumentRecipientFieldMeta1,
        RecipientUpdateDocumentRecipientFieldMeta2,
        RecipientUpdateDocumentRecipientFieldMeta3,
        RecipientUpdateDocumentRecipientFieldMeta4,
        RecipientUpdateDocumentRecipientFieldMeta7,
        RecipientUpdateDocumentRecipientFieldMeta9,
        RecipientUpdateDocumentRecipientFieldMeta5,
        RecipientUpdateDocumentRecipientFieldMeta8,
        RecipientUpdateDocumentRecipientFieldMeta6,
    ],
)


class RecipientUpdateDocumentRecipientFieldsTypedDict(TypedDict):
    type: RecipientUpdateDocumentRecipientType
    id: int
    secondary_id: str
    document_id: Nullable[int]
    template_id: Nullable[int]
    recipient_id: int
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[RecipientUpdateDocumentRecipientFieldMetaTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class RecipientUpdateDocumentRecipientFields(BaseModel):
    type: RecipientUpdateDocumentRecipientType

    id: int

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[int], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[int], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[int, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[RecipientUpdateDocumentRecipientFieldMeta],
        pydantic.Field(alias="fieldMeta"),
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientUpdateDocumentRecipientResponseBodyTypedDict(TypedDict):
    r"""Successful response"""

    role: RecipientUpdateDocumentRecipientDocumentsRecipientsRole
    read_status: RecipientUpdateDocumentRecipientReadStatus
    signing_status: RecipientUpdateDocumentRecipientSigningStatus
    send_status: RecipientUpdateDocumentRecipientSendStatus
    id: int
    document_id: Nullable[int]
    template_id: Nullable[int]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[RecipientUpdateDocumentRecipientAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]
    fields: List[RecipientUpdateDocumentRecipientFieldsTypedDict]


class RecipientUpdateDocumentRecipientResponseBody(BaseModel):
    r"""Successful response"""

    role: RecipientUpdateDocumentRecipientDocumentsRecipientsRole

    read_status: Annotated[
        RecipientUpdateDocumentRecipientReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        RecipientUpdateDocumentRecipientSigningStatus,
        pydantic.Field(alias="signingStatus"),
    ]

    send_status: Annotated[
        RecipientUpdateDocumentRecipientSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: int

    document_id: Annotated[Nullable[int], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[int], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[RecipientUpdateDocumentRecipientAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    fields: List[RecipientUpdateDocumentRecipientFields]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
