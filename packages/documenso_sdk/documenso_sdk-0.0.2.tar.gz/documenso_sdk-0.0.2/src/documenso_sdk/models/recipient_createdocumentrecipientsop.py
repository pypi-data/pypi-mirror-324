"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RecipientCreateDocumentRecipientsRole(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"


class RecipientCreateDocumentRecipientsAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientCreateDocumentRecipientsActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientCreateDocumentRecipientsRecipientsTypedDict(TypedDict):
    email: str
    name: str
    role: RecipientCreateDocumentRecipientsRole
    signing_order: NotRequired[float]
    access_auth: NotRequired[Nullable[RecipientCreateDocumentRecipientsAccessAuth]]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: NotRequired[Nullable[RecipientCreateDocumentRecipientsActionAuth]]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientCreateDocumentRecipientsRecipients(BaseModel):
    email: str

    name: str

    role: RecipientCreateDocumentRecipientsRole

    signing_order: Annotated[Optional[float], pydantic.Field(alias="signingOrder")] = (
        None
    )

    access_auth: Annotated[
        OptionalNullable[RecipientCreateDocumentRecipientsAccessAuth],
        pydantic.Field(alias="accessAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        OptionalNullable[RecipientCreateDocumentRecipientsActionAuth],
        pydantic.Field(alias="actionAuth"),
    ] = UNSET
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["signingOrder", "accessAuth", "actionAuth"]
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientCreateDocumentRecipientsRequestBodyTypedDict(TypedDict):
    document_id: float
    recipients: List[RecipientCreateDocumentRecipientsRecipientsTypedDict]


class RecipientCreateDocumentRecipientsRequestBody(BaseModel):
    document_id: Annotated[float, pydantic.Field(alias="documentId")]

    recipients: List[RecipientCreateDocumentRecipientsRecipients]


class RecipientCreateDocumentRecipientsDocumentsRecipientsIssuesTypedDict(TypedDict):
    message: str


class RecipientCreateDocumentRecipientsDocumentsRecipientsIssues(BaseModel):
    message: str


class RecipientCreateDocumentRecipientsDocumentsRecipientsResponseResponseBodyData(
    BaseModel
):
    message: str

    code: str

    issues: Optional[
        List[RecipientCreateDocumentRecipientsDocumentsRecipientsIssues]
    ] = None


class RecipientCreateDocumentRecipientsDocumentsRecipientsResponseResponseBody(
    Exception
):
    r"""Internal server error"""

    data: RecipientCreateDocumentRecipientsDocumentsRecipientsResponseResponseBodyData

    def __init__(
        self,
        data: RecipientCreateDocumentRecipientsDocumentsRecipientsResponseResponseBodyData,
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data,
            RecipientCreateDocumentRecipientsDocumentsRecipientsResponseResponseBodyData,
        )


class RecipientCreateDocumentRecipientsIssuesTypedDict(TypedDict):
    message: str


class RecipientCreateDocumentRecipientsIssues(BaseModel):
    message: str


class RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientCreateDocumentRecipientsIssues]] = None


class RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody(Exception):
    r"""Invalid input data"""

    data: RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData

    def __init__(
        self, data: RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data,
            RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData,
        )


class RecipientCreateDocumentRecipientsDocumentsRecipientsRole(str, Enum):
    CC = "CC"
    SIGNER = "SIGNER"
    VIEWER = "VIEWER"
    APPROVER = "APPROVER"


class RecipientCreateDocumentRecipientsReadStatus(str, Enum):
    NOT_OPENED = "NOT_OPENED"
    OPENED = "OPENED"


class RecipientCreateDocumentRecipientsSigningStatus(str, Enum):
    NOT_SIGNED = "NOT_SIGNED"
    SIGNED = "SIGNED"
    REJECTED = "REJECTED"


class RecipientCreateDocumentRecipientsSendStatus(str, Enum):
    NOT_SENT = "NOT_SENT"
    SENT = "SENT"


class RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth(str, Enum):
    r"""The type of authentication required for the recipient to access the document."""

    ACCOUNT = "ACCOUNT"


class RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth(str, Enum):
    r"""The type of authentication required for the recipient to sign the document."""

    ACCOUNT = "ACCOUNT"
    PASSKEY = "PASSKEY"
    TWO_FACTOR_AUTH = "TWO_FACTOR_AUTH"
    EXPLICIT_NONE = "EXPLICIT_NONE"


class RecipientCreateDocumentRecipientsAuthOptionsTypedDict(TypedDict):
    access_auth: Nullable[
        RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth
    ]
    r"""The type of authentication required for the recipient to access the document."""
    action_auth: Nullable[
        RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth
    ]
    r"""The type of authentication required for the recipient to sign the document."""


class RecipientCreateDocumentRecipientsAuthOptions(BaseModel):
    access_auth: Annotated[
        Nullable[RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth],
        pydantic.Field(alias="accessAuth"),
    ]
    r"""The type of authentication required for the recipient to access the document."""

    action_auth: Annotated[
        Nullable[RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth],
        pydantic.Field(alias="actionAuth"),
    ]
    r"""The type of authentication required for the recipient to sign the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["accessAuth", "actionAuth"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientCreateDocumentRecipientsDocumentsRecipientsRecipientsTypedDict(
    TypedDict
):
    role: RecipientCreateDocumentRecipientsDocumentsRecipientsRole
    read_status: RecipientCreateDocumentRecipientsReadStatus
    signing_status: RecipientCreateDocumentRecipientsSigningStatus
    send_status: RecipientCreateDocumentRecipientsSendStatus
    id: int
    document_id: Nullable[int]
    template_id: Nullable[int]
    email: str
    name: str
    token: str
    document_deleted_at: Nullable[str]
    expired: Nullable[str]
    signed_at: Nullable[str]
    auth_options: Nullable[RecipientCreateDocumentRecipientsAuthOptionsTypedDict]
    signing_order: Nullable[float]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""
    rejection_reason: Nullable[str]


class RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients(BaseModel):
    role: RecipientCreateDocumentRecipientsDocumentsRecipientsRole

    read_status: Annotated[
        RecipientCreateDocumentRecipientsReadStatus, pydantic.Field(alias="readStatus")
    ]

    signing_status: Annotated[
        RecipientCreateDocumentRecipientsSigningStatus,
        pydantic.Field(alias="signingStatus"),
    ]

    send_status: Annotated[
        RecipientCreateDocumentRecipientsSendStatus, pydantic.Field(alias="sendStatus")
    ]

    id: int

    document_id: Annotated[Nullable[int], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[int], pydantic.Field(alias="templateId")]

    email: str

    name: str

    token: str

    document_deleted_at: Annotated[
        Nullable[str], pydantic.Field(alias="documentDeletedAt")
    ]

    expired: Nullable[str]

    signed_at: Annotated[Nullable[str], pydantic.Field(alias="signedAt")]

    auth_options: Annotated[
        Nullable[RecipientCreateDocumentRecipientsAuthOptions],
        pydantic.Field(alias="authOptions"),
    ]

    signing_order: Annotated[Nullable[float], pydantic.Field(alias="signingOrder")]
    r"""The order in which the recipient should sign the document. Only works if the document is set to sequential signing."""

    rejection_reason: Annotated[Nullable[str], pydantic.Field(alias="rejectionReason")]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "documentId",
            "templateId",
            "documentDeletedAt",
            "expired",
            "signedAt",
            "authOptions",
            "signingOrder",
            "rejectionReason",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RecipientCreateDocumentRecipientsResponseBodyTypedDict(TypedDict):
    r"""Successful response"""

    recipients: List[
        RecipientCreateDocumentRecipientsDocumentsRecipientsRecipientsTypedDict
    ]


class RecipientCreateDocumentRecipientsResponseBody(BaseModel):
    r"""Successful response"""

    recipients: List[RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients]
