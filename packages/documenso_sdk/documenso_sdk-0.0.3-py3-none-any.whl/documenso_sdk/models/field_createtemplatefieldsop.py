"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type(str, Enum):
    DROPDOWN = "DROPDOWN"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType(
    str, Enum
):
    DROPDOWN = "dropdown"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValuesTypedDict(TypedDict):
    value: str


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues(BaseModel):
    value: str


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaTypedDict(
    TypedDict
):
    type: (
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
    )
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValuesTypedDict]
    ]
    default_value: NotRequired[str]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta(
    BaseModel
):
    type: (
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
    )

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[
        List[FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues]
    ] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateTemplateFieldsFields11TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields11(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[
            FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta
        ],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type(str, Enum):
    CHECKBOX = "CHECKBOX"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType(
    str, Enum
):
    CHECKBOX = "checkbox"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsFieldsTemplatesFieldsValues(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaTypedDict(
    TypedDict
):
    type: (
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
    )
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[FieldCreateTemplateFieldsFieldsTemplatesFieldsValuesTypedDict]
    ]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta(
    BaseModel
):
    type: (
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
    )

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsFieldsTemplatesFieldsValues]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateTemplateFieldsFields10TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields10(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[
            FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta
        ],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type(str, Enum):
    RADIO = "RADIO"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType(
    str, Enum
):
    RADIO = "radio"


class FieldCreateTemplateFieldsFieldsValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsFieldsValues(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaTypedDict(
    TypedDict
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsFieldsValuesTypedDict]]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta(
    BaseModel
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsFieldsValues]] = None


class FieldCreateTemplateFieldsFields9TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields9(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[
            FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta
        ],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type(str, Enum):
    NUMBER = "NUMBER"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType(
    str, Enum
):
    NUMBER = "number"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaTypedDict(
    TypedDict
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta(
    BaseModel
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFields8TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields8(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[
            FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta
        ],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type(str, Enum):
    TEXT = "TEXT"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType(
    str, Enum
):
    TEXT = "text"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaTypedDict(
    TypedDict
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta(
    BaseModel
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFields7TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields7(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[
            FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta
        ],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type(str, Enum):
    DATE = "DATE"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType(
    str, Enum
):
    DATE = "date"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMetaTypedDict(
    TypedDict
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta(
    BaseModel
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFields6TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields6(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[
            FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta
        ],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type(str, Enum):
    EMAIL = "EMAIL"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType(
    str, Enum
):
    EMAIL = "email"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMetaTypedDict(
    TypedDict
):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFields5TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields5(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type(str, Enum):
    NAME = "NAME"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType(
    str, Enum
):
    NAME = "name"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMetaTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFields4TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[
        FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMetaTypedDict
    ]


class FieldCreateTemplateFieldsFields4(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType(str, Enum):
    INITIALS = "INITIALS"


class FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType(str, Enum):
    INITIALS = "initials"


class FieldCreateTemplateFieldsFieldsFieldMetaTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldsFieldMeta(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFields3TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""
    field_meta: NotRequired[FieldCreateTemplateFieldsFieldsFieldMetaTypedDict]


class FieldCreateTemplateFieldsFields3(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""

    field_meta: Annotated[
        Optional[FieldCreateTemplateFieldsFieldsFieldMeta],
        pydantic.Field(alias="fieldMeta"),
    ] = None


class FieldCreateTemplateFieldsFieldsTemplatesFieldsType(str, Enum):
    FREE_SIGNATURE = "FREE_SIGNATURE"


class FieldCreateTemplateFieldsFields2TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsType
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldsFields2(BaseModel):
    type: FieldCreateTemplateFieldsFieldsTemplatesFieldsType

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldsFieldsType(str, Enum):
    SIGNATURE = "SIGNATURE"


class FieldCreateTemplateFieldsFields1TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldsType
    recipient_id: float
    r"""The ID of the recipient to create the field for."""
    page_number: float
    r"""The page number the field will be on."""
    page_x: float
    r"""The X coordinate of where the field will be placed."""
    page_y: float
    r"""The Y coordinate of where the field will be placed."""
    width: float
    r"""The width of the field."""
    height: float
    r"""The height of the field."""


class FieldCreateTemplateFieldsFields1(BaseModel):
    type: FieldCreateTemplateFieldsFieldsType

    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]
    r"""The ID of the recipient to create the field for."""

    page_number: Annotated[float, pydantic.Field(alias="pageNumber")]
    r"""The page number the field will be on."""

    page_x: Annotated[float, pydantic.Field(alias="pageX")]
    r"""The X coordinate of where the field will be placed."""

    page_y: Annotated[float, pydantic.Field(alias="pageY")]
    r"""The Y coordinate of where the field will be placed."""

    width: float
    r"""The width of the field."""

    height: float
    r"""The height of the field."""


FieldCreateTemplateFieldsFieldsTypedDict = TypeAliasType(
    "FieldCreateTemplateFieldsFieldsTypedDict",
    Union[
        FieldCreateTemplateFieldsFields1TypedDict,
        FieldCreateTemplateFieldsFields2TypedDict,
        FieldCreateTemplateFieldsFields3TypedDict,
        FieldCreateTemplateFieldsFields4TypedDict,
        FieldCreateTemplateFieldsFields5TypedDict,
        FieldCreateTemplateFieldsFields6TypedDict,
        FieldCreateTemplateFieldsFields7TypedDict,
        FieldCreateTemplateFieldsFields8TypedDict,
        FieldCreateTemplateFieldsFields9TypedDict,
        FieldCreateTemplateFieldsFields10TypedDict,
        FieldCreateTemplateFieldsFields11TypedDict,
    ],
)


FieldCreateTemplateFieldsFields = TypeAliasType(
    "FieldCreateTemplateFieldsFields",
    Union[
        FieldCreateTemplateFieldsFields1,
        FieldCreateTemplateFieldsFields2,
        FieldCreateTemplateFieldsFields3,
        FieldCreateTemplateFieldsFields4,
        FieldCreateTemplateFieldsFields5,
        FieldCreateTemplateFieldsFields6,
        FieldCreateTemplateFieldsFields7,
        FieldCreateTemplateFieldsFields8,
        FieldCreateTemplateFieldsFields9,
        FieldCreateTemplateFieldsFields10,
        FieldCreateTemplateFieldsFields11,
    ],
)


class FieldCreateTemplateFieldsRequestBodyTypedDict(TypedDict):
    template_id: float
    fields: List[FieldCreateTemplateFieldsFieldsTypedDict]


class FieldCreateTemplateFieldsRequestBody(BaseModel):
    template_id: Annotated[float, pydantic.Field(alias="templateId")]

    fields: List[FieldCreateTemplateFieldsFields]


class FieldCreateTemplateFieldsTemplatesFieldsIssuesTypedDict(TypedDict):
    message: str


class FieldCreateTemplateFieldsTemplatesFieldsIssues(BaseModel):
    message: str


class FieldCreateTemplateFieldsTemplatesFieldsResponseResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateTemplateFieldsTemplatesFieldsIssues]] = None


class FieldCreateTemplateFieldsTemplatesFieldsResponseResponseBody(Exception):
    r"""Internal server error"""

    data: FieldCreateTemplateFieldsTemplatesFieldsResponseResponseBodyData

    def __init__(
        self, data: FieldCreateTemplateFieldsTemplatesFieldsResponseResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateTemplateFieldsTemplatesFieldsResponseResponseBodyData
        )


class FieldCreateTemplateFieldsIssuesTypedDict(TypedDict):
    message: str


class FieldCreateTemplateFieldsIssues(BaseModel):
    message: str


class FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldCreateTemplateFieldsIssues]] = None


class FieldCreateTemplateFieldsTemplatesFieldsResponseBody(Exception):
    r"""Invalid input data"""

    data: FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData

    def __init__(self, data: FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData
        )


class FieldCreateTemplateFieldsType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type(
    str, Enum
):
    DROPDOWN = "dropdown"


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValuesTypedDict(
    TypedDict
):
    value: str


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues(BaseModel):
    value: str


class FieldCreateTemplateFieldsFieldMeta9TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValuesTypedDict]
    ]
    default_value: NotRequired[str]


class FieldCreateTemplateFieldsFieldMeta9(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[
        List[FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues]
    ] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type(
    str, Enum
):
    CHECKBOX = "checkbox"


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldMeta8TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValuesTypedDict]
    ]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta8(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues]] = (
        None
    )

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType(
    str, Enum
):
    RADIO = "radio"


class FieldCreateTemplateFieldsFieldMetaValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldCreateTemplateFieldsFieldMetaValues(BaseModel):
    id: float

    checked: bool

    value: str


class FieldCreateTemplateFieldsFieldMeta7TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldCreateTemplateFieldsFieldMetaValuesTypedDict]]


class FieldCreateTemplateFieldsFieldMeta7(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldCreateTemplateFieldsFieldMetaValues]] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType(
    str, Enum
):
    NUMBER = "number"


class FieldCreateTemplateFieldsFieldMeta6TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta6(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType(
    str, Enum
):
    TEXT = "text"


class FieldCreateTemplateFieldsFieldMeta5TypedDict(TypedDict):
    type: (
        FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
    )
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta5(BaseModel):
    type: (
        FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
    )

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type(str, Enum):
    DATE = "date"


class FieldCreateTemplateFieldsFieldMeta4TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta4(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType(str, Enum):
    EMAIL = "email"


class FieldCreateTemplateFieldsFieldMeta3TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta3(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType(str, Enum):
    NAME = "name"


class FieldCreateTemplateFieldsFieldMeta2TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta2(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldCreateTemplateFieldsFieldMetaType(str, Enum):
    INITIALS = "initials"


class FieldCreateTemplateFieldsFieldMeta1TypedDict(TypedDict):
    type: FieldCreateTemplateFieldsFieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldCreateTemplateFieldsFieldMeta1(BaseModel):
    type: FieldCreateTemplateFieldsFieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


FieldCreateTemplateFieldsFieldMetaTypedDict = TypeAliasType(
    "FieldCreateTemplateFieldsFieldMetaTypedDict",
    Union[
        FieldCreateTemplateFieldsFieldMeta1TypedDict,
        FieldCreateTemplateFieldsFieldMeta2TypedDict,
        FieldCreateTemplateFieldsFieldMeta3TypedDict,
        FieldCreateTemplateFieldsFieldMeta4TypedDict,
        FieldCreateTemplateFieldsFieldMeta7TypedDict,
        FieldCreateTemplateFieldsFieldMeta9TypedDict,
        FieldCreateTemplateFieldsFieldMeta5TypedDict,
        FieldCreateTemplateFieldsFieldMeta8TypedDict,
        FieldCreateTemplateFieldsFieldMeta6TypedDict,
    ],
)


FieldCreateTemplateFieldsFieldMeta = TypeAliasType(
    "FieldCreateTemplateFieldsFieldMeta",
    Union[
        FieldCreateTemplateFieldsFieldMeta1,
        FieldCreateTemplateFieldsFieldMeta2,
        FieldCreateTemplateFieldsFieldMeta3,
        FieldCreateTemplateFieldsFieldMeta4,
        FieldCreateTemplateFieldsFieldMeta7,
        FieldCreateTemplateFieldsFieldMeta9,
        FieldCreateTemplateFieldsFieldMeta5,
        FieldCreateTemplateFieldsFieldMeta8,
        FieldCreateTemplateFieldsFieldMeta6,
    ],
)


class FieldCreateTemplateFieldsTemplatesFieldsFieldsTypedDict(TypedDict):
    type: FieldCreateTemplateFieldsType
    id: int
    secondary_id: str
    document_id: Nullable[int]
    template_id: Nullable[int]
    recipient_id: int
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldCreateTemplateFieldsFieldMetaTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldCreateTemplateFieldsTemplatesFieldsFields(BaseModel):
    type: FieldCreateTemplateFieldsType

    id: int

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[int], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[int], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[int, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldCreateTemplateFieldsFieldMeta], pydantic.Field(alias="fieldMeta")
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FieldCreateTemplateFieldsResponseBodyTypedDict(TypedDict):
    r"""Successful response"""

    fields: List[FieldCreateTemplateFieldsTemplatesFieldsFieldsTypedDict]


class FieldCreateTemplateFieldsResponseBody(BaseModel):
    r"""Successful response"""

    fields: List[FieldCreateTemplateFieldsTemplatesFieldsFields]
