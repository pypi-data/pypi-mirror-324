"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from documenso_sdk.utils import FieldMetadata, PathParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FieldGetDocumentFieldRequestTypedDict(TypedDict):
    field_id: float


class FieldGetDocumentFieldRequest(BaseModel):
    field_id: Annotated[
        float,
        pydantic.Field(alias="fieldId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class FieldGetDocumentFieldDocumentsFieldsResponseIssuesTypedDict(TypedDict):
    message: str


class FieldGetDocumentFieldDocumentsFieldsResponseIssues(BaseModel):
    message: str


class FieldGetDocumentFieldDocumentsFieldsResponse500ResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetDocumentFieldDocumentsFieldsResponseIssues]] = None


class FieldGetDocumentFieldDocumentsFieldsResponse500ResponseBody(Exception):
    r"""Internal server error"""

    data: FieldGetDocumentFieldDocumentsFieldsResponse500ResponseBodyData

    def __init__(
        self, data: FieldGetDocumentFieldDocumentsFieldsResponse500ResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldGetDocumentFieldDocumentsFieldsResponse500ResponseBodyData
        )


class FieldGetDocumentFieldDocumentsFieldsIssuesTypedDict(TypedDict):
    message: str


class FieldGetDocumentFieldDocumentsFieldsIssues(BaseModel):
    message: str


class FieldGetDocumentFieldDocumentsFieldsResponseResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetDocumentFieldDocumentsFieldsIssues]] = None


class FieldGetDocumentFieldDocumentsFieldsResponseResponseBody(Exception):
    r"""Not found"""

    data: FieldGetDocumentFieldDocumentsFieldsResponseResponseBodyData

    def __init__(
        self, data: FieldGetDocumentFieldDocumentsFieldsResponseResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldGetDocumentFieldDocumentsFieldsResponseResponseBodyData
        )


class FieldGetDocumentFieldIssuesTypedDict(TypedDict):
    message: str


class FieldGetDocumentFieldIssues(BaseModel):
    message: str


class FieldGetDocumentFieldDocumentsFieldsResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[FieldGetDocumentFieldIssues]] = None


class FieldGetDocumentFieldDocumentsFieldsResponseBody(Exception):
    r"""Invalid input data"""

    data: FieldGetDocumentFieldDocumentsFieldsResponseBodyData

    def __init__(self, data: FieldGetDocumentFieldDocumentsFieldsResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, FieldGetDocumentFieldDocumentsFieldsResponseBodyData
        )


class FieldGetDocumentFieldType(str, Enum):
    SIGNATURE = "SIGNATURE"
    FREE_SIGNATURE = "FREE_SIGNATURE"
    INITIALS = "INITIALS"
    NAME = "NAME"
    EMAIL = "EMAIL"
    DATE = "DATE"
    TEXT = "TEXT"
    NUMBER = "NUMBER"
    RADIO = "RADIO"
    CHECKBOX = "CHECKBOX"
    DROPDOWN = "DROPDOWN"


class FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type(
    str, Enum
):
    DROPDOWN = "dropdown"


class FieldGetDocumentFieldFieldMetaDocumentsFieldsValuesTypedDict(TypedDict):
    value: str


class FieldGetDocumentFieldFieldMetaDocumentsFieldsValues(BaseModel):
    value: str


class FieldMeta9TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[
        List[FieldGetDocumentFieldFieldMetaDocumentsFieldsValuesTypedDict]
    ]
    default_value: NotRequired[str]


class FieldMeta9(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetDocumentFieldFieldMetaDocumentsFieldsValues]] = None

    default_value: Annotated[Optional[str], pydantic.Field(alias="defaultValue")] = None


class FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type(
    str, Enum
):
    CHECKBOX = "checkbox"


class FieldGetDocumentFieldFieldMetaValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldGetDocumentFieldFieldMetaValues(BaseModel):
    id: float

    checked: bool

    value: str


class FieldMeta8TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldGetDocumentFieldFieldMetaValuesTypedDict]]
    validation_rule: NotRequired[str]
    validation_length: NotRequired[float]


class FieldMeta8(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldGetDocumentFieldFieldMetaValues]] = None

    validation_rule: Annotated[
        Optional[str], pydantic.Field(alias="validationRule")
    ] = None

    validation_length: Annotated[
        Optional[float], pydantic.Field(alias="validationLength")
    ] = None


class FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType(
    str, Enum
):
    RADIO = "radio"


class FieldMetaValuesTypedDict(TypedDict):
    id: float
    checked: bool
    value: str


class FieldMetaValues(BaseModel):
    id: float

    checked: bool

    value: str


class FieldMeta7TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    values: NotRequired[List[FieldMetaValuesTypedDict]]


class FieldMeta7(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    values: Optional[List[FieldMetaValues]] = None


class FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType(
    str, Enum
):
    NUMBER = "number"


class FieldMeta6TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    number_format: NotRequired[str]
    value: NotRequired[str]
    min_value: NotRequired[float]
    max_value: NotRequired[float]
    font_size: NotRequired[float]


class FieldMeta6(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    number_format: Annotated[Optional[str], pydantic.Field(alias="numberFormat")] = None

    value: Optional[str] = None

    min_value: Annotated[Optional[float], pydantic.Field(alias="minValue")] = None

    max_value: Annotated[Optional[float], pydantic.Field(alias="maxValue")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type(str, Enum):
    TEXT = "text"


class FieldMeta5TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    text: NotRequired[str]
    character_limit: NotRequired[float]
    font_size: NotRequired[float]


class FieldMeta5(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    text: Optional[str] = None

    character_limit: Annotated[
        Optional[float], pydantic.Field(alias="characterLimit")
    ] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType(str, Enum):
    DATE = "date"


class FieldMeta4TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldMeta4(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldGetDocumentFieldFieldMetaDocumentsFieldsType(str, Enum):
    EMAIL = "email"


class FieldMeta3TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldMeta3(BaseModel):
    type: FieldGetDocumentFieldFieldMetaDocumentsFieldsType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldGetDocumentFieldFieldMetaType(str, Enum):
    NAME = "name"


class FieldMeta2TypedDict(TypedDict):
    type: FieldGetDocumentFieldFieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldMeta2(BaseModel):
    type: FieldGetDocumentFieldFieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


class FieldMetaType(str, Enum):
    INITIALS = "initials"


class FieldMeta1TypedDict(TypedDict):
    type: FieldMetaType
    label: NotRequired[str]
    placeholder: NotRequired[str]
    required: NotRequired[bool]
    read_only: NotRequired[bool]
    font_size: NotRequired[float]


class FieldMeta1(BaseModel):
    type: FieldMetaType

    label: Optional[str] = None

    placeholder: Optional[str] = None

    required: Optional[bool] = None

    read_only: Annotated[Optional[bool], pydantic.Field(alias="readOnly")] = None

    font_size: Annotated[Optional[float], pydantic.Field(alias="fontSize")] = None


FieldGetDocumentFieldFieldMetaTypedDict = TypeAliasType(
    "FieldGetDocumentFieldFieldMetaTypedDict",
    Union[
        FieldMeta1TypedDict,
        FieldMeta2TypedDict,
        FieldMeta3TypedDict,
        FieldMeta4TypedDict,
        FieldMeta7TypedDict,
        FieldMeta9TypedDict,
        FieldMeta5TypedDict,
        FieldMeta8TypedDict,
        FieldMeta6TypedDict,
    ],
)


FieldGetDocumentFieldFieldMeta = TypeAliasType(
    "FieldGetDocumentFieldFieldMeta",
    Union[
        FieldMeta1,
        FieldMeta2,
        FieldMeta3,
        FieldMeta4,
        FieldMeta7,
        FieldMeta9,
        FieldMeta5,
        FieldMeta8,
        FieldMeta6,
    ],
)


class FieldGetDocumentFieldResponseBodyTypedDict(TypedDict):
    r"""Successful response"""

    type: FieldGetDocumentFieldType
    id: int
    secondary_id: str
    document_id: Nullable[int]
    template_id: Nullable[int]
    recipient_id: int
    page: float
    r"""The page number of the field on the document. Starts from 1."""
    custom_text: str
    inserted: bool
    field_meta: Nullable[FieldGetDocumentFieldFieldMetaTypedDict]
    position_x: NotRequired[Any]
    position_y: NotRequired[Any]
    width: NotRequired[Any]
    height: NotRequired[Any]


class FieldGetDocumentFieldResponseBody(BaseModel):
    r"""Successful response"""

    type: FieldGetDocumentFieldType

    id: int

    secondary_id: Annotated[str, pydantic.Field(alias="secondaryId")]

    document_id: Annotated[Nullable[int], pydantic.Field(alias="documentId")]

    template_id: Annotated[Nullable[int], pydantic.Field(alias="templateId")]

    recipient_id: Annotated[int, pydantic.Field(alias="recipientId")]

    page: float
    r"""The page number of the field on the document. Starts from 1."""

    custom_text: Annotated[str, pydantic.Field(alias="customText")]

    inserted: bool

    field_meta: Annotated[
        Nullable[FieldGetDocumentFieldFieldMeta], pydantic.Field(alias="fieldMeta")
    ]

    position_x: Annotated[Optional[Any], pydantic.Field(alias="positionX")] = None

    position_y: Annotated[Optional[Any], pydantic.Field(alias="positionY")] = None

    width: Optional[Any] = None

    height: Optional[Any] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["positionX", "positionY", "width", "height"]
        nullable_fields = ["documentId", "templateId", "fieldMeta"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
