"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from documenso_sdk import utils
from documenso_sdk.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, TypedDict


class RecipientDeleteTemplateRecipientRequestBodyTypedDict(TypedDict):
    recipient_id: float


class RecipientDeleteTemplateRecipientRequestBody(BaseModel):
    recipient_id: Annotated[float, pydantic.Field(alias="recipientId")]


class RecipientDeleteTemplateRecipientTemplatesRecipientsIssuesTypedDict(TypedDict):
    message: str


class RecipientDeleteTemplateRecipientTemplatesRecipientsIssues(BaseModel):
    message: str


class RecipientDeleteTemplateRecipientTemplatesRecipientsResponseResponseBodyData(
    BaseModel
):
    message: str

    code: str

    issues: Optional[
        List[RecipientDeleteTemplateRecipientTemplatesRecipientsIssues]
    ] = None


class RecipientDeleteTemplateRecipientTemplatesRecipientsResponseResponseBody(
    Exception
):
    r"""Internal server error"""

    data: RecipientDeleteTemplateRecipientTemplatesRecipientsResponseResponseBodyData

    def __init__(
        self,
        data: RecipientDeleteTemplateRecipientTemplatesRecipientsResponseResponseBodyData,
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data,
            RecipientDeleteTemplateRecipientTemplatesRecipientsResponseResponseBodyData,
        )


class RecipientDeleteTemplateRecipientIssuesTypedDict(TypedDict):
    message: str


class RecipientDeleteTemplateRecipientIssues(BaseModel):
    message: str


class RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData(BaseModel):
    message: str

    code: str

    issues: Optional[List[RecipientDeleteTemplateRecipientIssues]] = None


class RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody(Exception):
    r"""Invalid input data"""

    data: RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData

    def __init__(
        self, data: RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData
    ):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data,
            RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData,
        )


class RecipientDeleteTemplateRecipientResponseBodyTypedDict(TypedDict):
    r"""Successful response"""

    success: bool


class RecipientDeleteTemplateRecipientResponseBody(BaseModel):
    r"""Successful response"""

    success: bool
