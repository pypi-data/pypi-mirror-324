import typing
import typing_extensions
import pydantic

from .card_type_indicators import CardTypeIndicators, _SerializerCardTypeIndicators
from .expiry import Expiry, _SerializerExpiry
from .network_response import NetworkResponse, _SerializerNetworkResponse


class FraudCard(typing_extensions.TypedDict):
    """
    Card payment instrument for fraud checking
    """

    account_number: typing_extensions.Required[str]
    """
    The card or token number.
    """

    account_number_type: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "DEVICE_TOKEN",
            "NETWORK_TOKEN",
            "PAN",
            "SAFETECH_PAGE_ENCRYPTION",
            "SAFETECH_TOKEN",
        ]
    ]
    """
    Specifies the type of payment method used by the account number in payment transaction.
    """

    card_type: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "AP",
            "AX",
            "CC",
            "CR",
            "CZ",
            "DC",
            "DI",
            "EP",
            "IM",
            "JC",
            "MC",
            "MR",
            "NP",
            "PP",
            "SP",
            "VI",
            "VR",
        ]
    ]
    """
    Abbreviation of card name
    """

    card_type_indicators: typing_extensions.NotRequired[CardTypeIndicators]
    """
    The card type indicators provide additional information about the card. For example, if the card is a prepaid card and thus less likely to         support recurring payments or if the card is a healthcare or commercial  card.
    """

    card_type_name: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "ACCEL_PINLESS",
            "AMERICAN_EXPRESS",
            "CHASENET_CREDIT",
            "CHASENET_SIGNATURE_DEBIT",
            "CHINA_UNION_PAY",
            "DINERS_CLUB",
            "DISCOVER",
            "EFTPOS_PINLESS",
            "INTERNATIONAL_MAESTRO",
            "JCB",
            "MASTERCARD",
            "MASTERCARD_RESTRICTED_DEBIT",
            "NYCE_PINLESS",
            "PULSE_PINLESS",
            "STAR_PINLESS",
            "VISA",
            "VISA_RESTRICTED_DEBIT",
        ]
    ]
    """
    Name of the payment network.
    """

    cvv: typing_extensions.NotRequired[str]
    """
    Card verification value (CVV/CV2)
    """

    encryption_integrity_check: typing_extensions.NotRequired[str]
    """
    The alphanumeric string generated by voltage to verify the soundness of the encrypted key used by merchant and payment process. The merchant passed this in the API call. The backend process validates the subscriber id and format matches - between the merchant request for a key and the UPG request
    """

    expiry: typing_extensions.NotRequired[Expiry]
    """
    Expiration date
    """

    masked_account_number: typing_extensions.NotRequired[str]
    """
    Identifies a concealed number associated with the card number recognized by various payment systems. This is typically concealed by storing only the first 6 and/or last 4 digits of the payment account number or some variation.
    """

    network_response: typing_extensions.NotRequired[NetworkResponse]
    """
    Response information from payment network
    """


class _SerializerFraudCard(pydantic.BaseModel):
    """
    Serializer for FraudCard handling case conversions
    and file omissions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_number: str = pydantic.Field(
        alias="accountNumber",
    )
    account_number_type: typing.Optional[
        typing_extensions.Literal[
            "DEVICE_TOKEN",
            "NETWORK_TOKEN",
            "PAN",
            "SAFETECH_PAGE_ENCRYPTION",
            "SAFETECH_TOKEN",
        ]
    ] = pydantic.Field(alias="accountNumberType", default=None)
    card_type: typing.Optional[
        typing_extensions.Literal[
            "AP",
            "AX",
            "CC",
            "CR",
            "CZ",
            "DC",
            "DI",
            "EP",
            "IM",
            "JC",
            "MC",
            "MR",
            "NP",
            "PP",
            "SP",
            "VI",
            "VR",
        ]
    ] = pydantic.Field(alias="cardType", default=None)
    card_type_indicators: typing.Optional[_SerializerCardTypeIndicators] = (
        pydantic.Field(alias="cardTypeIndicators", default=None)
    )
    card_type_name: typing.Optional[
        typing_extensions.Literal[
            "ACCEL_PINLESS",
            "AMERICAN_EXPRESS",
            "CHASENET_CREDIT",
            "CHASENET_SIGNATURE_DEBIT",
            "CHINA_UNION_PAY",
            "DINERS_CLUB",
            "DISCOVER",
            "EFTPOS_PINLESS",
            "INTERNATIONAL_MAESTRO",
            "JCB",
            "MASTERCARD",
            "MASTERCARD_RESTRICTED_DEBIT",
            "NYCE_PINLESS",
            "PULSE_PINLESS",
            "STAR_PINLESS",
            "VISA",
            "VISA_RESTRICTED_DEBIT",
        ]
    ] = pydantic.Field(alias="cardTypeName", default=None)
    cvv: typing.Optional[str] = pydantic.Field(alias="cvv", default=None)
    encryption_integrity_check: typing.Optional[str] = pydantic.Field(
        alias="encryptionIntegrityCheck", default=None
    )
    expiry: typing.Optional[_SerializerExpiry] = pydantic.Field(
        alias="expiry", default=None
    )
    masked_account_number: typing.Optional[str] = pydantic.Field(
        alias="maskedAccountNumber", default=None
    )
    network_response: typing.Optional[_SerializerNetworkResponse] = pydantic.Field(
        alias="networkResponse", default=None
    )
