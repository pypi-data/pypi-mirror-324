import typing
import typing_extensions
import pydantic

from .merchant import Merchant
from .risk_decision import RiskDecision
from .risk_element import RiskElement


class FraudCheckResponse(pydantic.BaseModel):
    """
    Responses for the fraud check
    """

    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    host_message: typing.Optional[str] = pydantic.Field(
        alias="hostMessage", default=None
    )
    """
    Message received from Issuer, network or processor. Can be blank
    """
    host_reference_id: typing.Optional[str] = pydantic.Field(
        alias="hostReferenceId", default=None
    )
    """
    Identifies unique identifier generated by the acquirer processing system and return to merchant for reference purposes.
    """
    merchant: typing.Optional[Merchant] = pydantic.Field(alias="merchant", default=None)
    """
    Information about the merchant
    """
    request_id: typing.Optional[str] = pydantic.Field(alias="requestId", default=None)
    """
    Merchant identifier for the request. The value must be unique.
    """
    response_code: typing.Optional[str] = pydantic.Field(
        alias="responseCode", default=None
    )
    """
    Short explanation for response status
    """
    response_message: typing.Optional[str] = pydantic.Field(
        alias="responseMessage", default=None
    )
    """
    Long explanation of response code
    """
    response_status: typing.Optional[
        typing_extensions.Literal["DENIED", "ERROR", "SUCCESS"]
    ] = pydantic.Field(alias="responseStatus", default=None)
    """
    Indicates whether API request resulted in success, error, or denial.
    """
    risk_decision: typing.Optional[RiskDecision] = pydantic.Field(
        alias="riskDecision", default=None
    )
    """
    Object containing Risk Decision information.
    """
    risk_element: typing.Optional[RiskElement] = pydantic.Field(
        alias="riskElement", default=None
    )
    """
    Object containing Risk Element information
    """
    transaction_id: typing.Optional[str] = pydantic.Field(
        alias="transactionId", default=None
    )
    """
    Identifier of a transaction.
    """
