import typing
import typing_extensions
import pydantic

from .account_updater import AccountUpdater
from .authentication import Authentication
from .card_type_indicators import CardTypeIndicators
from .expiry import Expiry
from .network_response import NetworkResponse
from .payment_authentication_request import PaymentAuthenticationRequest
from .payment_token import PaymentToken
from .wallet_card_data import WalletCardData


class Card(pydantic.BaseModel):
    """
    Card payment instrument
    """

    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number: str = pydantic.Field(
        alias="accountNumber",
    )
    """
    The card or token number.
    """
    account_number_type: typing.Optional[
        typing_extensions.Literal[
            "DEVICE_TOKEN",
            "NETWORK_TOKEN",
            "PAN",
            "SAFETECH_PAGE_ENCRYPTION",
            "SAFETECH_TOKEN",
        ]
    ] = pydantic.Field(alias="accountNumberType", default=None)
    """
    Specifies the type of payment method used by the account number in payment transaction.
    """
    account_updater: typing.Optional[AccountUpdater] = pydantic.Field(
        alias="accountUpdater", default=None
    )
    """
    Contains response information related to account updater request
    """
    authentication: typing.Optional[Authentication] = pydantic.Field(
        alias="authentication", default=None
    )
    """
    The authentication object allows you to opt in to additional security features like 3-D Secure
    """
    card_type: typing.Optional[
        typing_extensions.Literal[
            "AP",
            "AX",
            "CC",
            "CR",
            "CZ",
            "DC",
            "DI",
            "EP",
            "IM",
            "JC",
            "MC",
            "MR",
            "NP",
            "PP",
            "SP",
            "VI",
            "VR",
        ]
    ] = pydantic.Field(alias="cardType", default=None)
    """
    Abbreviation of card name
    """
    card_type_funding: typing.Optional[typing_extensions.Literal["CREDIT", "DEBIT"]] = (
        pydantic.Field(alias="cardTypeFunding", default=None)
    )
    """
    Codifies the funding source for a card payment transaction. This will support debit enablement to merchant during processing transaction. Sample values are CREDIT_CARD and DEBIT_CARD
    """
    card_type_indicators: typing.Optional[CardTypeIndicators] = pydantic.Field(
        alias="cardTypeIndicators", default=None
    )
    """
    The card type indicators provide additional information about the card. For example, if the card is a prepaid card and thus less likely to         support recurring payments or if the card is a healthcare or commercial  card.
    """
    card_type_name: typing.Optional[
        typing_extensions.Literal[
            "ACCEL_PINLESS",
            "AMERICAN_EXPRESS",
            "CHASENET_CREDIT",
            "CHASENET_SIGNATURE_DEBIT",
            "CHINA_UNION_PAY",
            "DINERS_CLUB",
            "DISCOVER",
            "EFTPOS_PINLESS",
            "INTERNATIONAL_MAESTRO",
            "JCB",
            "MASTERCARD",
            "MASTERCARD_RESTRICTED_DEBIT",
            "NYCE_PINLESS",
            "PULSE_PINLESS",
            "STAR_PINLESS",
            "VISA",
            "VISA_RESTRICTED_DEBIT",
        ]
    ] = pydantic.Field(alias="cardTypeName", default=None)
    """
    Name of the payment network.
    """
    cvv: typing.Optional[str] = pydantic.Field(alias="cvv", default=None)
    """
    Card verification value (CVV/CV2)
    """
    encrypted_payload: typing.Optional[str] = pydantic.Field(
        alias="encryptedPayload", default=None
    )
    """
    Encrypted message details have been rendered unreadable by general means through the application of a given set of instructions and a key.
    """
    encryption_integrity_check: typing.Optional[str] = pydantic.Field(
        alias="encryptionIntegrityCheck", default=None
    )
    """
    The alphanumeric string generated by voltage to verify the soundness of the encrypted key used by merchant and payment process. The merchant passed this in the API call. The backend process validates the subscriber id and format matches - between the merchant request for a key and the UPG request
    """
    expiry: typing.Optional[Expiry] = pydantic.Field(alias="expiry", default=None)
    """
    Expiration date
    """
    is_bill_payment: typing.Optional[bool] = pydantic.Field(
        alias="isBillPayment", default=None
    )
    """
    Indicates whether or not the transaction is identified as a bill payment, prearranged between the cardholder and the merchant.
    """
    masked_account_number: typing.Optional[str] = pydantic.Field(
        alias="maskedAccountNumber", default=None
    )
    """
    Identifies a concealed number associated with the card number recognized by various payment systems. This is typically concealed by storing only the first 6 and/or last 4 digits of the payment account number or some variation.
    """
    masked_card_number: typing.Optional[str] = pydantic.Field(
        alias="maskedCardNumber", default=None
    )
    """
    Identifies a concealed number associated with the card number recognized by the Payment Networks. This is typically concealed by storing only the first 6 and or last 4 digits of the card number or some variation.
    """
    merchant_preferred_routing: typing.Optional[
        typing_extensions.Literal["CREDIT", "PINLESS"]
    ] = pydantic.Field(alias="merchantPreferredRouting", default=None)
    """
    Indicates the routing model used to route the transaction as preferred by merchant.
    """
    merchant_sales_channel_name: typing.Optional[
        typing_extensions.Literal[
            "INTERACTIVE_VOICE_RESPONSE", "INTERNET", "MAIL_ORDER_TELEPHONE_ORDER"
        ]
    ] = pydantic.Field(alias="merchantSalesChannelName", default=None)
    """
    Label given to a merchant client of the Firm's medium for reaching its customers and facilitating and/or performing sales of its merchandise or services.
    """
    network_response: typing.Optional[NetworkResponse] = pydantic.Field(
        alias="networkResponse", default=None
    )
    """
    Response information from payment network
    """
    original_network_transaction_id: typing.Optional[str] = pydantic.Field(
        alias="originalNetworkTransactionId", default=None
    )
    """
    When submitting a merchant-initiated payment, submit the networkTransactionId received from the first payment in this field.
    """
    payment_authentication_request: typing.Optional[PaymentAuthenticationRequest] = (
        pydantic.Field(alias="paymentAuthenticationRequest", default=None)
    )
    """
    Request Authentication during payment process
    """
    payment_tokens: typing.Optional[typing.List[PaymentToken]] = pydantic.Field(
        alias="paymentTokens", default=None
    )
    """
    List of payment tokens for the transaction
    """
    pie_key_id: typing.Optional[str] = pydantic.Field(alias="pieKeyId", default=None)
    """
    Identifier for the key that corresponds to the encryption key used for Safetech page encryption. This is used as parameter for the getKey process used by the merchant as part of the Page Integrated Encryption. Page-Integrated Encryption encrypts sensitive user data in the browser, and allows that data to travel encrypted through intermediate application tiers.
    """
    pie_phase_id: typing.Optional[str] = pydantic.Field(
        alias="piePhaseId", default=None
    )
    """
    Identifier to denote the stage or point of the encryption process used for Safetech page encryption. This is used as parameter for the getKey process used by the merchant as part of the Page Integrated Encryption. Page-Integrated Encryption encrypts sensitive user data in the browser, and allows that data to travel encrypted through intermediate application tiers.
    """
    preferred_payment_network_name_list: typing.Optional[
        typing.List[
            typing_extensions.Literal[
                "ACCEL_PINLESS",
                "EFTPOS_PINLESS",
                "NYCE_PINLESS",
                "PULSE_PINLESS",
                "STAR_PINLESS",
            ]
        ]
    ] = pydantic.Field(alias="preferredPaymentNetworkNameList", default=None)
    """
    Define the list of Payment Network Name preferred by merchant.  Payment Network Name is the label for primary transactions processing network through which card's (Debit or credit) account transactions are processed.
    """
    unmasked_account_number: typing.Optional[str] = pydantic.Field(
        alias="unmaskedAccountNumber", default=None
    )
    """
    Identifies a unique occurrence of a payment account.
    """
    wallet_card_data: typing.Optional[WalletCardData] = pydantic.Field(
        alias="walletCardData", default=None
    )
    """
    additional card information received from digital wallet provider.
    """
    wallet_provider: typing.Optional[
        typing_extensions.Literal["APPLE_PAY", "GOOGLE_PAY", "PAZE"]
    ] = pydantic.Field(alias="walletProvider", default=None)
    """
    Identifies the organization who manages the e-wallet for a consumer. The actual e-wallet management responsibilities may include hosting, accessing, communicating, and/or updating all or some of the customer data associated with the e-wallet.  An E-wallet is an application that is created on the mobile device to interact with the Point of Sale (POS) device as a catalyst for a transaction. This value may be sent to the Firm (as in Visa Tokenization) or created by the Firm.
    """
