import typing
import pydantic


class AdditionalData(pydantic.BaseModel):
    """
    Additional information received from the payment network.
    """

    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    acquirer_name: typing.Optional[str] = pydantic.Field(
        alias="acquirerName", default=None
    )
    """
    The label of the entity acting as the acquiring bank through the payment processing network during settlement to the cardholders bank (the issuer). This may be different from Firm in Gateway solution such as Stone and Elavon.
    """
    acquirer_reference_number: typing.Optional[str] = pydantic.Field(
        alias="acquirerReferenceNumber", default=None
    )
    """
    Contains identifier generated by the acquirer.  For Visa, this is the ARN.  For Mastercard, this is the ARD.
    """
    authorization_date: typing.Optional[str] = pydantic.Field(
        alias="authorizationDate", default=None
    )
    """
    The local date on which the authorization occurred (MMDD).
    """
    authorization_response_category: typing.Optional[str] = pydantic.Field(
        alias="authorizationResponseCategory", default=None
    )
    """
    Codifies the Firm's high level grouping of the Payment Network Authorization Response Code to provide a consistent response to the merchant regardless of the payment network.  valid Values: 1 ? Issuer will never approve  2 ? Issuer cannot approve at this time  3 ? Issuer cannot approve with these details  4 ? Generic response codes  N ? Not available  A ? Approved  X ? Not supported MOP
    """
    downgrade_reason_code: typing.Optional[str] = pydantic.Field(
        alias="downgradeReasonCode", default=None
    )
    """
    Network-provided reason code indicating why the authorization did not qualify for Customer Payment Service (CPS).
    """
    electronic_commerce_indicator: typing.Optional[str] = pydantic.Field(
        alias="electronicCommerceIndicator", default=None
    )
    """
    Describes the Electronic Commerce Indicator used in cardholder authentication on a network token
    """
    electronic_commerce_security_level_code: typing.Optional[str] = pydantic.Field(
        alias="electronicCommerceSecurityLevelCode", default=None
    )
    """
    Contains the electronic commerce indicators representing the security level and cardholder authentication associated with the transaction.
    """
    market_specific_data: typing.Optional[str] = pydantic.Field(
        alias="marketSpecificData", default=None
    )
    """
    Indicates Visa's classification of the merchant's industry.
    """
    merchant_advice_code: typing.Optional[str] = pydantic.Field(
        alias="merchantAdviceCode", default=None
    )
    """
    Indicates the reason for declining a MasterCard or Visa transaction and the actions merchants can take.  Valid values: 01?New account information available. Obtain new account information.  02?Try again later. Recycle transaction in 72 hours.  03?Do not try again. Obtain another type of payment from customer.  04?Token requirements not fulfilled for this token type. Resubmit with proper cryptography.  21?Do not try again. Issuer has blocked recurring payment transaction.  22?Merchant does not qualify for product code. Obtain another type of payment from customer.  24?Retry after 1 hour (Mastercard use only)  25?Retry after 24 hours (Mastercard use only)  26?Retry after 2 days (Mastercard use only)  27?Retry after 4 days (Mastercard use only)  28?Retry after 6 days (Mastercard use only)  29-Retry after 8 days (Mastercard use only)  30?Retry after 10 days (Mastercard use only)  40 ? Non-reloadable prepaid card (Mastercard use only) 41?Single-use virtual card number (Mastercard use only) 43 - Consumer multi-use virtual card number (Mastercard use only)
    """
    original_electronic_commerce_indicator: typing.Optional[str] = pydantic.Field(
        alias="originalElectronicCommerceIndicator", default=None
    )
    """
    Contains the original UCAF Collection Indicator sent by the acquirer in the Authorization Request message before the Identity Check downgrade or MDES SLI modification occurred.
    """
    original_electronic_commerce_security_level_code: typing.Optional[str] = (
        pydantic.Field(
            alias="originalElectronicCommerceSecurityLevelCode", default=None
        )
    )
    """
    Contains the original Security Level Indicators sent by the acquirer in the Authorization Request message before the Identity Check downgrade or MDES SLI modification occurred.
    """
    pos_condition_code: typing.Optional[str] = pydantic.Field(
        alias="posConditionCode", default=None
    )
    """
    Additional information about the conditions present when the transaction occurred. Examples include Normal Transaction, Card Not Present, Suspicious Transaction.
    """
    pos_entry_mode: typing.Optional[str] = pydantic.Field(
        alias="posEntryMode", default=None
    )
    """
    Indicates how payment information is captured during the exchange of goods and services at the time of purchase.
    """
    pos_entry_mode_changed: typing.Optional[bool] = pydantic.Field(
        alias="posEntryModeChanged", default=None
    )
    """
    If the entry mode has changed, the Issuer will respond with the 1-byte POS Entry Mode Change (Y)
    """
    pos_environment: typing.Optional[str] = pydantic.Field(
        alias="posEnvironment", default=None
    )
    """
    Identifies the type of periodic billing provided to the payment network in the authorization request.
    """
    processing_code: typing.Optional[str] = pydantic.Field(
        alias="processingCode", default=None
    )
    """
    A constructed data element that is composed of three fields: 1. Transaction type code - describes the specific transaction type; 2. Account type code 1 - describes the account type affected for debits ("from"); 3. Account type code 2 - describes the account type affected for credits ("to"). Aligns to ISO 8583 field 3.
    """
    product_id: typing.Optional[str] = pydantic.Field(alias="productId", default=None)
    """
    Issuer-supplied product identifier. Sample Visa values: A - Visa Traditional/NA C - Visa Signature I - Visa Commerce L - Visa Corporate Sample MasterCard values: MCF - MasterCard Fleet Card MCW - World MasterCard MDS - Debit MasterCard MCO - MasterCard Corporate.
    """
    response_reason_code: typing.Optional[str] = pydantic.Field(
        alias="responseReasonCode", default=None
    )
    """
    Indicates whether authorization request is approved or declined by the issuer.
    """
    retrieval_reference_number: typing.Optional[str] = pydantic.Field(
        alias="retrievalReferenceNumber", default=None
    )
    """
    A unique number assigned to each payment by the payment network.
    """
    return_aci: typing.Optional[str] = pydantic.Field(alias="returnAci", default=None)
    """
    Authorization Characteristics Indicator (ACI) provided by the payment networks.
    """
    system_trace_audit_number: typing.Optional[str] = pydantic.Field(
        alias="systemTraceAuditNumber", default=None
    )
    """
    The System Trace Audit Number (STAN) is assigned by a transaction originator to assist in identifying a card transaction. The STAN remains unchanged for the life of the card transaction.
    """
    validation_code: typing.Optional[str] = pydantic.Field(
        alias="validationCode", default=None
    )
    """
    Result code when CAVV is sent in payment request.
    """
