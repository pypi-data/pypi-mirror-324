import typing
import typing_extensions
import pydantic


class EncryptedPaymentHeader(typing_extensions.TypedDict):
    """
    header information for Encrypted Data from ApplePay, GooglePay or Paze.
    """

    ephemeral_public_key: typing_extensions.NotRequired[str]
    """
    Provides textual information about a cipher key for exchanging data via an associated string or byte image. This is a public key generated by the merchant and shared with Firm. In this context, this key is called ephemeral for its short life span.
    """

    public_key_hash: typing_extensions.NotRequired[str]
    """
    This is the hash output using a hash function for the Ephemeral Public Key.
    """

    wallet_application_data: typing_extensions.NotRequired[str]
    """
    Contain the data provided by merchant to the wallet provider.
    """

    wallet_transaction_id: typing_extensions.NotRequired[str]
    """
    Identifies a unique occurrence of a transaction.
    """


class _SerializerEncryptedPaymentHeader(pydantic.BaseModel):
    """
    Serializer for EncryptedPaymentHeader handling case conversions
    and file omissions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    ephemeral_public_key: typing.Optional[str] = pydantic.Field(
        alias="ephemeralPublicKey", default=None
    )
    public_key_hash: typing.Optional[str] = pydantic.Field(
        alias="publicKeyHash", default=None
    )
    wallet_application_data: typing.Optional[str] = pydantic.Field(
        alias="walletApplicationData", default=None
    )
    wallet_transaction_id: typing.Optional[str] = pydantic.Field(
        alias="walletTransactionId", default=None
    )
