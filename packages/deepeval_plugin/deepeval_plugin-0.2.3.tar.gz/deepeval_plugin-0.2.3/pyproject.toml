[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "deepeval_plugin"
dynamic = ["version"]
description = ""
readme = "README.md"
authors = [
  { name = "epuerta", email = "esteban_puerta@rhinosearch.io" },
]
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "django",
  "boto3",
  "djp",
  "deepeval"
]


[tool.django-stubs]
django_settings_module = "deepeval_plugin.settings"

[tool.coverage.run]
source_pkgs = ["deepeval_plugin", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
deepeval_plugin = ["*/deepeval_plugin/deepeval_plugin"]
tests = ["tests", "*/deepeval_plugin/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.hatch.env]
requires = ["hatch-pip-compile>=1.11.2"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
exclude = ["static"]
artifacts = ["staticfiles"]

[tool.hatch.build.targets.binary]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.default]
type = "pip-compile"
pip-compile-constraint = "default"
pip-compile-installer = "uv"
pip-compile-resolver = "uv"
lock-filename = "requirements.txt"

[tool.hatch.envs.dev]
dependencies = [
  "django-browser-reload",
  "django-debug-toolbar",
  "dj-notebook>=0.6.1",
  "Werkzeug[watchdog]>=3.0.1",
  "django-stubs[compatible-mypy]",
  "django-fastdev",
  "coverage[toml]>=6.5",
  "pre-commit",
  "pytest",
  "pytest-django",
  "pytest-sugar",
  "pytest-xdist",
  "falco-cli",
  "django-watchfiles",
  "git-cliff",
  "bump-my-version",
  "hatch-pip-compile",
  "jupyterlab",
  ]
lock-filename = "requirements-dev.txt"


[tool.hatch.envs.test]
dependencies = [
    "pytest-django",
    "pytest",
    "pytest-asyncio",
    "httpx",
    "coverage[toml]>=6.5",
]

[tool.hatch.envs.docs]
template = "dev"
extra-dependencies = [
  "furo",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-design",
  "myst-parser",
]
lock-filename = "docs/requirements.txt"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
ignore_errors = true
module = [
  "boto3.*",
  "botocore.*",
  "django_filters.*",
  "djclick.*",
  "health_check.*",
  "*.migrations.*",
]

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[project.entry-points.djp]
deepeval_plugin = "deepeval_plugin"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "kitchenai.settings"
pythonpath = "."
asyncio_mode = "auto"

[tool.ruff.lint]
extend-ignore = ["TID252", "RUF012", "TRY003", "EM101", "I001", "I002"]

[tool.ruff.lint.extend-per-file-ignores]
"deploy/*" = ["INP001"]
"*/__main__.py" = ["S104"]
"*/migrations/*" = ["E501"]
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001"]
"docs/conf.py" = ["INP001", "A001"]

[tool.bumpversion]
current_version = "0.0.1"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = "--no-verify"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
    { message = "^plugin\\(deepeval:feat\\)", group = "<!-- 0 -->🚀 Features" },
    { message = "^plugin\\(deepeval:fix\\)", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^plugin\\(deepeval:refactor\\)", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^plugin\\(deepeval:docs\\)", group = "<!-- 3 -->📚 Documentation" },
    { message = "^plugin\\(deepeval:perf\\)", group = "<!-- 4 -->⚡ Performance" },
    { message = "^plugin\\(deepeval:style\\)", group = "<!-- 5 -->🎨 Styling" },
    { message = "^plugin\\(deepeval:test\\)", group = "<!-- 6 -->🧪 Testing" },
    { message = "^plugin\\(deepeval:build\\)", group = "<!-- 7 -->📦 Build" },
    { message = "^plugin\\(deepeval:chore\\)", group = "<!-- 8 -->⚙️ Tasks" },
    { message = "^plugin\\(deepeval:security\\)", group = "<!-- 9 -->🛡️ Security" }
]
protect_breaking_commits = false
filter_commits = true
topo_order = false
sort_commits = "oldest"

[tool.hatch.version]
path = "deepeval_plugin/__version__.py"
