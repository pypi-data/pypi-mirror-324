Metadata-Version: 2.4
Name: hc-mcp-jira
Version: 2025.2.2
Summary: MCP server for Jira integration
Author-email: Erik Meinders <erik@easytocloud.com>
Requires-Python: >=3.10
Requires-Dist: jira>=3.5.1
Requires-Dist: mcp>=1.2.0
Description-Content-Type: text/markdown

# hc-mcp-jira MCP server

MCP server for Jira integration, providing your LLM tools to interact with Jira.

## Features

The server provides the following Jira integration tools:

- `get_current_user`: Get information about the currently authenticated user
- `create_issue`: Create a new Jira issue with customizable fields
- `update_issue`: Update an existing Jira issue's fields and status
- `get_issue`: Get complete issue details
- `search_issues`: Search for issues in a project using JQL
- `add_comment`: Add a comment to a Jira issue
- `list_projects`: List all accessible Jira projects
- `delete_issue`: Delete a Jira issue
- `create_issue_link`: Create a link between two issues

## Installation

The package supports uvx and can be run using the following command:

```bash
uvx hc-mcp-jira
```

Alternatively, it can be installed using:

```bash
pip install hc-mcp-jira
```

## Configuration

The server requires the following environment variables:

- `JIRA_URL`: Your Jira instance URL (e.g., "https://your-domain.atlassian.net")
- `JIRA_USERNAME`: Your Jira username/email
- `JIRA_API_TOKEN`: Your Jira API token

### Claude Desktop Configuration

There are two options to make the server available in Claude Desktop:

1) Run the following command in your terminal:

   ```bash
   uvx hc-mcp-jira --add-to-claude --env JIRA_URL=your-jira-url --env JIRA_USERNAME=your-username --env JIRA_API_TOKEN=your-api-token
   ```

2) Add the following to your Claude Desktop configuration file:

   - On MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`
   - On Windows: `%APPDATA%/Claude/claude_desktop_config.json`

   ```json
   {
     "mcpServers": {
       "hc-mcp-jira": {
         "command": "uvx",
         "args": [
           "hc-mcp-jira"
         ],
         "env": {
           "JIRA_URL": "your-jira-url",
           "JIRA_USERNAME": "your-username",
           "JIRA_API_TOKEN": "your-api-token"
         }
       }
     }
   }
   ```

### Cline Configuration

There are two options to make the server available in Cline:

1) Run the following command in your terminal:

   ```bash
   uvx hc-mcp-jira --add-to-cline --env JIRA_URL=your-jira-url --env JIRA_USERNAME=your-username --env JIRA_API_TOKEN=your-api-token
   ```
   Environment variables not explicitly set in the command will be taken from the current environment.

2) Add the following to your Cline configuration file:

  - On MacOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`
  - On Cloud9: `~/.vscode-server/data/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`

  ```json
  {
    "mcpServers": {
      "hc-mcp-jira": {
        "command": "uvx",
        "args": [
          "hc-mcp-jira"
        ],
        "env": {
          "JIRA_URL": "your-jira-url",
          "JIRA_USERNAME": "your-username",
          "JIRA_API_TOKEN": "your-api-token"
        }
      }
    }
  }
  ```

## Development

### Building and Publishing

1. Clean previous builds:
```bash
make clean
```

2. Build and publish to PyPI:
```bash
make all
```

### Debugging

Since MCP servers run over stdio, debugging can be challenging. For the best debugging
experience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).

You can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:

```bash
npx @modelcontextprotocol/inspector uvx hc-mcp-jira
```

Upon launching, the Inspector will display a URL that you can access in your browser to begin debugging.

## Example Usage

Here are some example tasks you can ask Cline to perform using this MCP server:

1. Create a new issue:
   "Create a Jira issue in project KEY with title 'Implement feature X' and type 'Task'"

2. Search for issues:
   "Find all open bugs in project KEY"

3. Update an issue:
   "Update issue KEY-123 to add the comment 'Work in progress'"

4. Link issues:
   "Create a 'blocks' link between KEY-123 and KEY-456"
