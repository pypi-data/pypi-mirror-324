name: Publish to PyPi

on:
  push:
    branches:
      - master
    paths:
      - '**.py'
  workflow_dispatch:
    inputs:
      skip_on_empty_changelog:
        description: "Skip the release if the changelog is empty"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  tests:
    uses: ./.github/workflows/test.yaml
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changelog.outputs.version }}
      tag: ${{ steps.changelog.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}
      skipped: ${{ steps.changelog.outputs.skipped }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v6
        with:
          release-count: '1'
          output-file: "false"
          skip-version-file: 'true'
          skip-commit: 'true'
          skip-git-pull: 'true'
          git-push: 'false'
          skip-on-empty: ${{ github.event_name == 'workflow_dispatch' && inputs.skip_on_empty_changelog || false }}
          fallback-version: '0.1.0'
  release:
    name: "Release and publish the version"
    needs: [ tests, version ]
    if: ${{ needs.version.outputs.skipped != 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pytest-evals
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Set version
        env:
          BUILD_VERSION: "${{ needs.version.outputs.version }}"
        run: sed -i "s/version = \"0.0.0-dev\"/version = \"${BUILD_VERSION}\"/g" pyproject.toml
      - name: Update changelog
        shell: bash
        run: |
          touch CHANGELOG.md
          echo -e "${{ needs.version.outputs.changelog }}\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
      - name: Build
        run: uv build
      - name: Publish
        run: uv publish
      - name: Update changelog
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          git add CHANGELOG.md
          git commit -m "chore(release): ${{ needs.version.outputs.version }}" CHANGELOG.md
          git push
      - name: Tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.version.outputs.tag }}',
              sha: context.sha
            })
      - name: Release on GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          files: dist/*
          body: |
            Released to https://pypi.org/project/pytest-evals/${{ needs.version.outputs.version }}/
            ---
            ${{ needs.version.outputs.clean_changelog }}
          prerelease: ${{ inputs.prerelease }}
          name: Version ${{ needs.version.outputs.version }}
          generate_release_notes: false