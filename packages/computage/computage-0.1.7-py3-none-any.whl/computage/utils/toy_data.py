import numpy as np
import pandas as pd

def generate_toy_data(n: int, 
                      p: float, 
                      n_signif_feat: int = 10, 
                      data_model_type: str = 'y->x', 
                      random_seed: int | None = None) -> pd.DataFrame:
    """
        Generate sythetic dataset with respect to particula underlying 
        model assumptions.

        TODO: Alex K. please add more details in docstring.
    """
    if random_seed is not None:
        np.random.seed(random_seed)
    
    if data_model_type == 'x->y':
        assert n_signif_feat < p
        # data case 1: y as a linear combination x plus noise; y is generated by x
        beta = np.hstack([np.linspace(0.5, 1, n_signif_feat // 2 + 1)[1:], 
                        -np.linspace(0.5, 1, n_signif_feat // 2 + 1)[1:], 
                        np.zeros(p - n_signif_feat)])
        intercept = 0
        X = pd.DataFrame(np.random.randn(n, p))
        y =  X @ beta + intercept + np.random.randn(n) / 10 # y = x1b1 + x2b2 + ... + b0 + eps

    elif data_model_type == 'y->x':
        #data case 2: x are generated by y
        y_norm = np.random.randn(n)
        X = np.zeros((n, p))
        for i, eps in enumerate(np.concatenate([np.linspace(1, 6, p//2), np.linspace(1, 6, p//2)])):
            sign = 1 if i < p//2 else -1
            x = sign * y_norm + np.random.randn(n)*eps
            X[:, i] = x

        X = pd.DataFrame(X)
        y = y_norm * 15 + 3
    else:
        raise NotImplementedError('Choose data model type from ["y->x", "x->y"]')
    
    return X, y
