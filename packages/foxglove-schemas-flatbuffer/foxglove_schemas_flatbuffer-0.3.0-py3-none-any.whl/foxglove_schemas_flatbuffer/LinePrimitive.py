# automatically generated by the FlatBuffers compiler, do not modify

# namespace: foxglove

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A primitive representing a series of points connected by lines
class LinePrimitive(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinePrimitive()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinePrimitive(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinePrimitive
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Drawing primitive to use for lines
    # LinePrimitive
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Origin of lines relative to reference frame
    # LinePrimitive
    def Pose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Pose import Pose
            obj = Pose()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Line thickness
    # LinePrimitive
    def Thickness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates whether `thickness` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false)
    # LinePrimitive
    def ScaleInvariant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Points along the line
    # LinePrimitive
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Point3 import Point3
            obj = Point3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinePrimitive
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinePrimitive
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Solid color to use for the whole line. One of `color` or `colors` must be provided.
    # LinePrimitive
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Per-point colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
    # LinePrimitive
    def Colors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinePrimitive
    def ColorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinePrimitive
    def ColorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
    # 
    # If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
    # LinePrimitive
    def Indices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LinePrimitive
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # LinePrimitive
    def IndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinePrimitive
    def IndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def LinePrimitiveStart(builder): builder.StartObject(8)
def Start(builder):
    return LinePrimitiveStart(builder)
def LinePrimitiveAddType(builder, type): builder.PrependUint8Slot(0, type, 0)
def AddType(builder, type):
    return LinePrimitiveAddType(builder, type)
def LinePrimitiveAddPose(builder, pose): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pose), 0)
def AddPose(builder, pose):
    return LinePrimitiveAddPose(builder, pose)
def LinePrimitiveAddThickness(builder, thickness): builder.PrependFloat64Slot(2, thickness, 0.0)
def AddThickness(builder, thickness):
    return LinePrimitiveAddThickness(builder, thickness)
def LinePrimitiveAddScaleInvariant(builder, scaleInvariant): builder.PrependBoolSlot(3, scaleInvariant, 0)
def AddScaleInvariant(builder, scaleInvariant):
    return LinePrimitiveAddScaleInvariant(builder, scaleInvariant)
def LinePrimitiveAddPoints(builder, points): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)
def AddPoints(builder, points):
    return LinePrimitiveAddPoints(builder, points)
def LinePrimitiveStartPointsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPointsVector(builder, numElems):
    return LinePrimitiveStartPointsVector(builder, numElems)
def LinePrimitiveAddColor(builder, color): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def AddColor(builder, color):
    return LinePrimitiveAddColor(builder, color)
def LinePrimitiveAddColors(builder, colors): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(colors), 0)
def AddColors(builder, colors):
    return LinePrimitiveAddColors(builder, colors)
def LinePrimitiveStartColorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartColorsVector(builder, numElems):
    return LinePrimitiveStartColorsVector(builder, numElems)
def LinePrimitiveAddIndices(builder, indices): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)
def AddIndices(builder, indices):
    return LinePrimitiveAddIndices(builder, indices)
def LinePrimitiveStartIndicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartIndicesVector(builder, numElems):
    return LinePrimitiveStartIndicesVector(builder, numElems)
def LinePrimitiveEnd(builder): return builder.EndObject()
def End(builder):
    return LinePrimitiveEnd(builder)