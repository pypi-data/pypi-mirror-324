# automatically generated by the FlatBuffers compiler, do not modify

# namespace: foxglove

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A key with its associated value
class KeyValuePair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KeyValuePair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKeyValuePair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KeyValuePair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Key
    # KeyValuePair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Value
    # KeyValuePair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KeyValuePairStart(builder): builder.StartObject(2)
def Start(builder):
    return KeyValuePairStart(builder)
def KeyValuePairAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return KeyValuePairAddKey(builder, key)
def KeyValuePairAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return KeyValuePairAddValue(builder, value)
def KeyValuePairEnd(builder): return builder.EndObject()
def End(builder):
    return KeyValuePairEnd(builder)