"""
This module provides classes for handling Ethereum transactions, including transaction receipts,
raw transactions, and transaction management.
"""

from collections.abc import Sequence
from decimal import Decimal
from typing import Self

from eth_account.datastructures import SignedTransaction
from eth_typing import BlockNumber, HexStr
from financepype.operations.transactions.models import BlockchainTransactionReceipt
from financepype.operations.transactions.transaction import BlockchainTransaction
from hexbytes import HexBytes
from pydantic import BaseModel, ConfigDict
from web3.types import AccessList, LogReceipt, Nonce, TxData, TxReceipt, Wei

from blockchainpype.evm.blockchain.identifier import (
    EthereumAddress,
    EthereumBlockHash,
    EthereumTransactionHash,
)


class EthereumTransactionReceipt(BlockchainTransactionReceipt):
    """
    Represents an Ethereum transaction receipt containing detailed information about a completed transaction.

    This class extends BlockchainTransactionReceipt to provide Ethereum-specific transaction receipt handling.
    It includes information such as gas usage, block details, and transaction status.

    Attributes:
        transaction_id (EthereumTransactionHash): The unique hash of the transaction
        block_hash (EthereumBlockHash): Hash of the block containing this transaction
        block_number (BlockNumber): Number of the block containing this transaction
        contract_address (EthereumAddress | None): Address of the created contract, if any
        cumulative_gas_used (int): Total gas used in the block up to this transaction
        effective_gas_price (Wei): The actual price per gas unit paid for this transaction
        gas_used (int): Amount of gas used by this specific transaction
        sender (EthereumAddress): Address of the transaction sender
        logs (list[LogReceipt]): List of log entries generated by this transaction
        logs_bloom (HexBytes): Bloom filter for light clients to quickly retrieve related logs
        root (HexStr): Post-transaction state root (pre-Byzantium)
        status (int): Transaction status (1 for success, 0 for failure)
        to (EthereumAddress): Recipient address
        transaction_index (int): Index position of the transaction in the block
        type (int): Transaction type identifier
    """

    model_config = ConfigDict(frozen=True, arbitrary_types_allowed=True)

    transaction_id: EthereumTransactionHash
    block_hash: EthereumBlockHash
    block_number: BlockNumber
    contract_address: EthereumAddress | None
    cumulative_gas_used: int
    effective_gas_price: Wei
    gas_used: int
    sender: EthereumAddress
    logs: list[LogReceipt]
    logs_bloom: HexBytes
    root: HexStr
    status: int
    to: EthereumAddress
    transaction_index: int
    type: int

    @classmethod
    def from_raw(cls, raw_transaction_receipt: TxReceipt) -> Self:
        """
        Creates an EthereumTransactionReceipt instance from a raw transaction receipt.

        Args:
            raw_transaction_receipt (TxReceipt): Raw transaction receipt data from the blockchain

        Returns:
            Self: A new instance of EthereumTransactionReceipt
        """
        return cls(
            block_hash=EthereumBlockHash.from_raw(raw_transaction_receipt["blockHash"]),
            block_number=raw_transaction_receipt["blockNumber"],
            contract_address=EthereumAddress.from_raw(
                raw_transaction_receipt["contractAddress"]
            ),
            cumulative_gas_used=raw_transaction_receipt["cumulativeGasUsed"],
            effective_gas_price=raw_transaction_receipt["effectiveGasPrice"],
            gas_used=raw_transaction_receipt["gasUsed"],
            sender=EthereumAddress.from_raw(raw_transaction_receipt["from"]),
            logs=raw_transaction_receipt["logs"],
            logs_bloom=raw_transaction_receipt["logsBloom"],
            root=raw_transaction_receipt["root"],
            status=raw_transaction_receipt["status"],
            to=EthereumAddress.from_raw(raw_transaction_receipt["to"]),
            transaction_id=EthereumTransactionHash.from_raw(
                raw_transaction_receipt["transactionHash"]
            ),
            transaction_index=raw_transaction_receipt["transactionIndex"],
            type=raw_transaction_receipt["type"],
        )

    @property
    def fee_amount(self) -> Decimal:
        """
        Calculates the total transaction fee in Wei.

        Returns:
            Decimal: The total transaction fee (gas_used * effective_gas_price)
        """
        return Decimal(self.effective_gas_price) * Decimal(self.gas_used)


class EthereumRawTransaction(BaseModel):
    """
    Represents a raw Ethereum transaction before it's signed and submitted to the network.

    This class contains all the necessary fields for an Ethereum transaction, supporting
    different transaction types including legacy, EIP-1559, and blob transactions.

    Attributes:
        access_list (AccessList | None): Optional list of addresses and storage keys for pre-warming
        blob_versioned_hashes (Sequence[HexBytes] | None): Blob hashes for EIP-4844 transactions
        block_hash (HexBytes | None): Hash of the block containing this transaction
        block_number (BlockNumber): Block number where this transaction was included
        chain_id (int | None): Chain ID to prevent replay attacks
        data (bytes | HexStr | None): Transaction input data
        sender (EthereumAddress): Address of the transaction sender
        gas (int | None): Gas limit for the transaction
        gas_price (Wei | None): Legacy gas price in Wei
        max_fee_per_blob_gas (Wei | None): Maximum fee per blob gas for EIP-4844
        max_fee_per_gas (Wei | None): Maximum total fee per gas unit for EIP-1559
        max_priority_fee_per_gas (Wei | None): Maximum priority fee per gas for EIP-1559
        hash (HexBytes | None): Transaction hash
        input (HexBytes | None): Transaction input data (alias for data)
        nonce (Nonce): Transaction nonce
        r (HexBytes | None): ECDSA signature r
        s (HexBytes | None): ECDSA signature s
        to (EthereumAddress): Recipient address
        transaction_index (int | None): Index position in the block
        type (int | HexStr | None): Transaction type identifier
        v (int | None): ECDSA recovery ID
        value (Wei | None): Amount of ETH to transfer in Wei
        y_parity (int | None): ECDSA signature y-parity
    """

    model_config = ConfigDict(arbitrary_types_allowed=True)

    access_list: AccessList | None = None
    blob_versioned_hashes: Sequence[HexBytes] | None = None
    block_hash: HexBytes | None = None
    block_number: BlockNumber
    chain_id: int | None = None
    data: bytes | HexStr | None = None
    sender: EthereumAddress
    gas: int | None = None
    gas_price: Wei | None = None
    max_fee_per_blob_gas: Wei | None = None
    max_fee_per_gas: Wei | None = None
    max_priority_fee_per_gas: Wei | None = None
    hash: HexBytes | None = None
    input: HexBytes | None = None
    nonce: Nonce
    r: HexBytes | None = None
    s: HexBytes | None = None
    to: EthereumAddress
    transaction_index: int | None = None
    type: int | HexStr | None = None
    v: int | None = None
    value: Wei | None = None
    y_parity: int | None = None

    @classmethod
    def from_raw(cls, raw_transaction: TxData) -> Self:
        """
        Creates an EthereumRawTransaction instance from raw transaction data.

        Args:
            raw_transaction (TxData): Raw transaction data from the blockchain

        Returns:
            Self: A new instance of EthereumRawTransaction
        """
        kwargs = {
            "access_list": raw_transaction.get("accessList", None),
            "blob_versioned_hashes": raw_transaction.get("blobVersionedHashes", None),
            "block_hash": raw_transaction.get("blockHash", None),
            "block_number": raw_transaction.get("blockNumber", None),
            "chain_id": raw_transaction.get("chainId", None),
            "data": raw_transaction.get("data", None),
            "sender": EthereumAddress.from_raw(raw_transaction["from"])
            if "from" in raw_transaction
            else None,
            "gas": raw_transaction.get("gas", None),
            "gasPrice": raw_transaction.get("gasPrice", None),
            "max_fee_per_blob_gas": raw_transaction.get("maxFeePerBlobGas", None),
            "max_fee_per_gas": raw_transaction.get("maxFeePerGas", None),
            "max_priority_fee_per_gas": raw_transaction.get(
                "maxPriorityFeePerGas", None
            ),
            "hash": raw_transaction.get("hash", None),
            "input": raw_transaction.get("input", None),
            "nonce": raw_transaction.get("nonce", None),
            "r": raw_transaction.get("r", None),
            "s": raw_transaction.get("s", None),
            "to": EthereumAddress.from_raw(raw_transaction["to"])
            if "to" in raw_transaction
            else None,
            "transaction_index": raw_transaction.get("transactionIndex", None),
            "type": raw_transaction.get("type", None),
            "v": raw_transaction.get("v", None),
            "value": raw_transaction.get("value", None),
            "y_parity": raw_transaction.get("yParity", None),
        }
        kwargs = {k: v for k, v in kwargs.items() if v is not None}

        return cls(**kwargs)


class EthereumTransaction(BlockchainTransaction):
    """
    High-level representation of an Ethereum transaction with additional functionality.

    This class extends BlockchainTransaction to provide Ethereum-specific transaction handling,
    including support for modification, cancellation, and speed-up operations.

    Attributes:
        operator_operation_id (EthereumTransactionHash | None): Optional operator transaction ID
        signed_transaction (SignedTransaction | None): Signed transaction data
        raw_transaction (EthereumRawTransaction | None): Raw transaction data
        receipt (EthereumTransactionReceipt | None): Transaction receipt after mining
    """

    operator_operation_id: EthereumTransactionHash | None = None
    signed_transaction: SignedTransaction | None = None
    raw_transaction: EthereumRawTransaction | None = None
    receipt: EthereumTransactionReceipt | None = None

    @property
    def can_be_modified(self) -> bool:
        """
        Indicates if the transaction can be modified.

        Returns:
            bool: True if the transaction can be modified, False otherwise
        """
        return True

    @property
    def can_be_cancelled(self) -> bool:
        """
        Indicates if the transaction can be cancelled.

        Returns:
            bool: True if the transaction can be cancelled, False otherwise
        """
        return True

    @property
    def can_be_speeded_up(self) -> bool:
        """
        Indicates if the transaction speed can be increased.

        Returns:
            bool: True if the transaction can be speeded up, False otherwise
        """
        return True

    def process_receipt(self, receipt: EthereumTransactionReceipt) -> bool:
        """
        Processes a transaction receipt.

        Args:
            receipt (EthereumTransactionReceipt): The transaction receipt to process

        Returns:
            bool: True if the receipt was processed successfully

        Raises:
            NotImplementedError: This method needs to be implemented by subclasses
        """
        raise NotImplementedError
