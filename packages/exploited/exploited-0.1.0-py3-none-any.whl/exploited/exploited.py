"""
Interactive Options Strategy Selector with market analysis
"""

import sys
import time
import datetime
from typing import List, Dict, Tuple
from dataclasses import dataclass
import numpy as np
import pandas as pd

try:
    from nse_greeks_calculator.greeks import NSEGreeksCalculator
except ImportError:
    print("Error: nse-greeks-calculator not installed.")
    print("Please run: pip install nse-greeks-calculator")
    sys.exit(1)

try:
    from nsepython import *
except ImportError:
    print("Error: nsepython not installed.")
    print("Please run: pip install nsepython")
    sys.exit(1)

@dataclass
class OptionLeg:
    strike: float
    option_type: str
    position: int
    quantity: int

class StrategyAnalyzer:
    def analyze_market_conditions(self, spot_price: float, greeks: Dict, iv: float) -> Tuple[str, List[str]]:
        """
        Analyze market conditions and suggest optimal strategy
        Returns: (strategy_name, list of reasons)
        """
        # Market condition analysis
        high_iv = iv > 0.15  # 15% IV threshold
        high_delta = abs(greeks['delta']) > 0.5
        high_theta = abs(greeks['theta']) > 10
        high_vega = abs(greeks['vega']) > 20

        # Decision logic for strategy selection
        if high_iv:
            if high_theta:
                return "IRON_CONDOR", [
                    "High implied volatility (IV) environment good for premium collection",
                    "High theta indicates good premium decay potential",
                    "Market showing signs of range-bound movement",
                    "Good setup for non-directional premium collection"
                ]
            elif high_vega:
                return "BUTTERFLY", [
                    "High implied volatility with significant vega exposure",
                    "Potential for volatility contraction",
                    "Good for precise price targets",
                    "Limited risk with good reward potential"
                ]
        else:  # Low IV environment
            if high_delta:
                return "VERTICAL_SPREAD", [
                    "Low implied volatility environment",
                    "Strong directional bias (high delta)",
                    "Good for directional plays with defined risk",
                    "Potential for volatility expansion"
                ]
            else:
                return "CALENDAR_SPREAD", [
                    "Low implied volatility environment",
                    "Neutral delta indicates range-bound expectations",
                    "Potential to benefit from volatility expansion",
                    "Good for time decay exploitation"
                ]

class InteractiveOptionsTrader:
    def __init__(self):
        self.symbol = None
        self.expiry_date = None
        self.calculator = None
        self.analyzer = StrategyAnalyzer()

    def clear_screen(self):
        """Clear the console screen"""
        print("\033[H\033[J", end="")

    def get_available_expiries(self):
        """Get list of available expiry dates"""
        try:
            chain = nse_optionchain_scrapper(self.symbol)
            if chain and 'records' in chain:
                return chain['records'].get('expiryDates', [])
            return []
        except Exception as e:
            print(f"Error fetching expiry dates: {e}")
            return []

    def initialize_session(self):
        """Initialize trading session with symbol and expiry"""
        self.clear_screen()
        print("=== Options Strategy Builder ===")
        print("\nAvailable symbols: NIFTY, BANKNIFTY, FINNIFTY")
        
        while True:
            self.symbol = input("\nEnter symbol: ").upper()
            if self.symbol in ['NIFTY', 'BANKNIFTY', 'FINNIFTY']:
                break
            print("Invalid symbol. Please try again.")

        # Get available expiry dates
        expiries = self.get_available_expiries()
        print("\nAvailable expiry dates:")
        for i, exp in enumerate(expiries, 1):
            print(f"{i}. {exp}")
        
        while True:
            try:
                choice = int(input("\nSelect expiry date (enter number): "))
                self.expiry_date = expiries[choice - 1]
                break
            except (ValueError, IndexError):
                print("Invalid selection. Please try again.")

        self.calculator = NSEGreeksCalculator(self.symbol)
        print(f"\nInitialized session for {self.symbol} with expiry {self.expiry_date}")
        time.sleep(2)

    def display_main_menu(self):
        """Display main menu options"""
        self.clear_screen()
        print(f"\n=== Options Strategy Builder - {self.symbol} {self.expiry_date} ===")
        print("\n1. Analyze Market & Get Strategy Suggestions")
        print("2. Build Iron Condor")
        print("3. Build Butterfly")
        print("4. Build Custom Strategy")
        print("5. Monitor Existing Strategy")
        print("6. Change Symbol/Expiry")
        print("7. Exit")
        
        return input("\nSelect option (1-7): ")

    def get_market_analysis(self):
        """Analyze market conditions and suggest strategies"""
        self.clear_screen()
        print("\n=== Market Analysis ===")
        
        # Get ATM strike
        spot_price = self.calculator.get_spot_price()
        atm_strike = round(spot_price / 50) * 50
        
        # Get option data
        option_data = self.calculator.get_option_data(
            strike_price=atm_strike,
            expiry_date=self.expiry_date,
            option_type='CE'
        )
        
        if option_data and (greeks := self.calculator.calculate_greeks(option_data)):
            print(f"\nCurrent Market Conditions:")
            print(f"Spot Price: {spot_price:.2f}")
            print(f"ATM Strike: {atm_strike}")
            print(f"IV: {option_data['implied_volatility']*100:.2f}%")
            print("\nGreeks:")
            for greek, value in greeks.items():
                print(f"{greek.capitalize()}: {value:.4f}")
            
            strategy, reasons = self.analyzer.analyze_market_conditions(
                spot_price, greeks, option_data['implied_volatility']
            )
            
            print(f"\nSuggested Strategy: {strategy}")
            print("\nRationale:")
            for reason in reasons:
                print(f"- {reason}")
                
        input("\nPress Enter to continue...")

    def build_strategy(self, strategy_type: str):
        """Build a specific options strategy"""
        self.clear_screen()
        print(f"\n=== Building {strategy_type} Strategy ===")
        
        spot_price = self.calculator.get_spot_price()
        print(f"\nCurrent spot price: {spot_price:.2f}")
        
        if strategy_type == "IRON_CONDOR":
            center_strike = float(input("\nEnter center strike price: "))
            wing_width = float(input("Enter wing width: "))
            body_width = float(input("Enter body width: "))
            
            legs = [
                OptionLeg(center_strike - body_width/2, 'PE', -1, 1),
                OptionLeg(center_strike - body_width/2 - wing_width, 'PE', 1, 1),
                OptionLeg(center_strike + body_width/2, 'CE', -1, 1),
                OptionLeg(center_strike + body_width/2 + wing_width, 'CE', 1, 1)
            ]
            
        elif strategy_type == "BUTTERFLY":
            center_strike = float(input("\nEnter center strike price: "))
            wing_width = float(input("Enter wing width: "))
            
            legs = [
                OptionLeg(center_strike, 'CE', -2, 1),
                OptionLeg(center_strike - wing_width, 'CE', 1, 1),
                OptionLeg(center_strike + wing_width, 'CE', 1, 1)
            ]
            
        else:  # Custom strategy
            legs = []
            while True:
                print("\nCurrent legs:", len(legs))
                add_leg = input("\nAdd another leg? (y/n): ").lower()
                if add_leg != 'y':
                    break
                    
                strike = float(input("Enter strike price: "))
                option_type = input("Enter option type (CE/PE): ").upper()
                position = int(input("Enter position (1 for long, -1 for short): "))
                quantity = int(input("Enter quantity: "))
                
                legs.append(OptionLeg(strike, option_type, position, quantity))
        
        return legs

    def monitor_strategy(self, legs: List[OptionLeg]):
        """Monitor a strategy's Greeks and P&L"""
        self.clear_screen()
        print("\n=== Strategy Monitor ===")
        print("\nStrategy legs:")
        for i, leg in enumerate(legs, 1):
            print(f"Leg {i}: {leg.position}x {leg.quantity} {leg.strike} {leg.option_type}")
        
        try:
            while True:
                total_greeks = {'delta': 0, 'gamma': 0, 'theta': 0, 'vega': 0, 'rho': 0}
                total_premium = 0
                
                for leg in legs:
                    option_data = self.calculator.get_option_data(
                        strike_price=leg.strike,
                        expiry_date=self.expiry_date,
                        option_type=leg.option_type
                    )
                    
                    if option_data:
                        greeks = self.calculator.calculate_greeks(option_data)
                        if greeks:
                            multiplier = leg.position * leg.quantity
                            for greek in greeks:
                                total_greeks[greek] += greeks[greek] * multiplier
                            total_premium += option_data['option_price'] * multiplier
                
                self.clear_screen()
                print(f"\nTime: {datetime.datetime.now().strftime('%H:%M:%S')}")
                print(f"Total Premium: ₹{total_premium:.2f}")
                print("\nStrategy Greeks:")
                for greek, value in total_greeks.items():
                    print(f"{greek.capitalize()}: {value:.4f}")
                print("-" * 50)
                
                time.sleep(5)
                
        except KeyboardInterrupt:
            print("\nStopped monitoring")
            input("\nPress Enter to continue...")

    def run(self):
        """Main program loop"""
        self.initialize_session()
        
        while True:
            choice = self.display_main_menu()
            
            if choice == '1':
                self.get_market_analysis()
            elif choice == '2':
                legs = self.build_strategy("IRON_CONDOR")
                self.monitor_strategy(legs)
            elif choice == '3':
                legs = self.build_strategy("BUTTERFLY")
                self.monitor_strategy(legs)
            elif choice == '4':
                legs = self.build_strategy("CUSTOM")
                self.monitor_strategy(legs)
            elif choice == '5':
                print("\nNo saved strategies found.")
                input("\nPress Enter to continue...")
            elif choice == '6':
                self.initialize_session()
            elif choice == '7':
                print("\nExiting program...")
                break
            else:
                print("\nInvalid choice. Please try again.")
                time.sleep(1)

def main():
    trader = InteractiveOptionsTrader()
    trader.run()

if __name__ == "__main__":
    main()