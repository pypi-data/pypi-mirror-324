from . import _backend_pdf_ps
from enum import Enum
from matplotlib import cbook as cbook
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.afm import AFM as AFM
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, GraphicsContextBase as GraphicsContextBase, RendererBase as RendererBase, _Backend
from matplotlib.backends.backend_mixed import MixedModeRenderer as MixedModeRenderer
from matplotlib.dates import UTC as UTC
from matplotlib.figure import Figure as Figure
from matplotlib.font_manager import findfont as findfont, get_font as get_font
from matplotlib.ft2font import FIXED_WIDTH as FIXED_WIDTH, FT2Font as FT2Font, ITALIC as ITALIC, KERNING_UNFITTED as KERNING_UNFITTED, LOAD_NO_HINTING as LOAD_NO_HINTING, LOAD_NO_SCALE as LOAD_NO_SCALE
from matplotlib.mathtext import MathTextParser as MathTextParser
from matplotlib.path import Path as Path
from matplotlib.transforms import Affine2D as Affine2D, BboxBase as BboxBase
from typing import Any

def fill(strings, linelen: int = ...): ...
def pdfRepr(obj): ...

class Reference:
    id: Any
    def __init__(self, id) -> None: ...
    def pdfRepr(self): ...
    def write(self, contents, file) -> None: ...

class Name:
    name: Any
    def __init__(self, name) -> None: ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __hash__(self): ...
    @staticmethod
    def hexify(match): ...
    def pdfRepr(self): ...

class Operator:
    op: Any
    def __init__(self, op) -> None: ...
    def pdfRepr(self): ...

class Verbatim:
    def __init__(self, x) -> None: ...
    def pdfRepr(self): ...

class Op(Operator, Enum):
    close_fill_stroke: bytes
    fill_stroke: bytes
    fill: bytes
    closepath: Any
    close_stroke: bytes
    stroke: bytes
    endpath: bytes
    begin_text: Any
    end_text: bytes
    curveto: bytes
    rectangle: bytes
    lineto: bytes
    moveto: Any
    concat_matrix: bytes
    use_xobject: bytes
    setgray_stroke: Any
    setgray_nonstroke: bytes
    setrgb_stroke: bytes
    setrgb_nonstroke: Any
    setcolorspace_stroke: bytes
    setcolorspace_nonstroke: Any
    setcolor_stroke: bytes
    setcolor_nonstroke: bytes
    setdash: Any
    setlinejoin: bytes
    setlinecap: bytes
    setgstate: bytes
    gsave: Any
    grestore: bytes
    textpos: bytes
    selectfont: bytes
    textmatrix: Any
    show: bytes
    showkern: bytes
    setlinewidth: bytes
    clip: bytes
    shading: bytes
    @classmethod
    def paint_path(cls, fill, stroke): ...

class Stream:
    id: Any
    len: Any
    pdfFile: Any
    file: Any
    compressobj: Any
    extra: Any
    pos: Any
    def __init__(self, id, len, file, extra: Any | None = ..., png: Any | None = ...) -> None: ...
    def end(self) -> None: ...
    def write(self, data) -> None: ...

class PdfFile:
    xrefTable: Any
    passed_in_file_object: bool
    original_file_like: Any
    tell_base: int
    fh: Any
    currentstream: Any
    rootObject: Any
    pagesObject: Any
    pageList: Any
    fontObject: Any
    hatchObject: Any
    gouraudObject: Any
    XObjectObject: Any
    resourceObject: Any
    infoDict: Any
    fontNames: Any
    dviFontInfo: Any
    type1Descriptors: Any
    alphaStates: Any
    hatchPatterns: Any
    gouraudTriangles: Any
    markers: Any
    multi_byte_charprocs: Any
    paths: Any
    pageAnnotations: Any
    def __init__(self, filename, metadata: Any | None = ...) -> None: ...
    def newPage(self, width, height) -> None: ...
    def newTextnote(self, text, positionRect=...) -> None: ...
    def finalize(self) -> None: ...
    def close(self) -> None: ...
    def write(self, data) -> None: ...
    def output(self, *data) -> None: ...
    def beginStream(self, id, len, extra: Any | None = ..., png: Any | None = ...) -> None: ...
    def endStream(self) -> None: ...
    def fontName(self, fontprop): ...
    def dviFontName(self, dvifont): ...
    def writeFonts(self) -> None: ...
    def createType1Descriptor(self, t1font, fontfile): ...
    def embedTTF(self, filename, characters): ...
    def alphaState(self, alpha): ...
    def writeExtGSTates(self) -> None: ...
    def hatchPattern(self, hatch_style): ...
    def writeHatches(self) -> None: ...
    def addGouraudTriangles(self, points, colors): ...
    def writeGouraudTriangles(self) -> None: ...
    def imageObject(self, image): ...
    def writeImages(self) -> None: ...
    def markerObject(self, path, trans, fill, stroke, lw, joinstyle, capstyle): ...
    def writeMarkers(self) -> None: ...
    def pathCollectionObject(self, gc, path, trans, padding, filled, stroked): ...
    def writePathCollectionTemplates(self) -> None: ...
    @staticmethod
    def pathOperations(path, transform, clip: Any | None = ..., simplify: Any | None = ..., sketch: Any | None = ...): ...
    def writePath(self, path, transform, clip: bool = ..., sketch: Any | None = ...) -> None: ...
    def reserveObject(self, name: str = ...): ...
    def recordXref(self, id) -> None: ...
    def writeObject(self, object, contents) -> None: ...
    startxref: Any
    def writeXref(self) -> None: ...
    infoObject: Any
    def writeInfoDict(self) -> None: ...
    def writeTrailer(self) -> None: ...

class RendererPdf(_backend_pdf_ps.RendererPDFPSBase):
    file: Any
    gc: Any
    image_dpi: Any
    def __init__(self, file, image_dpi, height, width) -> None: ...
    @property
    def mathtext_parser(self): ...
    def finalize(self) -> None: ...
    def check_gc(self, gc, fillcolor: Any | None = ...) -> None: ...
    def get_image_magnification(self): ...
    def draw_image(self, gc, x, y, im, transform: Any | None = ...) -> None: ...
    def draw_path(self, gc, path, transform, rgbFace: Any | None = ...) -> None: ...
    def draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position): ...
    def draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace: Any | None = ...) -> None: ...
    def draw_gouraud_triangle(self, gc, points, colors, trans) -> None: ...
    def draw_gouraud_triangles(self, gc, points, colors, trans) -> None: ...
    def draw_mathtext(self, gc, x, y, s, prop, angle) -> None: ...
    def draw_tex(self, gc, x, y, s, prop, angle, *, mtext: Any | None = ...) -> None: ...
    def encode_string(self, s, fonttype): ...
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = ..., mtext: Any | None = ...): ...
    def new_gc(self): ...

class GraphicsContextPdf(GraphicsContextBase):
    file: Any
    parent: Any
    def __init__(self, file) -> None: ...
    def stroke(self): ...
    def fill(self, *args): ...
    def paint(self): ...
    capstyles: Any
    joinstyles: Any
    def capstyle_cmd(self, style): ...
    def joinstyle_cmd(self, style): ...
    def linewidth_cmd(self, width): ...
    def dash_cmd(self, dashes): ...
    def alpha_cmd(self, alpha, forced, effective_alphas): ...
    def hatch_cmd(self, hatch, hatch_color): ...
    def rgb_cmd(self, rgb): ...
    def fillcolor_cmd(self, rgb): ...
    def push(self): ...
    def pop(self): ...
    def clip_cmd(self, cliprect, clippath): ...
    commands: Any
    def delta(self, other): ...
    def copy_properties(self, other) -> None: ...
    def finalize(self): ...

class PdfPages:
    keep_empty: Any
    def __init__(self, filename, keep_empty: bool = ..., metadata: Any | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def close(self) -> None: ...
    def infodict(self): ...
    def savefig(self, figure: Any | None = ..., **kwargs) -> None: ...
    def get_pagecount(self): ...
    def attach_note(self, text, positionRect=...) -> None: ...

class FigureCanvasPdf(FigureCanvasBase):
    fixed_dpi: int
    filetypes: Any
    def get_default_filetype(self): ...
    def print_pdf(self, filename, *, dpi: Any | None = ..., bbox_inches_restore: Any | None = ..., metadata: Any | None = ...) -> None: ...
    def draw(self): ...
FigureManagerPdf = FigureManagerBase

class _BackendPdf(_Backend):
    FigureCanvas: Any
