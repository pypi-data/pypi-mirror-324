import tkinter as tk
from matplotlib import backend_tools as backend_tools, cbook as cbook
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, NavigationToolbar2 as NavigationToolbar2, TimerBase as TimerBase, ToolContainerBase as ToolContainerBase, _Backend, cursors as cursors
from matplotlib.figure import Figure as Figure
from matplotlib.widgets import SubplotTool as SubplotTool
from typing import Any

backend_version: Any
cursord: Any
TK_PHOTO_COMPOSITE_OVERLAY: int
TK_PHOTO_COMPOSITE_SET: int

def blit(photoimage, aggimage, offsets, bbox: Any | None = ...) -> None: ...

class TimerTk(TimerBase):
    parent: Any
    def __init__(self, parent, *args, **kwargs) -> None: ...

class FigureCanvasTk(FigureCanvasBase):
    required_interactive_framework: str
    def __init__(self, figure: Any | None = ..., master: Any | None = ..., resize_callback: Any | None = ...) -> None: ...
    def resize(self, event) -> None: ...
    def draw_idle(self) -> None: ...
    def get_tk_widget(self): ...
    def motion_notify_event(self, event) -> None: ...
    def enter_notify_event(self, event) -> None: ...
    def button_press_event(self, event, dblclick: bool = ...) -> None: ...
    def button_dblclick_event(self, event) -> None: ...
    def button_release_event(self, event) -> None: ...
    def scroll_event(self, event) -> None: ...
    def scroll_event_windows(self, event) -> None: ...
    def key_press(self, event) -> None: ...
    def key_release(self, event) -> None: ...
    def new_timer(self, *args, **kwargs): ...
    def flush_events(self) -> None: ...
    def start_event_loop(self, timeout: int = ...) -> None: ...
    def stop_event_loop(self) -> None: ...

class FigureManagerTk(FigureManagerBase):
    window: Any
    toolbar: Any
    def __init__(self, canvas, num, window) -> None: ...
    def resize(self, width, height) -> None: ...
    def show(self) -> None: ...
    def destroy(self, *args) -> None: ...
    def get_window_title(self): ...
    def set_window_title(self, title) -> None: ...
    def full_screen_toggle(self) -> None: ...

class NavigationToolbar2Tk(NavigationToolbar2, tk.Frame):
    window: Any
    message: Any
    def __init__(self, canvas, window, *, pack_toolbar: bool = ...) -> None: ...
    def pan(self, *args) -> None: ...
    def zoom(self, *args) -> None: ...
    def set_message(self, s) -> None: ...
    lastrect: Any
    def draw_rubberband(self, event, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...
    def set_cursor(self, cursor) -> None: ...
    def save_figure(self, *args) -> None: ...
    def set_history_buttons(self) -> None: ...

class ToolTip:
    @staticmethod
    def createToolTip(widget, text) -> None: ...
    widget: Any
    tipwindow: Any
    id: Any
    x: int
    def __init__(self, widget) -> None: ...
    text: Any
    def showtip(self, text) -> None: ...
    def hidetip(self) -> None: ...

class RubberbandTk(backend_tools.RubberbandBase):
    lastrect: Any
    def draw_rubberband(self, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...

class SetCursorTk(backend_tools.SetCursorBase):
    def set_cursor(self, cursor) -> None: ...

class ToolbarTk(ToolContainerBase, tk.Frame):
    def __init__(self, toolmanager, window) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle): ...
    def toggle_toolitem(self, name, toggled) -> None: ...
    def remove_toolitem(self, name) -> None: ...
    def set_message(self, s) -> None: ...

class SaveFigureTk(backend_tools.SaveFigureBase):
    def trigger(self, *args) -> None: ...

class ConfigureSubplotsTk(backend_tools.ConfigureSubplotsBase):
    window: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def trigger(self, *args) -> None: ...
    def init_window(self) -> None: ...
    def destroy(self, *args, **kwargs) -> None: ...

class HelpTk(backend_tools.ToolHelpBase):
    def trigger(self, *args): ...
Toolbar = ToolbarTk

class _BackendTk(_Backend):
    FigureManager: Any
    @classmethod
    def new_figure_manager_given_figure(cls, num, figure): ...
    @staticmethod
    def mainloop() -> None: ...
