from .. import cbook as cbook, font_manager as font_manager
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, GraphicsContextBase as GraphicsContextBase, RendererBase as RendererBase, _Backend
from matplotlib.font_manager import ttfFontProperty as ttfFontProperty
from matplotlib.mathtext import MathTextParser as MathTextParser
from matplotlib.path import Path as Path
from matplotlib.transforms import Affine2D as Affine2D
from typing import Any

backend_version: Any

class RendererCairo(RendererBase):
    mathtext_parser: Any
    dpi: Any
    gc: Any
    text_ctx: Any
    def __init__(self, dpi) -> None: ...
    def set_ctx_from_surface(self, surface) -> None: ...
    width: Any
    height: Any
    def set_width_height(self, width, height) -> None: ...
    def draw_path(self, gc, path, transform, rgbFace: Any | None = ...) -> None: ...
    def draw_markers(self, gc, marker_path, marker_trans, path, transform, rgbFace: Any | None = ...) -> None: ...
    def draw_image(self, gc, x, y, im) -> None: ...
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = ..., mtext: Any | None = ...) -> None: ...
    def get_canvas_width_height(self): ...
    def get_text_width_height_descent(self, s, prop, ismath): ...
    def new_gc(self): ...
    def points_to_pixels(self, points): ...

class GraphicsContextCairo(GraphicsContextBase):
    renderer: Any
    def __init__(self, renderer) -> None: ...
    def restore(self) -> None: ...
    def set_alpha(self, alpha) -> None: ...
    def set_antialiased(self, b) -> None: ...
    def set_capstyle(self, cs) -> None: ...
    def set_clip_rectangle(self, rectangle) -> None: ...
    def set_clip_path(self, path) -> None: ...
    def set_dashes(self, offset, dashes) -> None: ...
    def set_foreground(self, fg, isRGBA: Any | None = ...) -> None: ...
    def get_rgb(self): ...
    def set_joinstyle(self, js) -> None: ...
    def set_linewidth(self, w) -> None: ...

class _CairoRegion:
    def __init__(self, slices, data) -> None: ...

class FigureCanvasCairo(FigureCanvasBase):
    def copy_from_bbox(self, bbox): ...
    def restore_region(self, region) -> None: ...
    def print_png(self, fobj) -> None: ...
    def print_rgba(self, fobj) -> None: ...
    print_raw: Any
    print_pdf: Any
    print_ps: Any
    print_svg: Any
    print_svgz: Any

class _BackendCairo(_Backend):
    FigureCanvas: Any
    FigureManager: Any
