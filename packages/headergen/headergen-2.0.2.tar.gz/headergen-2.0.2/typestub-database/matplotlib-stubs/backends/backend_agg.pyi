from matplotlib import cbook as cbook
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, RendererBase as RendererBase, _Backend
from matplotlib.font_manager import findfont as findfont, get_font as get_font
from matplotlib.ft2font import LOAD_DEFAULT as LOAD_DEFAULT, LOAD_FORCE_AUTOHINT as LOAD_FORCE_AUTOHINT, LOAD_NO_AUTOHINT as LOAD_NO_AUTOHINT, LOAD_NO_HINTING as LOAD_NO_HINTING
from matplotlib.mathtext import MathTextParser as MathTextParser
from matplotlib.path import Path as Path
from matplotlib.transforms import Bbox as Bbox, BboxBase as BboxBase
from typing import Any

backend_version: str

def get_hinting_flag(): ...

class RendererAgg(RendererBase):
    lock: Any
    dpi: Any
    width: Any
    height: Any
    mathtext_parser: Any
    bbox: Any
    def __init__(self, width, height, dpi) -> None: ...
    def get_content_extents(self): ...
    def tostring_rgba_minimized(self): ...
    def draw_path(self, gc, path, transform, rgbFace: Any | None = ...) -> None: ...
    def draw_mathtext(self, gc, x, y, s, prop, angle) -> None: ...
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = ..., mtext: Any | None = ...): ...
    def get_text_width_height_descent(self, s, prop, ismath): ...
    def draw_tex(self, gc, x, y, s, prop, angle, *, mtext: Any | None = ...) -> None: ...
    def get_canvas_width_height(self): ...
    def points_to_pixels(self, points): ...
    def buffer_rgba(self): ...
    def tostring_argb(self): ...
    def tostring_rgb(self): ...
    def clear(self) -> None: ...
    def option_image_nocomposite(self): ...
    def option_scale_image(self): ...
    def restore_region(self, region, bbox: Any | None = ..., xy: Any | None = ...) -> None: ...
    def start_filter(self) -> None: ...
    def stop_filter(self, post_processing) -> None: ...

class FigureCanvasAgg(FigureCanvasBase):
    def copy_from_bbox(self, bbox): ...
    def restore_region(self, region, bbox: Any | None = ..., xy: Any | None = ...): ...
    renderer: Any
    def draw(self) -> None: ...
    def get_renderer(self, cleared: bool = ...): ...
    def tostring_rgb(self): ...
    def tostring_argb(self): ...
    def buffer_rgba(self): ...
    def print_raw(self, filename_or_obj, *args) -> None: ...
    print_rgba: Any
    def print_png(self, filename_or_obj, *args, metadata: Any | None = ..., pil_kwargs: Any | None = ...) -> None: ...
    def print_to_buffer(self): ...
    def print_jpg(self, filename_or_obj, *args, pil_kwargs: Any | None = ..., **kwargs): ...
    print_jpeg: Any
    def print_tif(self, filename_or_obj, *, pil_kwargs: Any | None = ...): ...
    print_tiff: Any

class _BackendAgg(_Backend):
    FigureCanvas: Any
    FigureManager: Any
