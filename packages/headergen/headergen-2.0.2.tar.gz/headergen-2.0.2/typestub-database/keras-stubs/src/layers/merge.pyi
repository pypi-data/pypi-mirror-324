from typing import Any

from keras import backend as backend
from keras.src.engine import base_layer_utils as base_layer_utils
from keras.src.engine.base_layer import Layer as Layer
from keras.utils import tf_utils as tf_utils

class _Merge(Layer):
    supports_masking: bool
    def __init__(self, **kwargs) -> None: ...
    def build(self, input_shape) -> None: ...
    def call(self, inputs): ...
    def compute_output_shape(self, input_shape): ...
    def compute_mask(self, inputs, mask: Any | None = ...): ...
    def get_config(self): ...

class Add(_Merge): ...

class Subtract(_Merge):
    def build(self, input_shape) -> None: ...

class Multiply(_Merge): ...
class Average(_Merge): ...
class Maximum(_Merge): ...
class Minimum(_Merge): ...

class Concatenate(_Merge):
    axis: Any
    supports_masking: bool
    def __init__(self, axis: int = ..., **kwargs) -> None: ...
    def build(self, input_shape) -> None: ...
    def compute_output_shape(self, input_shape): ...
    def compute_mask(self, inputs, mask: Any | None = ...): ...
    def get_config(self): ...

class Dot(_Merge):
    axes: Any
    normalize: Any
    supports_masking: bool
    def __init__(self, axes, normalize: bool = ..., **kwargs) -> None: ...
    def build(self, input_shape) -> None: ...
    def compute_output_shape(self, input_shape): ...
    def compute_mask(self, inputs, mask: Any | None = ...) -> None: ...
    def get_config(self): ...

def add(inputs, **kwargs): ...
def subtract(inputs, **kwargs): ...
def multiply(inputs, **kwargs): ...
def average(inputs, **kwargs): ...
def maximum(inputs, **kwargs): ...
def minimum(inputs, **kwargs): ...
def concatenate(inputs, axis: int = ..., **kwargs): ...
def dot(inputs, axes, normalize: bool = ..., **kwargs): ...
