from keras import backend as backend
from keras.engine import base_layer as base_layer
from keras.utils import tf_utils as tf_utils
from typing import Any

class GaussianNoise(base_layer.BaseRandomLayer):
    supports_masking: bool
    stddev: Any
    seed: Any
    def __init__(self, stddev, seed: Any | None = ..., **kwargs) -> None: ...
    def call(self, inputs, training: Any | None = ...): ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...

class GaussianDropout(base_layer.BaseRandomLayer):
    supports_masking: bool
    rate: Any
    seed: Any
    def __init__(self, rate, seed: Any | None = ..., **kwargs) -> None: ...
    def call(self, inputs, training: Any | None = ...): ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...

class AlphaDropout(base_layer.BaseRandomLayer):
    rate: Any
    noise_shape: Any
    seed: Any
    supports_masking: bool
    def __init__(self, rate, noise_shape: Any | None = ..., seed: Any | None = ..., **kwargs) -> None: ...
    def call(self, inputs, training: Any | None = ...): ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...
