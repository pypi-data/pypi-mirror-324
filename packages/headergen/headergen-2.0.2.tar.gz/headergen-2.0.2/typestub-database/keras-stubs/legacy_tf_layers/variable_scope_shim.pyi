import tensorflow.compat.v2 as tf
from keras.engine import base_layer as base_layer
from keras.utils import layer_utils as layer_utils, tf_inspect as tf_inspect
from typing import Any

def as_shape(shape): ...
def fn_args(fn): ...
def validate_synchronization_aggregation_trainable(synchronization, aggregation, trainable, name): ...

class _EagerVariableStore(tf.Module):
    def __init__(self) -> None: ...
    def scope(self) -> None: ...
    def get_variable(self, name, shape: Any | None = ..., dtype=..., initializer: Any | None = ..., regularizer: Any | None = ..., reuse: Any | None = ..., trainable: Any | None = ..., collections: Any | None = ..., caching_device: Any | None = ..., partitioner: Any | None = ..., validate_shape: bool = ..., use_resource: Any | None = ..., custom_getter: Any | None = ..., constraint: Any | None = ..., synchronization=..., aggregation=...): ...
    def get_or_create_layer(self, name, create_layer_method): ...
    def add_regularizer(self, var, regularizer) -> None: ...

def track_tf1_style_variables(method): ...

class VariableScopeLayer(base_layer.Layer):
    def forward_pass(self, *args, **kwargs) -> None: ...
    def call(self, *args, **kwargs): ...

def get_or_create_layer(name, create_layer_method): ...
