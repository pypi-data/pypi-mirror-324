from keras import layers as keras_layers
from keras.legacy_tf_layers import base as base
from typing import Any

class Dense(keras_layers.Dense, base.Layer):
    def __init__(self, units, activation: Any | None = ..., use_bias: bool = ..., kernel_initializer: Any | None = ..., bias_initializer=..., kernel_regularizer: Any | None = ..., bias_regularizer: Any | None = ..., activity_regularizer: Any | None = ..., kernel_constraint: Any | None = ..., bias_constraint: Any | None = ..., trainable: bool = ..., name: Any | None = ..., **kwargs) -> None: ...

def dense(inputs, units, activation: Any | None = ..., use_bias: bool = ..., kernel_initializer: Any | None = ..., bias_initializer=..., kernel_regularizer: Any | None = ..., bias_regularizer: Any | None = ..., activity_regularizer: Any | None = ..., kernel_constraint: Any | None = ..., bias_constraint: Any | None = ..., trainable: bool = ..., name: Any | None = ..., reuse: Any | None = ...): ...

class Dropout(keras_layers.Dropout, base.Layer):
    def __init__(self, rate: float = ..., noise_shape: Any | None = ..., seed: Any | None = ..., name: Any | None = ..., **kwargs) -> None: ...
    def call(self, inputs, training: bool = ...): ...

def dropout(inputs, rate: float = ..., noise_shape: Any | None = ..., seed: Any | None = ..., training: bool = ..., name: Any | None = ...): ...

class Flatten(keras_layers.Flatten, base.Layer): ...

def flatten(inputs, name: Any | None = ..., data_format: str = ...): ...
FullyConnected = Dense
fully_connected = dense
