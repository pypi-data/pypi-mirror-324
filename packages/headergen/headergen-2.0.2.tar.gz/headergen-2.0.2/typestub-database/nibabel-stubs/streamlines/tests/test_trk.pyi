import unittest

from _typeshed import Incomplete

from ...testing import assert_arr_dict_equal as assert_arr_dict_equal
from ...testing import clear_and_catch_warnings as clear_and_catch_warnings
from ...testing import data_path as data_path
from ...testing import error_warnings as error_warnings
from ..header import Field as Field
from ..tractogram import Tractogram as Tractogram
from ..tractogram_file import HeaderError as HeaderError
from ..tractogram_file import HeaderWarning as HeaderWarning
from ..trk import TrkFile as TrkFile
from ..trk import decode_value_from_name as decode_value_from_name
from ..trk import encode_value_in_name as encode_value_in_name
from ..trk import get_affine_trackvis_to_rasmm as get_affine_trackvis_to_rasmm
from .test_tractogram import assert_tractogram_equal as assert_tractogram_equal

DATA: Incomplete

def setup_module() -> None: ...

class TestTRK(unittest.TestCase):
    def test_load_empty_file(self) -> None: ...
    def test_load_simple_file(self) -> None: ...
    def test_load_complex_file(self) -> None: ...
    def trk_with_bytes(self, trk_key: str = "simple_trk_fname", endian: str = "<"): ...
    def test_load_file_with_wrong_information(self) -> None: ...
    def test_load_trk_version_1(self) -> None: ...
    def test_load_complex_file_in_big_endian(self) -> None: ...
    def test_tractogram_file_properties(self) -> None: ...
    def test_write_empty_file(self) -> None: ...
    def test_write_simple_file(self) -> None: ...
    def test_write_complex_file(self) -> None: ...
    def test_load_write_file(self) -> None: ...
    def test_load_write_LPS_file(self) -> None: ...
    def test_write_optional_header_fields(self) -> None: ...
    def test_write_too_many_scalars_and_properties(self) -> None: ...
    def test_write_scalars_and_properties_name_too_long(self) -> None: ...
    def test_str(self) -> None: ...
    def test_header_read_restore(self) -> None: ...

def test_encode_names() -> None: ...
def test_decode_names() -> None: ...
