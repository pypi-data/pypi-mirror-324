from collections.abc import Generator, MutableSet

from _typeshed import Incomplete

KEY: Incomplete
PREV: Incomplete
NEXT: Incomplete

class OrderedSet(MutableSet):
    end: Incomplete
    map: Incomplete
    def __init__(self, iterable: Incomplete | None = None) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...
    def __getitem__(self, key): ...
    def add(self, key) -> None: ...
    def discard(self, key) -> None: ...
    def __iter__(self): ...
    def __reversed__(self) -> Generator[Incomplete, None, None]: ...
    def pop(self, last: bool = True): ...
    def __eq__(self, other): ...
    def __del__(self) -> None: ...
