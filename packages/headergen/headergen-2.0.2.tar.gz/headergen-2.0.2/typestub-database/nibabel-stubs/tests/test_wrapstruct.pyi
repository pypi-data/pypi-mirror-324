from _typeshed import Incomplete

from .. import imageglobals as imageglobals
from ..batteryrunners import Report as Report
from ..casting import sctypes as sctypes
from ..spatialimages import HeaderDataError as HeaderDataError
from ..volumeutils import Recoder as Recoder
from ..volumeutils import native_code as native_code
from ..volumeutils import swapped_code as swapped_code
from ..wrapstruct import LabeledWrapStruct as LabeledWrapStruct
from ..wrapstruct import WrapStruct as WrapStruct
from ..wrapstruct import WrapStructError as WrapStructError

INTEGER_TYPES: Incomplete

def log_chk(hdr, level): ...

class _TestWrapStructBase:
    header_class: Incomplete
    def get_bad_bb(self) -> None: ...
    def test_general_init(self) -> None: ...
    def test__eq__(self) -> None: ...
    def test_to_from_fileobj(self) -> None: ...
    def test_mappingness(self) -> None: ...
    def test_endianness_ro(self) -> None: ...
    def test_endian_guess(self) -> None: ...
    def test_binblock_is_file(self) -> None: ...
    def test_structarr(self) -> None: ...
    def log_chk(self, hdr, level): ...
    def assert_no_log_err(self, hdr) -> None: ...
    def test_bytes(self) -> None: ...
    def test_as_byteswapped(self) -> None: ...
    def test_empty_check(self) -> None: ...
    def test_str(self) -> None: ...

class _TestLabeledWrapStruct(_TestWrapStructBase):
    def test_get_value_label(self) -> None: ...

class MyWrapStruct(WrapStruct):
    template_dtype: Incomplete
    @classmethod
    def guessed_endian(klass, hdr): ...
    @classmethod
    def default_structarr(klass, endianness: Incomplete | None = None): ...

class MyLabeledWrapStruct(LabeledWrapStruct, MyWrapStruct): ...

class TestMyWrapStruct(_TestWrapStructBase):
    header_class = MyWrapStruct
    def get_bad_bb(self): ...
    def test_empty(self) -> None: ...
    def test_str(self) -> None: ...
    def test_copy(self) -> None: ...
    def test_copy(self) -> None: ...
    def test_checks(self) -> None: ...
    def test_log_checks(self) -> None: ...
    def test_logger_error(self) -> None: ...

class TestMyLabeledWrapStruct(TestMyWrapStruct, _TestLabeledWrapStruct):
    header_class = MyLabeledWrapStruct
    def test_str(self) -> None: ...
