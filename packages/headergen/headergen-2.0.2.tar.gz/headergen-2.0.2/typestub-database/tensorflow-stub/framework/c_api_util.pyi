from tensorflow.core.framework import api_def_pb2 as api_def_pb2, op_def_pb2 as op_def_pb2
from tensorflow.python.util import compat as compat, tf_contextlib as tf_contextlib
from typing import Any

class ScopedTFStatus:
    status: Any
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...

class ScopedTFGraph:
    graph: Any
    deleter: Any
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...

class ScopedTFImportGraphDefOptions:
    options: Any
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...

class ScopedTFImportGraphDefResults:
    results: Any
    def __init__(self, results) -> None: ...
    def __del__(self) -> None: ...

class ScopedTFFunction:
    func: Any
    deleter: Any
    def __init__(self, func) -> None: ...
    @property
    def has_been_garbage_collected(self): ...
    def __del__(self) -> None: ...

class ScopedTFBuffer:
    buffer: Any
    def __init__(self, buf_string) -> None: ...
    def __del__(self) -> None: ...

class ApiDefMap:
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    def put_api_def(self, text) -> None: ...
    def get_api_def(self, op_name): ...
    def get_op_def(self, op_name): ...
    def op_names(self): ...

def tf_buffer(data: Any | None = ...) -> None: ...
def tf_output(c_op, index): ...
def tf_operations(graph) -> None: ...
def new_tf_operations(graph) -> None: ...
