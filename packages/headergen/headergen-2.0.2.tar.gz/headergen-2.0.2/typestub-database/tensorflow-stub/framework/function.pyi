from tensorflow.core.framework import attr_value_pb2 as attr_value_pb2, function_pb2 as function_pb2
from tensorflow.python.eager import context as context
from tensorflow.python.framework import c_api_util as c_api_util, dtypes as dtypes, graph_to_function_def as graph_to_function_def, ops as ops
from tensorflow.python.ops import array_ops as array_ops, resource_variable_ops as resource_variable_ops
from tensorflow.python.util import compat as compat, function_utils as function_utils, tf_contextlib as tf_contextlib, tf_inspect as tf_inspect
from typing import Any

class Defun:
    def __init__(self, *input_types, **kwargs) -> None: ...
    def __call__(self, func): ...

class _DefinedFunctionDeleter:
    name: Any
    def __init__(self, name) -> None: ...
    def __del__(self) -> None: ...

class _DefinedFunction:
    def __init__(self, func, argnames, input_types, func_name: Any | None = ..., grad_func: Any | None = ..., python_grad_func: Any | None = ..., out_names: Any | None = ..., shape_func: Any | None = ..., capture_by_value: bool = ..., allowlisted_stateful_ops: Any | None = ..., capture_resource_var_by_value: bool = ..., **kwargs) -> None: ...
    @property
    def name(self): ...
    @property
    def definition(self): ...
    def set_grad_func(self, grad_func) -> None: ...
    @property
    def grad_func_name(self): ...
    @property
    def python_grad_func(self): ...
    @property
    def declared_input_types(self): ...
    @property
    def captured_inputs(self): ...
    @property
    def stateful_ops(self): ...
    def add_to_graph(self, g) -> None: ...
    def __call__(self, *args, **kwargs): ...

class _OverloadedFunction:
    def __init__(self, func, argnames, func_name: Any | None = ..., grad_func: Any | None = ..., python_grad_func: Any | None = ..., out_names: Any | None = ..., **kwargs) -> None: ...
    def instantiate(self, input_types): ...
    def __call__(self, *args, **kwargs): ...

class _FuncGraph(ops.Graph):
    name: Any
    inputs: Any
    outputs: Any
    extra_inputs: Any
    extra_args: Any
    extra_vars: Any
    def __init__(self, name, capture_by_value, allowlisted_stateful_ops, capture_resource_var_by_value, *args, **kwargs) -> None: ...
    @property
    def outer_graph(self): ...
    def container(self, container_name) -> None: ...
    def getvar(self, getter, name, shape: Any | None = ..., dtype: Any | None = ..., initializer: Any | None = ..., reuse: Any | None = ..., trainable: bool = ..., collections: Any | None = ..., use_resource: Any | None = ..., **kwargs): ...
    def capture(self, tensor, name: Any | None = ...): ...
    @property
    def captures(self): ...

def func_graph_from_py_func(func, arg_names, arg_types, name: Any | None = ..., capture_by_value: bool = ..., device: Any | None = ..., colocation_stack: Any | None = ..., container: Any | None = ..., collections_ref: Any | None = ..., arg_shapes: Any | None = ..., allowlisted_stateful_ops: Any | None = ..., capture_resource_var_by_value: bool = ...): ...
def from_library(lib): ...
def get_extra_vars(): ...
def get_extra_inputs(): ...
def get_extra_args(): ...
def function_def_from_tf_function(c_func): ...
