from tensorflow.python.platform import build_info as build_info
from typing import Any

class AllocationMaximum: ...
class StepStatsAnalysis: ...

class _ChromeTraceFormatter:
    def __init__(self, show_memory: bool = ...) -> None: ...
    def emit_pid(self, name, pid) -> None: ...
    def emit_tid(self, name, pid, tid) -> None: ...
    def emit_region(self, timestamp, duration, pid, tid, category, name, args) -> None: ...
    def emit_obj_create(self, category, name, timestamp, pid, tid, object_id) -> None: ...
    def emit_obj_delete(self, category, name, timestamp, pid, tid, object_id) -> None: ...
    def emit_obj_snapshot(self, category, name, timestamp, pid, tid, object_id, snapshot) -> None: ...
    def emit_flow_start(self, name, timestamp, pid, tid, flow_id) -> None: ...
    def emit_flow_end(self, name, timestamp, pid, tid, flow_id) -> None: ...
    def emit_counter(self, category, name, pid, timestamp, counter, value) -> None: ...
    def emit_counters(self, category, name, pid, timestamp, counters) -> None: ...
    def format_to_string(self, pretty: bool = ...): ...

class _TensorTracker:
    def __init__(self, name, object_id, timestamp, pid, allocator, num_bytes) -> None: ...
    @property
    def name(self): ...
    @property
    def pid(self): ...
    @property
    def create_time(self): ...
    @property
    def object_id(self): ...
    @property
    def num_bytes(self): ...
    @property
    def allocator(self): ...
    @property
    def last_unref(self): ...
    def add_ref(self, timestamp) -> None: ...
    def add_unref(self, timestamp) -> None: ...

class Timeline:
    def __init__(self, step_stats, graph: Any | None = ...) -> None: ...
    def analyze_step_stats(self, show_dataflow: bool = ..., show_memory: bool = ..., op_time: str = ...): ...
    def generate_chrome_trace_format(self, show_dataflow: bool = ..., show_memory: bool = ..., op_time: str = ...): ...
