from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

def stateless_multinomial(logits, num_samples, seed, output_dtype=..., name: Any | None = ...): ...

StatelessMultinomial: Any

def stateless_multinomial_eager_fallback(logits, num_samples, seed, output_dtype, name, ctx): ...
def stateless_parameterized_truncated_normal(shape, seed, means, stddevs, minvals, maxvals, name: Any | None = ...): ...

StatelessParameterizedTruncatedNormal: Any

def stateless_parameterized_truncated_normal_eager_fallback(shape, seed, means, stddevs, minvals, maxvals, name, ctx): ...
def stateless_random_binomial(shape, seed, counts, probs, dtype=..., name: Any | None = ...): ...

StatelessRandomBinomial: Any

def stateless_random_binomial_eager_fallback(shape, seed, counts, probs, dtype, name, ctx): ...
def stateless_random_gamma_v2(shape, seed, alpha, name: Any | None = ...): ...

StatelessRandomGammaV2: Any

def stateless_random_gamma_v2_eager_fallback(shape, seed, alpha, name, ctx): ...
def stateless_random_normal(shape, seed, dtype=..., name: Any | None = ...): ...

StatelessRandomNormal: Any

def stateless_random_normal_eager_fallback(shape, seed, dtype, name, ctx): ...
def stateless_random_poisson(shape, seed, lam, dtype, name: Any | None = ...): ...

StatelessRandomPoisson: Any

def stateless_random_poisson_eager_fallback(shape, seed, lam, dtype, name, ctx): ...
def stateless_random_uniform(shape, seed, dtype=..., name: Any | None = ...): ...

StatelessRandomUniform: Any

def stateless_random_uniform_eager_fallback(shape, seed, dtype, name, ctx): ...
def stateless_random_uniform_full_int(shape, seed, dtype=..., name: Any | None = ...): ...

StatelessRandomUniformFullInt: Any

def stateless_random_uniform_full_int_eager_fallback(shape, seed, dtype, name, ctx): ...
def stateless_random_uniform_int(shape, seed, minval, maxval, name: Any | None = ...): ...

StatelessRandomUniformInt: Any

def stateless_random_uniform_int_eager_fallback(shape, seed, minval, maxval, name, ctx): ...
def stateless_truncated_normal(shape, seed, dtype=..., name: Any | None = ...): ...

StatelessTruncatedNormal: Any

def stateless_truncated_normal_eager_fallback(shape, seed, dtype, name, ctx): ...
