from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, NamedTuple

def anonymous_iterator(output_types, output_shapes, name: Any | None = ...): ...

AnonymousIterator: Any

def anonymous_iterator_eager_fallback(output_types, output_shapes, name, ctx): ...

class _AnonymousIteratorV2Output(NamedTuple):
    handle: Any
    deleter: Any

def anonymous_iterator_v2(output_types, output_shapes, name: Any | None = ...): ...

AnonymousIteratorV2: Any

def anonymous_iterator_v2_eager_fallback(output_types, output_shapes, name, ctx): ...

class _AnonymousMemoryCacheOutput(NamedTuple):
    handle: Any
    deleter: Any

def anonymous_memory_cache(name: Any | None = ...): ...

AnonymousMemoryCache: Any

def anonymous_memory_cache_eager_fallback(name, ctx): ...

class _AnonymousMultiDeviceIteratorOutput(NamedTuple):
    handle: Any
    deleter: Any

def anonymous_multi_device_iterator(devices, output_types, output_shapes, name: Any | None = ...): ...

AnonymousMultiDeviceIterator: Any

def anonymous_multi_device_iterator_eager_fallback(devices, output_types, output_shapes, name, ctx): ...

class _AnonymousRandomSeedGeneratorOutput(NamedTuple):
    handle: Any
    deleter: Any

def anonymous_random_seed_generator(seed, seed2, name: Any | None = ...): ...

AnonymousRandomSeedGenerator: Any

def anonymous_random_seed_generator_eager_fallback(seed, seed2, name, ctx): ...

class _AnonymousSeedGeneratorOutput(NamedTuple):
    handle: Any
    deleter: Any

def anonymous_seed_generator(seed, seed2, reshuffle, name: Any | None = ...): ...

AnonymousSeedGenerator: Any

def anonymous_seed_generator_eager_fallback(seed, seed2, reshuffle, name, ctx): ...
def batch_dataset(input_dataset, batch_size, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

BatchDataset: Any

def batch_dataset_eager_fallback(input_dataset, batch_size, output_types, output_shapes, metadata, name, ctx): ...
def batch_dataset_v2(input_dataset, batch_size, drop_remainder, output_types, output_shapes, parallel_copy: bool = ..., metadata: str = ..., name: Any | None = ...): ...

BatchDatasetV2: Any

def batch_dataset_v2_eager_fallback(input_dataset, batch_size, drop_remainder, output_types, output_shapes, parallel_copy, metadata, name, ctx): ...
def cache_dataset(input_dataset, filename, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

CacheDataset: Any

def cache_dataset_eager_fallback(input_dataset, filename, output_types, output_shapes, metadata, name, ctx): ...
def cache_dataset_v2(input_dataset, filename, cache, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

CacheDatasetV2: Any

def cache_dataset_v2_eager_fallback(input_dataset, filename, cache, output_types, output_shapes, metadata, name, ctx): ...
def concatenate_dataset(input_dataset, another_dataset, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

ConcatenateDataset: Any

def concatenate_dataset_eager_fallback(input_dataset, another_dataset, output_types, output_shapes, metadata, name, ctx): ...
def dataset_cardinality(input_dataset, name: Any | None = ...): ...

DatasetCardinality: Any

def dataset_cardinality_eager_fallback(input_dataset, name, ctx): ...
def dataset_to_graph(input_dataset, stateful_whitelist=..., allow_stateful: bool = ..., strip_device_assignment: bool = ..., name: Any | None = ...): ...

DatasetToGraph: Any

def dataset_to_graph_eager_fallback(input_dataset, stateful_whitelist, allow_stateful, strip_device_assignment, name, ctx): ...
def dataset_to_graph_v2(input_dataset, external_state_policy: int = ..., strip_device_assignment: bool = ..., name: Any | None = ...): ...

DatasetToGraphV2: Any

def dataset_to_graph_v2_eager_fallback(input_dataset, external_state_policy, strip_device_assignment, name, ctx): ...
def dataset_to_single_element(dataset, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

DatasetToSingleElement: Any

def dataset_to_single_element_eager_fallback(dataset, output_types, output_shapes, metadata, name, ctx): ...
def delete_iterator(handle, deleter, name: Any | None = ...): ...

DeleteIterator: Any

def delete_iterator_eager_fallback(handle, deleter, name, ctx): ...
def delete_memory_cache(handle, deleter, name: Any | None = ...): ...

DeleteMemoryCache: Any

def delete_memory_cache_eager_fallback(handle, deleter, name, ctx): ...
def delete_multi_device_iterator(multi_device_iterator, iterators, deleter, name: Any | None = ...): ...

DeleteMultiDeviceIterator: Any

def delete_multi_device_iterator_eager_fallback(multi_device_iterator, iterators, deleter, name, ctx): ...
def delete_random_seed_generator(handle, deleter, name: Any | None = ...): ...

DeleteRandomSeedGenerator: Any

def delete_random_seed_generator_eager_fallback(handle, deleter, name, ctx): ...
def delete_seed_generator(handle, deleter, name: Any | None = ...): ...

DeleteSeedGenerator: Any

def delete_seed_generator_eager_fallback(handle, deleter, name, ctx): ...
def deserialize_iterator(resource_handle, serialized, name: Any | None = ...): ...

DeserializeIterator: Any

def deserialize_iterator_eager_fallback(resource_handle, serialized, name, ctx): ...
def dummy_memory_cache(name: Any | None = ...): ...

DummyMemoryCache: Any

def dummy_memory_cache_eager_fallback(name, ctx): ...
def dummy_seed_generator(name: Any | None = ...): ...

DummySeedGenerator: Any

def dummy_seed_generator_eager_fallback(name, ctx): ...
def filter_by_last_component_dataset(input_dataset, output_types, output_shapes, name: Any | None = ...): ...

FilterByLastComponentDataset: Any

def filter_by_last_component_dataset_eager_fallback(input_dataset, output_types, output_shapes, name, ctx): ...
def filter_dataset(input_dataset, other_arguments, predicate, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

FilterDataset: Any

def filter_dataset_eager_fallback(input_dataset, other_arguments, predicate, output_types, output_shapes, metadata, name, ctx): ...
def finalize_dataset(input_dataset, output_types, output_shapes, has_captured_ref: bool = ..., name: Any | None = ...): ...

FinalizeDataset: Any

def finalize_dataset_eager_fallback(input_dataset, output_types, output_shapes, has_captured_ref, name, ctx): ...
def fixed_length_record_dataset(filenames, header_bytes, record_bytes, footer_bytes, buffer_size, metadata: str = ..., name: Any | None = ...): ...

FixedLengthRecordDataset: Any

def fixed_length_record_dataset_eager_fallback(filenames, header_bytes, record_bytes, footer_bytes, buffer_size, metadata, name, ctx): ...
def fixed_length_record_dataset_v2(filenames, header_bytes, record_bytes, footer_bytes, buffer_size, compression_type, metadata: str = ..., name: Any | None = ...): ...

FixedLengthRecordDatasetV2: Any

def fixed_length_record_dataset_v2_eager_fallback(filenames, header_bytes, record_bytes, footer_bytes, buffer_size, compression_type, metadata, name, ctx): ...
def flat_map_dataset(input_dataset, other_arguments, f, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

FlatMapDataset: Any

def flat_map_dataset_eager_fallback(input_dataset, other_arguments, f, output_types, output_shapes, metadata, name, ctx): ...
def generator_dataset(init_func_other_args, next_func_other_args, finalize_func_other_args, init_func, next_func, finalize_func, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

GeneratorDataset: Any

def generator_dataset_eager_fallback(init_func_other_args, next_func_other_args, finalize_func_other_args, init_func, next_func, finalize_func, output_types, output_shapes, metadata, name, ctx): ...
def get_options(input_dataset, name: Any | None = ...): ...

GetOptions: Any

def get_options_eager_fallback(input_dataset, name, ctx): ...
def interleave_dataset(input_dataset, other_arguments, cycle_length, block_length, f, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

InterleaveDataset: Any

def interleave_dataset_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, f, output_types, output_shapes, metadata, name, ctx): ...
def iterator(shared_name, container, output_types, output_shapes, name: Any | None = ...): ...

Iterator: Any

def iterator_eager_fallback(shared_name, container, output_types, output_shapes, name, ctx): ...
def iterator_from_string_handle(string_handle, output_types=..., output_shapes=..., name: Any | None = ...): ...

IteratorFromStringHandle: Any

def iterator_from_string_handle_eager_fallback(string_handle, output_types, output_shapes, name, ctx): ...
def iterator_from_string_handle_v2(string_handle, output_types=..., output_shapes=..., name: Any | None = ...): ...

IteratorFromStringHandleV2: Any

def iterator_from_string_handle_v2_eager_fallback(string_handle, output_types, output_shapes, name, ctx): ...
def iterator_get_next(iterator, output_types, output_shapes, name: Any | None = ...): ...

IteratorGetNext: Any

def iterator_get_next_eager_fallback(iterator, output_types, output_shapes, name, ctx): ...
def iterator_get_next_as_optional(iterator, output_types, output_shapes, name: Any | None = ...): ...

IteratorGetNextAsOptional: Any

def iterator_get_next_as_optional_eager_fallback(iterator, output_types, output_shapes, name, ctx): ...
def iterator_get_next_sync(iterator, output_types, output_shapes, name: Any | None = ...): ...

IteratorGetNextSync: Any

def iterator_get_next_sync_eager_fallback(iterator, output_types, output_shapes, name, ctx): ...
def iterator_to_string_handle(resource_handle, name: Any | None = ...): ...

IteratorToStringHandle: Any

def iterator_to_string_handle_eager_fallback(resource_handle, name, ctx): ...
def iterator_v2(shared_name, container, output_types, output_shapes, name: Any | None = ...): ...

IteratorV2: Any

def iterator_v2_eager_fallback(shared_name, container, output_types, output_shapes, name, ctx): ...
def make_iterator(dataset, iterator, name: Any | None = ...): ...

MakeIterator: Any

def make_iterator_eager_fallback(dataset, iterator, name, ctx): ...
def map_dataset(input_dataset, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism: bool = ..., preserve_cardinality: bool = ..., metadata: str = ..., name: Any | None = ...): ...

MapDataset: Any

def map_dataset_eager_fallback(input_dataset, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism, preserve_cardinality, metadata, name, ctx): ...
def map_defun(arguments, captured_inputs, output_types, output_shapes, f, max_intra_op_parallelism: int = ..., name: Any | None = ...): ...

MapDefun: Any

def map_defun_eager_fallback(arguments, captured_inputs, output_types, output_shapes, f, max_intra_op_parallelism, name, ctx): ...
def model_dataset(input_dataset, output_types, output_shapes, algorithm: int = ..., cpu_budget: int = ..., ram_budget: int = ..., name: Any | None = ...): ...

ModelDataset: Any

def model_dataset_eager_fallback(input_dataset, output_types, output_shapes, algorithm, cpu_budget, ram_budget, name, ctx): ...
def multi_device_iterator(devices, shared_name, container, output_types, output_shapes, name: Any | None = ...): ...

MultiDeviceIterator: Any

def multi_device_iterator_eager_fallback(devices, shared_name, container, output_types, output_shapes, name, ctx): ...
def multi_device_iterator_from_string_handle(string_handle, output_types=..., output_shapes=..., name: Any | None = ...): ...

MultiDeviceIteratorFromStringHandle: Any

def multi_device_iterator_from_string_handle_eager_fallback(string_handle, output_types, output_shapes, name, ctx): ...
def multi_device_iterator_get_next_from_shard(multi_device_iterator, shard_num, incarnation_id, output_types, output_shapes, name: Any | None = ...): ...

MultiDeviceIteratorGetNextFromShard: Any

def multi_device_iterator_get_next_from_shard_eager_fallback(multi_device_iterator, shard_num, incarnation_id, output_types, output_shapes, name, ctx): ...
def multi_device_iterator_init(dataset, multi_device_iterator, max_buffer_size, name: Any | None = ...): ...

MultiDeviceIteratorInit: Any

def multi_device_iterator_init_eager_fallback(dataset, multi_device_iterator, max_buffer_size, name, ctx): ...
def multi_device_iterator_to_string_handle(multi_device_iterator, name: Any | None = ...): ...

MultiDeviceIteratorToStringHandle: Any

def multi_device_iterator_to_string_handle_eager_fallback(multi_device_iterator, name, ctx): ...
def one_shot_iterator(dataset_factory, output_types, output_shapes, container: str = ..., shared_name: str = ..., name: Any | None = ...): ...

OneShotIterator: Any

def one_shot_iterator_eager_fallback(dataset_factory, output_types, output_shapes, container, shared_name, name, ctx): ...
def optimize_dataset(input_dataset, optimizations, output_types, output_shapes, optimization_configs=..., name: Any | None = ...): ...

OptimizeDataset: Any

def optimize_dataset_eager_fallback(input_dataset, optimizations, output_types, output_shapes, optimization_configs, name, ctx): ...
def optimize_dataset_v2(input_dataset, optimizations_enabled, optimizations_disabled, optimizations_default, output_types, output_shapes, optimization_configs=..., name: Any | None = ...): ...

OptimizeDatasetV2: Any

def optimize_dataset_v2_eager_fallback(input_dataset, optimizations_enabled, optimizations_disabled, optimizations_default, output_types, output_shapes, optimization_configs, name, ctx): ...
def optional_from_value(components, name: Any | None = ...): ...

OptionalFromValue: Any

def optional_from_value_eager_fallback(components, name, ctx): ...
def optional_get_value(optional, output_types, output_shapes, name: Any | None = ...): ...

OptionalGetValue: Any

def optional_get_value_eager_fallback(optional, output_types, output_shapes, name, ctx): ...
def optional_has_value(optional, name: Any | None = ...): ...

OptionalHasValue: Any

def optional_has_value_eager_fallback(optional, name, ctx): ...
def optional_none(name: Any | None = ...): ...

OptionalNone: Any

def optional_none_eager_fallback(name, ctx): ...
def options_dataset(input_dataset, serialized_options, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

OptionsDataset: Any

def options_dataset_eager_fallback(input_dataset, serialized_options, output_types, output_shapes, metadata, name, ctx): ...
def padded_batch_dataset(input_dataset, batch_size, padded_shapes, padding_values, output_shapes, metadata: str = ..., name: Any | None = ...): ...

PaddedBatchDataset: Any

def padded_batch_dataset_eager_fallback(input_dataset, batch_size, padded_shapes, padding_values, output_shapes, metadata, name, ctx): ...
def padded_batch_dataset_v2(input_dataset, batch_size, padded_shapes, padding_values, drop_remainder, output_shapes, parallel_copy: bool = ..., metadata: str = ..., name: Any | None = ...): ...

PaddedBatchDatasetV2: Any

def padded_batch_dataset_v2_eager_fallback(input_dataset, batch_size, padded_shapes, padding_values, drop_remainder, output_shapes, parallel_copy, metadata, name, ctx): ...
def parallel_batch_dataset(input_dataset, batch_size, num_parallel_calls, drop_remainder, output_types, output_shapes, parallel_copy: bool = ..., deterministic: str = ..., metadata: str = ..., name: Any | None = ...): ...

ParallelBatchDataset: Any

def parallel_batch_dataset_eager_fallback(input_dataset, batch_size, num_parallel_calls, drop_remainder, output_types, output_shapes, parallel_copy, deterministic, metadata, name, ctx): ...
def parallel_interleave_dataset_v2(input_dataset, other_arguments, cycle_length, block_length, num_parallel_calls, f, output_types, output_shapes, sloppy: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ParallelInterleaveDatasetV2: Any

def parallel_interleave_dataset_v2_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, num_parallel_calls, f, output_types, output_shapes, sloppy, metadata, name, ctx): ...
def parallel_interleave_dataset_v3(input_dataset, other_arguments, cycle_length, block_length, num_parallel_calls, f, output_types, output_shapes, deterministic: str = ..., metadata: str = ..., name: Any | None = ...): ...

ParallelInterleaveDatasetV3: Any

def parallel_interleave_dataset_v3_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, num_parallel_calls, f, output_types, output_shapes, deterministic, metadata, name, ctx): ...
def parallel_interleave_dataset_v4(input_dataset, other_arguments, cycle_length, block_length, buffer_output_elements, prefetch_input_elements, num_parallel_calls, f, output_types, output_shapes, deterministic: str = ..., metadata: str = ..., name: Any | None = ...): ...

ParallelInterleaveDatasetV4: Any

def parallel_interleave_dataset_v4_eager_fallback(input_dataset, other_arguments, cycle_length, block_length, buffer_output_elements, prefetch_input_elements, num_parallel_calls, f, output_types, output_shapes, deterministic, metadata, name, ctx): ...
def parallel_map_dataset(input_dataset, other_arguments, num_parallel_calls, f, output_types, output_shapes, use_inter_op_parallelism: bool = ..., sloppy: bool = ..., preserve_cardinality: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ParallelMapDataset: Any

def parallel_map_dataset_eager_fallback(input_dataset, other_arguments, num_parallel_calls, f, output_types, output_shapes, use_inter_op_parallelism, sloppy, preserve_cardinality, metadata, name, ctx): ...
def parallel_map_dataset_v2(input_dataset, other_arguments, num_parallel_calls, f, output_types, output_shapes, use_inter_op_parallelism: bool = ..., deterministic: str = ..., preserve_cardinality: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ParallelMapDatasetV2: Any

def parallel_map_dataset_v2_eager_fallback(input_dataset, other_arguments, num_parallel_calls, f, output_types, output_shapes, use_inter_op_parallelism, deterministic, preserve_cardinality, metadata, name, ctx): ...
def prefetch_dataset(input_dataset, buffer_size, output_types, output_shapes, slack_period: int = ..., legacy_autotune: bool = ..., buffer_size_min: int = ..., metadata: str = ..., name: Any | None = ...): ...

PrefetchDataset: Any

def prefetch_dataset_eager_fallback(input_dataset, buffer_size, output_types, output_shapes, slack_period, legacy_autotune, buffer_size_min, metadata, name, ctx): ...
def range_dataset(start, stop, step, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

RangeDataset: Any

def range_dataset_eager_fallback(start, stop, step, output_types, output_shapes, metadata, name, ctx): ...
def reduce_dataset(input_dataset, initial_state, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ReduceDataset: Any

def reduce_dataset_eager_fallback(input_dataset, initial_state, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism, metadata, name, ctx): ...
def repeat_dataset(input_dataset, count, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

RepeatDataset: Any

def repeat_dataset_eager_fallback(input_dataset, count, output_types, output_shapes, metadata, name, ctx): ...
def serialize_iterator(resource_handle, external_state_policy: int = ..., name: Any | None = ...): ...

SerializeIterator: Any

def serialize_iterator_eager_fallback(resource_handle, external_state_policy, name, ctx): ...
def shard_dataset(input_dataset, num_shards, index, output_types, output_shapes, require_non_empty: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ShardDataset: Any

def shard_dataset_eager_fallback(input_dataset, num_shards, index, output_types, output_shapes, require_non_empty, metadata, name, ctx): ...
def shuffle_and_repeat_dataset(input_dataset, buffer_size, seed, seed2, count, output_types, output_shapes, reshuffle_each_iteration: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ShuffleAndRepeatDataset: Any

def shuffle_and_repeat_dataset_eager_fallback(input_dataset, buffer_size, seed, seed2, count, output_types, output_shapes, reshuffle_each_iteration, metadata, name, ctx): ...
def shuffle_and_repeat_dataset_v2(input_dataset, buffer_size, seed, seed2, count, seed_generator, output_types, output_shapes, reshuffle_each_iteration: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ShuffleAndRepeatDatasetV2: Any

def shuffle_and_repeat_dataset_v2_eager_fallback(input_dataset, buffer_size, seed, seed2, count, seed_generator, output_types, output_shapes, reshuffle_each_iteration, metadata, name, ctx): ...
def shuffle_dataset(input_dataset, buffer_size, seed, seed2, output_types, output_shapes, reshuffle_each_iteration: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ShuffleDataset: Any

def shuffle_dataset_eager_fallback(input_dataset, buffer_size, seed, seed2, output_types, output_shapes, reshuffle_each_iteration, metadata, name, ctx): ...
def shuffle_dataset_v2(input_dataset, buffer_size, seed_generator, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

ShuffleDatasetV2: Any

def shuffle_dataset_v2_eager_fallback(input_dataset, buffer_size, seed_generator, output_types, output_shapes, metadata, name, ctx): ...
def shuffle_dataset_v3(input_dataset, buffer_size, seed, seed2, seed_generator, output_types, output_shapes, reshuffle_each_iteration: bool = ..., metadata: str = ..., name: Any | None = ...): ...

ShuffleDatasetV3: Any

def shuffle_dataset_v3_eager_fallback(input_dataset, buffer_size, seed, seed2, seed_generator, output_types, output_shapes, reshuffle_each_iteration, metadata, name, ctx): ...
def skip_dataset(input_dataset, count, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

SkipDataset: Any

def skip_dataset_eager_fallback(input_dataset, count, output_types, output_shapes, metadata, name, ctx): ...
def sparse_tensor_slice_dataset(indices, values, dense_shape, name: Any | None = ...): ...

SparseTensorSliceDataset: Any

def sparse_tensor_slice_dataset_eager_fallback(indices, values, dense_shape, name, ctx): ...
def tf_record_dataset(filenames, compression_type, buffer_size, metadata: str = ..., name: Any | None = ...): ...

TFRecordDataset: Any

def tf_record_dataset_eager_fallback(filenames, compression_type, buffer_size, metadata, name, ctx): ...
def take_dataset(input_dataset, count, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

TakeDataset: Any

def take_dataset_eager_fallback(input_dataset, count, output_types, output_shapes, metadata, name, ctx): ...
def tensor_dataset(components, output_shapes, metadata: str = ..., name: Any | None = ...): ...

TensorDataset: Any

def tensor_dataset_eager_fallback(components, output_shapes, metadata, name, ctx): ...
def tensor_slice_dataset(components, output_shapes, is_files: bool = ..., metadata: str = ..., name: Any | None = ...): ...

TensorSliceDataset: Any

def tensor_slice_dataset_eager_fallback(components, output_shapes, is_files, metadata, name, ctx): ...
def text_line_dataset(filenames, compression_type, buffer_size, metadata: str = ..., name: Any | None = ...): ...

TextLineDataset: Any

def text_line_dataset_eager_fallback(filenames, compression_type, buffer_size, metadata, name, ctx): ...
def unwrap_dataset_variant(input_handle, name: Any | None = ...): ...

UnwrapDatasetVariant: Any

def unwrap_dataset_variant_eager_fallback(input_handle, name, ctx): ...
def window_dataset(input_dataset, size, shift, stride, drop_remainder, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

WindowDataset: Any

def window_dataset_eager_fallback(input_dataset, size, shift, stride, drop_remainder, output_types, output_shapes, metadata, name, ctx): ...
def window_op(inputs, output_types, output_shapes, name: Any | None = ...): ...

WindowOp: Any

def window_op_eager_fallback(inputs, output_types, output_shapes, name, ctx): ...
def wrap_dataset_variant(input_handle, name: Any | None = ...): ...

WrapDatasetVariant: Any

def wrap_dataset_variant_eager_fallback(input_handle, name, ctx): ...
def zip_dataset(input_datasets, output_types, output_shapes, metadata: str = ..., name: Any | None = ...): ...

ZipDataset: Any

def zip_dataset_eager_fallback(input_datasets, output_types, output_shapes, metadata, name, ctx): ...
