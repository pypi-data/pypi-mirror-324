import typing
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_spec as tensor_spec, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gen_string_ops as gen_string_ops, string_ops as string_ops
from tensorflow.python.ops.ragged import ragged_array_ops as ragged_array_ops, ragged_functional_ops as ragged_functional_ops, ragged_math_ops as ragged_math_ops, ragged_tensor as ragged_tensor
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

map_fn_lib: Any

def string_bytes_split(input, name: Any | None = ...): ...
def unicode_encode(input, output_encoding, errors: str = ..., replacement_char: int = ..., name: Any | None = ...): ...
def unicode_decode(input, input_encoding, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., name: Any | None = ...): ...
def unicode_decode_with_offsets(input, input_encoding, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., name: Any | None = ...): ...
def unicode_split(input, input_encoding, errors: str = ..., replacement_char: int = ..., name: Any | None = ...): ...
def unicode_split_with_offsets(input, input_encoding, errors: str = ..., replacement_char: int = ..., name: Any | None = ...): ...
def string_split_v2(input, sep: Any | None = ..., maxsplit: int = ..., name: Any | None = ...): ...
def string_split(source, sep: Any | None = ..., skip_empty: bool = ..., delimiter: Any | None = ..., result_type: str = ..., name: Any | None = ...): ...
def strings_split_v1(input: Any | None = ..., sep: Any | None = ..., maxsplit: int = ..., result_type: str = ..., source: Any | None = ..., name: Any | None = ...): ...
def reduce_join(inputs: ragged_tensor.Ragged, axis: Any | None = ..., keepdims: Any | None = ..., separator: str = ..., name: Any | None = ...): ...
def ngrams(data, ngram_width, separator: str = ..., pad_values: Any | None = ..., padding_width: Any | None = ..., preserve_short_sequences: bool = ..., name: Any | None = ...): ...
def string_format(template: str, inputs: typing.Union[ragged_tensor.Ragged, typing.List[ragged_tensor.RaggedOrDense]], placeholder: str = ..., summarize: int = ..., name: Any | None = ...): ...
def ragged_tensor_to_string(rt, summarize: Any | None = ...): ...
def string_join(inputs: typing.List[ragged_tensor.RaggedOrDense], separator: str = ..., name: Any | None = ...): ...
