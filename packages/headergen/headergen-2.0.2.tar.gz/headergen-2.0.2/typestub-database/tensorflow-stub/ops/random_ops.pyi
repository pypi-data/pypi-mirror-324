from tensorflow.python.ops.gen_random_ops import *
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops, random_seed as random_seed, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gen_random_ops as gen_random_ops, math_ops as math_ops, stateless_random_ops as stateless_random_ops
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

def random_normal(shape, mean: float = ..., stddev: float = ..., dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
def parameterized_truncated_normal(shape, means: float = ..., stddevs: float = ..., minvals=..., maxvals: float = ..., dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
def truncated_normal(shape, mean: float = ..., stddev: float = ..., dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
def random_uniform(shape, minval: int = ..., maxval: Any | None = ..., dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
def random_shuffle(value, seed: Any | None = ..., name: Any | None = ...): ...
def random_crop(value, size, seed: Any | None = ..., name: Any | None = ...): ...
def stateless_random_crop(value, size, seed, name: Any | None = ...): ...
def multinomial(logits, num_samples, seed: Any | None = ..., name: Any | None = ..., output_dtype: Any | None = ...): ...
def categorical(logits, num_samples, dtype: Any | None = ..., seed: Any | None = ..., name: Any | None = ...): ...
def multinomial_categorical_impl(logits, num_samples, dtype, seed): ...
def random_gamma(shape, alpha, beta: Any | None = ..., dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
def random_poisson(lam, shape, dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
def random_poisson_v2(shape, lam, dtype=..., seed: Any | None = ..., name: Any | None = ...): ...
