from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, NamedTuple

Abs: Any

def accumulate_nv2(inputs, shape, name: Any | None = ...): ...

AccumulateNV2: Any

def accumulate_nv2_eager_fallback(inputs, shape, name, ctx): ...
def acos(x, name: Any | None = ...): ...

Acos: Any

def acos_eager_fallback(x, name, ctx): ...
def acosh(x, name: Any | None = ...): ...

Acosh: Any

def acosh_eager_fallback(x, name, ctx): ...
def add(x, y, name: Any | None = ...): ...

Add: Any

def add_eager_fallback(x, y, name, ctx): ...
def add_n(inputs, name: Any | None = ...): ...

AddN: Any

def add_n_eager_fallback(inputs, name, ctx): ...
def add_v2(x, y, name: Any | None = ...): ...

AddV2: Any

def add_v2_eager_fallback(x, y, name, ctx): ...

All: Any

def angle(input, Tout=..., name: Any | None = ...): ...

Angle: Any

def angle_eager_fallback(input, Tout, name, ctx): ...

Any: Any

def approximate_equal(x, y, tolerance: float = ..., name: Any | None = ...): ...

ApproximateEqual: Any

def approximate_equal_eager_fallback(x, y, tolerance, name, ctx): ...
def arg_max(input, dimension, output_type=..., name: Any | None = ...): ...

ArgMax: Any

def arg_max_eager_fallback(input, dimension, output_type, name, ctx): ...
def arg_min(input, dimension, output_type=..., name: Any | None = ...): ...

ArgMin: Any

def arg_min_eager_fallback(input, dimension, output_type, name, ctx): ...
def asin(x, name: Any | None = ...): ...

Asin: Any

def asin_eager_fallback(x, name, ctx): ...
def asinh(x, name: Any | None = ...): ...

Asinh: Any

def asinh_eager_fallback(x, name, ctx): ...
def atan(x, name: Any | None = ...): ...

Atan: Any

def atan_eager_fallback(x, name, ctx): ...
def atan2(y, x, name: Any | None = ...): ...

Atan2: Any

def atan2_eager_fallback(y, x, name, ctx): ...
def atanh(x, name: Any | None = ...): ...

Atanh: Any

def atanh_eager_fallback(x, name, ctx): ...
def batch_mat_mul(x, y, adj_x: bool = ..., adj_y: bool = ..., name: Any | None = ...): ...

BatchMatMul: Any

def batch_mat_mul_eager_fallback(x, y, adj_x, adj_y, name, ctx): ...
def batch_mat_mul_v2(x, y, adj_x: bool = ..., adj_y: bool = ..., name: Any | None = ...): ...

BatchMatMulV2: Any

def batch_mat_mul_v2_eager_fallback(x, y, adj_x, adj_y, name, ctx): ...
def batch_mat_mul_v3(x, y, Tout, adj_x: bool = ..., adj_y: bool = ..., name: Any | None = ...): ...

BatchMatMulV3: Any

def batch_mat_mul_v3_eager_fallback(x, y, Tout, adj_x, adj_y, name, ctx): ...
def betainc(a, b, x, name: Any | None = ...): ...

Betainc: Any

def betainc_eager_fallback(a, b, x, name, ctx): ...
def bincount(arr, size, weights, name: Any | None = ...): ...

Bincount: Any

def bincount_eager_fallback(arr, size, weights, name, ctx): ...
def bucketize(input, boundaries, name: Any | None = ...): ...

Bucketize: Any

def bucketize_eager_fallback(input, boundaries, name, ctx): ...
def cast(x, DstT, Truncate: bool = ..., name: Any | None = ...): ...

Cast: Any

def cast_eager_fallback(x, DstT, Truncate, name, ctx): ...
def ceil(x, name: Any | None = ...): ...

Ceil: Any

def ceil_eager_fallback(x, name, ctx): ...

ClipByValue: Any
Complex: Any

def complex_abs(x, Tout=..., name: Any | None = ...): ...

ComplexAbs: Any

def complex_abs_eager_fallback(x, Tout, name, ctx): ...
def conj(input, name: Any | None = ...): ...

Conj: Any

def conj_eager_fallback(input, name, ctx): ...
def cos(x, name: Any | None = ...): ...

Cos: Any

def cos_eager_fallback(x, name, ctx): ...
def cosh(x, name: Any | None = ...): ...

Cosh: Any

def cosh_eager_fallback(x, name, ctx): ...
def cross(a, b, name: Any | None = ...): ...

Cross: Any

def cross_eager_fallback(a, b, name, ctx): ...
def cumprod(x, axis, exclusive: bool = ..., reverse: bool = ..., name: Any | None = ...): ...

Cumprod: Any

def cumprod_eager_fallback(x, axis, exclusive, reverse, name, ctx): ...
def cumsum(x, axis, exclusive: bool = ..., reverse: bool = ..., name: Any | None = ...): ...

Cumsum: Any

def cumsum_eager_fallback(x, axis, exclusive, reverse, name, ctx): ...
def cumulative_logsumexp(x, axis, exclusive: bool = ..., reverse: bool = ..., name: Any | None = ...): ...

CumulativeLogsumexp: Any

def cumulative_logsumexp_eager_fallback(x, axis, exclusive, reverse, name, ctx): ...
def dense_bincount(input, size, weights, binary_output: bool = ..., name: Any | None = ...): ...

DenseBincount: Any

def dense_bincount_eager_fallback(input, size, weights, binary_output, name, ctx): ...
def digamma(x, name: Any | None = ...): ...

Digamma: Any

def digamma_eager_fallback(x, name, ctx): ...
def div(x, y, name: Any | None = ...): ...

Div: Any

def div_eager_fallback(x, y, name, ctx): ...
def div_no_nan(x, y, name: Any | None = ...): ...

DivNoNan: Any

def div_no_nan_eager_fallback(x, y, name, ctx): ...
def equal(x, y, incompatible_shape_error: bool = ..., name: Any | None = ...): ...

Equal: Any

def equal_eager_fallback(x, y, incompatible_shape_error, name, ctx): ...
def erf(x, name: Any | None = ...): ...

Erf: Any

def erf_eager_fallback(x, name, ctx): ...
def erfc(x, name: Any | None = ...): ...

Erfc: Any

def erfc_eager_fallback(x, name, ctx): ...
def erfinv(x, name: Any | None = ...): ...

Erfinv: Any

def erfinv_eager_fallback(x, name, ctx): ...
def euclidean_norm(input, axis, keep_dims: bool = ..., name: Any | None = ...): ...

EuclideanNorm: Any

def euclidean_norm_eager_fallback(input, axis, keep_dims, name, ctx): ...
def exp(x, name: Any | None = ...): ...

Exp: Any

def exp_eager_fallback(x, name, ctx): ...
def expm1(x, name: Any | None = ...): ...

Expm1: Any

def expm1_eager_fallback(x, name, ctx): ...
def floor(x, name: Any | None = ...): ...

Floor: Any

def floor_eager_fallback(x, name, ctx): ...
def floor_div(x, y, name: Any | None = ...): ...

FloorDiv: Any

def floor_div_eager_fallback(x, y, name, ctx): ...
def floor_mod(x, y, name: Any | None = ...): ...

FloorMod: Any

def floor_mod_eager_fallback(x, y, name, ctx): ...
def greater(x, y, name: Any | None = ...): ...

Greater: Any

def greater_eager_fallback(x, y, name, ctx): ...
def greater_equal(x, y, name: Any | None = ...): ...

GreaterEqual: Any

def greater_equal_eager_fallback(x, y, name, ctx): ...

HistogramFixedWidth: Any

def igamma(a, x, name: Any | None = ...): ...

Igamma: Any

def igamma_eager_fallback(a, x, name, ctx): ...
def igamma_grad_a(a, x, name: Any | None = ...): ...

IgammaGradA: Any

def igamma_grad_a_eager_fallback(a, x, name, ctx): ...
def igammac(a, x, name: Any | None = ...): ...

Igammac: Any

def igammac_eager_fallback(a, x, name, ctx): ...
def imag(input, Tout=..., name: Any | None = ...): ...

Imag: Any

def imag_eager_fallback(input, Tout, name, ctx): ...
def inv(x, name: Any | None = ...): ...

Inv: Any

def inv_eager_fallback(x, name, ctx): ...
def inv_grad(y, dy, name: Any | None = ...): ...

InvGrad: Any

def inv_grad_eager_fallback(y, dy, name, ctx): ...
def is_finite(x, name: Any | None = ...): ...

IsFinite: Any

def is_finite_eager_fallback(x, name, ctx): ...
def is_inf(x, name: Any | None = ...): ...

IsInf: Any

def is_inf_eager_fallback(x, name, ctx): ...
def is_nan(x, name: Any | None = ...): ...

IsNan: Any

def is_nan_eager_fallback(x, name, ctx): ...
def less(x, y, name: Any | None = ...): ...

Less: Any

def less_eager_fallback(x, y, name, ctx): ...
def less_equal(x, y, name: Any | None = ...): ...

LessEqual: Any

def less_equal_eager_fallback(x, y, name, ctx): ...
def lgamma(x, name: Any | None = ...): ...

Lgamma: Any

def lgamma_eager_fallback(x, name, ctx): ...
def lin_space(start, stop, num, name: Any | None = ...): ...

LinSpace: Any

def lin_space_eager_fallback(start, stop, num, name, ctx): ...
def log(x, name: Any | None = ...): ...

Log: Any

def log_eager_fallback(x, name, ctx): ...
def log1p(x, name: Any | None = ...): ...

Log1p: Any

def log1p_eager_fallback(x, name, ctx): ...
def logical_and(x, y, name: Any | None = ...): ...

LogicalAnd: Any

def logical_and_eager_fallback(x, y, name, ctx): ...
def logical_not(x, name: Any | None = ...): ...

LogicalNot: Any

def logical_not_eager_fallback(x, name, ctx): ...
def logical_or(x, y, name: Any | None = ...): ...

LogicalOr: Any

def logical_or_eager_fallback(x, y, name, ctx): ...
def mat_mul(a, b, transpose_a: bool = ..., transpose_b: bool = ..., name: Any | None = ...): ...

MatMul: Any

def mat_mul_eager_fallback(a, b, transpose_a, transpose_b, name, ctx): ...

Max: Any

def maximum(x, y, name: Any | None = ...): ...

Maximum: Any

def maximum_eager_fallback(x, y, name, ctx): ...
def mean(input, axis, keep_dims: bool = ..., name: Any | None = ...): ...

Mean: Any

def mean_eager_fallback(input, axis, keep_dims, name, ctx): ...

Min: Any

def minimum(x, y, name: Any | None = ...): ...

Minimum: Any

def minimum_eager_fallback(x, y, name, ctx): ...
def mod(x, y, name: Any | None = ...): ...

Mod: Any

def mod_eager_fallback(x, y, name, ctx): ...
def mul(x, y, name: Any | None = ...): ...

Mul: Any

def mul_eager_fallback(x, y, name, ctx): ...
def mul_no_nan(x, y, name: Any | None = ...): ...

MulNoNan: Any

def mul_no_nan_eager_fallback(x, y, name, ctx): ...
def ndtri(x, name: Any | None = ...): ...

Ndtri: Any

def ndtri_eager_fallback(x, name, ctx): ...
def neg(x, name: Any | None = ...): ...

Neg: Any

def neg_eager_fallback(x, name, ctx): ...
def next_after(x1, x2, name: Any | None = ...): ...

NextAfter: Any

def next_after_eager_fallback(x1, x2, name, ctx): ...
def not_equal(x, y, incompatible_shape_error: bool = ..., name: Any | None = ...): ...

NotEqual: Any

def not_equal_eager_fallback(x, y, incompatible_shape_error, name, ctx): ...
def polygamma(a, x, name: Any | None = ...): ...

Polygamma: Any

def polygamma_eager_fallback(a, x, name, ctx): ...

Pow: Any

def prod(input, axis, keep_dims: bool = ..., name: Any | None = ...): ...

Prod: Any

def prod_eager_fallback(input, axis, keep_dims, name, ctx): ...

class _QuantizeDownAndShrinkRangeOutput(NamedTuple):
    output: Any
    output_min: Any
    output_max: Any

def quantize_down_and_shrink_range(input, input_min, input_max, out_type, name: Any | None = ...): ...

QuantizeDownAndShrinkRange: Any

def quantize_down_and_shrink_range_eager_fallback(input, input_min, input_max, out_type, name, ctx): ...

class _QuantizedAddOutput(NamedTuple):
    z: Any
    min_z: Any
    max_z: Any

def quantized_add(x, y, min_x, max_x, min_y, max_y, Toutput=..., name: Any | None = ...): ...

QuantizedAdd: Any

def quantized_add_eager_fallback(x, y, min_x, max_x, min_y, max_y, Toutput, name, ctx): ...

class _QuantizedMatMulOutput(NamedTuple):
    out: Any
    min_out: Any
    max_out: Any

def quantized_mat_mul(a, b, min_a, max_a, min_b, max_b, Toutput=..., transpose_a: bool = ..., transpose_b: bool = ..., Tactivation=..., name: Any | None = ...): ...

QuantizedMatMul: Any

def quantized_mat_mul_eager_fallback(a, b, min_a, max_a, min_b, max_b, Toutput, transpose_a, transpose_b, Tactivation, name, ctx): ...

class _QuantizedMulOutput(NamedTuple):
    z: Any
    min_z: Any
    max_z: Any

def quantized_mul(x, y, min_x, max_x, min_y, max_y, Toutput=..., name: Any | None = ...): ...

QuantizedMul: Any

def quantized_mul_eager_fallback(x, y, min_x, max_x, min_y, max_y, Toutput, name, ctx): ...
def ragged_bincount(splits, values, size, weights, binary_output: bool = ..., name: Any | None = ...): ...

RaggedBincount: Any

def ragged_bincount_eager_fallback(splits, values, size, weights, binary_output, name, ctx): ...

Range: Any

def real(input, Tout=..., name: Any | None = ...): ...

Real: Any

def real_eager_fallback(input, Tout, name, ctx): ...
def real_div(x, y, name: Any | None = ...): ...

RealDiv: Any

def real_div_eager_fallback(x, y, name, ctx): ...
def reciprocal(x, name: Any | None = ...): ...

Reciprocal: Any

def reciprocal_eager_fallback(x, name, ctx): ...
def reciprocal_grad(y, dy, name: Any | None = ...): ...

ReciprocalGrad: Any

def reciprocal_grad_eager_fallback(y, dy, name, ctx): ...

class _RequantizationRangeOutput(NamedTuple):
    output_min: Any
    output_max: Any

def requantization_range(input, input_min, input_max, name: Any | None = ...): ...

RequantizationRange: Any

def requantization_range_eager_fallback(input, input_min, input_max, name, ctx): ...

class _RequantizationRangePerChannelOutput(NamedTuple):
    output_min: Any
    output_max: Any

def requantization_range_per_channel(input, input_min, input_max, clip_value_max, name: Any | None = ...): ...

RequantizationRangePerChannel: Any

def requantization_range_per_channel_eager_fallback(input, input_min, input_max, clip_value_max, name, ctx): ...

class _RequantizeOutput(NamedTuple):
    output: Any
    output_min: Any
    output_max: Any

def requantize(input, input_min, input_max, requested_output_min, requested_output_max, out_type, name: Any | None = ...): ...

Requantize: Any

def requantize_eager_fallback(input, input_min, input_max, requested_output_min, requested_output_max, out_type, name, ctx): ...

class _RequantizePerChannelOutput(NamedTuple):
    output: Any
    output_min: Any
    output_max: Any

def requantize_per_channel(input, input_min, input_max, requested_output_min, requested_output_max, out_type=..., name: Any | None = ...): ...

RequantizePerChannel: Any

def requantize_per_channel_eager_fallback(input, input_min, input_max, requested_output_min, requested_output_max, out_type, name, ctx): ...
def rint(x, name: Any | None = ...): ...

Rint: Any

def rint_eager_fallback(x, name, ctx): ...
def round(x, name: Any | None = ...): ...

Round: Any

def round_eager_fallback(x, name, ctx): ...
def rsqrt(x, name: Any | None = ...): ...

Rsqrt: Any

def rsqrt_eager_fallback(x, name, ctx): ...
def rsqrt_grad(y, dy, name: Any | None = ...): ...

RsqrtGrad: Any

def rsqrt_grad_eager_fallback(y, dy, name, ctx): ...
def segment_max(data, segment_ids, name: Any | None = ...): ...

SegmentMax: Any

def segment_max_eager_fallback(data, segment_ids, name, ctx): ...
def segment_mean(data, segment_ids, name: Any | None = ...): ...

SegmentMean: Any

def segment_mean_eager_fallback(data, segment_ids, name, ctx): ...
def segment_min(data, segment_ids, name: Any | None = ...): ...

SegmentMin: Any

def segment_min_eager_fallback(data, segment_ids, name, ctx): ...
def segment_prod(data, segment_ids, name: Any | None = ...): ...

SegmentProd: Any

def segment_prod_eager_fallback(data, segment_ids, name, ctx): ...
def segment_sum(data, segment_ids, name: Any | None = ...): ...

SegmentSum: Any

def segment_sum_eager_fallback(data, segment_ids, name, ctx): ...
def select(condition, x, y, name: Any | None = ...): ...

Select: Any

def select_eager_fallback(condition, x, y, name, ctx): ...
def select_v2(condition, t, e, name: Any | None = ...): ...

SelectV2: Any

def select_v2_eager_fallback(condition, t, e, name, ctx): ...
def sigmoid(x, name: Any | None = ...): ...

Sigmoid: Any

def sigmoid_eager_fallback(x, name, ctx): ...
def sigmoid_grad(y, dy, name: Any | None = ...): ...

SigmoidGrad: Any

def sigmoid_grad_eager_fallback(y, dy, name, ctx): ...
def sign(x, name: Any | None = ...): ...

Sign: Any

def sign_eager_fallback(x, name, ctx): ...
def sin(x, name: Any | None = ...): ...

Sin: Any

def sin_eager_fallback(x, name, ctx): ...
def sinh(x, name: Any | None = ...): ...

Sinh: Any

def sinh_eager_fallback(x, name, ctx): ...
def sobol_sample(dim, num_results, skip, dtype=..., name: Any | None = ...): ...

SobolSample: Any

def sobol_sample_eager_fallback(dim, num_results, skip, dtype, name, ctx): ...
def sparse_bincount(indices, values, dense_shape, size, weights, binary_output: bool = ..., name: Any | None = ...): ...

SparseBincount: Any

def sparse_bincount_eager_fallback(indices, values, dense_shape, size, weights, binary_output, name, ctx): ...
def sparse_mat_mul(a, b, transpose_a: bool = ..., transpose_b: bool = ..., a_is_sparse: bool = ..., b_is_sparse: bool = ..., name: Any | None = ...): ...

SparseMatMul: Any

def sparse_mat_mul_eager_fallback(a, b, transpose_a, transpose_b, a_is_sparse, b_is_sparse, name, ctx): ...
def sparse_segment_mean(data, indices, segment_ids, name: Any | None = ...): ...

SparseSegmentMean: Any

def sparse_segment_mean_eager_fallback(data, indices, segment_ids, name, ctx): ...
def sparse_segment_mean_grad(grad, indices, segment_ids, output_dim0, name: Any | None = ...): ...

SparseSegmentMeanGrad: Any

def sparse_segment_mean_grad_eager_fallback(grad, indices, segment_ids, output_dim0, name, ctx): ...
def sparse_segment_mean_with_num_segments(data, indices, segment_ids, num_segments, name: Any | None = ...): ...

SparseSegmentMeanWithNumSegments: Any

def sparse_segment_mean_with_num_segments_eager_fallback(data, indices, segment_ids, num_segments, name, ctx): ...
def sparse_segment_sqrt_n(data, indices, segment_ids, name: Any | None = ...): ...

SparseSegmentSqrtN: Any

def sparse_segment_sqrt_n_eager_fallback(data, indices, segment_ids, name, ctx): ...
def sparse_segment_sqrt_n_grad(grad, indices, segment_ids, output_dim0, name: Any | None = ...): ...

SparseSegmentSqrtNGrad: Any

def sparse_segment_sqrt_n_grad_eager_fallback(grad, indices, segment_ids, output_dim0, name, ctx): ...
def sparse_segment_sqrt_n_with_num_segments(data, indices, segment_ids, num_segments, name: Any | None = ...): ...

SparseSegmentSqrtNWithNumSegments: Any

def sparse_segment_sqrt_n_with_num_segments_eager_fallback(data, indices, segment_ids, num_segments, name, ctx): ...
def sparse_segment_sum(data, indices, segment_ids, name: Any | None = ...): ...

SparseSegmentSum: Any

def sparse_segment_sum_eager_fallback(data, indices, segment_ids, name, ctx): ...
def sparse_segment_sum_grad(grad, indices, segment_ids, output_dim0, name: Any | None = ...): ...

SparseSegmentSumGrad: Any

def sparse_segment_sum_grad_eager_fallback(grad, indices, segment_ids, output_dim0, name, ctx): ...
def sparse_segment_sum_with_num_segments(data, indices, segment_ids, num_segments, name: Any | None = ...): ...

SparseSegmentSumWithNumSegments: Any

def sparse_segment_sum_with_num_segments_eager_fallback(data, indices, segment_ids, num_segments, name, ctx): ...
def sqrt(x, name: Any | None = ...): ...

Sqrt: Any

def sqrt_eager_fallback(x, name, ctx): ...
def sqrt_grad(y, dy, name: Any | None = ...): ...

SqrtGrad: Any

def sqrt_grad_eager_fallback(y, dy, name, ctx): ...
def square(x, name: Any | None = ...): ...

Square: Any

def square_eager_fallback(x, name, ctx): ...
def squared_difference(x, y, name: Any | None = ...): ...

SquaredDifference: Any

def squared_difference_eager_fallback(x, y, name, ctx): ...
def sub(x, y, name: Any | None = ...): ...

Sub: Any

def sub_eager_fallback(x, y, name, ctx): ...

Sum: Any

def tan(x, name: Any | None = ...): ...

Tan: Any

def tan_eager_fallback(x, name, ctx): ...
def tanh(x, name: Any | None = ...): ...

Tanh: Any

def tanh_eager_fallback(x, name, ctx): ...
def tanh_grad(y, dy, name: Any | None = ...): ...

TanhGrad: Any

def tanh_grad_eager_fallback(y, dy, name, ctx): ...
def truncate_div(x, y, name: Any | None = ...): ...

TruncateDiv: Any

def truncate_div_eager_fallback(x, y, name, ctx): ...
def truncate_mod(x, y, name: Any | None = ...): ...

TruncateMod: Any

def truncate_mod_eager_fallback(x, y, name, ctx): ...
def unsorted_segment_max(data, segment_ids, num_segments, name: Any | None = ...): ...

UnsortedSegmentMax: Any

def unsorted_segment_max_eager_fallback(data, segment_ids, num_segments, name, ctx): ...
def unsorted_segment_min(data, segment_ids, num_segments, name: Any | None = ...): ...

UnsortedSegmentMin: Any

def unsorted_segment_min_eager_fallback(data, segment_ids, num_segments, name, ctx): ...
def unsorted_segment_prod(data, segment_ids, num_segments, name: Any | None = ...): ...

UnsortedSegmentProd: Any

def unsorted_segment_prod_eager_fallback(data, segment_ids, num_segments, name, ctx): ...
def unsorted_segment_sum(data, segment_ids, num_segments, name: Any | None = ...): ...

UnsortedSegmentSum: Any

def unsorted_segment_sum_eager_fallback(data, segment_ids, num_segments, name, ctx): ...
def xdivy(x, y, name: Any | None = ...): ...

Xdivy: Any

def xdivy_eager_fallback(x, y, name, ctx): ...
def xlog1py(x, y, name: Any | None = ...): ...

Xlog1py: Any

def xlog1py_eager_fallback(x, y, name, ctx): ...
def xlogy(x, y, name: Any | None = ...): ...

Xlogy: Any

def xlogy_eager_fallback(x, y, name, ctx): ...
def zeta(x, q, name: Any | None = ...): ...

Zeta: Any

def zeta_eager_fallback(x, q, name, ctx): ...
