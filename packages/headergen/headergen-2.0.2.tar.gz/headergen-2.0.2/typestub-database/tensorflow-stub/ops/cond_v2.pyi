from tensorflow.core.framework import types_pb2 as types_pb2
from tensorflow.python.eager import backprop_util as backprop_util
from tensorflow.python.framework import auto_control_deps as auto_control_deps, constant_op as constant_op, dtypes as dtypes, errors_impl as errors_impl, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_util as control_flow_util, control_flow_util_v2 as util, default_gradient as default_gradient, gen_dataset_ops as gen_dataset_ops, gen_functional_ops as gen_functional_ops, gradients_util as gradients_util, handle_data_util as handle_data_util, math_ops as math_ops
from tensorflow.python.util import nest as nest
from typing import Any

def cond_v2(pred, true_fn, false_fn, name: str = ...): ...
def get_func_graphs(op): ...
def verify_captures(op_type, branch_graphs) -> None: ...

class _CondGradFuncGraph(util.CondBranchFuncGraph):
    op_needs_rewrite: bool
    def __init__(self, name, forward_graph) -> None: ...
    @property
    def wrapped_intermediates(self): ...
    @property
    def xla_intermediates(self): ...

def indexed_case(branch_index, branch_fns, name: str = ..., lower_using_switch_merge: Any | None = ...): ...
