from tensorflow.python.ops.gen_math_ops import *
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, graph_util as graph_util, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, gen_array_ops as gen_array_ops, gen_bitwise_ops as gen_bitwise_ops, gen_data_flow_ops as gen_data_flow_ops, gen_math_ops as gen_math_ops, gen_nn_ops as gen_nn_ops, gen_sparse_ops as gen_sparse_ops
from tensorflow.python.util import compat as compat, deprecation as deprecation, dispatch as dispatch, nest as nest, tf_decorator as tf_decorator, traceback_utils as traceback_utils
from tensorflow.python.util.compat import collections_abc as collections_abc
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

np_dtypes: Any
nextafter: Any

def linspace_nd(start, stop, num, name: Any | None = ..., axis: int = ...): ...
linspace = linspace_nd
arg_max: Any
arg_min: Any

def argmax(input, axis: Any | None = ..., name: Any | None = ..., dimension: Any | None = ..., output_type=...): ...
def argmax_v2(input, axis: Any | None = ..., output_type=..., name: Any | None = ...): ...
def argmin(input, axis: Any | None = ..., name: Any | None = ..., dimension: Any | None = ..., output_type=...): ...
def argmin_v2(input, axis: Any | None = ..., output_type=..., name: Any | None = ...): ...
def abs(x, name: Any | None = ...): ...

class DivideDelegateWithName:
    x: Any
    name: Any
    def __init__(self, x, name) -> None: ...
    def __truediv__(self, y): ...
    def __floordiv__(self, y): ...
    def __div__(self, y): ...

def divide(x, y, name: Any | None = ...): ...
def multiply(x, y, name: Any | None = ...): ...
def subtract(x, y, name: Any | None = ...): ...

negative: Any

def scalar_mul(scalar, x, name: Any | None = ...): ...
def softplus(features, name: Any | None = ...): ...
def scalar_mul_v2(scalar, x, name: Any | None = ...): ...
def pow(x, y, name: Any | None = ...): ...
def complex(real, imag, name: Any | None = ...): ...
def sign(x, name: Any | None = ...): ...
def real(input, name: Any | None = ...): ...
def imag(input, name: Any | None = ...): ...
def angle(input, name: Any | None = ...): ...
def round(x, name: Any | None = ...): ...
def cast(x, dtype, name: Any | None = ...): ...
def saturate_cast(value, dtype, name: Any | None = ...): ...
def to_float(x, name: str = ...): ...
def to_double(x, name: str = ...): ...
def to_int32(x, name: str = ...): ...
def to_int64(x, name: str = ...): ...
def to_bfloat16(x, name: str = ...): ...
def to_complex64(x, name: str = ...): ...
def to_complex128(x, name: str = ...): ...
def maybe_promote_tensors(*tensors, force_same_dtype: bool = ...): ...
def truediv(x, y, name: Any | None = ...): ...
def div(x, y, name: Any | None = ...): ...
def div_no_nan(x, y, name: Any | None = ...): ...
def multiply_no_nan(x, y, name: Any | None = ...): ...

mod: Any

def floordiv(x, y, name: Any | None = ...): ...

realdiv: Any
truncatediv: Any
floor_div: Any
truncatemod: Any
floormod: Any

def logical_xor(x, y, name: str = ...): ...
def and_(x, y, name: Any | None = ...): ...
def or_(x, y, name: Any | None = ...): ...
def xor_(x, y, name: Any | None = ...): ...
def invert_(x, name: Any | None = ...): ...
def equal(x, y, name: Any | None = ...): ...
def not_equal(x, y, name: Any | None = ...): ...
def tensor_equals(self, other): ...
def tensor_not_equals(self, other): ...
def range(start, limit: Any | None = ..., delta: int = ..., dtype: Any | None = ..., name: str = ...): ...
def reduce_sum_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_sum(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_sum_with_dims(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ..., dims: Any | None = ...): ...
def reduce_euclidean_norm(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def count_nonzero(input_tensor: Any | None = ..., axis: Any | None = ..., keepdims: Any | None = ..., dtype=..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ..., input: Any | None = ...): ...
def count_nonzero_v2(input, axis: Any | None = ..., keepdims: Any | None = ..., dtype=..., name: Any | None = ...): ...
def reduce_mean_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_mean(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_variance(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_std(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_prod(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_prod_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_min_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_min(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_max_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_max(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_max_with_dims(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ..., dims: Any | None = ...): ...
def reduce_all_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_all(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_any_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_any(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def reduce_logsumexp_v1(input_tensor, axis: Any | None = ..., keepdims: Any | None = ..., name: Any | None = ..., reduction_indices: Any | None = ..., keep_dims: Any | None = ...): ...
def reduce_logsumexp(input_tensor, axis: Any | None = ..., keepdims: bool = ..., name: Any | None = ...): ...
def trace(x, name: Any | None = ...): ...
def matmul(a, b, transpose_a: bool = ..., transpose_b: bool = ..., adjoint_a: bool = ..., adjoint_b: bool = ..., a_is_sparse: bool = ..., b_is_sparse: bool = ..., output_type: Any | None = ..., name: Any | None = ...): ...
def matvec(a, b, transpose_a: bool = ..., adjoint_a: bool = ..., a_is_sparse: bool = ..., b_is_sparse: bool = ..., name: Any | None = ...): ...
def matmul_wrapper(a, b, name: Any | None = ...): ...

sparse_matmul: Any

def add(x, y, name: Any | None = ...): ...
def add_n(inputs, name: Any | None = ...): ...
def accumulate_n(inputs, shape: Any | None = ..., tensor_dtype: Any | None = ..., name: Any | None = ...): ...
def sigmoid(x, name: Any | None = ...): ...
def log_sigmoid(x, name: Any | None = ...): ...
def cumsum(x, axis: int = ..., exclusive: bool = ..., reverse: bool = ..., name: Any | None = ...): ...
def cumprod(x, axis: int = ..., exclusive: bool = ..., reverse: bool = ..., name: Any | None = ...): ...
def cumulative_logsumexp(x, axis: int = ..., exclusive: bool = ..., reverse: bool = ..., name: Any | None = ...): ...
def conj(x, name: Any | None = ...): ...
def reduced_shape(input_shape, axes): ...
def unsorted_segment_mean(data, segment_ids, num_segments, name: Any | None = ...): ...
def unsorted_segment_sqrt_n(data, segment_ids, num_segments, name: Any | None = ...): ...
def sparse_segment_sum(data, indices, segment_ids, name: Any | None = ..., num_segments: Any | None = ...): ...
def sparse_segment_sum_v2(data, indices, segment_ids, num_segments: Any | None = ..., name: Any | None = ...): ...
def sparse_segment_mean(data, indices, segment_ids, name: Any | None = ..., num_segments: Any | None = ...): ...
def sparse_segment_mean_v2(data, indices, segment_ids, num_segments: Any | None = ..., name: Any | None = ...): ...
def sparse_segment_sqrt_n(data, indices, segment_ids, name: Any | None = ..., num_segments: Any | None = ...): ...
def sparse_segment_sqrt_n_v2(data, indices, segment_ids, num_segments: Any | None = ..., name: Any | None = ...): ...
def tensordot(a, b, axes, name: Any | None = ...): ...
def polyval(coeffs, x, name: Any | None = ...): ...
def reciprocal_no_nan(x, name: Any | None = ...): ...
def xlog1py(x, y, name: Any | None = ...): ...
def erfinv(x, name: Any | None = ...): ...
def ndtri(x, name: Any | None = ...): ...
def erfcinv(x, name: Any | None = ...): ...
def ceil(x, name: Any | None = ...): ...
def sqrt(x, name: Any | None = ...): ...
def exp(x, name: Any | None = ...): ...
def sobol_sample(dim, num_results, skip: int = ..., dtype=..., name: Any | None = ...): ...
def rsqrt(x, name: Any | None = ...): ...
def acos(x, name: Any | None = ...): ...
def floor(x, name: Any | None = ...): ...
