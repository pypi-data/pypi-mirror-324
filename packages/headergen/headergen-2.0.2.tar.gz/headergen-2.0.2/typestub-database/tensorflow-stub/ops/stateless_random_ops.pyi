import enum
from tensorflow.python.compat import compat as compat
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, bitwise_ops as bitwise_ops, gen_stateless_random_ops as gen_stateless_random_ops, gen_stateless_random_ops_v2 as gen_stateless_random_ops_v2, math_ops as math_ops
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

class Algorithm(enum.Enum):
    PHILOX: int
    THREEFRY: int
    AUTO_SELECT: int

def convert_alg_to_int(alg): ...
def uint32s_to_uint64(x): ...
def split(seed, num: int = ..., alg: str = ...): ...
def fold_in(seed, data, alg: str = ...): ...
def stateless_random_uniform(shape, seed, minval: int = ..., maxval: Any | None = ..., dtype=..., name: Any | None = ..., alg: str = ...): ...
def stateless_random_binomial(shape, seed, counts, probs, output_dtype=..., name: Any | None = ...): ...
def stateless_random_gamma(shape, seed, alpha, beta: Any | None = ..., dtype=..., name: Any | None = ...): ...
def stateless_random_poisson(shape, seed, lam, dtype=..., name: Any | None = ...): ...
def stateless_random_normal(shape, seed, mean: float = ..., stddev: float = ..., dtype=..., name: Any | None = ..., alg: str = ...): ...
def stateless_truncated_normal(shape, seed, mean: float = ..., stddev: float = ..., dtype=..., name: Any | None = ..., alg: str = ...): ...
def stateless_multinomial(logits, num_samples, seed, output_dtype=..., name: Any | None = ...): ...
def stateless_categorical(logits, num_samples, seed, dtype=..., name: Any | None = ...): ...
def stateless_multinomial_categorical_impl(logits, num_samples, dtype, seed): ...
def stateless_parameterized_truncated_normal(shape, seed, means: float = ..., stddevs: float = ..., minvals=..., maxvals: float = ..., name: Any | None = ...): ...
