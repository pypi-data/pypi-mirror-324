from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.keras import backend as backend
from tensorflow.python.keras.engine import base_preprocessing_layer as base_preprocessing_layer
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, math_ops as math_ops, nn_impl as nn_impl, variables as variables
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any

class Normalization(base_preprocessing_layer.PreprocessingLayer):
    axis: Any
    input_mean: Any
    input_variance: Any
    def __init__(self, axis: int = ..., mean: Any | None = ..., variance: Any | None = ..., **kwargs) -> None: ...
    adapt_mean: Any
    adapt_variance: Any
    count: Any
    mean: Any
    variance: Any
    def build(self, input_shape) -> None: ...
    def update_state(self, data) -> None: ...
    def merge_state(self, layers) -> None: ...
    def reset_state(self) -> None: ...
    def finalize_state(self) -> None: ...
    def call(self, inputs): ...
    def compute_output_shape(self, input_shape): ...
    def compute_output_signature(self, input_spec): ...
    def get_config(self): ...
