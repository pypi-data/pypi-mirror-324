from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_spec as tensor_spec, type_spec as type_spec_module
from tensorflow.python.keras.utils import object_identity as object_identity
from tensorflow.python.ops import array_ops as array_ops
from tensorflow.python.ops.ragged import ragged_operators as ragged_operators, ragged_tensor as ragged_tensor
from tensorflow.python.util import nest as nest
from typing import Any

class KerasTensor:
    def __init__(self, type_spec, inferred_value: Any | None = ..., name: Any | None = ...) -> None: ...
    @property
    def type_spec(self): ...
    @property
    def shape(self): ...
    @classmethod
    def from_tensor(cls, tensor): ...
    @classmethod
    def from_type_spec(cls, type_spec, name: Any | None = ...): ...
    def get_shape(self): ...
    def __len__(self) -> None: ...
    @property
    def op(self) -> None: ...
    def __hash__(self): ...
    __array_priority__: int
    def __array__(self) -> None: ...
    @property
    def is_tensor_like(self): ...
    def set_shape(self, shape) -> None: ...
    @property
    def dtype(self): ...
    def ref(self): ...
    def __iter__(self): ...
    @property
    def name(self): ...

class SparseKerasTensor(KerasTensor): ...

class RaggedKerasTensor(KerasTensor):
    @property
    def ragged_rank(self): ...

class UserRegisteredSpec(type_spec_module.TypeSpec):
    shape: Any
    dtype: Any
    def __init__(self, shape, dtype) -> None: ...
    def value_type(self) -> None: ...

class UserRegisteredTypeKerasTensor(KerasTensor):
    def __init__(self, user_registered_symbolic_object) -> None: ...
    @classmethod
    def from_tensor(cls, tensor): ...
    @classmethod
    def from_type_spec(cls, type_spec, name: Any | None = ...) -> None: ...

class _KerasTensorIterator:
    def __init__(self, tensor, dim0) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

keras_tensor_classes: Any

def register_keras_tensor_specialization(cls, keras_tensor_subclass) -> None: ...
def keras_tensor_to_placeholder(x): ...
def keras_tensor_from_tensor(tensor): ...
def keras_tensor_from_type_spec(type_spec, name: Any | None = ...): ...
