import enum
import gast
from tensorflow.python.autograph.pyct import anno as anno
from typing import Any

class Node:
    next: Any
    prev: Any
    ast_node: Any
    def __init__(self, next_, prev, ast_node) -> None: ...
    def freeze(self) -> None: ...

class Graph:
    def as_dot(self): ...

class _WalkMode(enum.Enum):
    FORWARD: int
    REVERSE: int

class GraphVisitor:
    graph: Any
    def __init__(self, graph) -> None: ...
    def init_state(self, node) -> None: ...
    def visit_node(self, node) -> None: ...
    in_: Any
    out: Any
    def reset(self) -> None: ...
    def can_ignore(self, node): ...
    def visit_forward(self) -> None: ...
    def visit_reverse(self) -> None: ...

class GraphBuilder:
    parent: Any
    def __init__(self, parent_ast_node) -> None: ...
    head: Any
    errors: Any
    node_index: Any
    leaves: Any
    active_stmts: Any
    owners: Any
    forward_edges: Any
    finally_sections: Any
    finally_section_subgraphs: Any
    finally_section_has_direct_flow: Any
    pending_finally_sections: Any
    exits: Any
    section_entry: Any
    continues: Any
    raises: Any
    cond_entry: Any
    cond_leaves: Any
    def reset(self) -> None: ...
    def begin_statement(self, stmt) -> None: ...
    def end_statement(self, stmt) -> None: ...
    def add_ordinary_node(self, ast_node): ...
    def add_exit_node(self, ast_node, section_id, guards): ...
    def add_continue_node(self, ast_node, section_id, guards) -> None: ...
    def connect_raise_node(self, node, except_guards) -> None: ...
    def enter_section(self, section_id) -> None: ...
    def exit_section(self, section_id) -> None: ...
    def enter_loop_section(self, section_id, entry_node) -> None: ...
    def exit_loop_section(self, section_id) -> None: ...
    def enter_cond_section(self, section_id) -> None: ...
    def new_cond_branch(self, section_id) -> None: ...
    def exit_cond_section(self, section_id) -> None: ...
    def enter_except_section(self, section_id) -> None: ...
    def enter_finally_section(self, section_id) -> None: ...
    def exit_finally_section(self, section_id) -> None: ...
    def build(self): ...

class AstToCfg(gast.NodeVisitor):
    builder_stack: Any
    builder: Any
    cfgs: Any
    lexical_scopes: Any
    def __init__(self) -> None: ...
    def visit_ClassDef(self, node) -> None: ...
    def visit_FunctionDef(self, node) -> None: ...
    def visit_Lambda(self, node) -> None: ...
    def visit_Return(self, node) -> None: ...
    def visit_Import(self, node) -> None: ...
    def visit_ImportFrom(self, node) -> None: ...
    def visit_Expr(self, node) -> None: ...
    def visit_Assign(self, node) -> None: ...
    def visit_AnnAssign(self, node) -> None: ...
    def visit_AugAssign(self, node) -> None: ...
    def visit_Pass(self, node) -> None: ...
    def visit_Global(self, node) -> None: ...
    def visit_Nonlocal(self, node) -> None: ...
    def visit_Print(self, node) -> None: ...
    def visit_Raise(self, node) -> None: ...
    def visit_Assert(self, node) -> None: ...
    def visit_Delete(self, node) -> None: ...
    def visit_If(self, node) -> None: ...
    def visit_While(self, node) -> None: ...
    def visit_For(self, node) -> None: ...
    def visit_Break(self, node) -> None: ...
    def visit_Continue(self, node) -> None: ...
    def visit_ExceptHandler(self, node) -> None: ...
    def visit_Try(self, node) -> None: ...
    def visit_With(self, node) -> None: ...

def build(node): ...
