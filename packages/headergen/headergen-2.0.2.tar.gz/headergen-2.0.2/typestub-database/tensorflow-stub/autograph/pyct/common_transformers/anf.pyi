from tensorflow.python.autograph.pyct import gast_util as gast_util, templates as templates, transformer as transformer
from typing import Any

class DummyGensym:
    def __init__(self) -> None: ...
    def new_name(self, stem: str = ...): ...

REPLACE: Any
LEAVE: Any
ANY: Any

class ASTEdgePattern:
    def matches(self, parent, field, child): ...

class AnfTransformer(transformer.Base):
    def __init__(self, ctx, config) -> None: ...
    def visit_Return(self, node): ...
    def visit_Delete(self, node): ...
    def visit_Assign(self, node): ...
    def visit_AugAssign(self, node): ...
    def visit_Print(self, node): ...
    def visit_For(self, node): ...
    def visit_AsyncFor(self, node): ...
    def visit_While(self, node): ...
    def visit_If(self, node): ...
    def visit_With(self, node): ...
    def visit_AsyncWith(self, node): ...
    def visit_Raise(self, node): ...
    def visit_Assert(self, node): ...
    def visit_Exec(self, node): ...
    def visit_Expr(self, node): ...
    def visit_BoolOp(self, node): ...
    def visit_BinOp(self, node): ...
    def visit_UnaryOp(self, node): ...
    def visit_Lambda(self, node): ...
    def visit_IfExp(self, node): ...
    def visit_Dict(self, node): ...
    def visit_Set(self, node): ...
    def visit_ListComp(self, node) -> None: ...
    def visit_SetComp(self, node) -> None: ...
    def visit_DictComp(self, node) -> None: ...
    def visit_GeneratorExp(self, node) -> None: ...
    def visit_Await(self, node): ...
    def visit_Yield(self, node): ...
    def visit_YieldFrom(self, node): ...
    def visit_Compare(self, node): ...
    def visit_Call(self, node): ...
    def visit_Repr(self, node): ...
    def visit_FormattedValue(self, node): ...
    def visit_JoinedStr(self, node): ...
    def visit_Attribute(self, node): ...
    def visit_Subscript(self, node): ...
    def visit_List(self, node): ...
    def visit_Tuple(self, node): ...

def transform(node, ctx, config: Any | None = ...): ...
