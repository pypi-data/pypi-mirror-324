from tensorflow.python.autograph.pyct import cache as cache, inspect_utils as inspect_utils, loader as loader, naming as naming, origin_info as origin_info, parser as parser, templates as templates, transformer as transformer
from typing import Any

class _PythonFnFactory:
    module: Any
    source_map: Any
    def __init__(self, name, freevars, extra_locals) -> None: ...
    def create(self, nodes, namer, inner_factory_name: str = ..., outer_factory_name: str = ..., future_features=...) -> None: ...
    def instantiate(self, globals_, closure, defaults: Any | None = ..., kwdefaults: Any | None = ...): ...

class GenericTranspiler:
    def get_transformed_name(self, node): ...
    def transform_ast(self, node, ctx) -> None: ...
    def transform(self, obj, user_context): ...
    def transform_module(self, mod, user_context): ...
    def transform_function(self, fn, user_context): ...

class PyToPy(GenericTranspiler):
    def __init__(self) -> None: ...
    def get_extra_locals(self) -> None: ...
    def get_caching_key(self, user_context) -> None: ...
    def transform_function(self, fn, user_context): ...
