import gast
from tensorflow.python.autograph.pyct import anno as anno, cfg as cfg, qual_names as qual_names, transformer as transformer
from tensorflow.python.autograph.pyct.static_analysis import activity as activity, annos as annos
from typing import Any, Dict, Set

class Resolver:
    def res_name(self, ns, types_ns, name) -> None: ...
    def res_value(self, ns, value) -> None: ...
    def res_arg(self, ns, types_ns, f_name, name, type_anno, f_is_local) -> None: ...
    def res_call(self, ns, types_ns, node, f_type, args, keywords) -> None: ...
    def res_slice(self, ns, types_ns, node_or_slice, value, slice_) -> None: ...
    def res_compare(self, ns, types_ns, node, left, right) -> None: ...
    def res_unop(self, ns, types_ns, node, opnd) -> None: ...
    def res_binop(self, ns, types_ns, node, left, right) -> None: ...
    def res_list_literal(self, ns, elt_types) -> None: ...

class _TypeMap:
    types: Any
    def __init__(self, init_from: Any | None = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __or__(self, other): ...

NO_VALUE: Any

class StmtInferrer(gast.NodeVisitor):
    resolver: Any
    scope: Any
    namespace: Any
    closure_types: Any
    types_in: Any
    new_symbols: Any
    rtype: Any
    def __init__(self, resolver: Resolver, scope: activity.Scope, namespace: Dict[qual_names.QN, Any], closure_types: Dict[qual_names.QN, Set[Any]], types_in: _TypeMap) -> None: ...
    def visit(self, node): ...
    def visit_Constant(self, node): ...
    def visit_Tuple(self, node): ...
    def visit_List(self, node): ...
    def visit_Set(self, node) -> None: ...
    def visit_Name(self, node): ...
    def visit_Attribute(self, node): ...
    def visit_FunctionDef(self, node) -> None: ...
    def visit_Call(self, node): ...
    def visit_Expr(self, node): ...
    def visit_Assign(self, node) -> None: ...
    def visit_Subscript(self, node): ...
    def visit_Compare(self, node): ...
    def visit_BinOp(self, node): ...
    def visit_UnaryOp(self, node): ...

class Analyzer(cfg.GraphVisitor):
    resolver: Any
    namespace: Any
    scope: Any
    closure_types: Any
    context_types: Any
    def __init__(self, graph, resolver, namespace, scope, closure_types) -> None: ...
    def init_state(self, _): ...
    def visit_node(self, node): ...

class FunctionVisitor(transformer.Base):
    graphs: Any
    resolver: Any
    def __init__(self, source_info, graphs, resolver) -> None: ...
    def visit_FunctionDef(self, node): ...

def resolve(node, source_info, graphs, resolver): ...
