from tensorflow.python.autograph.pyct import anno as anno, cfg as cfg, transformer as transformer
from tensorflow.python.autograph.pyct.static_analysis import annos as annos
from typing import Any

class Analyzer(cfg.GraphVisitor):
    include_annotations: Any
    def __init__(self, graph, include_annotations) -> None: ...
    def init_state(self, _): ...
    def visit_node(self, node): ...

class TreeAnnotator(transformer.Base):
    include_annotations: Any
    allow_skips: bool
    graphs: Any
    current_analyzer: Any
    def __init__(self, source_info, graphs, include_annotations) -> None: ...
    def visit(self, node): ...
    def visit_Lambda(self, node): ...
    def visit_FunctionDef(self, node): ...
    def visit_If(self, node): ...
    def visit_For(self, node): ...
    def visit_While(self, node): ...
    def visit_Try(self, node): ...
    def visit_ExceptHandler(self, node): ...
    def visit_With(self, node): ...
    def visit_Expr(self, node): ...

def resolve(node, source_info, graphs, include_annotations: bool = ...): ...
