from tensorflow.python.tools.api.generator import doc_srcs as doc_srcs
from tensorflow.python.util import tf_decorator as tf_decorator, tf_export as tf_export
from typing import Any

API_ATTRS: Any
API_ATTRS_V1: Any

class SymbolExposedTwiceError(Exception): ...

def get_canonical_import(import_set): ...

class _ModuleInitCodeBuilder:
    def __init__(self, output_package, api_version, lazy_loading=..., use_relative_imports: bool = ...): ...
    def add_import(self, symbol, source_module_name, source_name, dest_module_name, dest_name) -> None: ...
    def build(self): ...
    def format_import(self, source_module_name, source_name, dest_name): ...
    def get_destination_modules(self): ...
    def copy_imports(self, from_dest_module, to_dest_module) -> None: ...

def add_nested_compat_imports(module_builder, compat_api_versions, output_package) -> None: ...
def add_imports_for_symbol(module_code_builder, symbol, source_module_name, source_name, api_name, api_version, output_module_prefix: str = ...) -> None: ...
def get_api_init_text(packages, packages_to_ignore, output_package, api_name, api_version, compat_api_versions: Any | None = ..., lazy_loading=..., use_relative_imports: bool = ...): ...
def get_module(dir_path, relative_to_dir): ...
def get_module_docstring(module_name, package, api_name): ...
def create_api_files(output_files, packages, packages_to_ignore, root_init_template, output_dir, output_package, api_name, api_version, compat_api_versions, compat_init_templates, lazy_loading=..., use_relative_imports: bool = ...) -> None: ...
def main() -> None: ...
