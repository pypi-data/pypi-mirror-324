from numpy.lib.index_tricks import AxisConcatenator as AxisConcatenator
from typing import Any

def count_masked(arr, axis=...) -> None: ...
def masked_all(shape, dtype=...) -> None: ...
def masked_all_like(arr) -> None: ...

class _fromnxfunction:
    __name__: Any
    __doc__: Any
    def __init__(self, funcname) -> None: ...
    def getdoc(self) -> None: ...
    def __call__(self, *args, **params) -> None: ...

class _fromnxfunction_single(_fromnxfunction):
    def __call__(self, x, *args, **params) -> None: ...

class _fromnxfunction_seq(_fromnxfunction):
    def __call__(self, x, *args, **params) -> None: ...

class _fromnxfunction_allargs(_fromnxfunction):
    def __call__(self, *args, **params) -> None: ...

atleast_1d: _fromnxfunction_allargs
atleast_2d: _fromnxfunction_allargs
atleast_3d: _fromnxfunction_allargs
vstack: _fromnxfunction_seq
row_stack: _fromnxfunction_seq
hstack: _fromnxfunction_seq
column_stack: _fromnxfunction_seq
dstack: _fromnxfunction_seq
stack: _fromnxfunction_seq
hsplit: _fromnxfunction_single
diagflat: _fromnxfunction_single

def apply_along_axis(func1d, axis, arr, *args, **kwargs) -> None: ...
def apply_over_axes(func, a, axes) -> None: ...
def average(a, axis=..., weights=..., returned=...) -> None: ...
def median(a, axis=..., out=..., overwrite_input=..., keepdims=...) -> None: ...
def compress_nd(x, axis=...) -> None: ...
def compress_rowcols(x, axis=...) -> None: ...
def compress_rows(a) -> None: ...
def compress_cols(a) -> None: ...
def mask_rows(a, axis=...) -> None: ...
def mask_cols(a, axis=...) -> None: ...
def ediff1d(arr, to_end=..., to_begin=...) -> None: ...
def unique(ar1, return_index=..., return_inverse=...) -> None: ...
def intersect1d(ar1, ar2, assume_unique=...) -> None: ...
def setxor1d(ar1, ar2, assume_unique=...) -> None: ...
def in1d(ar1, ar2, assume_unique=..., invert=...) -> None: ...
def isin(element, test_elements, assume_unique=..., invert=...) -> None: ...
def union1d(ar1, ar2) -> None: ...
def setdiff1d(ar1, ar2, assume_unique=...) -> None: ...
def cov(x, y=..., rowvar=..., bias=..., allow_masked=..., ddof=...) -> None: ...
def corrcoef(x, y=..., rowvar=..., bias=..., allow_masked=..., ddof=...) -> None: ...

class MAxisConcatenator(AxisConcatenator):
    concatenate: Any
    @classmethod
    def makemat(cls, arr) -> None: ...
    def __getitem__(self, key) -> None: ...

class mr_class(MAxisConcatenator):
    def __init__(self) -> None: ...

mr_: mr_class

def flatnotmasked_edges(a) -> None: ...
def notmasked_edges(a, axis=...) -> None: ...
def flatnotmasked_contiguous(a) -> None: ...
def notmasked_contiguous(a, axis=...) -> None: ...
def clump_unmasked(a) -> None: ...
def clump_masked(a) -> None: ...
def vander(x, n=...) -> None: ...
def polyfit(x, y, deg, rcond=..., full=..., w=..., cov=...) -> None: ...
