from numpy import dtype as dtype, int_ as int_, ndarray as ndarray
from numpy.polynomial._polybase import ABCPolyBase as ABCPolyBase
from numpy.polynomial.polyutils import trimcoef as trimcoef
from typing import Any

chebtrim = trimcoef

def poly2cheb(pol) -> None: ...
def cheb2poly(c) -> None: ...

chebdomain: ndarray[Any, dtype[int_]]
chebzero: ndarray[Any, dtype[int_]]
chebone: ndarray[Any, dtype[int_]]
chebx: ndarray[Any, dtype[int_]]

def chebline(off, scl) -> None: ...
def chebfromroots(roots) -> None: ...
def chebadd(c1, c2) -> None: ...
def chebsub(c1, c2) -> None: ...
def chebmulx(c) -> None: ...
def chebmul(c1, c2) -> None: ...
def chebdiv(c1, c2) -> None: ...
def chebpow(c, pow, maxpower=...) -> None: ...
def chebder(c, m=..., scl=..., axis=...) -> None: ...
def chebint(c, m=..., k=..., lbnd=..., scl=..., axis=...) -> None: ...
def chebval(x, c, tensor=...) -> None: ...
def chebval2d(x, y, c) -> None: ...
def chebgrid2d(x, y, c) -> None: ...
def chebval3d(x, y, z, c) -> None: ...
def chebgrid3d(x, y, z, c) -> None: ...
def chebvander(x, deg) -> None: ...
def chebvander2d(x, y, deg) -> None: ...
def chebvander3d(x, y, z, deg) -> None: ...
def chebfit(x, y, deg, rcond=..., full=..., w=...) -> None: ...
def chebcompanion(c) -> None: ...
def chebroots(c) -> None: ...
def chebinterpolate(func, deg, args=...) -> None: ...
def chebgauss(deg) -> None: ...
def chebweight(x) -> None: ...
def chebpts1(npts) -> None: ...
def chebpts2(npts) -> None: ...

class Chebyshev(ABCPolyBase):
    @classmethod
    def interpolate(cls, func, deg, domain=..., args=...) -> None: ...
    domain: Any
    window: Any
    basis_name: Any
