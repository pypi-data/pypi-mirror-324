from numpy import dtype as dtype, float_ as float_, int_ as int_, ndarray as ndarray
from numpy.polynomial._polybase import ABCPolyBase as ABCPolyBase
from numpy.polynomial.polyutils import trimcoef as trimcoef
from typing import Any

hermtrim = trimcoef

def poly2herm(pol) -> None: ...
def herm2poly(c) -> None: ...

hermdomain: ndarray[Any, dtype[int_]]
hermzero: ndarray[Any, dtype[int_]]
hermone: ndarray[Any, dtype[int_]]
hermx: ndarray[Any, dtype[float_]]

def hermline(off, scl) -> None: ...
def hermfromroots(roots) -> None: ...
def hermadd(c1, c2) -> None: ...
def hermsub(c1, c2) -> None: ...
def hermmulx(c) -> None: ...
def hermmul(c1, c2) -> None: ...
def hermdiv(c1, c2) -> None: ...
def hermpow(c, pow, maxpower=...) -> None: ...
def hermder(c, m=..., scl=..., axis=...) -> None: ...
def hermint(c, m=..., k=..., lbnd=..., scl=..., axis=...) -> None: ...
def hermval(x, c, tensor=...) -> None: ...
def hermval2d(x, y, c) -> None: ...
def hermgrid2d(x, y, c) -> None: ...
def hermval3d(x, y, z, c) -> None: ...
def hermgrid3d(x, y, z, c) -> None: ...
def hermvander(x, deg) -> None: ...
def hermvander2d(x, y, deg) -> None: ...
def hermvander3d(x, y, z, deg) -> None: ...
def hermfit(x, y, deg, rcond=..., full=..., w=...) -> None: ...
def hermcompanion(c) -> None: ...
def hermroots(c) -> None: ...
def hermgauss(deg) -> None: ...
def hermweight(x) -> None: ...

class Hermite(ABCPolyBase):
    domain: Any
    window: Any
    basis_name: Any
