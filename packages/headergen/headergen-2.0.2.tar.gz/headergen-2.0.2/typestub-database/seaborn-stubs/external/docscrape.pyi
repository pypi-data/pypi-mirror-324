from collections.abc import Mapping
from typing import Any, NamedTuple

def strip_blank_lines(l): ...

class Reader:
    def __init__(self, data) -> None: ...
    def __getitem__(self, n): ...
    def reset(self) -> None: ...
    def read(self): ...
    def seek_next_non_empty_line(self) -> None: ...
    def eof(self): ...
    def read_to_condition(self, condition_func): ...
    def read_to_next_empty_line(self): ...
    def read_to_next_unindented_line(self): ...
    def peek(self, n: int = ...): ...
    def is_empty(self): ...

class ParseError(Exception): ...

class Parameter(NamedTuple):
    name: Any
    type: Any
    desc: Any

class NumpyDocString(Mapping):
    sections: Any
    def __init__(self, docstring, config=...) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, val) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    empty_description: str

def indent(str, indent: int = ...): ...
def dedent_lines(lines): ...
def header(text, style: str = ...): ...

class FunctionDoc(NumpyDocString):
    def __init__(self, func, role: str = ..., doc: Any | None = ..., config=...) -> None: ...
    def get_func(self): ...

class ClassDoc(NumpyDocString):
    extra_public_methods: Any
    show_inherited_members: Any
    def __init__(self, cls, doc: Any | None = ..., modulename: str = ..., func_doc=..., config=...): ...
    @property
    def methods(self): ...
    @property
    def properties(self): ...
