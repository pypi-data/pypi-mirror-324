from .. import palettes as palettes, rcmod as rcmod, utils as utils
from ..conftest import has_verdana as has_verdana
from typing import Any

class RCParamTester:
    def flatten_list(self, orig_list): ...
    def assert_rc_params(self, params) -> None: ...
    def assert_rc_params_equal(self, params1, params2) -> None: ...

class TestAxesStyle(RCParamTester):
    styles: Any
    def test_default_return(self) -> None: ...
    def test_key_usage(self) -> None: ...
    def test_bad_style(self) -> None: ...
    def test_rc_override(self) -> None: ...
    def test_set_style(self) -> None: ...
    def test_style_context_manager(self) -> None: ...
    def test_style_context_independence(self) -> None: ...
    def test_set_rc(self) -> None: ...
    def test_set_with_palette(self) -> None: ...
    def test_reset_defaults(self) -> None: ...
    def test_reset_orig(self) -> None: ...
    def test_set_is_alias(self) -> None: ...

class TestPlottingContext(RCParamTester):
    contexts: Any
    def test_default_return(self) -> None: ...
    def test_key_usage(self) -> None: ...
    def test_bad_context(self) -> None: ...
    def test_font_scale(self) -> None: ...
    def test_rc_override(self) -> None: ...
    def test_set_context(self) -> None: ...
    def test_context_context_manager(self) -> None: ...

class TestPalette:
    def test_set_palette(self) -> None: ...

class TestFonts:
    def test_set_font(self) -> None: ...
    def test_set_serif_font(self) -> None: ...
    def test_different_sans_serif(self) -> None: ...
