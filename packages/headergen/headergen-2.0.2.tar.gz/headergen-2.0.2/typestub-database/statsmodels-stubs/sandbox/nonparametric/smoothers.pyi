from . import kernels as kernels
from typing import Any

class KernelSmoother:
    Kernel: Any
    x: Any
    y: Any
    def __init__(self, x, y, Kernel: Any | None = ...) -> None: ...
    def fit(self) -> None: ...
    def __call__(self, x): ...
    def predict(self, x): ...
    def conf(self, x): ...
    def var(self, x): ...
    def std(self, x): ...

class PolySmoother:
    order: Any
    coef: Any
    X: Any
    def __init__(self, order, x: Any | None = ...) -> None: ...
    def df_fit(self): ...
    def df_model(self): ...
    def gram(self, d: Any | None = ...) -> None: ...
    def smooth(self, *args, **kwds): ...
    def df_resid(self): ...
    def __call__(self, x: Any | None = ...): ...
    def predict(self, x: Any | None = ...): ...
    N: Any
    params: Any
    def fit(self, y, x: Any | None = ..., weights: Any | None = ...) -> None: ...
