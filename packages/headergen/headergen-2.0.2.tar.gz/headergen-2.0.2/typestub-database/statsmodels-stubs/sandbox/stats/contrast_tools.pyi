from typing import Any

def contrast_allpairs(nm): ...
def contrast_all_one(nm): ...
def contrast_diff_mean(nm): ...
def signstr(x, noplus: bool = ...): ...
def contrast_labels(contrasts, names, reverse: bool = ...): ...
def contrast_product(names1, names2, intgroup1: Any | None = ..., intgroup2: Any | None = ..., pairs: bool = ...): ...
def dummy_1d(x, varname: Any | None = ...): ...
def dummy_product(d1, d2, method: str = ...): ...
def dummy_limits(d): ...
def dummy_nested(d1, d2, method: str = ...): ...

class DummyTransform:
    transf_matrix: Any
    invtransf_matrix: Any
    def __init__(self, d1, d2) -> None: ...
    def dot_left(self, a): ...
    def dot_right(self, x): ...
    def inv_dot_left(self, b): ...
    def inv_dot_right(self, z): ...

def groupmean_d(x, d): ...

class TwoWay:
    nobs: Any
    nlevel1: Any
    nlevel2: Any
    transform: Any
    nvars: Any
    exog: Any
    resols: Any
    params: Any
    params_dropf: Any
    start_interaction: Any
    n_interaction: Any
    def __init__(self, endog, factor1, factor2, varnames: Any | None = ...) -> None: ...
    R_nointer_transf: Any
    def r_nointer(self): ...
    def ttest_interaction(self): ...
    def ftest_interaction(self): ...
    def ttest_conditional_effect(self, factorind): ...
    def summary_coeff(self): ...

class TestContrastTools:
    v1name: Any
    v2name: Any
    d1: Any
    def __init__(self) -> None: ...
    def test_dummy_1d(self) -> None: ...
    def test_contrast_product(self) -> None: ...
    def test_dummy_limits(self) -> None: ...
