import statsmodels.base.model as base
from statsmodels.base import model as model
from statsmodels.compat.pandas import Appender as Appender
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from typing import Any

class PHSurvivalTime:
    nstrat_orig: Any
    nstrat: Any
    offset_s: Any
    n_obs: Any
    stratum_rows: Any
    stratum_names: Any
    time_s: Any
    exog_s: Any
    status_s: Any
    entry_s: Any
    def __init__(self, time, status, exog, strata: Any | None = ..., entry: Any | None = ..., offset: Any | None = ...) -> None: ...

class PHReg(model.LikelihoodModel):
    status: Any
    entry: Any
    strata: Any
    offset: Any
    surv: Any
    nobs: Any
    groups: Any
    missing: Any
    df_resid: Any
    df_model: Any
    ties: Any
    def __init__(self, endog, exog, status: Any | None = ..., entry: Any | None = ..., strata: Any | None = ..., offset: Any | None = ..., ties: str = ..., missing: str = ..., **kwargs) -> None: ...
    @classmethod
    def from_formula(cls, formula, data, status: Any | None = ..., entry: Any | None = ..., strata: Any | None = ..., offset: Any | None = ..., subset: Any | None = ..., ties: str = ..., missing: str = ..., *args, **kwargs): ...
    def fit(self, groups: Any | None = ..., **args): ...
    def fit_regularized(self, method: str = ..., alpha: float = ..., start_params: Any | None = ..., refit: bool = ..., **kwargs): ...
    def loglike(self, params): ...
    def score(self, params): ...
    def hessian(self, params): ...
    def breslow_loglike(self, params): ...
    def efron_loglike(self, params): ...
    def breslow_gradient(self, params): ...
    def efron_gradient(self, params): ...
    def breslow_hessian(self, params): ...
    def efron_hessian(self, params): ...
    def robust_covariance(self, params): ...
    def score_residuals(self, params): ...
    def weighted_covariate_averages(self, params): ...
    def baseline_cumulative_hazard(self, params): ...
    def baseline_cumulative_hazard_function(self, params): ...
    def predict(self, params, exog: Any | None = ..., cov_params: Any | None = ..., endog: Any | None = ..., strata: Any | None = ..., offset: Any | None = ..., pred_type: str = ..., pred_only: bool = ...): ...
    def get_distribution(self, params, scale: float = ..., exog: Any | None = ...): ...

class PHRegResults(base.LikelihoodModelResults):
    covariance_type: Any
    df_resid: Any
    df_model: Any
    def __init__(self, model, params, cov_params, scale: float = ..., covariance_type: str = ...) -> None: ...
    def standard_errors(self): ...
    def bse(self): ...
    def get_distribution(self): ...
    def predict(self, endog: Any | None = ..., exog: Any | None = ..., strata: Any | None = ..., offset: Any | None = ..., transform: bool = ..., pred_type: str = ...): ...
    def weighted_covariate_averages(self): ...
    def score_residuals(self): ...
    def baseline_cumulative_hazard(self): ...
    def baseline_cumulative_hazard_function(self): ...
    def schoenfeld_residuals(self): ...
    def martingale_residuals(self): ...
    def summary(self, yname: Any | None = ..., xname: Any | None = ..., title: Any | None = ..., alpha: float = ...): ...

class rv_discrete_float:
    xk: Any
    pk: Any
    cpk: Any
    def __init__(self, xk, pk) -> None: ...
    def rvs(self, n: Any | None = ...): ...
    def mean(self): ...
    def var(self): ...
    def std(self): ...
