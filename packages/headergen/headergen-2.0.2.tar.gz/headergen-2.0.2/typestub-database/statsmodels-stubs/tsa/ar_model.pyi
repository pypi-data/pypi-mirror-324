import statsmodels.base.wrapper as wrap
from statsmodels.tsa.base import tsa_model
from typing import Any

class AutoReg(tsa_model.TimeSeriesModel):
    nobs: Any
    def __init__(self, endog, lags, trend: str = ..., seasonal: bool = ..., exog: Any | None = ..., hold_back: Any | None = ..., period: Any | None = ..., missing: str = ..., *, deterministic: Any | None = ..., old_names: bool = ...) -> None: ...
    @property
    def ar_lags(self): ...
    @property
    def hold_back(self): ...
    @property
    def trend(self): ...
    @property
    def seasonal(self): ...
    @property
    def deterministic(self): ...
    @property
    def period(self): ...
    @property
    def df_model(self): ...
    @property
    def exog_names(self): ...
    def initialize(self) -> None: ...
    def fit(self, cov_type: str = ..., cov_kwds: Any | None = ..., use_t: bool = ...): ...
    def loglike(self, params): ...
    def score(self, params): ...
    def information(self, params): ...
    def hessian(self, params): ...
    def predict(self, params, start: Any | None = ..., end: Any | None = ..., dynamic: bool = ..., exog: Any | None = ..., exog_oos: Any | None = ...): ...

class AR:
    def __init__(self, *args, **kwargs) -> None: ...

class ARResults:
    def __init__(self, *args, **kwargs) -> None: ...

class AutoRegResults(tsa_model.TimeSeriesModelResults):
    cov_params_default: Any
    def __init__(self, model, params, cov_params, normalized_cov_params: Any | None = ..., scale: float = ..., use_t: bool = ...) -> None: ...
    model: Any
    def initialize(self, model, params, **kwargs) -> None: ...
    @property
    def ar_lags(self): ...
    @property
    def params(self): ...
    @property
    def df_model(self): ...
    @property
    def df_resid(self): ...
    @property
    def nobs(self): ...
    def sigma2(self): ...
    def scale(self): ...
    def bse(self): ...
    def aic(self): ...
    def hqic(self): ...
    def fpe(self): ...
    def aicc(self): ...
    def bic(self): ...
    def resid(self): ...
    def roots(self): ...
    def arfreq(self): ...
    def fittedvalues(self): ...
    def test_serial_correlation(self, lags: Any | None = ..., model_df: Any | None = ...): ...
    def test_normality(self): ...
    def test_heteroskedasticity(self, lags: Any | None = ...): ...
    def diagnostic_summary(self): ...
    def predict(self, start: Any | None = ..., end: Any | None = ..., dynamic: bool = ..., exog: Any | None = ..., exog_oos: Any | None = ...): ...
    def get_prediction(self, start: Any | None = ..., end: Any | None = ..., dynamic: bool = ..., exog: Any | None = ..., exog_oos: Any | None = ...): ...
    def forecast(self, steps: int = ..., exog: Any | None = ...): ...
    def plot_predict(self, start: Any | None = ..., end: Any | None = ..., dynamic: bool = ..., exog: Any | None = ..., exog_oos: Any | None = ..., alpha: float = ..., in_sample: bool = ..., fig: Any | None = ..., figsize: Any | None = ...): ...
    def plot_diagnostics(self, lags: int = ..., fig: Any | None = ..., figsize: Any | None = ...): ...
    def summary(self, alpha: float = ...): ...

class AutoRegResultsWrapper(wrap.ResultsWrapper): ...

class AROrderSelectionResults:
    def __init__(self, model, ics, trend, seasonal, period): ...
    @property
    def model(self): ...
    @property
    def seasonal(self): ...
    @property
    def trend(self): ...
    @property
    def period(self): ...
    @property
    def aic(self): ...
    @property
    def bic(self): ...
    @property
    def hqic(self): ...
    @property
    def ar_lags(self): ...
