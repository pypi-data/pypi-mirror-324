from statsmodels.tsa.tsatools import lagmat as lagmat
from typing import Any

def varfilter(x, a): ...
def varinversefilter(ar, nobs, version: int = ...): ...
def vargenerate(ar, u, initvalues: Any | None = ...): ...
def padone(x, front: int = ..., back: int = ..., axis: int = ..., fillvalue: int = ...): ...
def trimone(x, front: int = ..., back: int = ..., axis: int = ...): ...
def ar2full(ar): ...
def ar2lhs(ar): ...

class _Var:
    y: Any
    def __init__(self, y) -> None: ...
    nlags: Any
    yred: Any
    xred: Any
    estresults: Any
    arlhs: Any
    arhat: Any
    rss: Any
    xredrank: Any
    def fit(self, nlags) -> None: ...
    yhat: Any
    def predict(self): ...
    paramcov: Any
    def covmat(self) -> None: ...
    def forecast(self, horiz: int = ..., u: Any | None = ...): ...

class VarmaPoly:
    ar: Any
    ma: Any
    isstructured: Any
    isindependent: bool
    malags: Any
    hasexog: Any
    arm1: Any
    def __init__(self, ar, ma: Any | None = ...) -> None: ...
    def vstack(self, a: Any | None = ..., name: str = ...): ...
    def hstack(self, a: Any | None = ..., name: str = ...): ...
    def stacksquare(self, a: Any | None = ..., name: str = ..., orientation: str = ...): ...
    def vstackarma_minus1(self): ...
    def hstackarma_minus1(self): ...
    areigenvalues: Any
    def getisstationary(self, a: Any | None = ...): ...
    maeigenvalues: Any
    def getisinvertible(self, a: Any | None = ...): ...
    def reduceform(self, apoly): ...
