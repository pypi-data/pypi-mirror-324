from statsmodels.base.data import PandasData as PandasData
from statsmodels.base.model import Results as Results
from statsmodels.base.wrapper import ResultsWrapper as ResultsWrapper, populate_wrapper as populate_wrapper, union_dicts as union_dicts
from typing import Any

class HoltWintersResults(Results):
    data: Any
    def __init__(self, model, params, sse, aic, aicc, bic, optimized, level, trend, season, params_formatted, resid, k, fittedvalues, fittedfcast, fcastvalues, mle_retvals: Any | None = ...) -> None: ...
    @property
    def aic(self): ...
    @property
    def aicc(self): ...
    @property
    def bic(self): ...
    @property
    def sse(self): ...
    @property
    def model(self): ...
    @model.setter
    def model(self, value) -> None: ...
    @property
    def level(self): ...
    @property
    def optimized(self): ...
    @property
    def trend(self): ...
    @property
    def season(self): ...
    @property
    def params_formatted(self): ...
    @property
    def fittedvalues(self): ...
    @property
    def fittedfcast(self): ...
    @property
    def fcastvalues(self): ...
    @property
    def resid(self): ...
    @property
    def k(self): ...
    @property
    def mle_retvals(self): ...
    @mle_retvals.setter
    def mle_retvals(self, value) -> None: ...
    def predict(self, start: Any | None = ..., end: Any | None = ...): ...
    def forecast(self, steps: int = ...): ...
    def summary(self): ...
    def simulate(self, nsimulations, anchor: Any | None = ..., repetitions: int = ..., error: str = ..., random_errors: Any | None = ..., random_state: Any | None = ...): ...

class HoltWintersResultsWrapper(ResultsWrapper): ...
