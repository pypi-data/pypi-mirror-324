from statsmodels.compat.pandas import Appender as Appender
from typing import Any

compatibility_mode: bool
has_trmm: bool
prefix_dtype_map: Any
prefix_initialization_map: Any
prefix_statespace_map: Any
prefix_kalman_filter_map: Any
prefix_kalman_smoother_map: Any
prefix_simulation_smoother_map: Any
prefix_cfa_simulation_smoother_map: Any
prefix_pacf_map: Any
prefix_sv_map: Any
prefix_reorder_missing_matrix_map: Any
prefix_reorder_missing_vector_map: Any
prefix_copy_missing_matrix_map: Any
prefix_copy_missing_vector_map: Any
prefix_copy_index_matrix_map: Any
prefix_copy_index_vector_map: Any

def set_mode(compatibility: Any | None = ...) -> None: ...
def companion_matrix(polynomial): ...
def diff(series, k_diff: int = ..., k_seasonal_diff: Any | None = ..., seasonal_periods: int = ...): ...
def concat(series, axis: int = ..., allow_mix: bool = ...): ...
def is_invertible(polynomial, threshold=...): ...
def solve_discrete_lyapunov(a, q, complex_step: bool = ...): ...
def constrain_stationary_univariate(unconstrained): ...
def unconstrain_stationary_univariate(constrained): ...
def constrain_stationary_multivariate_python(unconstrained, error_variance, transform_variance: bool = ..., prefix: Any | None = ...): ...
def constrain_stationary_multivariate(unconstrained, variance, transform_variance: bool = ..., prefix: Any | None = ...): ...
def unconstrain_stationary_multivariate(constrained, error_variance): ...
def validate_matrix_shape(name, shape, nrows, ncols, nobs) -> None: ...
def validate_vector_shape(name, shape, nrows, nobs) -> None: ...
def reorder_missing_matrix(matrix, missing, reorder_rows: bool = ..., reorder_cols: bool = ..., is_diagonal: bool = ..., inplace: bool = ..., prefix: Any | None = ...): ...
def reorder_missing_vector(vector, missing, inplace: bool = ..., prefix: Any | None = ...): ...
def copy_missing_matrix(A, B, missing, missing_rows: bool = ..., missing_cols: bool = ..., is_diagonal: bool = ..., inplace: bool = ..., prefix: Any | None = ...): ...
def copy_missing_vector(a, b, missing, inplace: bool = ..., prefix: Any | None = ...): ...
def copy_index_matrix(A, B, index, index_rows: bool = ..., index_cols: bool = ..., is_diagonal: bool = ..., inplace: bool = ..., prefix: Any | None = ...): ...
def copy_index_vector(a, b, index, inplace: bool = ..., prefix: Any | None = ...): ...
def prepare_exog(exog): ...
def prepare_trend_spec(trend): ...
def prepare_trend_data(polynomial_trend, k_trend, nobs, offset: int = ...): ...
