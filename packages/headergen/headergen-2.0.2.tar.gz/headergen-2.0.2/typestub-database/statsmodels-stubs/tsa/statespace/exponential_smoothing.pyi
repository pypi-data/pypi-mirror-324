from .mlemodel import MLEModel as MLEModel, MLEResults as MLEResults, MLEResultsWrapper as MLEResultsWrapper
from statsmodels.base.data import PandasData as PandasData
from statsmodels.compat.pandas import Appender as Appender
from statsmodels.genmod.generalized_linear_model import GLM as GLM
from statsmodels.iolib.summary import forg as forg
from statsmodels.iolib.table import SimpleTable as SimpleTable
from statsmodels.iolib.tableformatting import fmt_params as fmt_params
from statsmodels.tools.validation import array_like as array_like, bool_like as bool_like, float_like as float_like, int_like as int_like, string_like as string_like
from statsmodels.tsa.statespace.kalman_filter import MEMORY_CONSERVE as MEMORY_CONSERVE, MEMORY_NO_FORECAST as MEMORY_NO_FORECAST
from typing import Any

class ExponentialSmoothing(MLEModel):
    trend: Any
    damped_trend: Any
    seasonal_periods: Any
    seasonal: Any
    initialization_method: Any
    concentrate_scale: Any
    bounds: Any
    def __init__(self, endog, trend: bool = ..., damped_trend: bool = ..., seasonal: Any | None = ..., initialization_method: str = ..., initial_level: Any | None = ..., initial_trend: Any | None = ..., initial_seasonal: Any | None = ..., bounds: Any | None = ..., concentrate_scale: bool = ..., dates: Any | None = ..., freq: Any | None = ..., missing: str = ...) -> None: ...
    def clone(self, endog, exog: Any | None = ..., **kwargs): ...
    @property
    def state_names(self): ...
    @property
    def param_names(self): ...
    @property
    def start_params(self): ...
    @property
    def k_params(self): ...
    def transform_params(self, unconstrained): ...
    def untransform_params(self, constrained): ...
    def update(self, params, transformed: bool = ..., includes_fixed: bool = ..., complex_step: bool = ...) -> None: ...
    def loglike(self, params, *args, **kwargs): ...
    def filter(self, params, cov_type: Any | None = ..., cov_kwds: Any | None = ..., return_ssm: bool = ..., results_class: Any | None = ..., results_wrapper_class: Any | None = ..., *args, **kwargs): ...
    def smooth(self, params, cov_type: Any | None = ..., cov_kwds: Any | None = ..., return_ssm: bool = ..., results_class: Any | None = ..., results_wrapper_class: Any | None = ..., *args, **kwargs): ...

class ExponentialSmoothingResults(MLEResults):
    initial_state: Any
    def __init__(self, model, params, filter_results, cov_type: Any | None = ..., **kwargs) -> None: ...
    def summary(self, alpha: float = ..., start: Any | None = ...): ...

class ExponentialSmoothingResultsWrapper(MLEResultsWrapper): ...
