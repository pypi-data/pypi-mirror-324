from statsmodels.stats.base import HolderTuple as HolderTuple
from statsmodels.stats.robust_compare import TrimmedMean as TrimmedMean, scale_transform as scale_transform
from statsmodels.tools.testing import Holder as Holder
from typing import Any

def effectsize_oneway(means, vars_, nobs, use_var: str = ..., ddof_between: int = ...): ...
def convert_effectsize_fsqu(f2: Any | None = ..., eta2: Any | None = ...): ...
def wellek_to_f2(eps, n_groups): ...
def f2_to_wellek(f2, n_groups): ...
def fstat_to_wellek(f_stat, n_groups, nobs_mean): ...
def confint_noncentrality(f_stat, df, alpha: float = ..., alternative: str = ...): ...
def confint_effectsize_oneway(f_stat, df, alpha: float = ..., nobs: Any | None = ...): ...
def anova_generic(means, variances, nobs, use_var: str = ..., welch_correction: bool = ..., info: Any | None = ...): ...
def anova_oneway(data, groups: Any | None = ..., use_var: str = ..., welch_correction: bool = ..., trim_frac: int = ...): ...
def equivalence_oneway_generic(f_stat, n_groups, nobs, equiv_margin, df, alpha: float = ..., margin_type: str = ...): ...
def equivalence_oneway(data, equiv_margin, groups: Any | None = ..., use_var: str = ..., welch_correction: bool = ..., trim_frac: int = ..., margin_type: str = ...): ...
def power_equivalence_oneway(f2_alt, equiv_margin, nobs_t, n_groups: Any | None = ..., df: Any | None = ..., alpha: float = ..., margin_type: str = ...): ...
def simulate_power_equivalence_oneway(means, nobs, equiv_margin, vars_: Any | None = ..., k_mc: int = ..., trim_frac: int = ..., options_var: Any | None = ..., margin_type: str = ...): ...
def test_scale_oneway(data, method: str = ..., center: str = ..., transform: str = ..., trim_frac_mean: float = ..., trim_frac_anova: float = ...): ...
def equivalence_scale_oneway(data, equiv_margin, method: str = ..., center: str = ..., transform: str = ..., trim_frac_mean: float = ..., trim_frac_anova: float = ...): ...
