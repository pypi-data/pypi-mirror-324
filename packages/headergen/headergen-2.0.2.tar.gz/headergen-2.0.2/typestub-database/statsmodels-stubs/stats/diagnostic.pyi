from statsmodels.stats._adnorm import anderson_statistic as anderson_statistic, normal_ad as normal_ad
from statsmodels.stats._lilliefors import kstest_exponential as kstest_exponential, kstest_fit as kstest_fit, kstest_normal as kstest_normal, lilliefors as lilliefors
from typing import Any

class ResultsStore: ...

def compare_cox(results_x, results_z, store: bool = ...): ...
def compare_j(results_x, results_z, store: bool = ...): ...
def acorr_ljungbox(x, lags: Any | None = ..., boxpierce: bool = ..., model_df: int = ..., period: Any | None = ..., return_df: bool = ..., auto_lag: bool = ...): ...
def acorr_lm(resid, nlags: Any | None = ..., autolag: Any | None = ..., store: bool = ..., *, period: Any | None = ..., ddof: int = ..., cov_type: str = ..., cov_kwargs: Any | None = ...): ...
def het_arch(resid, nlags: Any | None = ..., autolag: Any | None = ..., store: bool = ..., ddof: int = ...): ...
def acorr_breusch_godfrey(res, nlags: Any | None = ..., store: bool = ...): ...
def het_breuschpagan(resid, exog_het, robust: bool = ...): ...
def het_white(resid, exog): ...
def het_goldfeldquandt(y, x, idx: Any | None = ..., split: Any | None = ..., drop: Any | None = ..., alternative: str = ..., store: bool = ...): ...
def linear_harvey_collier(res, order_by: Any | None = ..., skip: Any | None = ...): ...
def linear_rainbow(res, frac: float = ..., order_by: Any | None = ..., use_distance: bool = ..., center: Any | None = ...): ...
def linear_lm(resid, exog, func: Any | None = ...): ...
def spec_white(resid, exog): ...
