from typing import Any

FLOAT_EPS: Any

class Family:
    valid: Any
    links: Any
    link: Any
    variance: Any
    def __init__(self, link, variance) -> None: ...
    def starting_mu(self, y): ...
    def weights(self, mu): ...
    def deviance(self, endog, mu, var_weights: float = ..., freq_weights: float = ..., scale: float = ...): ...
    def resid_dev(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def fitted(self, lin_pred): ...
    def predict(self, mu): ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...) -> None: ...
    def loglike(self, endog, mu, var_weights: float = ..., freq_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...) -> None: ...

class Poisson(Family):
    links: Any
    variance: Any
    valid: Any
    safe_links: Any
    def __init__(self, link: Any | None = ...) -> None: ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def get_distribution(self, mu, scale: float = ..., var_weights: float = ...): ...

class Gaussian(Family):
    links: Any
    variance: Any
    safe_links: Any
    def __init__(self, link: Any | None = ...) -> None: ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def get_distribution(self, mu, scale, var_weights: float = ...): ...

class Gamma(Family):
    links: Any
    variance: Any
    safe_links: Any
    def __init__(self, link: Any | None = ...) -> None: ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def get_distribution(self, mu, scale, var_weights: float = ...): ...

class Binomial(Family):
    links: Any
    variance: Any
    safe_links: Any
    n: int
    def __init__(self, link: Any | None = ...) -> None: ...
    def starting_mu(self, y): ...
    def initialize(self, endog, freq_weights): ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def get_distribution(self, mu, scale: float = ..., var_weights: float = ..., n_trials: int = ...): ...

class InverseGaussian(Family):
    links: Any
    variance: Any
    safe_links: Any
    def __init__(self, link: Any | None = ...) -> None: ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def get_distribution(self, mu, scale, var_weights: float = ...): ...

class NegativeBinomial(Family):
    links: Any
    variance: Any
    safe_links: Any
    alpha: Any
    def __init__(self, link: Any | None = ..., alpha: float = ...) -> None: ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def get_distribution(self, mu, scale: float = ..., var_weights: float = ...): ...

class Tweedie(Family):
    links: Any
    variance: Any
    safe_links: Any
    var_power: Any
    eql: Any
    def __init__(self, link: Any | None = ..., var_power: float = ..., eql: bool = ...) -> None: ...
    def loglike_obs(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
    def resid_anscombe(self, endog, mu, var_weights: float = ..., scale: float = ...): ...
