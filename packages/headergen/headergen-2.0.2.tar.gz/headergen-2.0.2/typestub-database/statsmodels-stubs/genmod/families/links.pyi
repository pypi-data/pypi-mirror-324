from typing import Any

FLOAT_EPS: Any

class Link:
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def inverse_deriv(self, z): ...
    def inverse_deriv2(self, z): ...

class Logit(Link):
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def inverse_deriv(self, z): ...
    def deriv2(self, p): ...

class logit(Logit): ...

class Power(Link):
    power: Any
    def __init__(self, power: float = ...) -> None: ...
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def inverse_deriv(self, z): ...
    def inverse_deriv2(self, z): ...

class inverse_power(Power):
    def __init__(self) -> None: ...

class sqrt(Power):
    def __init__(self) -> None: ...

class inverse_squared(Power):
    def __init__(self) -> None: ...

class identity(Power):
    def __init__(self) -> None: ...

class Log(Link):
    def __call__(self, p, **extra): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def inverse_deriv(self, z): ...

class log(Log): ...

class CDFLink(Logit):
    dbn: Any
    def __init__(self, dbn=...) -> None: ...
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def deriv2_numdiff(self, p): ...
    def inverse_deriv(self, z): ...
    def inverse_deriv2(self, z): ...

class probit(CDFLink):
    def inverse_deriv2(self, z): ...
    def deriv2(self, p): ...

class cauchy(CDFLink):
    def __init__(self) -> None: ...
    def deriv2(self, p): ...
    def inverse_deriv2(self, z): ...

class CLogLog(Logit):
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def inverse_deriv(self, z): ...

class cloglog(CLogLog): ...

class LogLog(Logit):
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def inverse_deriv(self, z): ...
    def inverse_deriv2(self, z): ...

class loglog(LogLog): ...

class NegativeBinomial(Link):
    alpha: Any
    def __init__(self, alpha: float = ...) -> None: ...
    def __call__(self, p): ...
    def inverse(self, z): ...
    def deriv(self, p): ...
    def deriv2(self, p): ...
    def inverse_deriv(self, z): ...

class nbinom(NegativeBinomial): ...
