import statsmodels.regression.linear_model as lm
from statsmodels.base.model import GenericLikelihoodModel as GenericLikelihoodModel, GenericLikelihoodModelResults as GenericLikelihoodModelResults, LikelihoodModel as LikelihoodModel, Model as Model
from statsmodels.compat.pandas import Appender as Appender
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from typing import Any

class OrderedModel(GenericLikelihoodModel):
    distr: Any
    offset: Any
    endog: Any
    k_extra: Any
    df_model: Any
    df_resid: Any
    results_class: Any
    def __init__(self, endog, exog, offset: Any | None = ..., distr: str = ..., **kwds) -> None: ...
    @classmethod
    def from_formula(cls, formula, data, subset: Any | None = ..., drop_cols: Any | None = ..., *args, **kwargs): ...
    def cdf(self, x): ...
    def pdf(self, x): ...
    def prob(self, low, upp): ...
    def transform_threshold_params(self, params): ...
    def transform_reverse_threshold_params(self, params): ...
    def predict(self, params, exog: Any | None = ..., offset: Any | None = ..., which: str = ...): ...
    def loglike(self, params): ...
    def loglikeobs(self, params): ...
    def score_obs_(self, params): ...
    @property
    def start_params(self): ...
    def fit(self, start_params: Any | None = ..., method: str = ..., maxiter: int = ..., full_output: int = ..., disp: int = ..., callback: Any | None = ..., retall: int = ..., **kwargs): ...

class OrderedResults(GenericLikelihoodModelResults):
    def pred_table(self): ...
    def llnull(self): ...
    def prsquared(self): ...
    def llr(self): ...
    def llr_pvalue(self): ...
    def resid_prob(self): ...

class OrderedResultsWrapper(lm.RegressionResultsWrapper): ...
