from .factor_rotation import promax as promax, rotate_factors as rotate_factors
from statsmodels.base.model import Model as Model
from statsmodels.iolib import summary2 as summary2
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from typing import Any

class Factor(Model):
    endog: Any
    n_factor: Any
    loadings: Any
    communality: Any
    method: Any
    smc: Any
    nobs: Any
    corr: Any
    k_endog: Any
    def __init__(self, endog: Any | None = ..., n_factor: int = ..., corr: Any | None = ..., method: str = ..., smc: bool = ..., endog_names: Any | None = ..., nobs: Any | None = ..., missing: str = ...) -> None: ...
    @property
    def endog_names(self): ...
    @endog_names.setter
    def endog_names(self, value) -> None: ...
    def fit(self, maxiter: int = ..., tol: float = ..., start: Any | None = ..., opt_method: str = ..., opt: Any | None = ..., em_iter: int = ...): ...
    def loglike(self, par): ...
    def score(self, par): ...

class FactorResults:
    model: Any
    endog_names: Any
    loadings_no_rot: Any
    eigenvals: Any
    communality: Any
    uniqueness: Any
    rotation_method: Any
    fa_method: Any
    n_comp: Any
    nobs: Any
    mle_retvals: Any
    df: Any
    loadings: Any
    rotation_matrix: Any
    def __init__(self, factor) -> None: ...
    def rotate(self, method) -> None: ...
    def factor_score_params(self, method: str = ...): ...
    def factor_scoring(self, endog: Any | None = ..., method: str = ..., transform: bool = ...): ...
    def summary(self): ...
    def get_loadings_frame(self, style: str = ..., sort_: bool = ..., threshold: float = ..., highlight_max: bool = ..., color_max: str = ..., decimals: Any | None = ...): ...
    def plot_scree(self, ncomp: Any | None = ...): ...
    def plot_loadings(self, loading_pairs: Any | None = ..., plot_prerotated: bool = ...): ...
    def fitted_cov(self): ...
    def uniq_stderr(self, kurt: int = ...): ...
    def load_stderr(self): ...
