from typing import Any

class LinearConstraints:
    constraint_matrix: Any
    constraint_values: Any
    variable_names: Any
    coefs: Any
    constants: Any
    tuple: Any
    def __init__(self, constraint_matrix, constraint_values, variable_names, **kwds) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, idx): ...
    @classmethod
    def from_patsy(cls, lc): ...

class TransformRestriction:
    k_unconstr: Any
    evals: Any
    evecs: Any
    transf_mat: Any
    constant: Any
    def __init__(self, R, q: Any | None = ...) -> None: ...
    def expand(self, params_reduced): ...
    def reduce(self, params): ...

def transform_params_constraint(params, Sinv, R, q): ...
def fit_constrained(model, constraint_matrix, constraint_values, start_params: Any | None = ..., fit_kwds: Any | None = ...): ...
def fit_constrained_wrap(model, constraints, start_params: Any | None = ..., **fit_kwds): ...
