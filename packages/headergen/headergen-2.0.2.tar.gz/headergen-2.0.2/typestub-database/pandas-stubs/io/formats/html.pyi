from pandas import MultiIndex as MultiIndex, option_context as option_context
from pandas._config import get_option as get_option
from pandas._libs import lib as lib
from pandas.io.common import is_url as is_url
from pandas.io.formats.format import DataFrameFormatter as DataFrameFormatter, get_level_lengths as get_level_lengths
from pandas.io.formats.printing import pprint_thing as pprint_thing
from typing import Union, Any, Iterable

class HTMLFormatter:
    indent_delta: int
    fmt: Any
    classes: Any
    frame: Any
    columns: Any
    elements: Any
    bold_rows: Any
    escape: Any
    show_dimensions: Any
    border: Any
    table_id: Any
    render_links: Any
    col_space: Any
    def __init__(self, formatter: DataFrameFormatter, classes: Union[str, list[str], tuple[str, ...], None] = ..., border: Union[int, None] = ..., table_id: Union[str, None] = ..., render_links: bool = ...) -> None: ...
    def to_string(self) -> str: ...
    def render(self) -> list[str]: ...
    @property
    def should_show_dimensions(self): ...
    @property
    def show_row_idx_names(self) -> bool: ...
    @property
    def show_col_idx_names(self) -> bool: ...
    @property
    def row_levels(self) -> int: ...
    @property
    def is_truncated(self) -> bool: ...
    @property
    def ncols(self) -> int: ...
    def write(self, s: Any, indent: int = ...) -> None: ...
    def write_th(self, s: Any, header: bool = ..., indent: int = ..., tags: Union[str, None] = ...) -> None: ...
    def write_td(self, s: Any, indent: int = ..., tags: Union[str, None] = ...) -> None: ...
    def write_tr(self, line: Iterable, indent: int = ..., indent_delta: int = ..., header: bool = ..., align: Union[str, None] = ..., tags: Union[dict[int, str], None] = ..., nindex_levels: int = ...) -> None: ...

class NotebookFormatter(HTMLFormatter):
    def write_style(self) -> None: ...
    def render(self) -> list[str]: ...
