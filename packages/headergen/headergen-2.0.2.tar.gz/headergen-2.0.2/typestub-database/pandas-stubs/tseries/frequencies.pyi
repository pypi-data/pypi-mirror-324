import numpy as np
from pandas._libs.algos import unique_deltas as unique_deltas
from pandas._libs.tslibs import Timestamp as Timestamp, tzconversion as tzconversion
from pandas._libs.tslibs.ccalendar import DAYS as DAYS, MONTHS as MONTHS, MONTH_ALIASES as MONTH_ALIASES, MONTH_NUMBERS as MONTH_NUMBERS, int_to_weekday as int_to_weekday
from pandas._libs.tslibs.fields import build_field_sarray as build_field_sarray, month_position_check as month_position_check
from pandas._libs.tslibs.offsets import DateOffset as DateOffset, Day as Day, to_offset as to_offset
from pandas._libs.tslibs.parsing import get_rule_month as get_rule_month
from pandas._typing import npt as npt
from pandas.core.algorithms import unique as unique
from pandas.core.dtypes.common import is_datetime64_dtype as is_datetime64_dtype, is_period_dtype as is_period_dtype, is_timedelta64_dtype as is_timedelta64_dtype
from pandas.core.dtypes.generic import ABCSeries as ABCSeries
from pandas.util._decorators import cache_readonly as cache_readonly
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Union, Any

key: Any

def get_period_alias(offset_str: str) -> Union[str, None]: ...
def get_offset(name: str) -> DateOffset: ...
def infer_freq(index, warn: bool = ...) -> Union[str, None]: ...

class _FrequencyInferer:
    index: Any
    i8values: Any
    warn: Any
    is_monotonic: Any
    def __init__(self, index, warn: bool = ...) -> None: ...
    def deltas(self) -> npt.NDArray[np.int64]: ...
    def deltas_asi8(self) -> npt.NDArray[np.int64]: ...
    def is_unique(self) -> bool: ...
    def is_unique_asi8(self) -> bool: ...
    def get_freq(self) -> Union[str, None]: ...
    def day_deltas(self): ...
    def hour_deltas(self): ...
    def fields(self) -> np.ndarray: ...
    def rep_stamp(self): ...
    def month_position_check(self): ...
    def mdiffs(self) -> npt.NDArray[np.int64]: ...
    def ydiffs(self) -> npt.NDArray[np.int64]: ...

class _TimedeltaFrequencyInferer(_FrequencyInferer): ...

def is_subperiod(source, target) -> bool: ...
def is_superperiod(source, target) -> bool: ...
