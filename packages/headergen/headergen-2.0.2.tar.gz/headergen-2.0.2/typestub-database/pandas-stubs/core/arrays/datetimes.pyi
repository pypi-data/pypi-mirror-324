import numpy as np
from datetime import tzinfo
from pandas import DataFrame as DataFrame
from pandas._libs import lib as lib, tslib as tslib
from pandas._libs.arrays import NDArrayBacked as NDArrayBacked
from pandas._libs.tslibs import BaseOffset as BaseOffset, NaT as NaT, NaTType as NaTType, Resolution as Resolution, Timestamp as Timestamp, conversion as conversion, fields as fields, get_resolution as get_resolution, iNaT as iNaT, ints_to_pydatetime as ints_to_pydatetime, is_date_array_normalized as is_date_array_normalized, normalize_i8_timestamps as normalize_i8_timestamps, timezones as timezones, to_offset as to_offset, tzconversion as tzconversion
from pandas._typing import npt as npt
from pandas.core.algorithms import checked_add_with_arr as checked_add_with_arr
from pandas.core.arrays import ExtensionArray as ExtensionArray, PeriodArray as PeriodArray, TimedeltaArray as TimedeltaArray, datetimelike as dtl
from pandas.core.arrays._ranges import generate_regular_range as generate_regular_range
from pandas.core.arrays.integer import IntegerArray as IntegerArray
from pandas.core.construction import extract_array as extract_array
from pandas.core.dtypes.cast import astype_dt64_to_dt64tz as astype_dt64_to_dt64tz
from pandas.core.dtypes.common import DT64NS_DTYPE as DT64NS_DTYPE, INT64_DTYPE as INT64_DTYPE, is_bool_dtype as is_bool_dtype, is_categorical_dtype as is_categorical_dtype, is_datetime64_any_dtype as is_datetime64_any_dtype, is_datetime64_dtype as is_datetime64_dtype, is_datetime64_ns_dtype as is_datetime64_ns_dtype, is_datetime64tz_dtype as is_datetime64tz_dtype, is_dtype_equal as is_dtype_equal, is_extension_array_dtype as is_extension_array_dtype, is_float_dtype as is_float_dtype, is_object_dtype as is_object_dtype, is_period_dtype as is_period_dtype, is_sparse as is_sparse, is_string_dtype as is_string_dtype, is_timedelta64_dtype as is_timedelta64_dtype, pandas_dtype as pandas_dtype
from pandas.core.dtypes.dtypes import DatetimeTZDtype as DatetimeTZDtype
from pandas.core.dtypes.generic import ABCMultiIndex as ABCMultiIndex
from pandas.core.dtypes.missing import isna as isna
from pandas.errors import PerformanceWarning as PerformanceWarning
from pandas.tseries.frequencies import get_period_alias as get_period_alias
from pandas.tseries.offsets import BDay as BDay, Day as Day, Tick as Tick
from pandas.util._exceptions import find_stack_level as find_stack_level
from pandas.util._validators import validate_inclusive as validate_inclusive
from typing import Union, Any

def tz_to_dtype(tz): ...

class DatetimeArray(dtl.TimelikeOps, dtl.DatelikeOps):
    __array_priority__: int
    def __init__(self, values, dtype=..., freq: Any | None = ..., copy: bool = ...) -> None: ...
    @property
    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]: ...
    @property
    def tz(self) -> Union[tzinfo, None]: ...
    @tz.setter
    def tz(self, value) -> None: ...
    @property
    def tzinfo(self) -> Union[tzinfo, None]: ...
    @property
    def is_normalized(self) -> bool: ...
    def __array__(self, dtype: Any | None = ...) -> np.ndarray: ...
    def __iter__(self): ...
    def astype(self, dtype, copy: bool = ...): ...
    def tz_convert(self, tz) -> DatetimeArray: ...
    def tz_localize(self, tz, ambiguous: str = ..., nonexistent: str = ...) -> DatetimeArray: ...
    def to_pydatetime(self) -> npt.NDArray[np.object_]: ...
    def normalize(self) -> DatetimeArray: ...
    def to_period(self, freq: Any | None = ...) -> PeriodArray: ...
    def to_perioddelta(self, freq) -> TimedeltaArray: ...
    def month_name(self, locale: Any | None = ...): ...
    def day_name(self, locale: Any | None = ...): ...
    @property
    def time(self) -> npt.NDArray[np.object_]: ...
    @property
    def timetz(self) -> npt.NDArray[np.object_]: ...
    @property
    def date(self) -> npt.NDArray[np.object_]: ...
    def isocalendar(self) -> DataFrame: ...
    @property
    def weekofyear(self): ...
    week: Any
    year: Any
    month: Any
    day: Any
    hour: Any
    minute: Any
    second: Any
    microsecond: Any
    nanosecond: Any
    day_of_week: Any
    dayofweek: Any
    weekday: Any
    day_of_year: Any
    dayofyear: Any
    quarter: Any
    days_in_month: Any
    daysinmonth: Any
    is_month_start: Any
    is_month_end: Any
    is_quarter_start: Any
    is_quarter_end: Any
    is_year_start: Any
    is_year_end: Any
    is_leap_year: Any
    def to_julian_date(self) -> np.ndarray: ...
    def std(self, axis: Any | None = ..., dtype: Any | None = ..., out: Any | None = ..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...): ...

def sequence_to_datetimes(data, require_iso8601: bool = ...) -> DatetimeArray: ...
def objects_to_datetime64ns(data: np.ndarray, dayfirst, yearfirst, utc: bool = ..., errors: str = ..., require_iso8601: bool = ..., allow_object: bool = ..., allow_mixed: bool = ...): ...
def maybe_convert_dtype(data, copy: bool): ...
def validate_tz_from_dtype(dtype, tz: Union[tzinfo, None]) -> Union[tzinfo, None]: ...
def generate_range(start: Any | None = ..., end: Any | None = ..., periods: Any | None = ..., offset=...) -> None: ...
