import re
from pandas import DataFrame as DataFrame, Index as Index, Series as Series
from pandas._typing import DtypeObj as DtypeObj, F as F
from pandas.core.base import NoNewAttributesMixin as NoNewAttributesMixin
from pandas.core.construction import extract_array as extract_array
from pandas.core.dtypes.common import ensure_object as ensure_object, is_bool_dtype as is_bool_dtype, is_categorical_dtype as is_categorical_dtype, is_integer as is_integer, is_list_like as is_list_like, is_object_dtype as is_object_dtype, is_re as is_re
from pandas.core.dtypes.generic import ABCDataFrame as ABCDataFrame, ABCIndex as ABCIndex, ABCMultiIndex as ABCMultiIndex, ABCSeries as ABCSeries
from pandas.core.dtypes.missing import isna as isna
from pandas.util._decorators import Appender as Appender
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Union, Any, Callable

def forbid_nonstring_types(forbidden: Union[list[str], None], name: Union[str, None] = ...) -> Callable[[F], F]: ...

class StringMethods(NoNewAttributesMixin):
    def __init__(self, data) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def cat(self, others: Any | None = ..., sep: Any | None = ..., na_rep: Any | None = ..., join: str = ...) -> Union[str, Series, Index]: ...
    def split(self, pat: Union[str, re.Pattern, None] = ..., n: int = ..., expand: bool = ..., *, regex: Union[bool, None] = ...): ...
    def rsplit(self, pat: Any | None = ..., n: int = ..., expand: bool = ...): ...
    def partition(self, sep: str = ..., expand: bool = ...): ...
    def rpartition(self, sep: str = ..., expand: bool = ...): ...
    def get(self, i): ...
    def join(self, sep): ...
    def contains(self, pat, case: bool = ..., flags: int = ..., na: Any | None = ..., regex: bool = ...): ...
    def match(self, pat, case: bool = ..., flags: int = ..., na: Any | None = ...): ...
    def fullmatch(self, pat, case: bool = ..., flags: int = ..., na: Any | None = ...): ...
    def replace(self, pat: Union[str, re.Pattern], repl: Union[str, Callable], n: int = ..., case: Union[bool, None] = ..., flags: int = ..., regex: Union[bool, None] = ...): ...
    def repeat(self, repeats): ...
    def pad(self, width, side: str = ..., fillchar: str = ...): ...
    def center(self, width, fillchar: str = ...): ...
    def ljust(self, width, fillchar: str = ...): ...
    def rjust(self, width, fillchar: str = ...): ...
    def zfill(self, width): ...
    def slice(self, start: Any | None = ..., stop: Any | None = ..., step: Any | None = ...): ...
    def slice_replace(self, start: Any | None = ..., stop: Any | None = ..., repl: Any | None = ...): ...
    def decode(self, encoding, errors: str = ...): ...
    def encode(self, encoding, errors: str = ...): ...
    def strip(self, to_strip: Any | None = ...): ...
    def lstrip(self, to_strip: Any | None = ...): ...
    def rstrip(self, to_strip: Any | None = ...): ...
    def removeprefix(self, prefix): ...
    def removesuffix(self, suffix): ...
    def wrap(self, width, **kwargs): ...
    def get_dummies(self, sep: str = ...): ...
    def translate(self, table): ...
    def count(self, pat, flags: int = ...): ...
    def startswith(self, pat, na: Any | None = ...): ...
    def endswith(self, pat, na: Any | None = ...): ...
    def findall(self, pat, flags: int = ...): ...
    def extract(self, pat: str, flags: int = ..., expand: bool = ...) -> Union[DataFrame, Series, Index]: ...
    def extractall(self, pat, flags: int = ...): ...
    def find(self, sub, start: int = ..., end: Any | None = ...): ...
    def rfind(self, sub, start: int = ..., end: Any | None = ...): ...
    def normalize(self, form): ...
    def index(self, sub, start: int = ..., end: Any | None = ...): ...
    def rindex(self, sub, start: int = ..., end: Any | None = ...): ...
    def len(self): ...
    def lower(self): ...
    def upper(self): ...
    def title(self): ...
    def capitalize(self): ...
    def swapcase(self): ...
    def casefold(self): ...
    isalnum: Any
    isalpha: Any
    isdigit: Any
    isspace: Any
    islower: Any
    isupper: Any
    istitle: Any
    isnumeric: Any
    isdecimal: Any

def cat_safe(list_of_columns: list, sep: str): ...
def cat_core(list_of_columns: list, sep: str): ...
def str_extractall(arr, pat, flags: int = ...): ...
