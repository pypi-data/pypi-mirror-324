from pandas.core.frame import DataFrame as DataFrame, Series as Series
from pandas._typing import Axis as Axis, WindowingRankType as WindowingRankType
from pandas.core.generic import NDFrame as NDFrame
from pandas.core.indexers.objects import BaseIndexer as BaseIndexer, ExpandingIndexer as ExpandingIndexer, GroupbyIndexer as GroupbyIndexer
from pandas.core.window.doc import args_compat as args_compat, create_section_header as create_section_header, kwargs_compat as kwargs_compat, numba_notes as numba_notes, template_header as template_header, template_returns as template_returns, template_see_also as template_see_also, window_agg_numba_parameters as window_agg_numba_parameters, window_apply_parameters as window_apply_parameters
from pandas.core.window.rolling import BaseWindowGroupby as BaseWindowGroupby, RollingAndExpandingMixin as RollingAndExpandingMixin
from pandas.util._decorators import doc as doc
from typing import Union, Any, Callable

class Expanding(RollingAndExpandingMixin):
    def __init__(self, obj: NDFrame, min_periods: int = ..., center: Any | None = ..., axis: Axis = ..., method: str = ..., selection: Any | None = ...) -> None: ...
    def aggregate(self, func, *args, **kwargs): ...
    agg: Any
    def count(self): ...
    def apply(self, func: Callable[..., Any], raw: bool = ..., engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., args: Union[tuple[Any, ...], None] = ..., kwargs: Union[dict[str, Any], None] = ...): ...
    def sum(self, *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def max(self, *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def min(self, *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def mean(self, *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def median(self, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def std(self, ddof: int = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def var(self, ddof: int = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def sem(self, ddof: int = ..., *args, **kwargs): ...
    def skew(self, **kwargs): ...
    def kurt(self, **kwargs): ...
    def quantile(self, quantile: float, interpolation: str = ..., **kwargs): ...
    def rank(self, method: WindowingRankType = ..., ascending: bool = ..., pct: bool = ..., **kwargs): ...
    def cov(self, other: Union[DataFrame, Series, None] = ..., pairwise: Union[bool, None] = ..., ddof: int = ..., **kwargs): ...
    def corr(self, other: Union[DataFrame, Series, None] = ..., pairwise: Union[bool, None] = ..., ddof: int = ..., **kwargs): ...

class ExpandingGroupby(BaseWindowGroupby, Expanding): ...
