import numpy as np
from pandas._typing import DtypeObj as DtypeObj, Shape as Shape
from typing import Union, Sequence

class NDArrayBacked:
    def __init__(self, values: np.ndarray, dtype: DtypeObj) -> None: ...
    def __len__(self) -> int: ...
    @property
    def shape(self) -> Shape: ...
    @property
    def ndim(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def nbytes(self) -> int: ...
    def copy(self) -> None: ...
    def delete(self, loc, axis=...) -> None: ...
    def swapaxes(self, axis1, axis2) -> None: ...
    def repeat(self, repeats: Union[int, Sequence[int]], axis: Union[int, None] = ...): ...
    def reshape(self, *args, **kwargs) -> None: ...
    def ravel(self, order=...) -> None: ...
    @property
    def T(self) -> None: ...
