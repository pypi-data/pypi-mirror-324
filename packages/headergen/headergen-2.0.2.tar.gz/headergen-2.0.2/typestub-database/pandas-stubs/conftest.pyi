from pandas import DataFrame as DataFrame, Interval as Interval, Period as Period, Series as Series, Timedelta as Timedelta, Timestamp as Timestamp
from pandas.core import ops as ops
from pandas.core.dtypes.dtypes import DatetimeTZDtype as DatetimeTZDtype, IntervalDtype as IntervalDtype
from pandas.core.indexes.api import Index as Index, MultiIndex as MultiIndex
from typing import Union, Any

has_pyarrow: bool
suppress_npdev_promotion_warning: Any

def pytest_addoption(parser) -> None: ...
def pytest_collection_modifyitems(items, config) -> None: ...

cls: Any

def configure_tests() -> None: ...
def add_imports(doctest_namespace) -> None: ...
def axis(request): ...
axis_frame = axis

def observed(request): ...
def ordered(request): ...
def keep(request): ...
def inclusive_endpoints_fixture(request): ...
def closed(request): ...
def other_closed(request): ...
def compression(request): ...
def compression_only(request): ...
def writable(request): ...
def join_type(request): ...
def nselect_method(request): ...
def nulls_fixture(request): ...
nulls_fixture2 = nulls_fixture

def unique_nulls_fixture(request): ...
unique_nulls_fixture2 = unique_nulls_fixture

def np_nat_fixture(request): ...
np_nat_fixture2 = np_nat_fixture

def frame_or_series(request): ...
def index_or_series(request): ...
index_or_series2 = index_or_series

def index_or_series_or_array(request): ...
def box_with_array(request): ...
box_with_array2 = box_with_array

def dict_subclass(): ...
def non_dict_mapping_subclass(): ...
def multiindex_year_month_day_dataframe_random_data(): ...
def lexsorted_two_level_string_multiindex(): ...
def multiindex_dataframe_random_data(lexsorted_two_level_string_multiindex): ...

indices_dict: Any
idx: Any

def index(request): ...
index_fixture2 = index

def index_flat(request): ...
index_flat2 = index_flat

def index_flat_unique(request): ...
def index_with_missing(request): ...
def string_series(): ...
def object_series(): ...
def datetime_series(): ...
def series_with_simple_index(index): ...
def series_with_multilevel_index(): ...
def index_or_series_obj(request): ...
def int_frame(): ...
def datetime_frame(): ...
def float_frame(): ...
def mixed_type_frame(): ...
def rand_series_with_duplicate_datetimeindex(): ...
def ea_scalar_and_dtype(request): ...
def all_arithmetic_operators(request): ...
def all_binary_operators(request): ...
def all_arithmetic_functions(request): ...
def all_numeric_reductions(request): ...
def all_boolean_reductions(request): ...
def all_reductions(request): ...
def comparison_op(request): ...
def compare_operators_no_eq_ne(request): ...
def all_logical_operators(request): ...
def strict_data_files(pytestconfig): ...
def datapath(strict_data_files): ...
def iris(datapath): ...

TIMEZONES: Any
TIMEZONE_IDS: Any

def tz_naive_fixture(request): ...
def tz_aware_fixture(request): ...
tz_aware_fixture2 = tz_aware_fixture

def utc_fixture(request): ...
utc_fixture2 = utc_fixture

def string_dtype(request): ...
def nullable_string_dtype(request): ...
def string_storage(request): ...
string_storage2 = string_storage

def bytes_dtype(request): ...
def object_dtype(request): ...
def any_string_dtype(request): ...
def datetime64_dtype(request): ...
def timedelta64_dtype(request): ...
def fixed_now_ts(): ...
def float_numpy_dtype(request): ...
def float_ea_dtype(request): ...
def any_float_dtype(request): ...
def complex_dtype(request): ...
def any_signed_int_numpy_dtype(request): ...
def any_unsigned_int_numpy_dtype(request): ...
def any_int_numpy_dtype(request): ...
def any_int_ea_dtype(request): ...
def any_int_dtype(request): ...
def any_numeric_ea_dtype(request): ...
def any_signed_int_ea_dtype(request): ...
def any_real_numpy_dtype(request): ...
def any_numpy_dtype(request): ...

ids: Any

def any_skipna_inferred_dtype(request): ...
def ip(): ...
def spmatrix(request): ...
def tick_classes(request): ...
def sort_by_key(request): ...
def fsspectest() -> None: ...
def names(request): ...
def indexer_sli(request): ...
def indexer_si(request): ...
def indexer_sl(request): ...
def indexer_al(request): ...
def using_array_manager(request): ...
