from sklearn import datasets as datasets, metrics as metrics, neighbors as neighbors
from sklearn.base import clone as clone
from sklearn.exceptions import DataConversionWarning as DataConversionWarning, EfficiencyWarning as EfficiencyWarning, NotFittedError as NotFittedError
from sklearn.metrics.pairwise import pairwise_distances as pairwise_distances
from sklearn.model_selection import cross_val_score as cross_val_score, train_test_split as train_test_split
from sklearn.neighbors import VALID_METRICS as VALID_METRICS, VALID_METRICS_SPARSE as VALID_METRICS_SPARSE
from sklearn.pipeline import make_pipeline as make_pipeline
from sklearn.utils._testing import assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal, ignore_warnings as ignore_warnings
from sklearn.utils.fixes import parse_version as parse_version, sp_version as sp_version
from sklearn.utils.validation import check_random_state as check_random_state
from typing import Any

rng: Any
iris: Any
perm: Any
digits: Any
SPARSE_TYPES: Any
SPARSE_OR_DENSE: Any
ALGORITHMS: Any
P: Any
JOBLIB_BACKENDS: Any

def test_unsupervised_kneighbors(n_samples: int = ..., n_features: int = ..., n_query_pts: int = ..., n_neighbors: int = ...) -> None: ...
def test_unsupervised_inputs(NearestNeighbors) -> None: ...
def test_n_neighbors_datatype() -> None: ...
def test_not_fitted_error_gets_raised() -> None: ...
def check_precomputed(make_train_test, estimators) -> None: ...
def test_precomputed_dense(): ...
def test_precomputed_sparse_knn(fmt): ...
def test_precomputed_sparse_radius(fmt): ...
def test_is_sorted_by_data() -> None: ...
def test_check_precomputed() -> None: ...
def test_precomputed_sparse_invalid() -> None: ...
def test_precomputed_cross_validation() -> None: ...
def test_unsupervised_radius_neighbors(n_samples: int = ..., n_features: int = ..., n_query_pts: int = ..., radius: float = ..., random_state: int = ...) -> None: ...
def test_kneighbors_classifier(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., n_neighbors: int = ..., random_state: int = ...) -> None: ...
def test_kneighbors_classifier_float_labels(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., n_neighbors: int = ..., random_state: int = ...) -> None: ...
def test_kneighbors_classifier_predict_proba() -> None: ...
def test_radius_neighbors_classifier(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., radius: float = ..., random_state: int = ...) -> None: ...
def test_radius_neighbors_classifier_kwargs_is_deprecated() -> None: ...
def test_radius_neighbors_classifier_when_no_neighbors() -> None: ...
def test_radius_neighbors_classifier_outlier_labeling() -> None: ...
def test_radius_neighbors_classifier_zero_distance() -> None: ...
def test_neighbors_regressors_zero_distance() -> None: ...
def test_radius_neighbors_boundary_handling() -> None: ...
def test_radius_neighbors_returns_array_of_objects() -> None: ...
def test_query_equidistant_kth_nn(algorithm) -> None: ...
def test_radius_neighbors_sort_results(algorithm, metric) -> None: ...
def test_RadiusNeighborsClassifier_multioutput() -> None: ...
def test_kneighbors_classifier_sparse(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., n_neighbors: int = ..., random_state: int = ...) -> None: ...
def test_KNeighborsClassifier_multioutput() -> None: ...
def test_kneighbors_regressor(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., n_neighbors: int = ..., random_state: int = ...) -> None: ...
def test_KNeighborsRegressor_multioutput_uniform_weight() -> None: ...
def test_kneighbors_regressor_multioutput(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., n_neighbors: int = ..., random_state: int = ...) -> None: ...
def test_radius_neighbors_regressor(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., radius: float = ..., random_state: int = ...) -> None: ...
def test_RadiusNeighborsRegressor_multioutput_with_uniform_weight() -> None: ...
def test_RadiusNeighborsRegressor_multioutput(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., random_state: int = ...) -> None: ...
def test_kneighbors_regressor_sparse(n_samples: int = ..., n_features: int = ..., n_test_pts: int = ..., n_neighbors: int = ..., random_state: int = ...) -> None: ...
def test_neighbors_iris() -> None: ...
def test_neighbors_digits() -> None: ...
def test_kneighbors_graph() -> None: ...
def test_kneighbors_graph_sparse(seed: int = ...) -> None: ...
def test_radius_neighbors_graph() -> None: ...
def test_radius_neighbors_graph_sparse(seed: int = ...) -> None: ...
def test_neighbors_badargs() -> None: ...
def test_neighbors_metrics(n_samples: int = ..., n_features: int = ..., n_query_pts: int = ..., n_neighbors: int = ...) -> None: ...
def test_callable_metric(): ...
def test_valid_brute_metric_for_auto_algorithm() -> None: ...
def test_metric_params_interface() -> None: ...
def test_predict_sparse_ball_kd_tree() -> None: ...
def test_non_euclidean_kneighbors() -> None: ...
def check_object_arrays(nparray, list_check) -> None: ...
def test_k_and_radius_neighbors_train_is_not_query() -> None: ...
def test_k_and_radius_neighbors_X_None() -> None: ...
def test_k_and_radius_neighbors_duplicates() -> None: ...
def test_include_self_neighbors_graph() -> None: ...
def test_same_knn_parallel(algorithm) -> None: ...
def test_same_radius_neighbors_parallel(algorithm) -> None: ...
def test_knn_forcing_backend(backend, algorithm) -> None: ...
def test_dtype_convert() -> None: ...
def test_sparse_metric_callable(): ...
def test_pairwise_boolean_distance() -> None: ...
def test_radius_neighbors_predict_proba() -> None: ...
def test_pipeline_with_nearest_neighbors_transformer() -> None: ...
def test_auto_algorithm(X, metric, metric_params, expected_algo) -> None: ...
def test_pairwise_deprecated(NearestNeighbors) -> None: ...
def test_neighbors_distance_metric_deprecation() -> None: ...
