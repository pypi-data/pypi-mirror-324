from sklearn import clone as clone
from sklearn.datasets import load_iris as load_iris, make_blobs as make_blobs, make_classification as make_classification
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning
from sklearn.metrics import pairwise_distances as pairwise_distances
from sklearn.neighbors import NeighborhoodComponentsAnalysis as NeighborhoodComponentsAnalysis
from sklearn.utils import check_random_state as check_random_state
from typing import Any

rng: Any
iris: Any
perm: Any
iris_data: Any
iris_target: Any
EPS: Any

def test_simple_example() -> None: ...
def test_toy_example_collapse_points() -> None: ...
def test_finite_differences(): ...
def test_params_validation() -> None: ...
def test_transformation_dimensions() -> None: ...
def test_n_components() -> None: ...
def test_init_transformation() -> None: ...
def test_auto_init(n_samples, n_features, n_classes, n_components) -> None: ...
def test_warm_start_validation() -> None: ...
def test_warm_start_effectiveness() -> None: ...
def test_verbose(init_name, capsys) -> None: ...
def test_no_verbose(capsys) -> None: ...
def test_singleton_class() -> None: ...
def test_one_class() -> None: ...
def test_callback(capsys) -> None: ...
def test_expected_transformation_shape() -> None: ...
def test_convergence_warning() -> None: ...
def test_parameters_valid_types(param, value) -> None: ...
