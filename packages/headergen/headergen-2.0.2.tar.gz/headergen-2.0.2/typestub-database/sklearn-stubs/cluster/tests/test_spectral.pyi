from pyamg import smoothed_aggregation_solver as smoothed_aggregation_solver
from sklearn.cluster import SpectralClustering as SpectralClustering, spectral_clustering as spectral_clustering
from sklearn.cluster._spectral import discretize as discretize
from sklearn.datasets import make_blobs as make_blobs
from sklearn.feature_extraction import img_to_graph as img_to_graph
from sklearn.metrics import adjusted_rand_score as adjusted_rand_score, pairwise_distances as pairwise_distances
from sklearn.metrics.pairwise import kernel_metrics as kernel_metrics, rbf_kernel as rbf_kernel
from sklearn.neighbors import NearestNeighbors as NearestNeighbors
from sklearn.utils import check_random_state as check_random_state
from sklearn.utils._testing import assert_array_equal as assert_array_equal

amg_loaded: bool

def test_spectral_clustering(eigen_solver, assign_labels) -> None: ...
def test_spectral_unknown_mode() -> None: ...
def test_spectral_unknown_assign_labels() -> None: ...
def test_spectral_clustering_sparse() -> None: ...
def test_precomputed_nearest_neighbors_filtering() -> None: ...
def test_affinities(): ...
def test_discretize(n_samples) -> None: ...
def test_spectral_clustering_with_arpack_amg_solvers() -> None: ...
def test_n_components() -> None: ...
def test_verbose(assign_labels, capsys) -> None: ...
def test_pairwise_is_deprecated(affinity) -> None: ...
def test_spectral_clustering_np_matrix_raises() -> None: ...
def test_spectral_clustering_not_infinite_loop(capsys, monkeypatch) -> None: ...
