from sklearn.compose import ColumnTransformer as ColumnTransformer
from sklearn.datasets import load_diabetes as load_diabetes, load_iris as load_iris, make_classification as make_classification, make_regression as make_regression
from sklearn.dummy import DummyClassifier as DummyClassifier
from sklearn.ensemble import RandomForestClassifier as RandomForestClassifier, RandomForestRegressor as RandomForestRegressor
from sklearn.impute import SimpleImputer as SimpleImputer
from sklearn.inspection import permutation_importance as permutation_importance
from sklearn.linear_model import LinearRegression as LinearRegression, LogisticRegression as LogisticRegression
from sklearn.metrics import get_scorer as get_scorer, mean_squared_error as mean_squared_error, r2_score as r2_score
from sklearn.model_selection import train_test_split as train_test_split
from sklearn.pipeline import make_pipeline as make_pipeline
from sklearn.preprocessing import KBinsDiscretizer as KBinsDiscretizer, OneHotEncoder as OneHotEncoder, StandardScaler as StandardScaler, scale as scale
from sklearn.utils import parallel_backend as parallel_backend

def test_permutation_importance_correlated_feature_regression(n_jobs, max_samples) -> None: ...
def test_permutation_importance_correlated_feature_regression_pandas(n_jobs, max_samples) -> None: ...
def test_robustness_to_high_cardinality_noisy_feature(n_jobs, max_samples, seed: int = ...) -> None: ...
def test_permutation_importance_mixed_types() -> None: ...
def test_permutation_importance_mixed_types_pandas() -> None: ...
def test_permutation_importance_linear_regresssion() -> None: ...
def test_permutation_importance_equivalence_sequential_parallel(max_samples) -> None: ...
def test_permutation_importance_equivalence_array_dataframe(n_jobs, max_samples) -> None: ...
def test_permutation_importance_large_memmaped_data(input_type) -> None: ...
def test_permutation_importance_sample_weight() -> None: ...
def test_permutation_importance_no_weights_scoring_function(): ...
def test_permutation_importance_multi_metric(list_single_scorer, multi_scorer) -> None: ...
def test_permutation_importance_max_samples_error(max_samples) -> None: ...
