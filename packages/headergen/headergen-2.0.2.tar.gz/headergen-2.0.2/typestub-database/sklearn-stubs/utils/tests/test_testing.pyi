import unittest
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LinearDiscriminantAnalysis
from sklearn.tree import DecisionTreeClassifier as DecisionTreeClassifier
from sklearn.utils._testing import TempMemmap as TempMemmap, assert_allclose_dense_sparse as assert_allclose_dense_sparse, assert_no_warnings as assert_no_warnings, assert_raise_message as assert_raise_message, assert_raises as assert_raises, assert_raises_regex as assert_raises_regex, assert_warns as assert_warns, check_docstring_parameters as check_docstring_parameters, create_memmap_backed_data as create_memmap_backed_data, ignore_warnings as ignore_warnings, raises as raises, set_random_state as set_random_state
from sklearn.utils.deprecation import deprecated as deprecated
from sklearn.utils.metaestimators import available_if as available_if, if_delegate_has_method as if_delegate_has_method
from typing import Any

def test_set_random_state() -> None: ...
def test_assert_allclose_dense_sparse() -> None: ...
def test_assert_raises_msg() -> None: ...
def test_assert_raise_message() -> None: ...
def test_ignore_warning() -> None: ...

class TestWarns(unittest.TestCase):
    def test_warn(self): ...
    def test_warn_wrong_warning(self) -> None: ...

def f_ok(a, b): ...
def f_bad_sections(a, b): ...
def f_bad_order(b, a): ...
def f_too_many_param_docstring(a, b): ...
def f_missing(a, b): ...
def f_check_param_definition(a, b, c, d, e): ...

class Klass:
    def f_missing(self, X, y) -> None: ...
    def f_bad_sections(self, X, y) -> None: ...

class MockEst:
    def __init__(self) -> None: ...
    def fit(self, X, y): ...
    def predict(self, X): ...
    def predict_proba(self, X): ...
    def score(self, X): ...

class MockMetaEstimator:
    delegate: Any
    def __init__(self, delegate) -> None: ...
    def predict(self, X): ...
    def score(self, X) -> None: ...
    def predict_proba(self, X): ...
    def fit(self, X, y) -> None: ...

class MockMetaEstimatorDeprecatedDelegation:
    delegate: Any
    def __init__(self, delegate) -> None: ...
    def predict(self, X): ...
    def score(self, X) -> None: ...
    def predict_proba(self, X): ...
    def fit(self, X, y) -> None: ...

def test_check_docstring_parameters(mock_meta) -> None: ...

class RegistrationCounter:
    nb_calls: int
    def __init__(self) -> None: ...
    def __call__(self, to_register_func) -> None: ...

def check_memmap(input_array, mmap_data, mmap_mode: str = ...) -> None: ...
def test_tempmemmap(monkeypatch) -> None: ...
def test_create_memmap_backed_data(monkeypatch, aligned) -> None: ...
def test_memmap_on_contiguous_data(dtype) -> None: ...
def test_convert_container(constructor_name, container_type, dtype, superdtype) -> None: ...
def test_raises() -> None: ...
