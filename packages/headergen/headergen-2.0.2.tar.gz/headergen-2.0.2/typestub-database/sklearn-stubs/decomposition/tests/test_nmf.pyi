from sklearn.base import clone as clone
from sklearn.decomposition import NMF as NMF, non_negative_factorization as non_negative_factorization
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning
from sklearn.utils._testing import assert_allclose as assert_allclose, assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal, ignore_warnings as ignore_warnings
from sklearn.utils.extmath import squared_norm as squared_norm

def test_convergence_warning(solver) -> None: ...
def test_initialize_nn_output() -> None: ...
def test_parameter_checking() -> None: ...
def test_initialize_close() -> None: ...
def test_initialize_variants() -> None: ...
def test_nmf_fit_nn_output(solver, init, alpha_W, alpha_H) -> None: ...
def test_nmf_fit_close(solver) -> None: ...
def test_nmf_transform(solver) -> None: ...
def test_nmf_transform_custom_init() -> None: ...
def test_nmf_inverse_transform(solver) -> None: ...
def test_n_components_greater_n_features() -> None: ...
def test_nmf_sparse_input(solver, alpha_W, alpha_H) -> None: ...
def test_nmf_sparse_transform() -> None: ...
def test_non_negative_factorization_consistency(init, solver, alpha_W, alpha_H) -> None: ...
def test_non_negative_factorization_checking() -> None: ...
def test_beta_divergence() -> None: ...
def test_special_sparse_dot() -> None: ...
def test_nmf_multiplicative_update_sparse() -> None: ...
def test_nmf_negative_beta_loss() -> None: ...
def test_nmf_regularization(solver) -> None: ...
def test_nmf_decreasing(solver) -> None: ...
def test_nmf_underflow() -> None: ...
def test_nmf_dtype_match(dtype_in, dtype_out, solver, alpha_W, alpha_H) -> None: ...
def test_nmf_float32_float64_consistency(solver) -> None: ...
def test_nmf_custom_init_dtype_error() -> None: ...
def test_init_default_deprecation() -> None: ...
