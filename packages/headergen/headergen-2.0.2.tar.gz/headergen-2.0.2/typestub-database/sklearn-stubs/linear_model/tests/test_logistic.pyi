from sklearn.base import clone as clone
from sklearn.datasets import load_iris as load_iris, make_classification as make_classification
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning
from sklearn.linear_model import SGDClassifier as SGDClassifier
from sklearn.linear_model._logistic import LogisticRegression as LogisticRegression, LogisticRegressionCV as LogisticRegressionCV
from sklearn.metrics import get_scorer as get_scorer, log_loss as log_loss
from sklearn.model_selection import GridSearchCV as GridSearchCV, StratifiedKFold as StratifiedKFold, cross_val_score as cross_val_score, train_test_split as train_test_split
from sklearn.preprocessing import LabelEncoder as LabelEncoder, StandardScaler as StandardScaler, scale as scale
from sklearn.utils import compute_class_weight as compute_class_weight, shuffle as shuffle
from sklearn.utils._testing import ignore_warnings as ignore_warnings, skip_if_no_parallel as skip_if_no_parallel
from typing import Any

X: Any
X_sp: Any
Y1: Any
Y2: Any
iris: Any

def check_predictions(clf, X, y) -> None: ...
def test_predict_2_classes() -> None: ...
def test_error() -> None: ...
def test_logistic_cv_mock_scorer(): ...
def test_logistic_cv_score_does_not_warn_by_default() -> None: ...
def test_lr_liblinear_warning() -> None: ...
def test_predict_3_classes() -> None: ...
def test_predict_iris() -> None: ...
def test_multinomial_validation(solver) -> None: ...
def test_check_solver_option(LR) -> None: ...
def test_multinomial_binary(solver) -> None: ...
def test_multinomial_binary_probabilities() -> None: ...
def test_sparsify() -> None: ...
def test_inconsistent_input() -> None: ...
def test_write_parameters() -> None: ...
def test_nan() -> None: ...
def test_consistency_path() -> None: ...
def test_logistic_regression_path_convergence_fail() -> None: ...
def test_liblinear_dual_random_state() -> None: ...
def test_logistic_loss_and_grad(): ...
def test_logistic_grad_hess() -> None: ...
def test_logistic_cv() -> None: ...
def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list) -> None: ...
def test_multinomial_logistic_regression_string_inputs() -> None: ...
def test_logistic_cv_sparse() -> None: ...
def test_intercept_logistic_helper() -> None: ...
def test_ovr_multinomial_iris() -> None: ...
def test_logistic_regression_solvers() -> None: ...
def test_logistic_regression_solvers_multiclass() -> None: ...
def test_logistic_regressioncv_class_weights() -> None: ...
def test_logistic_regression_sample_weights() -> None: ...
def test_logistic_regression_class_weights() -> None: ...
def test_logistic_regression_multinomial() -> None: ...
def test_multinomial_grad_hess() -> None: ...
def test_liblinear_decision_function_zero() -> None: ...
def test_liblinear_logregcv_sparse() -> None: ...
def test_saga_sparse() -> None: ...
def test_logreg_intercept_scaling() -> None: ...
def test_logreg_intercept_scaling_zero() -> None: ...
def test_logreg_l1() -> None: ...
def test_logreg_l1_sparse_data() -> None: ...
def test_logistic_regression_cv_refit(random_seed, penalty) -> None: ...
def test_logreg_predict_proba_multinomial() -> None: ...
def test_max_iter(max_iter, multi_class, solver, message) -> None: ...
def test_n_iter(solver) -> None: ...
def test_warm_start(solver, warm_start, fit_intercept, multi_class) -> None: ...
def test_saga_vs_liblinear() -> None: ...
def test_dtype_match(solver, multi_class, fit_intercept) -> None: ...
def test_warm_start_converge_LR() -> None: ...
def test_elastic_net_coeffs() -> None: ...
def test_elastic_net_l1_l2_equivalence(C, penalty, l1_ratio) -> None: ...
def test_elastic_net_vs_l1_l2(C) -> None: ...
def test_LogisticRegression_elastic_net_objective(C, l1_ratio): ...
def test_LogisticRegressionCV_GridSearchCV_elastic_net(multi_class) -> None: ...
def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr() -> None: ...
def test_LogisticRegressionCV_no_refit(penalty, multi_class) -> None: ...
def test_LogisticRegressionCV_elasticnet_attribute_shapes() -> None: ...
def test_l1_ratio_param(l1_ratio) -> None: ...
def test_l1_ratios_param(l1_ratios) -> None: ...
def test_elastic_net_versus_sgd(C, l1_ratio) -> None: ...
def test_logistic_regression_path_coefs_multinomial() -> None: ...
def test_logistic_regression_multi_class_auto(est, solver): ...
def test_penalty_none(solver) -> None: ...
def test_logisticregression_liblinear_sample_weight(params) -> None: ...
def test_scores_attribute_layout_elasticnet() -> None: ...
def test_multinomial_identifiability_on_iris(fit_intercept) -> None: ...
def test_sample_weight_not_modified(multi_class, class_weight) -> None: ...
def test_large_sparse_matrix(solver) -> None: ...
