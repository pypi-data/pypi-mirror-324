from tensorflow.python.distribute import distribution_strategy_context as distribution_strategy_context
from tensorflow.python.framework import ops as ops
from tensorflow.python.keras import backend as backend
from tensorflow.python.keras.engine import keras_tensor as keras_tensor
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any

class ReductionV2:
    AUTO: str
    NONE: str
    SUM: str
    SUM_OVER_BATCH_SIZE: str
    @classmethod
    def all(cls): ...
    @classmethod
    def validate(cls, key) -> None: ...

def remove_squeezable_dimensions(labels, predictions, expected_rank_diff: int = ..., name: Any | None = ...): ...
def squeeze_or_expand_dimensions(y_pred, y_true: Any | None = ..., sample_weight: Any | None = ...): ...
def reduce_weighted_loss(weighted_losses, reduction=...): ...
def compute_weighted_loss(losses, sample_weight: Any | None = ..., reduction=..., name: Any | None = ...): ...
def scale_loss_for_distribution(loss_value): ...
def cast_losses_to_common_dtype(losses): ...
