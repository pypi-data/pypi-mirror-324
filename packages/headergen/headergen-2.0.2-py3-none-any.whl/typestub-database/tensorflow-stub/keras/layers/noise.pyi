from tensorflow.python.keras import backend as backend
from tensorflow.python.keras.engine.base_layer import Layer as Layer
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any

class GaussianNoise(Layer):
    supports_masking: bool
    stddev: Any
    def __init__(self, stddev, **kwargs) -> None: ...
    def call(self, inputs, training: Any | None = ...): ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...

class GaussianDropout(Layer):
    supports_masking: bool
    rate: Any
    def __init__(self, rate, **kwargs) -> None: ...
    def call(self, inputs, training: Any | None = ...): ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...

class AlphaDropout(Layer):
    rate: Any
    noise_shape: Any
    seed: Any
    supports_masking: bool
    def __init__(self, rate, noise_shape: Any | None = ..., seed: Any | None = ..., **kwargs) -> None: ...
    def call(self, inputs, training: Any | None = ...): ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...
