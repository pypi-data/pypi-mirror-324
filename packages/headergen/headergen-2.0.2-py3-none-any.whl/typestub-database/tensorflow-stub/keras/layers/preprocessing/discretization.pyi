from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_spec as tensor_spec, tensor_util as tensor_util
from tensorflow.python.keras.engine import base_preprocessing_layer as base_preprocessing_layer
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.ops import array_ops as array_ops, gen_math_ops as gen_math_ops, math_ops as math_ops, script_ops as script_ops, sort_ops as sort_ops
from tensorflow.python.ops.ragged import ragged_functional_ops as ragged_functional_ops
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any

def summarize(values, epsilon): ...
def compress(summary, epsilon): ...
def merge_summaries(prev_summary, next_summary, epsilon): ...
def get_bin_boundaries(summary, num_bins): ...

class Discretization(base_preprocessing_layer.PreprocessingLayer):
    input_bin_boundaries: Any
    bin_boundaries: Any
    num_bins: Any
    epsilon: Any
    def __init__(self, bin_boundaries: Any | None = ..., num_bins: Any | None = ..., epsilon: float = ..., **kwargs) -> None: ...
    summary: Any
    def build(self, input_shape): ...
    def update_state(self, data) -> None: ...
    def merge_state(self, layers) -> None: ...
    def finalize_state(self) -> None: ...
    def reset_state(self) -> None: ...
    def get_config(self): ...
    def compute_output_shape(self, input_shape): ...
    def compute_output_signature(self, input_spec): ...
    def call(self, inputs): ...
