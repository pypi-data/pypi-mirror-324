from tensorflow.python.framework import dtypes as dtypes
from tensorflow.python.ops import init_ops as init_ops
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any

class RandomNormal(init_ops.RandomNormal):
    def __init__(self, mean: float = ..., stddev: float = ..., seed: Any | None = ..., dtype=...) -> None: ...

class RandomUniform(init_ops.RandomUniform):
    def __init__(self, minval=..., maxval: float = ..., seed: Any | None = ..., dtype=...) -> None: ...

class TruncatedNormal(init_ops.TruncatedNormal):
    def __init__(self, mean: float = ..., stddev: float = ..., seed: Any | None = ..., dtype=...) -> None: ...

class LecunNormal(init_ops.VarianceScaling):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...

class LecunUniform(init_ops.VarianceScaling):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...

class HeNormal(init_ops.VarianceScaling):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...

class HeUniform(init_ops.VarianceScaling):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...
