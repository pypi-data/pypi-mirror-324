import threading
from tensorflow.python.framework import errors as errors
from tensorflow.python.util import compat as compat
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

class Coordinator:
    def __init__(self, clean_stop_exception_types: Any | None = ...) -> None: ...
    def request_stop(self, ex: Any | None = ...) -> None: ...
    def clear_stop(self) -> None: ...
    def should_stop(self): ...
    def stop_on_exception(self) -> None: ...
    def wait_for_stop(self, timeout: Any | None = ...): ...
    def register_thread(self, thread) -> None: ...
    def join(self, threads: Any | None = ..., stop_grace_period_secs: int = ..., ignore_live_threads: bool = ...) -> None: ...
    @property
    def joined(self): ...
    def raise_requested_exception(self) -> None: ...

class LooperThread(threading.Thread):
    daemon: bool
    def __init__(self, coord, timer_interval_secs, target: Any | None = ..., args: Any | None = ..., kwargs: Any | None = ...) -> None: ...
    @staticmethod
    def loop(coord, timer_interval_secs, target, args: Any | None = ..., kwargs: Any | None = ...): ...
    def run(self) -> None: ...
    def start_loop(self) -> None: ...
    def stop_loop(self) -> None: ...
    def run_loop(self) -> None: ...
