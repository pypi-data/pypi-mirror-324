from tensorflow.python.client import session as session
from tensorflow.python.distribute import distribution_strategy_context as distribution_strategy_context
from tensorflow.python.framework import errors as errors, ops as ops
from tensorflow.python.training import checkpoint_management as checkpoint_management
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

class SessionManager:
    def __init__(self, local_init_op: Any | None = ..., ready_op: Any | None = ..., ready_for_local_init_op: Any | None = ..., graph: Any | None = ..., recovery_wait_secs: int = ..., local_init_run_options: Any | None = ..., local_init_feed_dict: Any | None = ...) -> None: ...
    def prepare_session(self, master, init_op: Any | None = ..., saver: Any | None = ..., checkpoint_dir: Any | None = ..., checkpoint_filename_with_path: Any | None = ..., wait_for_checkpoint: bool = ..., max_wait_secs: int = ..., config: Any | None = ..., init_feed_dict: Any | None = ..., init_fn: Any | None = ...): ...
    def recover_session(self, master, saver: Any | None = ..., checkpoint_dir: Any | None = ..., checkpoint_filename_with_path: Any | None = ..., wait_for_checkpoint: bool = ..., max_wait_secs: int = ..., config: Any | None = ...): ...
    def wait_for_session(self, master, config: Any | None = ..., max_wait_secs=...): ...

class _CountDownTimer:
    def __init__(self, duration_secs) -> None: ...
    def secs_remaining(self): ...
