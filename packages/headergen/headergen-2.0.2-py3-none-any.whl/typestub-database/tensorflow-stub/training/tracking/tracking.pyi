from tensorflow.python.eager import context as context, def_function as def_function
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.training.tracking import base as base, data_structures as data_structures
from tensorflow.python.util import tf_contextlib as tf_contextlib
from tensorflow.python.util.tf_export import tf_export as tf_export

class AutoTrackable(base.Trackable):
    def __setattr__(self, name, value) -> None: ...
    def __delattr__(self, name) -> None: ...

class ResourceTracker:
    def __init__(self) -> None: ...
    @property
    def resources(self): ...
    def add_resource(self, resource) -> None: ...

def resource_tracker_scope(resource_tracker) -> None: ...

class ResourceMetaclass(type):
    def __call__(cls, *args, **kwargs): ...

class CapturableResource:
    def __init__(self, device: str = ...) -> None: ...
    @property
    def resource_handle(self): ...
    def __del__(self) -> None: ...

class TrackableResource(CapturableResource):
    def __init__(self, device: str = ...) -> None: ...

class Asset(base.Trackable):
    def __init__(self, path) -> None: ...
    @property
    def asset_path(self): ...
