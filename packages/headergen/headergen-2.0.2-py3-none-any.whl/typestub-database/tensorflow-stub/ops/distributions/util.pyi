from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, linalg_ops as linalg_ops, math_ops as math_ops, nn as nn
from tensorflow.python.util import tf_inspect as tf_inspect
from typing import Any

def assert_integer_form(x, data: Any | None = ..., summarize: Any | None = ..., message: Any | None = ..., int_dtype: Any | None = ..., name: str = ...): ...
def assert_symmetric(matrix): ...
def embed_check_nonnegative_integer_form(x, name: str = ...): ...
def same_dynamic_shape(a, b): ...
def maybe_get_static_value(x, dtype: Any | None = ...): ...
def get_logits_and_probs(logits: Any | None = ..., probs: Any | None = ..., multidimensional: bool = ..., validate_args: bool = ..., name: str = ..., dtype: Any | None = ...): ...
def embed_check_categorical_event_shape(categorical_param, name: str = ...): ...
def embed_check_integer_casting_closed(x, target_dtype, assert_nonnegative: bool = ..., name: str = ...): ...
def log_combinations(n, counts, name: str = ...): ...
def matrix_diag_transform(matrix, transform: Any | None = ..., name: Any | None = ...): ...
def rotate_transpose(x, shift, name: str = ...): ...
def pick_vector(cond, true_vector, false_vector, name: str = ...): ...
def prefer_static_broadcast_shape(shape1, shape2, name: str = ...): ...
def prefer_static_rank(x): ...
def prefer_static_shape(x): ...
def prefer_static_value(x): ...
def gen_new_seed(seed, salt): ...
def fill_triangular(x, upper: bool = ..., name: Any | None = ...): ...
def fill_triangular_inverse(x, upper: bool = ..., name: Any | None = ...): ...
def tridiag(below: Any | None = ..., diag: Any | None = ..., above: Any | None = ..., name: Any | None = ...): ...
def reduce_weighted_logsumexp(logx, w: Any | None = ..., axis: Any | None = ..., keep_dims: bool = ..., return_sign: bool = ..., name: Any | None = ...): ...
def softplus_inverse(x, name: Any | None = ...): ...
def dimension_size(x, axis): ...
def process_quadrature_grid_and_probs(quadrature_grid_and_probs, dtype, validate_args, name: Any | None = ...): ...
def pad(x, axis, front: bool = ..., back: bool = ..., value: int = ..., count: int = ..., name: Any | None = ...): ...
def parent_frame_arguments(): ...

class AppendDocstring:
    def __init__(self, additional_note: str = ..., kwargs_dict: Any | None = ...) -> None: ...
    def __call__(self, fn): ...
