from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, errors as errors, ops as ops
from tensorflow.python.ops import array_ops as array_ops, bitwise_ops as bitwise_ops, clip_ops as clip_ops, control_flow_ops as control_flow_ops, gen_math_ops as gen_math_ops, math_ops as math_ops, nn_ops as nn_ops, sort_ops as sort_ops, special_math_ops as special_math_ops
from tensorflow.python.ops.numpy_ops import np_array_ops as np_array_ops, np_arrays as np_arrays, np_dtypes as np_dtypes, np_export as np_export, np_utils as np_utils
from typing import Any

pi: Any
e: Any
inf: Any

def dot(a, b): ...
def add(x1, x2): ...
def subtract(x1, x2): ...
def multiply(x1, x2): ...
def true_divide(x1, x2): ...
def divide(x1, x2): ...
def floor_divide(x1, x2): ...
def mod(x1, x2): ...
def remainder(x1, x2): ...
def divmod(x1, x2): ...
def maximum(x1, x2): ...
def minimum(x1, x2): ...
def clip(a, a_min, a_max): ...
def matmul(x1, x2): ...
def tensordot(a, b, axes: int = ...): ...
def inner(a, b): ...
def cross(a, b, axisa: int = ..., axisb: int = ..., axisc: int = ..., axis: Any | None = ...): ...
def vdot(a, b): ...
def power(x1, x2): ...
def float_power(x1, x2): ...
def arctan2(x1, x2): ...
def nextafter(x1, x2): ...
def heaviside(x1, x2): ...
def hypot(x1, x2): ...
def kron(a, b): ...
def outer(a, b): ...
def logaddexp(x1, x2): ...
def logaddexp2(x1, x2): ...
def polyval(p, x): ...
def isclose(a, b, rtol: float = ..., atol: float = ..., equal_nan: bool = ...): ...
def allclose(a, b, rtol: float = ..., atol: float = ..., equal_nan: bool = ...): ...
def gcd(x1, x2): ...
def lcm(x1, x2): ...
def bitwise_and(x1, x2): ...
def bitwise_or(x1, x2): ...
def bitwise_xor(x1, x2): ...
def bitwise_not(x): ...
def log(x): ...
def exp(x): ...
def sqrt(x): ...
def abs(x): ...
def absolute(x): ...
def fabs(x): ...
def ceil(x): ...
def floor(x): ...
def conj(x): ...
def negative(x): ...
def reciprocal(x): ...
def signbit(x): ...
def sin(x): ...
def cos(x): ...
def tan(x): ...
def sinh(x): ...
def cosh(x): ...
def tanh(x): ...
def arcsin(x): ...
def arccos(x): ...
def arctan(x): ...
def arcsinh(x): ...
def arccosh(x): ...
def arctanh(x): ...
def deg2rad(x): ...
def rad2deg(x): ...
def angle(z, deg: bool = ...): ...
def cbrt(x): ...
def conjugate(x): ...
def exp2(x): ...
def expm1(x): ...
def fix(x): ...
def iscomplex(x): ...
def isreal(x): ...
def iscomplexobj(x): ...
def isrealobj(x): ...
def isnan(x): ...

nansum: Any
nanprod: Any

def nanmean(a, axis: Any | None = ..., dtype: Any | None = ..., keepdims: Any | None = ...): ...
def isfinite(x): ...
def isinf(x): ...
def isneginf(x): ...
def isposinf(x): ...
def log2(x): ...
def log10(x): ...
def log1p(x): ...
def positive(x): ...
def sinc(x): ...
def square(x): ...
def diff(a, n: int = ..., axis: int = ...): ...
def equal(x1, x2): ...
def not_equal(x1, x2): ...
def greater(x1, x2): ...
def greater_equal(x1, x2): ...
def less(x1, x2): ...
def less_equal(x1, x2): ...
def array_equal(a1, a2): ...
def logical_and(x1, x2): ...
def logical_or(x1, x2): ...
def logical_xor(x1, x2): ...
def logical_not(x): ...
def linspace(start, stop, num: int = ..., endpoint: bool = ..., retstep: bool = ..., dtype=..., axis: int = ...): ...
def logspace(start, stop, num: int = ..., endpoint: bool = ..., base: float = ..., dtype: Any | None = ..., axis: int = ...): ...
def geomspace(start, stop, num: int = ..., endpoint: bool = ..., dtype: Any | None = ..., axis: int = ...): ...
def ptp(a, axis: Any | None = ..., keepdims: Any | None = ...): ...
def concatenate(arys, axis: int = ...): ...
def tile(a, reps): ...
def count_nonzero(a, axis: Any | None = ...): ...
def argsort(a, axis: int = ..., kind: str = ..., order: Any | None = ...): ...
def sort(a, axis: int = ..., kind: str = ..., order: Any | None = ...): ...
def argmax(a, axis: Any | None = ...): ...
def argmin(a, axis: Any | None = ...): ...
def append(arr, values, axis: Any | None = ...): ...
def average(a, axis: Any | None = ..., weights: Any | None = ..., returned: bool = ...): ...
def trace(a, offset: int = ..., axis1: int = ..., axis2: int = ..., dtype: Any | None = ...): ...
def meshgrid(*xi, **kwargs): ...
def einsum(subscripts, *operands, **kwargs): ...
def enable_numpy_methods_on_tensor(): ...
