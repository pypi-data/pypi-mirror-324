from tensorflow.python.ops.gen_list_ops import *
from tensorflow.core.framework import full_type_pb2 as full_type_pb2
from tensorflow.python.framework import cpp_shape_inference_pb2 as cpp_shape_inference_pb2, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, gen_list_ops as gen_list_ops, handle_data_util as handle_data_util
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any

control_flow_ops: Any

def empty_tensor_list(element_shape, element_dtype, max_num_elements: Any | None = ..., name: Any | None = ...): ...
def tensor_list_reserve(element_shape, num_elements, element_dtype, name: Any | None = ...): ...
def tensor_list_from_tensor(tensor, element_shape, name: Any | None = ...): ...
def tensor_list_get_item(input_handle, index, element_dtype, element_shape: Any | None = ..., name: Any | None = ...): ...
def tensor_list_pop_back(input_handle, element_dtype, name: Any | None = ...): ...
def tensor_list_gather(input_handle, indices, element_dtype, element_shape: Any | None = ..., name: Any | None = ...): ...
def tensor_list_scatter(tensor, indices, element_shape: Any | None = ..., input_handle: Any | None = ..., name: Any | None = ...): ...
def tensor_list_stack(input_handle, element_dtype, num_elements: int = ..., element_shape: Any | None = ..., name: Any | None = ...): ...
def tensor_list_concat(input_handle, element_dtype, element_shape: Any | None = ..., name: Any | None = ...): ...
def tensor_list_split(tensor, element_shape, lengths, name: Any | None = ...): ...
def tensor_list_set_item(input_handle, index, item, resize_if_index_out_of_bounds: bool = ..., name: Any | None = ...): ...
