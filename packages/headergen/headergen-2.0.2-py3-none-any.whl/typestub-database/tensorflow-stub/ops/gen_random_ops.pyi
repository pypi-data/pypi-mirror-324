from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

def multinomial(logits, num_samples, seed: int = ..., seed2: int = ..., output_dtype=..., name: Any | None = ...): ...

Multinomial: Any

def multinomial_eager_fallback(logits, num_samples, seed, seed2, output_dtype, name, ctx): ...
def parameterized_truncated_normal(shape, means, stdevs, minvals, maxvals, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

ParameterizedTruncatedNormal: Any

def parameterized_truncated_normal_eager_fallback(shape, means, stdevs, minvals, maxvals, seed, seed2, name, ctx): ...
def random_gamma(shape, alpha, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

RandomGamma: Any

def random_gamma_eager_fallback(shape, alpha, seed, seed2, name, ctx): ...
def random_gamma_grad(alpha, sample, name: Any | None = ...): ...

RandomGammaGrad: Any

def random_gamma_grad_eager_fallback(alpha, sample, name, ctx): ...
def random_poisson(shape, rate, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

RandomPoisson: Any

def random_poisson_eager_fallback(shape, rate, seed, seed2, name, ctx): ...
def random_poisson_v2(shape, rate, seed: int = ..., seed2: int = ..., dtype=..., name: Any | None = ...): ...

RandomPoissonV2: Any

def random_poisson_v2_eager_fallback(shape, rate, seed, seed2, dtype, name, ctx): ...
def random_shuffle(value, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

RandomShuffle: Any

def random_shuffle_eager_fallback(value, seed, seed2, name, ctx): ...
def random_standard_normal(shape, dtype, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

RandomStandardNormal: Any

def random_standard_normal_eager_fallback(shape, dtype, seed, seed2, name, ctx): ...
def random_uniform(shape, dtype, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

RandomUniform: Any

def random_uniform_eager_fallback(shape, dtype, seed, seed2, name, ctx): ...
def random_uniform_int(shape, minval, maxval, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

RandomUniformInt: Any

def random_uniform_int_eager_fallback(shape, minval, maxval, seed, seed2, name, ctx): ...
def truncated_normal(shape, dtype, seed: int = ..., seed2: int = ..., name: Any | None = ...): ...

TruncatedNormal: Any

def truncated_normal_eager_fallback(shape, dtype, seed, seed2, name, ctx): ...
