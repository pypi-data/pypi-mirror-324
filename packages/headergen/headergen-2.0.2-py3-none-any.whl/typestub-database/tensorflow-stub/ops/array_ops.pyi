from tensorflow.python.ops.gen_array_ops import *
from tensorflow.python.eager import context as context, tape as tape
from tensorflow.python.framework import common_shapes as common_shapes, composite_tensor as composite_tensor, constant_op as constant_op, dtypes as dtypes, errors as errors, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.framework.constant_op import constant as constant
from tensorflow.python.ops import gen_array_ops as gen_array_ops, gen_math_ops as gen_math_ops
from tensorflow.python.types import core as core
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch, nest as nest, tf_decorator as tf_decorator
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

newaxis: Any

def reshape(tensor, shape, name: Any | None = ...): ...
def fill(dims, value, name: Any | None = ...): ...
def identity(input, name: Any | None = ...): ...
def expand_dims(input, axis: Any | None = ..., name: Any | None = ..., dim: Any | None = ...): ...
def expand_dims_v2(input, axis, name: Any | None = ...): ...
def listdiff(x, y, out_idx: Any | None = ..., name: Any | None = ...): ...
def setdiff1d(x, y, index_dtype=..., name: Any | None = ...): ...
def broadcast_dynamic_shape(shape_x, shape_y): ...
def broadcast_static_shape(shape_x, shape_y): ...
def shape_v2(input, out_type=..., name: Any | None = ...): ...
def shape(input, name: Any | None = ..., out_type=...): ...
def shape_internal(input, name: Any | None = ..., optimize: bool = ..., out_type=...): ...
def shape_n(input, out_type=..., name: Any | None = ...): ...
def size_v2(input, out_type=..., name: Any | None = ...): ...
def size(input, name: Any | None = ..., out_type=...): ...
def size_internal(input, name: Any | None = ..., optimize: bool = ..., out_type=...): ...
def rank(input, name: Any | None = ...): ...
def rank_internal(input, name: Any | None = ..., optimize: bool = ...): ...
def slice(input_, begin, size, name: Any | None = ...): ...
def strided_slice(input_, begin, end, strides: Any | None = ..., begin_mask: int = ..., end_mask: int = ..., ellipsis_mask: int = ..., new_axis_mask: int = ..., shrink_axis_mask: int = ..., var: Any | None = ..., name: Any | None = ...): ...
def parallel_stack(values, name: str = ...): ...
def stack(values, axis: int = ..., name: str = ...): ...
def unstack(value, num: Any | None = ..., axis: int = ..., name: str = ...): ...
def concat(values, axis, name: str = ...): ...
def boolean_mask(tensor, mask, name: str = ..., axis: Any | None = ...): ...
def boolean_mask_v2(tensor, mask, axis: Any | None = ..., name: str = ...): ...
def sparse_mask(a, mask_indices, name: Any | None = ...): ...
def unique(x, out_idx=..., name: Any | None = ...): ...
def unique_with_counts(x, out_idx=..., name: Any | None = ...): ...
def split(value, num_or_size_splits, axis: int = ..., num: Any | None = ..., name: str = ...): ...
def transpose_v2(a, perm: Any | None = ..., conjugate: bool = ..., name: str = ...): ...
def transpose(a, perm: Any | None = ..., name: str = ..., conjugate: bool = ...): ...
def matrix_transpose(a, name: str = ..., conjugate: bool = ...): ...
def matrix_diag(diagonal, name: str = ..., k: int = ..., num_rows: int = ..., num_cols: int = ..., padding_value: int = ..., align: str = ...): ...
def matrix_diag_part(input, name: str = ..., k: int = ..., padding_value: int = ..., align: str = ...): ...
def tensor_diag_part(input, name: Any | None = ...): ...
def matrix_set_diag(input, diagonal, name: str = ..., k: int = ..., align: str = ...): ...
def zeros(shape, dtype=..., name: Any | None = ...): ...
def zeros_like(tensor, dtype: Any | None = ..., name: Any | None = ..., optimize: bool = ...): ...
def zeros_like_v2(input, dtype: Any | None = ..., name: Any | None = ...): ...
def zeros_like_impl(tensor, dtype, name, optimize: bool = ...): ...
def ones_like(tensor, dtype: Any | None = ..., name: Any | None = ..., optimize: bool = ...): ...
def ones_like_v2(input, dtype: Any | None = ..., name: Any | None = ...): ...
def ones_like_impl(tensor, dtype, name, optimize: bool = ...): ...
def ones(shape, dtype=..., name: Any | None = ...): ...
def placeholder(dtype, shape: Any | None = ..., name: Any | None = ...): ...
def placeholder_with_default(input, shape, name: Any | None = ...): ...
def sparse_placeholder(dtype, shape: Any | None = ..., name: Any | None = ...): ...
def pad_v2(tensor, paddings, mode: str = ..., constant_values: int = ..., name: Any | None = ...): ...
def pad(tensor, paddings, mode: str = ..., name: Any | None = ..., constant_values: int = ...): ...
def meshgrid(*args, **kwargs): ...

NEW_AXIS: int
SHRINK_AXIS: int

def edit_distance(hypothesis, truth, normalize: bool = ..., name: str = ...): ...
def required_space_to_batch_paddings(input_shape, block_shape, base_paddings: Any | None = ..., name: Any | None = ...): ...
def space_to_batch(input, paddings, block_size: Any | None = ..., name: Any | None = ..., block_shape: Any | None = ...): ...
def space_to_batch_v2(input, block_shape, paddings, name: Any | None = ...): ...
def space_to_depth(input, block_size, name: Any | None = ..., data_format: str = ...): ...
def space_to_depth_v2(input, block_size, data_format: str = ..., name: Any | None = ...): ...
def depth_to_space(input, block_size, name: Any | None = ..., data_format: str = ...): ...
def depth_to_space_v2(input, block_size, data_format: str = ..., name: Any | None = ...): ...
def batch_to_space(input, crops, block_size, name: Any | None = ..., block_shape: Any | None = ...): ...
def batch_to_space_v2(input, block_shape, crops, name: Any | None = ...): ...
def one_hot(indices, depth, on_value: Any | None = ..., off_value: Any | None = ..., axis: Any | None = ..., dtype: Any | None = ..., name: Any | None = ...): ...
def sequence_mask(lengths, maxlen: Any | None = ..., dtype=..., name: Any | None = ...): ...
def squeeze(input, axis: Any | None = ..., name: Any | None = ..., squeeze_dims: Any | None = ...): ...
def squeeze_v2(input, axis: Any | None = ..., name: Any | None = ...): ...
def where(condition, x: Any | None = ..., y: Any | None = ..., name: Any | None = ...): ...
def where_v2(condition, x: Any | None = ..., y: Any | None = ..., name: Any | None = ...): ...
def reverse_sequence(input, seq_lengths, seq_axis: Any | None = ..., batch_axis: Any | None = ..., name: Any | None = ..., seq_dim: Any | None = ..., batch_dim: Any | None = ...): ...
def reverse_sequence_v2(input, seq_lengths, seq_axis: Any | None = ..., batch_axis: Any | None = ..., name: Any | None = ...): ...
def gather(params, indices, validate_indices: Any | None = ..., name: Any | None = ..., axis: Any | None = ..., batch_dims: int = ...): ...
def gather_v2(params, indices, validate_indices: Any | None = ..., axis: Any | None = ..., batch_dims: int = ..., name: Any | None = ...): ...
def batch_gather(params, indices, name: Any | None = ...): ...
def gather_nd(params, indices, name: Any | None = ..., batch_dims: int = ...): ...
def gather_nd_v2(params, indices, batch_dims: int = ..., name: Any | None = ...): ...
def batch_gather_nd(params, indices, batch_dims, name: Any | None = ...): ...
def tensor_scatter_nd_update(tensor, indices, updates, name: Any | None = ...): ...
def quantize_v2(input, min_range, max_range, T, mode: str = ..., name: Any | None = ..., round_mode: str = ..., narrow_range: bool = ..., axis: Any | None = ..., ensure_minimum_range: float = ...): ...
def quantize(input, min_range, max_range, T, mode: str = ..., round_mode: str = ..., name: Any | None = ..., narrow_range: bool = ..., axis: Any | None = ..., ensure_minimum_range: float = ...): ...
def dequantize(input, min_range, max_range, mode: str = ..., name: Any | None = ..., axis: Any | None = ..., narrow_range: bool = ..., dtype=...): ...
def quantize_and_dequantize(input, input_min, input_max, signed_input: bool = ..., num_bits: int = ..., range_given: bool = ..., round_mode: str = ..., name: Any | None = ..., narrow_range: bool = ..., axis: Any | None = ...): ...
def quantize_and_dequantize_v2(input, input_min, input_max, signed_input: bool = ..., num_bits: int = ..., range_given: bool = ..., round_mode: str = ..., name: Any | None = ..., narrow_range: bool = ..., axis: Any | None = ...): ...
def searchsorted(sorted_sequence, values, side: str = ..., out_type=..., name: Any | None = ...): ...
def extract_image_patches_v2(images, sizes, strides, rates, padding, name: Any | None = ...): ...
def extract_image_patches(images, ksizes: Any | None = ..., strides: Any | None = ..., rates: Any | None = ..., padding: Any | None = ..., name: Any | None = ..., sizes: Any | None = ...): ...
def fingerprint(data, method: str = ..., name: Any | None = ...): ...
def convert_to_int_tensor(tensor, name, dtype=...): ...
def get_positive_axis(axis, ndims, axis_name: str = ..., ndims_name: str = ...): ...
def repeat_with_axis(data, repeats, axis, name: Any | None = ...): ...
def tile_one_dimension(data, axis, multiple): ...
def repeat(input, repeats, axis: Any | None = ..., name: Any | None = ...): ...
def guarantee_const(input, name: Any | None = ...): ...
def stop_gradient(input, name: Any | None = ...): ...
