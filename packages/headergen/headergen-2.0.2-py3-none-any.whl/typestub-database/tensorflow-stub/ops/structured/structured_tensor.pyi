from tensorflow.python.framework import composite_tensor as composite_tensor, constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_spec as tensor_spec, type_spec as type_spec
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.ops.ragged import ragged_factory_ops as ragged_factory_ops, ragged_tensor as ragged_tensor
from tensorflow.python.ops.ragged.row_partition import RowPartition as RowPartition
from tensorflow.python.util import compat as compat, nest as nest
from typing import Any, Dict, Union

class StructuredTensor(composite_tensor.CompositeTensor):
    FieldName: Any
    FieldValue: Any
    FieldFn: Any
    def __init__(self, fields, shape, nrows, row_partitions, internal: bool = ...) -> None: ...
    @classmethod
    def from_fields(cls, fields, shape=..., nrows: Any | None = ..., row_partitions: Any | None = ..., validate: bool = ...): ...
    def with_updates(self, updates: Dict[FieldName, Union[FieldValue, FieldFn, None]], validate: bool = ...) -> StructuredTensor: ...
    def promote(self, source_path, new_name): ...
    @property
    def rank(self): ...
    @property
    def shape(self): ...
    @property
    def row_partitions(self): ...
    def nrows(self): ...
    def field_names(self): ...
    def field_value(self, field_name): ...
    def __getitem__(self, key): ...
    def to_pyval(self): ...
    @classmethod
    def from_pyval(cls, pyval, typespec: Any | None = ...): ...
    def partition_outer_dimension(self, row_partition): ...
    def merge_dims(self, outer_axis, inner_axis): ...

class StructuredTensorSpec(type_spec.BatchableTypeSpec):
    def __init__(self, shape, field_specs) -> None: ...
    @property
    def shape(self): ...
    @property
    def value_type(self): ...
    @classmethod
    def from_value(cls, value): ...
