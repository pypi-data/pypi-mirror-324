from tensorflow.python.ops.gen_nn_ops import *
from tensorflow.python.eager import context as context
from tensorflow.python.framework import config as config, constant_op as constant_op, dtypes as dtypes, errors_impl as errors_impl, graph_util as graph_util, ops as ops, random_seed as random_seed, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, gen_math_ops as gen_math_ops, gen_nn_ops as gen_nn_ops, math_ops as math_ops, random_ops as random_ops, stateless_random_ops as stateless_random_ops
from tensorflow.python.platform import device_context as device_context
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch
from tensorflow.python.util.compat import collections_abc as collections_abc
from tensorflow.python.util.deprecation import deprecated_args as deprecated_args, deprecated_argument_lookup as deprecated_argument_lookup
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

local_response_normalization: Any

class _NonAtrousConvolution:
    padding: Any
    name: Any
    strides: Any
    data_format: Any
    conv_op: Any
    def __init__(self, input_shape, filter_shape, padding, data_format: Any | None = ..., strides: Any | None = ..., name: Any | None = ..., num_batch_dims: int = ...) -> None: ...
    def __call__(self, inp, filter): ...

def squeeze_batch_dims(inp, op, inner_rank, name: Any | None = ...): ...
def dilation2d_v2(input, filters, strides, padding, data_format, dilations, name: Any | None = ...): ...
def dilation2d_v1(input, filter: Any | None = ..., strides: Any | None = ..., rates: Any | None = ..., padding: Any | None = ..., name: Any | None = ..., filters: Any | None = ..., dilations: Any | None = ...): ...
def with_space_to_batch(input, dilation_rate, padding, op, filter_shape: Any | None = ..., spatial_dims: Any | None = ..., data_format: Any | None = ...): ...

class _WithSpaceToBatch:
    call: Any
    base_paddings: Any
    num_spatial_dims: Any
    rate_or_const_rate: Any
    input_shape: Any
    spatial_dims: Any
    dilation_rate: Any
    data_format: Any
    op: Any
    def __init__(self, input_shape, dilation_rate, padding, build_op, filter_shape: Any | None = ..., spatial_dims: Any | None = ..., data_format: Any | None = ..., num_batch_dims: int = ...) -> None: ...
    def __call__(self, inp, filter): ...

def convolution(input, filter, padding, strides: Any | None = ..., dilation_rate: Any | None = ..., name: Any | None = ..., data_format: Any | None = ..., filters: Any | None = ..., dilations: Any | None = ...): ...
def convolution_v2(input, filters, strides: Any | None = ..., padding: str = ..., data_format: Any | None = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def convolution_internal(input, filters, strides: Any | None = ..., padding: str = ..., data_format: Any | None = ..., dilations: Any | None = ..., name: Any | None = ..., call_from_convolution: bool = ..., num_spatial_dims: Any | None = ...): ...

class Convolution:
    input_shape: Any
    filter_shape: Any
    data_format: Any
    strides: Any
    padding: Any
    name: Any
    dilation_rate: Any
    num_batch_dims: Any
    num_spatial_dims: Any
    conv_op: Any
    def __init__(self, input_shape, filter_shape, padding, strides: Any | None = ..., dilation_rate: Any | None = ..., name: Any | None = ..., data_format: Any | None = ..., num_spatial_dims: Any | None = ...) -> None: ...
    def __call__(self, inp, filter): ...

def pool(input, window_shape, pooling_type, padding, dilation_rate: Any | None = ..., strides: Any | None = ..., name: Any | None = ..., data_format: Any | None = ..., dilations: Any | None = ...): ...
def pool_v2(input, window_shape, pooling_type, strides: Any | None = ..., padding: str = ..., data_format: Any | None = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def atrous_conv2d(value, filters, rate, padding, name: Any | None = ...): ...
def convert_padding(padding, expected_length: int = ...): ...
def conv1d(value: Any | None = ..., filters: Any | None = ..., stride: Any | None = ..., padding: Any | None = ..., use_cudnn_on_gpu: Any | None = ..., data_format: Any | None = ..., name: Any | None = ..., input: Any | None = ..., dilations: Any | None = ...): ...
def conv1d_v2(input, filters, stride, padding, data_format: str = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def conv1d_transpose(input, filters, output_shape, strides, padding: str = ..., data_format: str = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def conv2d_v2(input, filters, strides, padding, data_format: str = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def conv2d(input, filter: Any | None = ..., strides: Any | None = ..., padding: Any | None = ..., use_cudnn_on_gpu: bool = ..., data_format: str = ..., dilations=..., name: Any | None = ..., filters: Any | None = ...): ...
def conv2d_backprop_filter(input, filter_sizes, out_backprop, strides, padding, use_cudnn_on_gpu: bool = ..., data_format: str = ..., dilations=..., name: Any | None = ...): ...
def conv2d_backprop_input(input_sizes, filter: Any | None = ..., out_backprop: Any | None = ..., strides: Any | None = ..., padding: Any | None = ..., use_cudnn_on_gpu: bool = ..., data_format: str = ..., dilations=..., name: Any | None = ..., filters: Any | None = ...): ...
def conv2d_transpose(value: Any | None = ..., filter: Any | None = ..., output_shape: Any | None = ..., strides: Any | None = ..., padding: str = ..., data_format: str = ..., name: Any | None = ..., input: Any | None = ..., filters: Any | None = ..., dilations: Any | None = ...): ...
def conv2d_transpose_v2(input, filters, output_shape, strides, padding: str = ..., data_format: str = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def atrous_conv2d_transpose(value, filters, output_shape, rate, padding, name: Any | None = ...): ...
def depthwise_conv2d_native(input, filter, strides, padding, data_format: str = ..., dilations=..., name: Any | None = ...): ...
def depthwise_conv2d_native_backprop_input(input_sizes, filter, out_backprop, strides, padding, data_format: str = ..., dilations=..., name: Any | None = ...): ...
def depthwise_conv2d_native_backprop_filter(input, filter_sizes, out_backprop, strides, padding, data_format: str = ..., dilations=..., name: Any | None = ...): ...
def conv3d_v2(input, filters, strides, padding, data_format: str = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def conv3d_v1(input, filter: Any | None = ..., strides: Any | None = ..., padding: Any | None = ..., data_format: str = ..., dilations=..., name: Any | None = ..., filters: Any | None = ...): ...
def conv3d_transpose(value, filter: Any | None = ..., output_shape: Any | None = ..., strides: Any | None = ..., padding: str = ..., data_format: str = ..., name: Any | None = ..., input: Any | None = ..., filters: Any | None = ..., dilations: Any | None = ...): ...
def conv3d_transpose_v2(input, filters, output_shape, strides, padding: str = ..., data_format: str = ..., dilations: Any | None = ..., name: Any | None = ...): ...

CONV_TRANSPOSE_OPS: Any

def conv_transpose(input, filters, output_shape, strides, padding: str = ..., data_format: Any | None = ..., dilations: Any | None = ..., name: Any | None = ...): ...
def bias_add(value, bias, data_format: Any | None = ..., name: Any | None = ...): ...
def bias_add_v1(value, bias, name: Any | None = ...): ...
def crelu(features, name: Any | None = ..., axis: int = ...): ...
def crelu_v2(features, axis: int = ..., name: Any | None = ...): ...
def relu6(features, name: Any | None = ...): ...
def leaky_relu(features, alpha: float = ..., name: Any | None = ...): ...
def gelu(features, approximate: bool = ..., name: Any | None = ...): ...
def softmax_v2(logits, axis: Any | None = ..., name: Any | None = ...): ...
def softmax(logits, axis: Any | None = ..., name: Any | None = ..., dim: Any | None = ...): ...
def log_softmax(logits, axis: Any | None = ..., name: Any | None = ..., dim: Any | None = ...): ...
def log_softmax_v2(logits, axis: Any | None = ..., name: Any | None = ...): ...
def softmax_cross_entropy_with_logits_v2(labels, logits, axis: int = ..., name: Any | None = ...): ...
def softmax_cross_entropy_with_logits_v2_helper(labels, logits, axis: Any | None = ..., name: Any | None = ..., dim: Any | None = ...): ...
def softmax_cross_entropy_with_logits(_sentinel: Any | None = ..., labels: Any | None = ..., logits: Any | None = ..., dim: int = ..., name: Any | None = ..., axis: Any | None = ...): ...
def sparse_softmax_cross_entropy_with_logits(_sentinel: Any | None = ..., labels: Any | None = ..., logits: Any | None = ..., name: Any | None = ...): ...
def sparse_softmax_cross_entropy_with_logits_v2(labels, logits, name: Any | None = ...): ...
def avg_pool_v2(input, ksize, strides, padding, data_format: Any | None = ..., name: Any | None = ...): ...
def avg_pool(value, ksize, strides, padding, data_format: str = ..., name: Any | None = ..., input: Any | None = ...): ...
def avg_pool2d(input, ksize, strides, padding, data_format: str = ..., name: Any | None = ...): ...
def avg_pool1d(input, ksize, strides, padding, data_format: str = ..., name: Any | None = ...): ...
def avg_pool3d(input, ksize, strides, padding, data_format: str = ..., name: Any | None = ...): ...
def max_pool_v2(input, ksize, strides, padding, data_format: Any | None = ..., name: Any | None = ...): ...
def max_pool(value, ksize, strides, padding, data_format: str = ..., name: Any | None = ..., input: Any | None = ...): ...
def max_pool1d(input, ksize, strides, padding, data_format: str = ..., name: Any | None = ...): ...
def max_pool2d(input, ksize, strides, padding, data_format: str = ..., name: Any | None = ...): ...
def max_pool3d(input, ksize, strides, padding, data_format: str = ..., name: Any | None = ...): ...
def max_pool_with_argmax_v2(input, ksize, strides, padding, data_format: str = ..., output_dtype=..., include_batch_in_index: bool = ..., name: Any | None = ...): ...
def max_pool_with_argmax_v1(input, ksize, strides, padding, data_format: str = ..., Targmax: Any | None = ..., name: Any | None = ..., output_dtype: Any | None = ..., include_batch_in_index: bool = ...): ...
def xw_plus_b(x, weights, biases, name: Any | None = ...): ...
def xw_plus_b_v1(x, weights, biases, name: Any | None = ...): ...
def dropout(x, keep_prob: Any | None = ..., noise_shape: Any | None = ..., seed: Any | None = ..., name: Any | None = ..., rate: Any | None = ...): ...
def dropout_v2(x, rate, noise_shape: Any | None = ..., seed: Any | None = ..., name: Any | None = ...): ...
def stateless_dropout(x, rate, seed, rng_alg: Any | None = ..., noise_shape: Any | None = ..., name: Any | None = ...): ...
def top_k(input, k: int = ..., sorted: bool = ..., name: Any | None = ...): ...
def nth_element(input, n, reverse: bool = ..., name: Any | None = ...): ...
def fractional_max_pool(value, pooling_ratio, pseudo_random: bool = ..., overlapping: bool = ..., deterministic: bool = ..., seed: int = ..., seed2: int = ..., name: Any | None = ...): ...
def fractional_max_pool_v2(value, pooling_ratio, pseudo_random: bool = ..., overlapping: bool = ..., seed: int = ..., name: Any | None = ...): ...
def fractional_avg_pool(value, pooling_ratio, pseudo_random: bool = ..., overlapping: bool = ..., deterministic: bool = ..., seed: int = ..., seed2: int = ..., name: Any | None = ...): ...
def fractional_avg_pool_v2(value, pooling_ratio, pseudo_random: bool = ..., overlapping: bool = ..., seed: int = ..., name: Any | None = ...): ...
def erosion2d(value, kernel, strides, rates, padding, name: Any | None = ...): ...
def erosion2d_v2(value, filters, strides, padding, data_format, dilations, name: Any | None = ...): ...
def in_top_k(predictions, targets, k, name: Any | None = ...): ...
def in_top_k_v2(targets, predictions, k, name: Any | None = ...): ...
def isotonic_regression(inputs, decreasing: bool = ..., axis: int = ...): ...
