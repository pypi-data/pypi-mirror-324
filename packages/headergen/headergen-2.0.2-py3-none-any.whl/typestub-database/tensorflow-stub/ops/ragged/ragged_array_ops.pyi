from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, data_flow_ops as data_flow_ops, gen_ragged_array_ops as gen_ragged_array_ops, math_ops as math_ops, sort_ops as sort_ops
from tensorflow.python.ops.ragged import ragged_functional_ops as ragged_functional_ops, ragged_math_ops as ragged_math_ops, ragged_tensor as ragged_tensor, ragged_util as ragged_util, segment_id_ops as segment_id_ops
from tensorflow.python.util import dispatch as dispatch
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

def boolean_mask(data, mask, name: Any | None = ...): ...
def tile(input: ragged_tensor.Ragged, multiples, name: Any | None = ...): ...
def expand_dims(input: ragged_tensor.Ragged, axis, name: Any | None = ...): ...
def size(input: ragged_tensor.Ragged, out_type=..., name: Any | None = ...): ...
def rank(input: ragged_tensor.Ragged, name: Any | None = ...): ...
def ragged_one_hot(indices: ragged_tensor.Ragged, depth, on_value: Any | None = ..., off_value: Any | None = ..., axis: Any | None = ..., dtype: Any | None = ..., name: Any | None = ...): ...
def stack_dynamic_partitions(data, partitions, num_partitions, name: Any | None = ...): ...
def reverse(tensor: ragged_tensor.Ragged, axis, name: Any | None = ...): ...
def cross(inputs, name: Any | None = ...): ...
def cross_hashed(inputs, num_buckets: int = ..., hash_key: Any | None = ..., name: Any | None = ...): ...
def dynamic_partition(data: ragged_tensor.RaggedOrDense, partitions: ragged_tensor.RaggedOrDense, num_partitions, name: Any | None = ...): ...
