from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, control_flow_v2_func_graphs as control_flow_v2_func_graphs, default_gradient as default_gradient, gen_data_flow_ops as gen_data_flow_ops, gen_resource_variable_ops as gen_resource_variable_ops, resource_variable_ops as resource_variable_ops

class _GradLoopState:
    def __init__(self, forward_ctxt, outer_grad_state) -> None: ...
    @property
    def outer_grad_state(self): ...
    @property
    def forward_context(self): ...
    @property
    def forward_index(self): ...
    @property
    def forward_sync(self): ...
    @property
    def grad_context(self): ...
    @property
    def grad_index(self): ...
    @property
    def grad_sync(self): ...
    @property
    def history_map(self): ...
    @property
    def switch_map(self): ...
    @property
    def unused_exits(self): ...
    @property
    def deferred_exits(self): ...
    @property
    def forward_loop_exits(self): ...
    @property
    def pending_exits_count(self): ...
    @pending_exits_count.setter
    def pending_exits_count(self, cnt) -> None: ...
    def AddForwardAccumulator(self, value, dead_branch: bool = ...): ...
    def AddBackpropAccumulatedValue(self, history_value, value, dead_branch: bool = ...): ...
    def GetRealValue(self, value): ...

class _ControlFlowState:
    def __init__(self) -> None: ...
    def GetGradState(self, op, before): ...
    def ProcessUnusedLoopExits(self, pending_count, to_ops_set): ...
    def EnterGradWhileContext(self, op, before) -> None: ...
    def ExitGradWhileContext(self, op, before) -> None: ...
    def AddWhileContext(self, op, between_op_list, between_ops) -> None: ...
    def ZerosLikeForExit(self, val): ...
    def ZerosLikeV1WhileLoop(self, op, index): ...
    def PostProcessing(self) -> None: ...

def MaybeCreateControlFlowState(between_op_list, between_ops, colocate_gradients_with_ops): ...
def ZerosLike(op, index): ...
