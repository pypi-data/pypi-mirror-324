from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

def case(branch_index, input, Tout, branches, output_shapes=..., name: Any | None = ...): ...

Case: Any

def case_eager_fallback(branch_index, input, Tout, branches, output_shapes, name, ctx): ...
def device_index(device_names, name: Any | None = ...): ...

DeviceIndex: Any

def device_index_eager_fallback(device_names, name, ctx): ...
def fake_param(dtype, shape, name: Any | None = ...): ...

FakeParam: Any

def fake_param_eager_fallback(dtype, shape, name, ctx): ...

For: Any
If: Any

def partitioned_call(args, Tout, f, config: str = ..., config_proto: str = ..., executor_type: str = ..., name: Any | None = ...): ...

PartitionedCall: Any

def partitioned_call_eager_fallback(args, Tout, f, config, config_proto, executor_type, name, ctx): ...
def remote_call(target, args, Tout, f, name: Any | None = ...): ...

RemoteCall: Any

def remote_call_eager_fallback(target, args, Tout, f, name, ctx): ...
def stateful_partitioned_call(args, Tout, f, config: str = ..., config_proto: str = ..., executor_type: str = ..., name: Any | None = ...): ...

StatefulPartitionedCall: Any

def stateful_partitioned_call_eager_fallback(args, Tout, f, config, config_proto, executor_type, name, ctx): ...
def stateless_case(branch_index, input, Tout, branches, output_shapes=..., name: Any | None = ...): ...

StatelessCase: Any

def stateless_case_eager_fallback(branch_index, input, Tout, branches, output_shapes, name, ctx): ...
def stateless_if(cond, input, Tout, then_branch, else_branch, output_shapes=..., name: Any | None = ...): ...

StatelessIf: Any

def stateless_if_eager_fallback(cond, input, Tout, then_branch, else_branch, output_shapes, name, ctx): ...
def stateless_while(input, cond, body, output_shapes=..., parallel_iterations: int = ..., name: Any | None = ...): ...

StatelessWhile: Any

def stateless_while_eager_fallback(input, cond, body, output_shapes, parallel_iterations, name, ctx): ...
def symbolic_gradient(input, Tout, f, name: Any | None = ...): ...

SymbolicGradient: Any

def symbolic_gradient_eager_fallback(input, Tout, f, name, ctx): ...
def to_bool(input, name: Any | None = ...): ...

ToBool: Any

def to_bool_eager_fallback(input, name, ctx): ...

While: Any
