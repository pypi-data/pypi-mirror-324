from tensorflow.python.training.tracking import base as trackable
from typing import Any

def make_template(name_, func_, create_scope_now_: bool = ..., unique_name_: Any | None = ..., custom_getter_: Any | None = ..., **kwargs): ...

class Template(trackable.Trackable):
    def __init__(self, name, func, create_scope_now: bool = ..., unique_name: Any | None = ..., custom_getter: Any | None = ..., create_graph_function: bool = ...) -> None: ...
    def __call__(self, *args, **kwargs): ...
    @property
    def name(self): ...
    @property
    def func(self): ...
    @property
    def variable_scope(self): ...
    @property
    def variable_scope_name(self): ...
    @property
    def variables(self): ...
    @property
    def trainable_variables(self): ...
    @property
    def non_trainable_variables(self): ...
    @property
    def global_variables(self): ...
    @property
    def local_variables(self): ...
    @property
    def weights(self): ...
    @property
    def trainable_weights(self): ...
    @property
    def non_trainable_weights(self): ...
    @property
    def var_scope(self): ...

class _EagerTemplateVariableStore:
    def __init__(self, variable_scope_name) -> None: ...
    def set_variable_scope_name(self, variable_scope_name) -> None: ...
    def as_default(self) -> None: ...
    def variables(self): ...
    def trainable_variables(self): ...
    def non_trainable_variables(self): ...

class EagerTemplate(Template):
    def __init__(self, name, func, create_scope_now: bool = ..., custom_getter: Any | None = ..., create_graph_function: bool = ...) -> None: ...
    def __call__(self, *args, **kwargs): ...
    @property
    def variables(self): ...
    @property
    def trainable_variables(self): ...
    @property
    def non_trainable_variables(self): ...
    @property
    def global_variables(self): ...
    @property
    def local_variables(self): ...
