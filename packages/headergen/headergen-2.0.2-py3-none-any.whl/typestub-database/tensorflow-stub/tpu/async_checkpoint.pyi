from tensorflow.core.util import event_pb2 as event_pb2
from tensorflow.python.client import session as session_lib
from tensorflow.python.framework import meta_graph as meta_graph, ops as ops
from tensorflow.python.training import basic_session_run_hooks as basic_session_run_hooks, monitored_session as monitored_session, saver as saver_lib, session_run_hook as session_run_hook, training_util as training_util
from tensorflow.python.training.summary_io import SummaryWriterCache as SummaryWriterCache
from typing import Any, List, Optional, Text

class AsyncCheckpointSaverHook(basic_session_run_hooks.CheckpointSaverHook):
    def __init__(self, checkpoint_dir: Text, save_secs: Optional[int] = ..., save_steps: Optional[int] = ..., saver: Optional[saver_lib.Saver] = ..., checkpoint_basename: Text = ..., scaffold: Optional[monitored_session.Scaffold] = ..., listeners: Optional[List[basic_session_run_hooks.CheckpointSaverListener]] = ...) -> None: ...
    def begin(self) -> None: ...
    def after_create_session(self, session: session_lib.Session, coord: Any): ...
    def before_run(self, run_context: Any): ...
    def after_run(self, run_context: session_run_hook.SessionRunContext, run_values: Any): ...
    def end(self, session: session_lib.Session): ...
