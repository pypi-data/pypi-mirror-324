from tensorflow.python.autograph.pyct import anno as anno, qual_names as qual_names, transformer as transformer
from tensorflow.python.autograph.pyct.static_analysis.annos import NodeAnno as NodeAnno
from typing import Any

class Scope:
    parent: Any
    isolated: Any
    function_name: Any
    isolated_names: Any
    read: Any
    modified: Any
    deleted: Any
    bound: Any
    globals: Any
    nonlocals: Any
    annotations: Any
    params: Any
    is_final: bool
    def __init__(self, parent, isolated: bool = ..., function_name: Any | None = ...) -> None: ...
    @property
    def enclosing_scope(self): ...
    @property
    def referenced(self): ...
    @property
    def free_vars(self): ...
    def copy_from(self, other) -> None: ...
    @classmethod
    def copy_of(cls, other): ...
    def merge_from(self, other) -> None: ...
    def finalize(self) -> None: ...
    def mark_param(self, name, owner) -> None: ...

class _Comprehension:
    no_root: bool
    is_list_comp: bool
    targets: Any
    def __init__(self) -> None: ...

class _FunctionOrClass:
    node: Any
    def __init__(self) -> None: ...

class ActivityAnalyzer(transformer.Base):
    allow_skips: bool
    scope: Any
    def __init__(self, context, parent_scope: Any | None = ...) -> None: ...
    def visit_Import(self, node): ...
    def visit_ImportFrom(self, node): ...
    def visit_Global(self, node): ...
    def visit_Nonlocal(self, node): ...
    def visit_Expr(self, node): ...
    def visit_Raise(self, node): ...
    def visit_Return(self, node): ...
    def visit_Assign(self, node): ...
    def visit_AnnAssign(self, node): ...
    def visit_AugAssign(self, node): ...
    def visit_Delete(self, node): ...
    def visit_Name(self, node): ...
    def visit_alias(self, node): ...
    def visit_Attribute(self, node): ...
    def visit_Subscript(self, node): ...
    def visit_Print(self, node): ...
    def visit_Assert(self, node): ...
    def visit_Call(self, node): ...
    def visit_comprehension(self, node): ...
    def visit_DictComp(self, node): ...
    def visit_ListComp(self, node): ...
    def visit_SetComp(self, node): ...
    def visit_GeneratorExp(self, node): ...
    def visit_ClassDef(self, node): ...
    def visit_FunctionDef(self, node): ...
    def visit_Lambda(self, node): ...
    def visit_With(self, node): ...
    def visit_withitem(self, node): ...
    def visit_If(self, node): ...
    def visit_For(self, node): ...
    def visit_While(self, node): ...
    def visit_ExceptHandler(self, node): ...

def resolve(node, context, parent_scope: Any | None = ...): ...
