from typing import Any

def make_decorator(target, decorator_func, decorator_name: Any | None = ..., decorator_doc: str = ..., decorator_argspec: Any | None = ...): ...
def rewrap(decorator_func, previous_target, new_target): ...
def unwrap(maybe_tf_decorator): ...

class TFDecorator:
    __name__: Any
    __qualname__: Any
    __doc__: Any
    def __init__(self, decorator_name, target, decorator_doc: str = ..., decorator_argspec: Any | None = ...) -> None: ...
    def __get__(self, instance, owner): ...
    def __call__(self, *args, **kwargs): ...
    @property
    def decorated_target(self): ...
    @decorated_target.setter
    def decorated_target(self, decorated_target) -> None: ...
    @property
    def decorator_name(self): ...
    @property
    def decorator_doc(self): ...
    @property
    def decorator_argspec(self): ...
