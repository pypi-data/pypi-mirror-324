from tensorflow.python.util.compat import collections_abc as collections_abc
from typing import Any

class _ObjectIdentityWrapper:
    def __init__(self, wrapped) -> None: ...
    @property
    def unwrapped(self): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class _WeakObjectIdentityWrapper(_ObjectIdentityWrapper):
    def __init__(self, wrapped) -> None: ...
    @property
    def unwrapped(self): ...

class Reference(_ObjectIdentityWrapper):
    unwrapped: Any
    def deref(self): ...

class ObjectIdentityDictionary(collections_abc.MutableMapping):
    def __init__(self) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...

class ObjectIdentityWeakKeyDictionary(ObjectIdentityDictionary):
    def __len__(self): ...
    def __iter__(self): ...

class ObjectIdentitySet(collections_abc.MutableSet):
    def __init__(self, *args) -> None: ...
    def __contains__(self, key): ...
    def discard(self, key) -> None: ...
    def add(self, key) -> None: ...
    def update(self, items) -> None: ...
    def clear(self) -> None: ...
    def intersection(self, items): ...
    def difference(self, items): ...
    def __len__(self): ...
    def __iter__(self): ...

class ObjectIdentityWeakSet(ObjectIdentitySet):
    def __len__(self): ...
    def __iter__(self): ...
