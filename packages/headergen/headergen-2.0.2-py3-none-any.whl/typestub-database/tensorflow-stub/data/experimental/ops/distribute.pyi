from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.data.ops.options import ExternalStatePolicy as ExternalStatePolicy
from tensorflow.python.data.util import nest as nest
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

SHARD_HINT: int

class _AutoShardDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset, num_workers, index, num_replicas: Any | None = ...) -> None: ...
    @property
    def element_spec(self): ...

class _RebatchDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset, batch_sizes, drop_remainder: bool = ...): ...
    @property
    def element_spec(self): ...

class _LegacyRebatchDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset, num_replicas): ...
    @property
    def element_spec(self): ...

class _RemoteDataset(dataset_ops.DatasetSource):
    def __init__(self, graph_def, device, element_spec) -> None: ...
    @property
    def element_spec(self): ...

def replicate(dataset, devices): ...
def batch_sizes_for_worker(global_batch_size, num_workers, num_replicas_per_worker, worker_index): ...
def compute_batch_size(dataset): ...
