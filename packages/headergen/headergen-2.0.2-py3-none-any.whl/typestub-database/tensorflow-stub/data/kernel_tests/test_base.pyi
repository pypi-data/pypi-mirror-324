from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.data.util import nest as nest, structure as structure
from tensorflow.python.eager import context as context
from tensorflow.python.framework import combinations as combinations, config as config, constant_op as constant_op, dtypes as dtypes, errors as errors, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, gen_dataset_ops as gen_dataset_ops, gen_experimental_dataset_ops as gen_experimental_dataset_ops, lookup_ops as lookup_ops, tensor_array_ops as tensor_array_ops
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor
from tensorflow.python.platform import test as test
from typing import Any

def default_test_combinations(): ...
def eager_only_combinations(): ...
def graph_only_combinations(): ...
def v1_only_combinations(): ...
def v2_only_combinations(): ...
def v2_eager_only_combinations(): ...

class DatasetTestBase(test.TestCase):
    def assert_op_cancelled(self, op) -> None: ...
    def assertValuesEqual(self, expected, actual) -> None: ...
    def getNext(self, dataset, requires_initialization: bool = ..., shared_name: Any | None = ...): ...
    def getDatasetOutput(self, dataset, requires_initialization: bool = ...): ...
    def getIteratorOutput(self, get_next): ...
    def assertDatasetProduces(self, dataset, expected_output: Any | None = ..., expected_shapes: Any | None = ..., expected_error: Any | None = ..., requires_initialization: bool = ..., num_test_iterations: int = ..., assert_items_equal: bool = ..., expected_error_iter: int = ...) -> None: ...
    def assertDatasetsEqual(self, dataset1, dataset2) -> None: ...
    def assertDatasetsRaiseSameError(self, dataset1, dataset2, exception_class, replacements: Any | None = ...) -> None: ...
    def structuredDataset(self, dataset_structure, shape: Any | None = ..., dtype=...): ...
    def textFileInitializer(self, vals): ...
    def keyValueTensorInitializer(self, vals): ...
    def datasetInitializer(self, vals): ...
    def lookupTableInitializer(self, init_source, vals): ...
    def graphRoundTrip(self, dataset, allow_stateful: bool = ...): ...
    def structuredElement(self, element_structure, shape: Any | None = ..., dtype=...): ...
    def checkDeterminism(self, dataset_fn, expect_determinism, expected_elements) -> None: ...
    def configureDevicesForMultiDeviceTest(self, num_devices): ...
