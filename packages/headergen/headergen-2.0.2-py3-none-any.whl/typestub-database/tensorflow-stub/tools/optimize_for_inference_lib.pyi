from tensorflow.core.framework import attr_value_pb2 as attr_value_pb2, graph_pb2 as graph_pb2, node_def_pb2 as node_def_pb2
from tensorflow.python.framework import dtypes as dtypes, graph_util as graph_util, tensor_util as tensor_util
from tensorflow.python.platform import flags as flags_lib, tf_logging as tf_logging
from tensorflow.python.tools import strip_unused_lib as strip_unused_lib
from typing import Any

flags = flags_lib
FLAGS: Any
INPUT_ORDER: Any
EPSILON_ATTR: Any

def optimize_for_inference(input_graph_def, input_node_names, output_node_names, placeholder_type_enum, toco_compatible: bool = ...): ...
def ensure_graph_is_valid(graph_def) -> None: ...
def node_name_from_input(node_name): ...
def node_from_map(node_map, name): ...
def values_from_const(node_def): ...
def scale_after_normalization(node): ...
def fold_batch_norms(input_graph_def): ...
def fuse_resize_and_conv(input_graph_def, output_node_names): ...
