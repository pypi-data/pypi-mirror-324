from tensorflow.python import pywrap_tfe as pywrap_tfe
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any

distribution_strategy_context: Any

class Tape:
    def __init__(self, tape) -> None: ...
    def watched_variables(self): ...

def push_new_tape(persistent: bool = ..., watch_accessed_variables: bool = ...): ...
def push_tape(tape) -> None: ...
def watch(tape, tensor) -> None: ...

class VariableWatcher:
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, typ, value, traceback) -> None: ...
    def watched_variables(self): ...

def watch_variable(tape, variable) -> None: ...
def variable_accessed(variable) -> None: ...
def variables_accessed(variables) -> None: ...
def pop_tape(tape) -> None: ...
def stop_recording() -> None: ...
def should_record_backprop(tensors): ...
def record_operation(op_type, output_tensors, input_tensors, backward_function, forward_function: Any | None = ...) -> None: ...
def record_operation_backprop_only(op_type, output_tensors, input_tensors, backward_function) -> None: ...
def record_operation_forwardprop_only(op_type, output_tensors, input_tensors, backward_function, forwardprop_output_indices) -> None: ...
def delete_trace(tensor_id) -> None: ...
def could_possibly_record(): ...
