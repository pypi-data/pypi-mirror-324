from tensorflow.core.framework import attr_value_pb2 as attr_value_pb2
from tensorflow.python.eager import context as context, execute as execute, tape as tape
from tensorflow.python.eager.graph_only_ops import graph_placeholder as graph_placeholder
from tensorflow.python.framework import auto_control_deps as auto_control_deps, composite_tensor as composite_tensor, constant_op as constant_op, dtypes as dtypes, errors as errors, ops as ops, tensor_spec as tensor_spec, tensor_util as tensor_util, type_spec as type_spec
from tensorflow.python.ops import array_ops as array_ops, handle_data_util as handle_data_util, resource_variable_ops as resource_variable_ops, tensor_array_ops as tensor_array_ops, variable_scope as variable_scope
from tensorflow.python.saved_model import save_context as save_context
from tensorflow.python.util import compat as compat, memory as memory, nest as nest, object_identity as object_identity, tf_contextlib as tf_contextlib, tf_decorator as tf_decorator
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

ALLOWLIST_COLLECTIONS: Any

class UnknownArgument: ...

def convert_structure_to_signature(structure, arg_names: Any | None = ...): ...

class FuncGraph(ops.Graph):
    name: Any
    inputs: Any
    outputs: Any
    control_outputs: Any
    control_captures: Any
    structured_input_signature: Any
    structured_outputs: Any
    is_control_flow_graph: bool
    capture_by_value: Any
    seed: Any
    def __init__(self, name, collections: Any | None = ..., capture_by_value: Any | None = ...) -> None: ...
    def watch_variable(self, v) -> None: ...
    def capture_call_time_value(self, closure, spec, key: Any | None = ..., default_value: Any | None = ..., placeholder: Any | None = ...): ...
    def control_dependencies(self, control_inputs): ...
    def as_default(self): ...
    @property
    def outer_graph(self): ...
    @outer_graph.setter
    def outer_graph(self, new_outer_graph) -> None: ...
    @property
    def output_types(self): ...
    @property
    def output_shapes(self): ...
    @property
    def trainable_variables(self): ...
    @property
    def variables(self): ...
    @variables.setter
    def variables(self, var_list) -> None: ...
    def capture(self, tensor, name: Any | None = ..., shape: Any | None = ...): ...
    @property
    def captures(self): ...
    def add_capture(self, tensor, placeholder) -> None: ...
    def replace_capture(self, tensor, placeholder) -> None: ...
    def replace_capture_with_deferred_capture(self, tensor, closure, spec, placeholder, default_value: Any | None = ...) -> None: ...
    def reset_captures(self, capture_list) -> None: ...
    def pop_capture(self, tensor): ...
    def clear_captures(self) -> None: ...
    def capture_distributed_variable(self, variable, placeholder): ...
    def capture_eager_tensor(self, tensor, name): ...
    def captured(self, tensor): ...
    @property
    def external_captures(self): ...
    @property
    def internal_captures(self): ...
    @property
    def deferred_external_captures(self): ...
    @property
    def deferred_internal_captures(self): ...
    @property
    def variable_captures(self): ...
    def mark_as_unsaveable(self, error_message) -> None: ...
    @property
    def saveable(self): ...
    @property
    def saving_errors(self): ...

def func_graph_from_py_func(name, python_func, args, kwargs, signature: Any | None = ..., func_graph: Any | None = ..., autograph: bool = ..., autograph_options: Any | None = ..., add_control_dependencies: bool = ..., arg_names: Any | None = ..., op_return_value: Any | None = ..., collections: Any | None = ..., capture_by_value: Any | None = ..., override_flat_arg_shapes: Any | None = ..., acd_record_initial_resource_uses: bool = ...): ...
def maybe_captured(tensor): ...
def device_stack_has_callable(device_stack): ...
def check_mutation(n1, n2, func) -> None: ...
def flatten(sequence): ...
def pack_sequence_as(structure, flat_sequence): ...
def dismantle_func_graph(func_graph) -> None: ...
def override_func_graph_name_scope(func_graph, name_scope) -> None: ...
