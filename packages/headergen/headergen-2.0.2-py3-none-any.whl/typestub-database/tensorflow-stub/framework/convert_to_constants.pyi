from tensorflow.core.framework import attr_value_pb2 as attr_value_pb2, graph_pb2 as graph_pb2, tensor_shape_pb2 as tensor_shape_pb2, variable_pb2 as variable_pb2
from tensorflow.core.protobuf import config_pb2 as config_pb2, meta_graph_pb2 as meta_graph_pb2, rewriter_config_pb2 as rewriter_config_pb2
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, errors as errors, graph_util as graph_util, ops as ops, tensor_util as tensor_util
from tensorflow.python.grappler import tf_optimizer as tf_optimizer
from tensorflow.python.ops import array_ops as array_ops, variables as variables
from tensorflow.python.training.saver import export_meta_graph as export_meta_graph
from tensorflow.python.util import lazy_loader as lazy_loader, object_identity as object_identity
from typing import Any

wrap_function: Any
VAR_ASSIGN_COLLECTION: str

class _TensorData:
    @property
    def dtype_attr(self): ...

class _EndPoint: ...
class _Edge: ...

class _Convertible:
    def __init__(self, enclosing_graph) -> None: ...
    def converted_self(self) -> None: ...
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...
    def create_edges(self) -> None: ...
    def add_outgoing_edge(self, edge) -> None: ...
    @property
    def converted_enclosing_graph(self): ...
    @property
    def outgoing_edges(self): ...

class _Function(_Convertible):
    def __init__(self, function, enclosing_graph) -> None: ...
    @property
    def function(self): ...
    @property
    def nodes(self): ...
    def converted_self(self): ...
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...
    def create_edges(self) -> None: ...

class _Node(_Convertible):
    def __init__(self, node, function, enclosing_graph) -> None: ...
    @staticmethod
    def new(node, function, enclosing_graph): ...
    @property
    def node(self): ...
    @property
    def container(self): ...
    def converted_self(self): ...
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...
    def create_edges(self) -> None: ...
    def resolve_input(self, input_name): ...
    def update_dtype(self, attr_name, index, dtype) -> None: ...

class _Intermediate(_Node):
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _Merge(_Node):
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _VarHandle(_Node):
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _ResourceGather(_Node):
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _ResourceGatherNd(_Node):
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _ReadVariable(_Node):
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _FunctionCaller(_Node):
    def __init__(self, node, function, enclosing_graph, first_function_input, type_attribute, function_attributes) -> None: ...
    def converted_self(self): ...
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...
    def create_edges(self) -> None: ...

class _If(_FunctionCaller):
    def __init__(self, node, function, enclosing_graph) -> None: ...

class _Case(_FunctionCaller):
    def __init__(self, node, function, enclosing_graph) -> None: ...

class _PartitionedCall(_FunctionCaller):
    def __init__(self, node, function, enclosing_graph) -> None: ...

class _While(_FunctionCaller):
    def __init__(self, node, function, enclosing_graph) -> None: ...
    def convert_variable_to_constant(self, incoming_edge, tensor_data) -> None: ...

class _GraphDef(_Convertible):
    def __init__(self, graph_def) -> None: ...
    @property
    def graph_def(self): ...
    @property
    def nodes(self): ...
    @property
    def functions(self): ...
    @property
    def converted_function_names(self): ...
    def rename_function(self, old_name, new_name) -> None: ...
    def converted_self(self): ...
    def create_edges(self) -> None: ...

class _ConverterData:
    def __init__(self, graph_def, variable_names_allowlist: Any | None = ..., variable_names_denylist: Any | None = ...) -> None: ...
    @property
    def graph_def(self): ...
    @property
    def node_defs(self): ...
    @property
    def tensor_data(self): ...

class _FunctionConverterData(_ConverterData):
    def __init__(self, func, lower_control_flow, aggressive_inlining, variable_names_allowlist: Any | None = ..., variable_names_denylist: Any | None = ...) -> None: ...

class _FunctionConverterDataInEager(_FunctionConverterData): ...

class _FunctionConverterDataInGraph(_FunctionConverterData):
    def __init__(self, func, lower_control_flow, aggressive_inlining, variable_names_allowlist: Any | None = ..., variable_names_denylist: Any | None = ..., session: Any | None = ...) -> None: ...

class _SessionConverterData(_ConverterData):
    def __init__(self, session, graph_def, output_node_names, variable_names_allowlist: Any | None = ..., variable_names_denylist: Any | None = ...) -> None: ...

def disable_lower_using_switch_merge(graph_def): ...
def convert_variables_to_constants_v2(func, lower_control_flow: bool = ..., aggressive_inlining: bool = ...): ...
def convert_var_to_const_function_in_v1(func, lower_control_flow: bool = ..., aggressive_inlining: bool = ...): ...
def convert_variables_to_constants_v2_as_graph(func, lower_control_flow: bool = ..., aggressive_inlining: bool = ...): ...
def convert_variables_to_constants_from_session_graph(session, graph_def, output_node_names, variable_names_allowlist: Any | None = ..., variable_names_denylist: Any | None = ...): ...
