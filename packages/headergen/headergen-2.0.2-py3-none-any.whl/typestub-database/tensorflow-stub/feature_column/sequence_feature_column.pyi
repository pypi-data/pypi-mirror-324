from tensorflow.python.feature_column import feature_column_v2 as fc
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, parsing_ops as parsing_ops, sparse_ops as sparse_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

def concatenate_context_input(context_input, sequence_input): ...
def sequence_categorical_column_with_identity(key, num_buckets, default_value: Any | None = ...): ...
def sequence_categorical_column_with_hash_bucket(key, hash_bucket_size, dtype=...): ...
def sequence_categorical_column_with_vocabulary_file(key, vocabulary_file, vocabulary_size: Any | None = ..., num_oov_buckets: int = ..., default_value: Any | None = ..., dtype=...): ...
def sequence_categorical_column_with_vocabulary_list(key, vocabulary_list, dtype: Any | None = ..., default_value: int = ..., num_oov_buckets: int = ...): ...
def sequence_numeric_column(key, shape=..., default_value: float = ..., dtype=..., normalizer_fn: Any | None = ...): ...

class SequenceNumericColumn(fc.SequenceDenseColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache, state_manager): ...
    @property
    def variable_shape(self): ...
    def get_sequence_dense_tensor(self, transformation_cache, state_manager): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config, custom_objects: Any | None = ..., columns_by_name: Any | None = ...): ...
