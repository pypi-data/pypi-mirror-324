from sklearn.datasets import make_classification as make_classification
from sklearn.dummy import DummyClassifier as DummyClassifier
from sklearn.experimental import enable_halving_search_cv as enable_halving_search_cv
from sklearn.model_selection import GroupKFold as GroupKFold, GroupShuffleSplit as GroupShuffleSplit, HalvingGridSearchCV as HalvingGridSearchCV, HalvingRandomSearchCV as HalvingRandomSearchCV, KFold as KFold, LeaveOneGroupOut as LeaveOneGroupOut, LeavePGroupsOut as LeavePGroupsOut, ShuffleSplit as ShuffleSplit, StratifiedKFold as StratifiedKFold, StratifiedShuffleSplit as StratifiedShuffleSplit
from sklearn.svm import LinearSVC as LinearSVC
from typing import Any

class FastClassifier(DummyClassifier):
    def __init__(self, strategy: str = ..., random_state: Any | None = ..., constant: Any | None = ..., **kwargs) -> None: ...
    def get_params(self, deep: bool = ...): ...

def test_aggressive_elimination(Est, aggressive_elimination, max_resources, expected_n_iterations, expected_n_required_iterations, expected_n_possible_iterations, expected_n_remaining_candidates, expected_n_candidates, expected_n_resources) -> None: ...
def test_min_max_resources(Est, min_resources, max_resources, expected_n_iterations, expected_n_possible_iterations, expected_n_resources) -> None: ...
def test_n_iterations(Est, max_resources, n_iterations, n_possible_iterations) -> None: ...
def test_resource_parameter(Est) -> None: ...
def test_random_search(max_resources, n_candidates, expected_n_candidates) -> None: ...
def test_random_search_discrete_distributions(param_distributions, expected_n_candidates) -> None: ...
def test_input_errors(Est, params, expected_error_message) -> None: ...
def test_input_errors_randomized(params, expected_error_message) -> None: ...
def test_subsample_splitter_shapes(fraction, subsample_test, expected_train_size, expected_test_size) -> None: ...
def test_subsample_splitter_determinism(subsample_test) -> None: ...
def test_top_k(k, itr, expected) -> None: ...
def test_cv_results(Est): ...
def test_base_estimator_inputs(Est): ...
def test_groups_support(Est) -> None: ...
def test_min_resources_null(SearchCV) -> None: ...
def test_select_best_index(SearchCV) -> None: ...
