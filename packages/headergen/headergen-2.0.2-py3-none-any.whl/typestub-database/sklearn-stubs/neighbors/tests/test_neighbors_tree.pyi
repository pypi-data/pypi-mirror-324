from sklearn.metrics import DistanceMetric as DistanceMetric
from sklearn.neighbors._ball_tree import BallTree as BallTree, DTYPE as DTYPE, ITYPE as ITYPE, kernel_norm as kernel_norm
from sklearn.neighbors._kd_tree import KDTree as KDTree
from sklearn.utils import check_random_state as check_random_state
from typing import Any

rng: Any
V_mahalanobis: Any
DIMENSION: int
METRICS: Any
KD_TREE_METRICS: Any
BALL_TREE_METRICS: Any

def dist_func(x1, x2, p): ...
def compute_kernel_slow(Y, X, kernel, h): ...
def brute_force_neighbors(X, Y, k, metric, **kwargs): ...
def test_kernel_density(Cls, kernel, h, rtol, atol, breadth_first, n_samples: int = ..., n_features: int = ...) -> None: ...
def test_neighbor_tree_query_radius(Cls, n_samples: int = ..., n_features: int = ...) -> None: ...
def test_neighbor_tree_query_radius_distance(Cls, n_samples: int = ..., n_features: int = ...) -> None: ...
def test_neighbor_tree_two_point(Cls, dualtree, n_samples: int = ..., n_features: int = ...) -> None: ...
def test_neighbors_heap(NeighborsHeap, n_pts: int = ..., n_nbrs: int = ...) -> None: ...
def test_node_heap(nodeheap_sort, n_nodes: int = ...) -> None: ...
def test_simultaneous_sort(simultaneous_sort, n_rows: int = ..., n_pts: int = ...) -> None: ...
def test_gaussian_kde(Cls, n_samples: int = ...) -> None: ...
def test_nn_tree_query(Cls, metric, k, dualtree, breadth_first) -> None: ...
def test_pickle(Cls, metric, protocol) -> None: ...
