from sklearn import datasets as datasets
from sklearn.base import BaseEstimator as BaseEstimator, ClassifierMixin as ClassifierMixin, clone as clone
from sklearn.datasets import make_multilabel_classification as make_multilabel_classification
from sklearn.dummy import DummyRegressor as DummyRegressor
from sklearn.ensemble import RandomForestClassifier as RandomForestClassifier, RandomForestRegressor as RandomForestRegressor, VotingClassifier as VotingClassifier, VotingRegressor as VotingRegressor
from sklearn.exceptions import NotFittedError as NotFittedError
from sklearn.linear_model import LinearRegression as LinearRegression, LogisticRegression as LogisticRegression
from sklearn.model_selection import GridSearchCV as GridSearchCV, cross_val_score as cross_val_score, train_test_split as train_test_split
from sklearn.multiclass import OneVsRestClassifier as OneVsRestClassifier
from sklearn.naive_bayes import GaussianNB as GaussianNB
from sklearn.neighbors import KNeighborsClassifier as KNeighborsClassifier
from sklearn.svm import SVC as SVC
from sklearn.tree import DecisionTreeClassifier as DecisionTreeClassifier, DecisionTreeRegressor as DecisionTreeRegressor
from sklearn.utils._testing import assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal
from typing import Any

iris: Any
X: Any
y: Any
X_r: Any
y_r: Any

def test_voting_classifier_estimator_init(params, err_msg) -> None: ...
def test_predictproba_hardvoting() -> None: ...
def test_notfitted() -> None: ...
def test_majority_label_iris() -> None: ...
def test_tie_situation() -> None: ...
def test_weights_iris() -> None: ...
def test_weights_regressor() -> None: ...
def test_predict_on_toy_problem() -> None: ...
def test_predict_proba_on_toy_problem() -> None: ...
def test_multilabel() -> None: ...
def test_gridsearch() -> None: ...
def test_parallel_fit() -> None: ...
def test_sample_weight() -> None: ...
def test_sample_weight_kwargs() -> None: ...
def test_voting_classifier_set_params() -> None: ...
def test_set_estimator_drop() -> None: ...
def test_estimator_weights_format() -> None: ...
def test_transform() -> None: ...
def test_none_estimator_with_weights(X, y, voter) -> None: ...
def test_n_features_in(est) -> None: ...
def test_voting_verbose(estimator, capsys) -> None: ...
