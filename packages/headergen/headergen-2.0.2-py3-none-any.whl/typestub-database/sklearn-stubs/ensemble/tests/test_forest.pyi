from sklearn import datasets as datasets
from sklearn.datasets import make_classification as make_classification
from sklearn.decomposition import TruncatedSVD as TruncatedSVD
from sklearn.dummy import DummyRegressor as DummyRegressor
from sklearn.ensemble import ExtraTreesClassifier as ExtraTreesClassifier, ExtraTreesRegressor as ExtraTreesRegressor, RandomForestClassifier as RandomForestClassifier, RandomForestRegressor as RandomForestRegressor, RandomTreesEmbedding as RandomTreesEmbedding
from sklearn.exceptions import NotFittedError as NotFittedError
from sklearn.metrics import mean_poisson_deviance as mean_poisson_deviance, mean_squared_error as mean_squared_error
from sklearn.model_selection import GridSearchCV as GridSearchCV, train_test_split as train_test_split
from sklearn.svm import LinearSVC as LinearSVC
from sklearn.tree._classes import SPARSE_SPLITTERS as SPARSE_SPLITTERS
from sklearn.utils._testing import assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal, ignore_warnings as ignore_warnings, skip_if_no_parallel as skip_if_no_parallel
from sklearn.utils.fixes import parse_version as parse_version
from sklearn.utils.validation import check_random_state as check_random_state
from typing import Any, Dict

X: Any
y: Any
T: Any
true_result: Any
X_large: Any
y_large: Any
iris: Any
rng: Any
perm: Any
X_reg: Any
y_reg: Any
hastie_X: Any
hastie_y: Any
DEFAULT_JOBLIB_BACKEND: Any
FOREST_CLASSIFIERS: Any
FOREST_REGRESSORS: Any
FOREST_TRANSFORMERS: Any
FOREST_ESTIMATORS: Dict[str, Any]
FOREST_CLASSIFIERS_REGRESSORS: Dict[str, Any]

def check_classification_toy(name) -> None: ...
def test_classification_toy(name) -> None: ...
def check_iris_criterion(name, criterion) -> None: ...
def test_iris(name, criterion) -> None: ...
def check_regression_criterion(name, criterion) -> None: ...
def test_regression(name, criterion) -> None: ...
def test_poisson_vs_mse() -> None: ...
def test_balance_property_random_forest(criterion) -> None: ...
def check_regressor_attributes(name) -> None: ...
def test_regressor_attributes(name) -> None: ...
def check_probability(name) -> None: ...
def test_probability(name) -> None: ...
def check_importances(name, criterion, dtype, tolerance) -> None: ...
def test_importances(dtype, name, criterion) -> None: ...
def test_importances_asymptotic(): ...
def test_unfitted_feature_importances(name) -> None: ...
def test_forest_classifier_oob(ForestClassifier, X, y, X_type, lower_bound_accuracy) -> None: ...
def test_forest_regressor_oob(ForestRegressor, X, y, X_type, lower_bound_r2) -> None: ...
def test_forest_oob_warning(ForestEstimator) -> None: ...
def test_forest_oob_error(ForestEstimator, X, y, params, err_msg) -> None: ...
def test_random_trees_embedding_raise_error_oob(oob_score) -> None: ...
def check_gridsearch(name) -> None: ...
def test_gridsearch(name) -> None: ...
def check_parallel(name, X, y) -> None: ...
def test_parallel(name) -> None: ...
def check_pickle(name, X, y) -> None: ...
def test_pickle(name) -> None: ...
def check_multioutput(name) -> None: ...
def test_multioutput(name) -> None: ...
def test_multioutput_string(name) -> None: ...
def check_classes_shape(name) -> None: ...
def test_classes_shape(name) -> None: ...
def test_random_trees_dense_type() -> None: ...
def test_random_trees_dense_equal() -> None: ...
def test_random_hasher() -> None: ...
def test_random_hasher_sparse_data() -> None: ...
def test_parallel_train() -> None: ...
def test_distribution() -> None: ...
def check_max_leaf_nodes_max_depth(name) -> None: ...
def test_max_leaf_nodes_max_depth(name) -> None: ...
def check_min_samples_split(name) -> None: ...
def test_min_samples_split(name) -> None: ...
def check_min_samples_leaf(name) -> None: ...
def test_min_samples_leaf(name) -> None: ...
def check_min_weight_fraction_leaf(name) -> None: ...
def test_min_weight_fraction_leaf(name) -> None: ...
def check_sparse_input(name, X, X_sparse, y) -> None: ...
def test_sparse_input(name, sparse_matrix) -> None: ...
def check_memory_layout(name, dtype) -> None: ...
def test_memory_layout(name, dtype) -> None: ...
def check_1d_input(name, X, X_2d, y) -> None: ...
def test_1d_input(name) -> None: ...
def check_class_weights(name) -> None: ...
def test_class_weights(name) -> None: ...
def check_class_weight_balanced_and_bootstrap_multi_output(name) -> None: ...
def test_class_weight_balanced_and_bootstrap_multi_output(name) -> None: ...
def check_class_weight_errors(name) -> None: ...
def test_class_weight_errors(name) -> None: ...
def check_warm_start(name, random_state: int = ...) -> None: ...
def test_warm_start(name) -> None: ...
def check_warm_start_clear(name) -> None: ...
def test_warm_start_clear(name) -> None: ...
def check_warm_start_smaller_n_estimators(name) -> None: ...
def test_warm_start_smaller_n_estimators(name) -> None: ...
def check_warm_start_equal_n_estimators(name) -> None: ...
def test_warm_start_equal_n_estimators(name) -> None: ...
def check_warm_start_oob(name) -> None: ...
def test_warm_start_oob(name) -> None: ...
def test_dtype_convert(n_classes: int = ...) -> None: ...
def check_decision_path(name) -> None: ...
def test_decision_path(name) -> None: ...
def test_min_impurity_decrease() -> None: ...
def test_poisson_y_positive_check() -> None: ...

class MyBackend(DEFAULT_JOBLIB_BACKEND):
    count: int
    def __init__(self, *args, **kwargs) -> None: ...
    def start_call(self): ...

def test_backend_respected() -> None: ...
def test_forest_feature_importances_sum() -> None: ...
def test_forest_degenerate_feature_importances() -> None: ...
def test_max_samples_bootstrap(name) -> None: ...
def test_max_samples_exceptions(name, max_samples, exc_type, exc_msg) -> None: ...
def test_max_samples_boundary_regressors(name) -> None: ...
def test_max_samples_boundary_classifiers(name) -> None: ...
def test_forest_y_sparse() -> None: ...
def test_little_tree_with_small_max_samples(ForestClass) -> None: ...
def test_n_features_deprecation(Estimator) -> None: ...
def test_criterion_deprecated(old_criterion, new_criterion) -> None: ...
def test_mse_criterion_object_segfault_smoke_test(Forest) -> None: ...
