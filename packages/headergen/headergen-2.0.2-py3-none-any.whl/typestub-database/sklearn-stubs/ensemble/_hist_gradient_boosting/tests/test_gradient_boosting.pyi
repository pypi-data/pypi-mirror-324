from sklearn.base import BaseEstimator as BaseEstimator, TransformerMixin as TransformerMixin, clone as clone, is_regressor as is_regressor
from sklearn.compose import make_column_transformer as make_column_transformer
from sklearn.datasets import make_classification as make_classification, make_low_rank_matrix as make_low_rank_matrix, make_regression as make_regression
from sklearn.dummy import DummyRegressor as DummyRegressor
from sklearn.ensemble import HistGradientBoostingClassifier as HistGradientBoostingClassifier, HistGradientBoostingRegressor as HistGradientBoostingRegressor
from sklearn.ensemble._hist_gradient_boosting.grower import TreeGrower as TreeGrower
from sklearn.ensemble._hist_gradient_boosting.loss import BinaryCrossEntropy as BinaryCrossEntropy, LeastSquares as LeastSquares
from sklearn.exceptions import NotFittedError as NotFittedError
from sklearn.metrics import mean_poisson_deviance as mean_poisson_deviance
from sklearn.model_selection import cross_val_score as cross_val_score, train_test_split as train_test_split
from sklearn.pipeline import make_pipeline as make_pipeline
from sklearn.preprocessing import KBinsDiscretizer as KBinsDiscretizer, MinMaxScaler as MinMaxScaler, OneHotEncoder as OneHotEncoder
from sklearn.utils import shuffle as shuffle
from typing import Any

n_threads: Any
X_classification: Any
y_classification: Any
X_regression: Any
y_regression: Any
X_multi_classification: Any
y_multi_classification: Any

def test_init_parameters_validation(GradientBoosting, X, y, params, err_msg) -> None: ...
def test_invalid_classification_loss() -> None: ...
def test_early_stopping_regression(scoring, validation_fraction, early_stopping, n_iter_no_change, tol) -> None: ...
def test_early_stopping_classification(data, scoring, validation_fraction, early_stopping, n_iter_no_change, tol) -> None: ...
def test_early_stopping_default(GradientBoosting, X, y) -> None: ...
def test_should_stop(scores, n_iter_no_change, tol, stopping) -> None: ...
def test_absolute_error() -> None: ...
def test_absolute_error_sample_weight() -> None: ...
def test_poisson_y_positive(y) -> None: ...
def test_poisson() -> None: ...
def test_binning_train_validation_are_separated() -> None: ...
def test_missing_values_trivial() -> None: ...
def test_missing_values_resilience(problem, missing_proportion, expected_min_score_classification, expected_min_score_regression) -> None: ...
def test_zero_division_hessians(data) -> None: ...
def test_small_trainset() -> None: ...
def test_missing_values_minmax_imputation(): ...
def test_infinite_values() -> None: ...
def test_consistent_lengths() -> None: ...
def test_infinite_values_missing_values() -> None: ...
def test_crossentropy_binary_problem() -> None: ...
def test_string_target_early_stopping(scoring) -> None: ...
def test_zero_sample_weights_regression() -> None: ...
def test_zero_sample_weights_classification() -> None: ...
def test_sample_weight_effect(problem, duplication) -> None: ...
def test_sum_hessians_are_sample_weight(loss_name) -> None: ...
def test_max_depth_max_leaf_nodes() -> None: ...
def test_early_stopping_on_test_set_with_warm_start() -> None: ...
def test_single_node_trees(Est) -> None: ...
def test_custom_loss(Est, loss, X, y) -> None: ...
def test_staged_predict(HistGradientBoosting, X, y) -> None: ...
def test_unknown_categories_nan(insert_missing, Est, bool_categorical_parameter) -> None: ...
def test_categorical_encoding_strategies() -> None: ...
def test_categorical_spec_errors(Est, categorical_features, monotonic_cst, expected_msg) -> None: ...
def test_categorical_spec_no_categories(Est, categorical_features, as_array) -> None: ...
def test_categorical_bad_encoding_errors(Est) -> None: ...
def test_uint8_predict(Est) -> None: ...
def test_loss_deprecated(old_loss, new_loss) -> None: ...
