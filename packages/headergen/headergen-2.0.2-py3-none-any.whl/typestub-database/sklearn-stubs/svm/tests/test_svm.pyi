from sklearn import base as base, datasets as datasets, linear_model as linear_model, metrics as metrics, svm as svm
from sklearn.datasets import make_blobs as make_blobs, make_classification as make_classification
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning, NotFittedError as NotFittedError, UndefinedMetricWarning as UndefinedMetricWarning
from sklearn.metrics import f1_score as f1_score
from sklearn.metrics.pairwise import rbf_kernel as rbf_kernel
from sklearn.model_selection import train_test_split as train_test_split
from sklearn.multiclass import OneVsRestClassifier as OneVsRestClassifier
from sklearn.svm import LinearSVC as LinearSVC, LinearSVR as LinearSVR
from sklearn.utils import check_random_state as check_random_state, shuffle as shuffle
from sklearn.utils._testing import ignore_warnings as ignore_warnings
from typing import Any

X: Any
Y: Any
T: Any
true_result: Any
iris: Any
rng: Any
perm: Any

def test_libsvm_parameters() -> None: ...
def test_libsvm_iris() -> None: ...
def test_precomputed(): ...
def test_svr() -> None: ...
def test_linearsvr() -> None: ...
def test_linearsvr_fit_sampleweight() -> None: ...
def test_svr_errors(): ...
def test_oneclass(): ...
def test_oneclass_decision_function() -> None: ...
def test_oneclass_score_samples() -> None: ...
def test_oneclass_fit_params_is_deprecated() -> None: ...
def test_tweak_params() -> None: ...
def test_probability() -> None: ...
def test_decision_function() -> None: ...
def test_decision_function_shape(SVM) -> None: ...
def test_svr_predict() -> None: ...
def test_weight() -> None: ...
def test_svm_classifier_sided_sample_weight(estimator) -> None: ...
def test_svm_regressor_sided_sample_weight(estimator) -> None: ...
def test_svm_equivalence_sample_weight_C() -> None: ...
def test_negative_sample_weights_mask_all_samples(Estimator, err_msg, sample_weight) -> None: ...
def test_negative_weights_svc_leave_just_one_label(Classifier, err_msg, sample_weight) -> None: ...
def test_negative_weights_svc_leave_two_labels(Classifier, model, sample_weight, mask_side) -> None: ...
def test_negative_weight_equal_coeffs(Estimator, sample_weight) -> None: ...
def test_auto_weight() -> None: ...
def test_bad_input() -> None: ...
def test_svm_gamma_error(Estimator, data) -> None: ...
def test_unicode_kernel() -> None: ...
def test_sparse_precomputed() -> None: ...
def test_sparse_fit_support_vectors_empty() -> None: ...
def test_linearsvc_parameters() -> None: ...
def test_linear_svx_uppercase_loss_penality_raises_error() -> None: ...
def test_linearsvc() -> None: ...
def test_linearsvc_crammer_singer() -> None: ...
def test_linearsvc_fit_sampleweight() -> None: ...
def test_crammer_singer_binary() -> None: ...
def test_linearsvc_iris() -> None: ...
def test_dense_liblinear_intercept_handling(classifier=...) -> None: ...
def test_liblinear_set_coef() -> None: ...
def test_immutable_coef_property() -> None: ...
def test_linearsvc_verbose() -> None: ...
def test_svc_clone_with_callable_kernel(): ...
def test_svc_bad_kernel(): ...
def test_timeout(): ...
def test_unfitted() -> None: ...
def test_consistent_proba() -> None: ...
def test_linear_svm_convergence_warnings() -> None: ...
def test_svr_coef_sign() -> None: ...
def test_linear_svc_intercept_scaling() -> None: ...
def test_lsvc_intercept_scaling_zero() -> None: ...
def test_hasattr_predict_proba() -> None: ...
def test_decision_function_shape_two_class() -> None: ...
def test_ovr_decision_function() -> None: ...
def test_svc_invalid_break_ties_param(SVCClass) -> None: ...
def test_svc_ovr_tie_breaking(SVCClass) -> None: ...
def test_gamma_auto() -> None: ...
def test_gamma_scale() -> None: ...
def test_linearsvm_liblinear_sample_weight(SVM, params) -> None: ...
def test_n_support_oneclass_svr() -> None: ...
def test_custom_kernel_not_array_input(Estimator): ...
def test_svc_raises_error_internal_representation() -> None: ...
