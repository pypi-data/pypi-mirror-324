from sklearn import datasets as datasets
from sklearn.datasets import make_classification as make_classification, make_multilabel_classification as make_multilabel_classification, make_regression as make_regression
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning
from sklearn.linear_model import LinearRegression as LinearRegression, Ridge as Ridge, RidgeCV as RidgeCV, RidgeClassifier as RidgeClassifier, RidgeClassifierCV as RidgeClassifierCV, ridge_regression as ridge_regression
from sklearn.metrics import get_scorer as get_scorer, make_scorer as make_scorer, mean_squared_error as mean_squared_error
from sklearn.model_selection import GridSearchCV as GridSearchCV, GroupKFold as GroupKFold, KFold as KFold, LeaveOneOut as LeaveOneOut, cross_val_predict as cross_val_predict
from sklearn.preprocessing import minmax_scale as minmax_scale
from sklearn.utils import check_random_state as check_random_state
from sklearn.utils._testing import assert_allclose as assert_allclose, assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal, ignore_warnings as ignore_warnings
from sklearn.utils.estimator_checks import check_sample_weights_invariance as check_sample_weights_invariance
from typing import Any

diabetes: Any
X_diabetes: Any
y_diabetes: Any
ind: Any
rng: Any
iris: Any
X_iris: Any
y_iris: Any

def DENSE_FILTER(X): ...
def SPARSE_FILTER(X): ...
def test_ridge(solver) -> None: ...
def test_primal_dual_relationship() -> None: ...
def test_ridge_singular() -> None: ...
def test_ridge_regression_sample_weights() -> None: ...
def test_ridge_regression_convergence_fail() -> None: ...
def test_ridge_sample_weights() -> None: ...
def test_ridge_shapes() -> None: ...
def test_ridge_intercept() -> None: ...
def test_toy_ridge_object() -> None: ...
def test_ridge_vs_lstsq() -> None: ...
def test_ridge_individual_penalties() -> None: ...
def test_X_CenterStackOp(n_col) -> None: ...
def test_compute_gram(shape, uniform_weights) -> None: ...
def test_compute_covariance(shape, uniform_weights) -> None: ...
def test_solver_consistency(solver, proportion_nonzero, n_samples, dtype, sparse_X, seed, normalize) -> None: ...
def test_ridge_gcv_vs_ridge_loo_cv(gcv_mode, X_constructor, X_shape, y_shape, fit_intercept, normalize, noise) -> None: ...
def test_ridge_loo_cv_asym_scoring() -> None: ...
def test_ridge_gcv_sample_weights(gcv_mode, X_constructor, fit_intercept, n_features, y_shape, noise) -> None: ...
def test_check_gcv_mode_error(mode) -> None: ...
def test_check_gcv_mode_choice(sparse, mode, mode_n_greater_than_p, mode_p_greater_than_n) -> None: ...
def test_ridge_gcv_cv_values_not_stored(ridge, make_dataset) -> None: ...
def test_ridge_best_score(ridge, make_dataset, cv) -> None: ...
def test_ridge_cv_individual_penalties() -> None: ...
def test_ridge_classifier_with_scoring(filter_, scoring, cv) -> None: ...
def test_ridge_regression_custom_scoring(filter_, cv): ...
def check_dense_sparse(test_func) -> None: ...
def test_dense_sparse(test_func) -> None: ...
def test_ridge_sparse_svd() -> None: ...
def test_class_weights() -> None: ...
def test_class_weight_vs_sample_weight(reg) -> None: ...
def test_class_weights_cv() -> None: ...
def test_ridgecv_store_cv_values(scoring) -> None: ...
def test_ridge_classifier_cv_store_cv_values(scoring) -> None: ...
def test_ridgecv_sample_weight() -> None: ...
def test_raises_value_error_if_sample_weights_greater_than_1d() -> None: ...
def test_sparse_design_with_sample_weights() -> None: ...
def test_ridgecv_int_alphas() -> None: ...
def test_ridgecv_negative_alphas() -> None: ...
def test_raises_value_error_if_solver_not_supported() -> None: ...
def test_sparse_cg_max_iter() -> None: ...
def test_n_iter() -> None: ...
def test_ridge_fit_intercept_sparse(solver) -> None: ...
def test_ridge_fit_intercept_sparse_error(solver) -> None: ...
def test_ridge_fit_intercept_sparse_sag() -> None: ...
def test_ridge_regression_check_arguments_validity(return_intercept, sample_weight, arr_type, solver) -> None: ...
def test_dtype_match(solver) -> None: ...
def test_dtype_match_cholesky() -> None: ...
def test_ridge_regression_dtype_stability(solver, seed) -> None: ...
def test_ridge_sag_with_X_fortran() -> None: ...
def test_ridgeclassifier_multilabel(Classifier, params) -> None: ...
def test_ridge_positive_regression_test(solver, fit_intercept, alpha) -> None: ...
def test_ridge_ground_truth_positive_test(fit_intercept, alpha) -> None: ...
def test_ridge_positive_error_test(solver) -> None: ...
def test_positive_ridge_loss(alpha): ...
def test_lbfgs_solver_consistency(alpha) -> None: ...
def test_lbfgs_solver_error() -> None: ...
def test_ridge_sample_weight_invariance(normalize, solver) -> None: ...
