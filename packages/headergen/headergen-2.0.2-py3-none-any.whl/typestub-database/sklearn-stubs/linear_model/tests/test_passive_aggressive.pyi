from sklearn.base import ClassifierMixin as ClassifierMixin, is_classifier as is_classifier
from sklearn.datasets import load_iris as load_iris
from sklearn.linear_model import PassiveAggressiveClassifier as PassiveAggressiveClassifier, PassiveAggressiveRegressor as PassiveAggressiveRegressor
from sklearn.utils import check_random_state as check_random_state
from sklearn.utils._testing import assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal
from typing import Any

iris: Any
random_state: Any
indices: Any
X: Any
y: Any
X_csr: Any

class MyPassiveAggressive(ClassifierMixin):
    C: Any
    epsilon: Any
    loss: Any
    fit_intercept: Any
    n_iter: Any
    def __init__(self, C: float = ..., epsilon: float = ..., loss: str = ..., fit_intercept: bool = ..., n_iter: int = ..., random_state: Any | None = ...) -> None: ...
    w: Any
    b: float
    def fit(self, X, y) -> None: ...
    def project(self, X): ...

def test_classifier_accuracy() -> None: ...
def test_classifier_partial_fit() -> None: ...
def test_classifier_refit() -> None: ...
def test_classifier_correctness(loss) -> None: ...
def test_classifier_undefined_methods(response_method) -> None: ...
def test_class_weights() -> None: ...
def test_partial_fit_weight_class_balanced() -> None: ...
def test_equal_class_weight() -> None: ...
def test_wrong_class_weight_label() -> None: ...
def test_wrong_class_weight_format() -> None: ...
def test_regressor_mse() -> None: ...
def test_regressor_partial_fit() -> None: ...
def test_regressor_correctness(loss) -> None: ...
def test_regressor_undefined_methods() -> None: ...
def test_passive_aggressive_estimator_params_validation(klass, fit_method, params, err_msg) -> None: ...
