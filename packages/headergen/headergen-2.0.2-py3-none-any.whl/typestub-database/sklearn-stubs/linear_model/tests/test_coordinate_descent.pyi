from sklearn.base import clone as clone, is_classifier as is_classifier
from sklearn.datasets import load_diabetes as load_diabetes, make_regression as make_regression
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning
from sklearn.linear_model import ARDRegression as ARDRegression, BayesianRidge as BayesianRidge, ElasticNet as ElasticNet, ElasticNetCV as ElasticNetCV, Lars as Lars, Lasso as Lasso, LassoCV as LassoCV, LassoLars as LassoLars, LassoLarsCV as LassoLarsCV, LassoLarsIC as LassoLarsIC, LinearRegression as LinearRegression, MultiTaskElasticNet as MultiTaskElasticNet, MultiTaskElasticNetCV as MultiTaskElasticNetCV, MultiTaskLasso as MultiTaskLasso, MultiTaskLassoCV as MultiTaskLassoCV, OrthogonalMatchingPursuit as OrthogonalMatchingPursuit, Ridge as Ridge, RidgeCV as RidgeCV, RidgeClassifier as RidgeClassifier, RidgeClassifierCV as RidgeClassifierCV, enet_path as enet_path, lars_path as lars_path, lasso_path as lasso_path
from sklearn.model_selection import GridSearchCV as GridSearchCV, LeaveOneGroupOut as LeaveOneGroupOut, train_test_split as train_test_split
from sklearn.pipeline import Pipeline as Pipeline, make_pipeline as make_pipeline
from sklearn.preprocessing import StandardScaler as StandardScaler
from sklearn.utils import check_array as check_array, check_random_state as check_random_state
from sklearn.utils._testing import TempMemmap as TempMemmap, assert_allclose as assert_allclose, assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal, assert_array_equal as assert_array_equal, ignore_warnings as ignore_warnings
from sklearn.utils.fixes import parse_version as parse_version
from sklearn.utils.sparsefuncs import mean_variance_axis as mean_variance_axis
from typing import Any

filterwarnings_normalize: Any

def test_assure_warning_when_normalize(CoordinateDescentModel, normalize, n_warnings) -> None: ...
def test_l1_ratio_param_invalid(l1_ratio) -> None: ...
def test_set_order_dense(order, input_order) -> None: ...
def test_set_order_sparse(order, input_order) -> None: ...
def test_lasso_zero() -> None: ...
def test_lasso_toy() -> None: ...
def test_enet_toy() -> None: ...
def test_lasso_dual_gap() -> None: ...
def build_dataset(n_samples: int = ..., n_features: int = ..., n_informative_features: int = ..., n_targets: int = ...): ...
def test_lasso_cv() -> None: ...
def test_lasso_cv_with_some_model_selection() -> None: ...
def test_lasso_cv_positive_constraint() -> None: ...
def test_model_pipeline_same_as_normalize_true(LinearModel, params) -> None: ...
def test_linear_model_sample_weights_normalize_in_pipeline(is_sparse, with_mean, estimator, params) -> None: ...
def test_model_pipeline_same_dense_and_sparse(LinearModel, params) -> None: ...
def test_lasso_path_return_models_vs_new_return_gives_same_coefficients() -> None: ...
def test_enet_path() -> None: ...
def test_path_parameters() -> None: ...
def test_warm_start() -> None: ...
def test_lasso_alpha_warning() -> None: ...
def test_lasso_positive_constraint() -> None: ...
def test_enet_positive_constraint() -> None: ...
def test_enet_cv_positive_constraint() -> None: ...
def test_uniform_targets() -> None: ...
def test_multi_task_lasso_and_enet() -> None: ...
def test_lasso_readonly_data() -> None: ...
def test_multi_task_lasso_readonly_data() -> None: ...
def test_enet_multitarget() -> None: ...
def test_multioutput_enetcv_error() -> None: ...
def test_multitask_enet_and_lasso_cv() -> None: ...
def test_1d_multioutput_enet_and_multitask_enet_cv() -> None: ...
def test_1d_multioutput_lasso_and_multitask_lasso_cv() -> None: ...
def test_sparse_input_dtype_enet_and_lassocv() -> None: ...
def test_precompute_invalid_argument() -> None: ...
def test_elasticnet_precompute_incorrect_gram() -> None: ...
def test_elasticnet_precompute_gram_weighted_samples() -> None: ...
def test_warm_start_convergence() -> None: ...
def test_warm_start_convergence_with_regularizer_decrement() -> None: ...
def test_random_descent() -> None: ...
def test_enet_path_positive() -> None: ...
def test_sparse_dense_descent_paths() -> None: ...
def test_path_unknown_parameter(path_func) -> None: ...
def test_check_input_false() -> None: ...
def test_enet_copy_X_True(check_input) -> None: ...
def test_enet_copy_X_False_check_input_False() -> None: ...
def test_overrided_gram_matrix() -> None: ...
def test_lasso_non_float_y(model) -> None: ...
def test_enet_float_precision() -> None: ...
def test_enet_l1_ratio() -> None: ...
def test_coef_shape_not_zero() -> None: ...
def test_warm_start_multitask_lasso() -> None: ...
def test_enet_coordinate_descent(klass, n_classes, kwargs) -> None: ...
def test_convergence_warnings() -> None: ...
def test_sparse_input_convergence_warning() -> None: ...
def test_lassoCV_does_not_set_precompute(monkeypatch, precompute, inner_precompute) -> None: ...
def test_multi_task_lasso_cv_dtype() -> None: ...
def test_enet_sample_weight_consistency(fit_intercept, alpha, normalize, precompute) -> None: ...
def test_enet_sample_weight_sparse(estimator) -> None: ...
def test_enet_cv_sample_weight_correctness(fit_intercept) -> None: ...
def test_enet_cv_grid_search(sample_weight) -> None: ...
def test_enet_cv_sample_weight_consistency(fit_intercept, l1_ratio, precompute) -> None: ...
def test_enet_cv_sample_weight_sparse(estimator) -> None: ...
def test_linear_models_cv_fit_with_loky(estimator) -> None: ...
def test_enet_sample_weight_does_not_overwrite_sample_weight(check_input) -> None: ...
def test_enet_ridge_consistency(normalize, ridge_alpha) -> None: ...
def test_sample_weight_invariance(estimator) -> None: ...
