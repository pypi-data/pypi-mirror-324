from sklearn.base import clone as clone
from sklearn.datasets import load_iris as load_iris, make_blobs as make_blobs, make_classification as make_classification
from sklearn.linear_model import LogisticRegression as LogisticRegression, Ridge as Ridge
from sklearn.linear_model._base import make_dataset as make_dataset
from sklearn.linear_model._sag import get_auto_step_size as get_auto_step_size
from sklearn.preprocessing import LabelBinarizer as LabelBinarizer, LabelEncoder as LabelEncoder
from sklearn.utils import check_random_state as check_random_state, compute_class_weight as compute_class_weight
from sklearn.utils._testing import assert_allclose as assert_allclose, assert_almost_equal as assert_almost_equal, assert_array_almost_equal as assert_array_almost_equal
from sklearn.utils.extmath import row_norms as row_norms
from typing import Any

iris: Any

def log_dloss(p, y): ...
def log_loss(p, y): ...
def squared_dloss(p, y): ...
def squared_loss(p, y): ...
def get_pobj(w, alpha, myX, myy, loss): ...
def sag(X, y, step_size, alpha, n_iter: int = ..., dloss: Any | None = ..., sparse: bool = ..., sample_weight: Any | None = ..., fit_intercept: bool = ..., saga: bool = ...): ...
def sag_sparse(X, y, step_size, alpha, n_iter: int = ..., dloss: Any | None = ..., sample_weight: Any | None = ..., sparse: bool = ..., fit_intercept: bool = ..., saga: bool = ..., random_state: int = ...): ...
def get_step_size(X, alpha, fit_intercept, classification: bool = ...): ...
def test_classifier_matching() -> None: ...
def test_regressor_matching() -> None: ...
def test_sag_pobj_matches_logistic_regression() -> None: ...
def test_sag_pobj_matches_ridge_regression() -> None: ...
def test_sag_regressor_computed_correctly() -> None: ...
def test_get_auto_step_size() -> None: ...
def test_sag_regressor(seed) -> None: ...
def test_sag_classifier_computed_correctly() -> None: ...
def test_sag_multiclass_computed_correctly() -> None: ...
def test_classifier_results() -> None: ...
def test_binary_classifier_class_weight() -> None: ...
def test_multiclass_classifier_class_weight() -> None: ...
def test_classifier_single_class() -> None: ...
def test_step_size_alpha_error() -> None: ...
def test_multinomial_loss() -> None: ...
def test_multinomial_loss_ground_truth() -> None: ...
def test_sag_classifier_raises_error(solver) -> None: ...
