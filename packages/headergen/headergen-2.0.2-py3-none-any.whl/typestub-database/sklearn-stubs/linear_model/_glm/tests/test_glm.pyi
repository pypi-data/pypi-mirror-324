from sklearn._loss.glm_distribution import GammaDistribution as GammaDistribution, InverseGaussianDistribution as InverseGaussianDistribution, NormalDistribution as NormalDistribution, PoissonDistribution as PoissonDistribution, TweedieDistribution as TweedieDistribution
from sklearn.datasets import make_regression as make_regression
from sklearn.exceptions import ConvergenceWarning as ConvergenceWarning
from sklearn.linear_model import GammaRegressor as GammaRegressor, PoissonRegressor as PoissonRegressor, Ridge as Ridge, TweedieRegressor as TweedieRegressor
from sklearn.linear_model._glm import GeneralizedLinearRegressor as GeneralizedLinearRegressor
from sklearn.linear_model._glm.link import IdentityLink as IdentityLink, LogLink as LogLink
from sklearn.model_selection import train_test_split as train_test_split

def regression_data(): ...
def test_sample_weights_validation() -> None: ...
def test_glm_family_argument(name, instance) -> None: ...
def test_glm_link_argument(name, instance) -> None: ...
def test_glm_link_auto(family, expected_link_class) -> None: ...
def test_glm_alpha_argument(alpha) -> None: ...
def test_glm_fit_intercept_argument(fit_intercept) -> None: ...
def test_glm_solver_argument(solver) -> None: ...
def test_glm_max_iter_argument(max_iter) -> None: ...
def test_glm_tol_argument(tol) -> None: ...
def test_glm_warm_start_argument(warm_start) -> None: ...
def test_glm_identity_regression(fit_intercept) -> None: ...
def test_glm_sample_weight_consistentcy(fit_intercept, alpha, family) -> None: ...
def test_glm_log_regression(fit_intercept, family) -> None: ...
def test_warm_start(fit_intercept) -> None: ...
def test_normal_ridge_comparison(n_samples, n_features, fit_intercept, sample_weight, request) -> None: ...
def test_poisson_glmnet() -> None: ...
def test_convergence_warning(regression_data) -> None: ...
def test_poisson_regression_family(regression_data) -> None: ...
def test_gamma_regression_family(regression_data) -> None: ...
def test_tweedie_regression_family(regression_data) -> None: ...
def test_tags(estimator, value) -> None: ...
