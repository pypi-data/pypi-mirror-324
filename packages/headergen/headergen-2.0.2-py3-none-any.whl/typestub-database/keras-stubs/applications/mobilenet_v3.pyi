from keras import backend as backend, models as models
from keras.applications import imagenet_utils as imagenet_utils
from keras.layers import VersionAwareLayers as VersionAwareLayers
from keras.utils import data_utils as data_utils, layer_utils as layer_utils
from typing import Any

BASE_WEIGHT_PATH: str
WEIGHTS_HASHES: Any
layers: Any
BASE_DOCSTRING: str

def MobileNetV3(stack_fn, last_point_ch, input_shape: Any | None = ..., alpha: float = ..., model_type: str = ..., minimalistic: bool = ..., include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., classes: int = ..., pooling: Any | None = ..., dropout_rate: float = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def MobileNetV3Small(input_shape: Any | None = ..., alpha: float = ..., minimalistic: bool = ..., include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., classes: int = ..., pooling: Any | None = ..., dropout_rate: float = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def MobileNetV3Large(input_shape: Any | None = ..., alpha: float = ..., minimalistic: bool = ..., include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., classes: int = ..., pooling: Any | None = ..., dropout_rate: float = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def relu(x): ...
def hard_sigmoid(x): ...
def hard_swish(x): ...
def preprocess_input(x, data_format: Any | None = ...): ...
def decode_predictions(preds, top: int = ...): ...
