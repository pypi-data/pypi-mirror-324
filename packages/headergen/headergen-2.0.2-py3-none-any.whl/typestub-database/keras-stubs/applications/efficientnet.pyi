from keras import backend as backend
from keras.applications import imagenet_utils as imagenet_utils
from keras.engine import training as training
from keras.layers import VersionAwareLayers as VersionAwareLayers
from keras.utils import data_utils as data_utils, layer_utils as layer_utils
from typing import Any

BASE_WEIGHTS_PATH: str
WEIGHTS_HASHES: Any
DEFAULT_BLOCKS_ARGS: Any
CONV_KERNEL_INITIALIZER: Any
DENSE_KERNEL_INITIALIZER: Any
layers: Any
BASE_DOCSTRING: str

def EfficientNet(width_coefficient, depth_coefficient, default_size, dropout_rate: float = ..., drop_connect_rate: float = ..., depth_divisor: int = ..., activation: str = ..., blocks_args: str = ..., model_name: str = ..., include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ...): ...
def block(inputs, activation: str = ..., drop_rate: float = ..., name: str = ..., filters_in: int = ..., filters_out: int = ..., kernel_size: int = ..., strides: int = ..., expand_ratio: int = ..., se_ratio: float = ..., id_skip: bool = ...): ...
def EfficientNetB0(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB1(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB2(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB3(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB4(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB5(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB6(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def EfficientNetB7(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., **kwargs): ...
def preprocess_input(x, data_format: Any | None = ...): ...
def decode_predictions(preds, top: int = ...): ...
