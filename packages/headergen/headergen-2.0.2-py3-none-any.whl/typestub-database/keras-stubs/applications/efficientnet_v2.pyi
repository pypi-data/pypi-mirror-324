from keras import backend as backend, layers as layers
from keras.applications import imagenet_utils as imagenet_utils
from keras.engine import training as training
from keras.utils import data_utils as data_utils, layer_utils as layer_utils
from typing import Any

BASE_WEIGHTS_PATH: str
WEIGHTS_HASHES: Any
DEFAULT_BLOCKS_ARGS: Any
CONV_KERNEL_INITIALIZER: Any
DENSE_KERNEL_INITIALIZER: Any
BASE_DOCSTRING: str

def round_filters(filters, width_coefficient, min_depth, depth_divisor): ...
def round_repeats(repeats, depth_coefficient): ...
def MBConvBlock(input_filters: int, output_filters: int, expand_ratio: int = ..., kernel_size: int = ..., strides: int = ..., se_ratio: float = ..., bn_momentum: float = ..., activation: str = ..., survival_probability: float = ..., name: Any | None = ...): ...
def FusedMBConvBlock(input_filters: int, output_filters: int, expand_ratio: int = ..., kernel_size: int = ..., strides: int = ..., se_ratio: float = ..., bn_momentum: float = ..., activation: str = ..., survival_probability: float = ..., name: Any | None = ...): ...
def EfficientNetV2(width_coefficient, depth_coefficient, default_size, dropout_rate: float = ..., drop_connect_rate: float = ..., depth_divisor: int = ..., min_depth: int = ..., bn_momentum: float = ..., activation: str = ..., blocks_args: str = ..., model_name: str = ..., include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2B0(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2B1(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2B2(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2B3(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2S(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2M(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def EfficientNetV2L(include_top: bool = ..., weights: str = ..., input_tensor: Any | None = ..., input_shape: Any | None = ..., pooling: Any | None = ..., classes: int = ..., classifier_activation: str = ..., include_preprocessing: bool = ...): ...
def preprocess_input(x, data_format: Any | None = ...): ...
def decode_predictions(preds, top: int = ...): ...
