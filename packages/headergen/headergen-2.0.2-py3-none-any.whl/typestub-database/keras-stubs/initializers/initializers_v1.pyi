import tensorflow.compat.v2 as tf
from typing import Any

class RandomNormal(tf.compat.v1.random_normal_initializer):
    def __init__(self, mean: float = ..., stddev: float = ..., seed: Any | None = ..., dtype=...) -> None: ...

class RandomUniform(tf.compat.v1.random_uniform_initializer):
    def __init__(self, minval=..., maxval: float = ..., seed: Any | None = ..., dtype=...) -> None: ...

class TruncatedNormal(tf.compat.v1.truncated_normal_initializer):
    def __init__(self, mean: float = ..., stddev: float = ..., seed: Any | None = ..., dtype=...) -> None: ...

class LecunNormal(tf.compat.v1.variance_scaling_initializer):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...

class LecunUniform(tf.compat.v1.variance_scaling_initializer):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...

class HeNormal(tf.compat.v1.variance_scaling_initializer):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...

class HeUniform(tf.compat.v1.variance_scaling_initializer):
    def __init__(self, seed: Any | None = ...) -> None: ...
    def get_config(self): ...
