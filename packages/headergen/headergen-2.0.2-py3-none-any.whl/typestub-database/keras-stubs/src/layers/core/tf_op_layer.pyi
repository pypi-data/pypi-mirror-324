from typing import Any

import tensorflow.compat.v2 as tf
from keras import backend as backend
from keras.src.engine import keras_tensor as keras_tensor
from keras.src.engine.base_layer import Layer as Layer

class ClassMethod(Layer):
    cls_ref: Any
    method_name: Any
    cls_symbol: Any
    def __init__(self, cls_ref, method_name, **kwargs) -> None: ...
    def call(self, args, kwargs): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config, custom_objects: Any | None = ...): ...

class KerasOpDispatcher(tf.__internal__.dispatch.GlobalOpDispatcher):
    def handle(self, op, args, kwargs): ...

class InstanceProperty(Layer):
    attr_name: Any
    def __init__(self, attr_name, **kwargs) -> None: ...
    def call(self, obj): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config, custom_objects: Any | None = ...): ...

class InstanceMethod(InstanceProperty):
    def call(self, obj, args, kwargs): ...

class TFOpLambda(Layer):
    function: Any
    symbol: Any
    call: Any
    def __init__(self, function, **kwargs): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config, custom_objects: Any | None = ...): ...

class TFClassMethodDispatcher(tf.__internal__.dispatch.OpDispatcher):
    cls: Any
    method_name: Any
    def __init__(self, cls, method_name) -> None: ...
    def handle(self, args, kwargs): ...

class SlicingOpLambda(TFOpLambda):
    call: Any
    def __init__(self, function, **kwargs): ...

class TFSlicingOpDispatcher(tf.__internal__.dispatch.OpDispatcher):
    op: Any
    def __init__(self, op) -> None: ...
    def handle(self, args, kwargs): ...
