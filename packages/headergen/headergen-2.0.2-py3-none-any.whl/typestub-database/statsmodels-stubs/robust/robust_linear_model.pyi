import statsmodels.base.model as base
import statsmodels.regression.linear_model as lm
from typing import Any

class RLM(base.LikelihoodModel):
    __doc__: Any
    M: Any
    def __init__(self, endog, exog, M: Any | None = ..., missing: str = ..., **kwargs) -> None: ...
    def score(self, params) -> None: ...
    def information(self, params) -> None: ...
    def predict(self, params, exog: Any | None = ...): ...
    def loglike(self, params) -> None: ...
    def deviance(self, tmp_results): ...
    cov: Any
    scale_est: Any
    scale: Any
    weights: Any
    def fit(self, maxiter: int = ..., tol: float = ..., scale_est: str = ..., init: Any | None = ..., cov: str = ..., update_scale: bool = ..., conv: str = ..., start_params: Any | None = ...): ...

class RLMResults(base.LikelihoodModelResults):
    model: Any
    df_model: Any
    df_resid: Any
    nobs: Any
    cov_params_default: Any
    def __init__(self, model, params, normalized_cov_params, scale) -> None: ...
    def fittedvalues(self): ...
    def resid(self): ...
    def sresid(self): ...
    def bcov_unscaled(self): ...
    def weights(self): ...
    def bcov_scaled(self): ...
    def pvalues(self): ...
    def bse(self): ...
    def chisq(self): ...
    def summary(self, yname: Any | None = ..., xname: Any | None = ..., title: int = ..., alpha: float = ..., return_fmt: str = ...): ...
    def summary2(self, xname: Any | None = ..., yname: Any | None = ..., title: Any | None = ..., alpha: float = ..., float_format: str = ...): ...

class RLMResultsWrapper(lm.RegressionResultsWrapper): ...
