from typing import Any

class BSpline:
    m: Any
    M: Any
    tau: Any
    K: Any
    coef: Any
    x: Any
    def __init__(self, knots, order: int = ..., M: Any | None = ..., coef: Any | None = ..., x: Any | None = ...) -> None: ...
    def __call__(self, *args): ...
    def basis_element(self, x, i, d: int = ...): ...
    def basis(self, x, d: int = ..., lower: Any | None = ..., upper: Any | None = ...): ...
    g: Any
    d: Any
    def gram(self, d: int = ...): ...

class SmoothingSpline(BSpline):
    penmax: float
    method: str
    target_df: int
    default_pen: float
    optimize: bool
    weights: Any
    df_total: Any
    N: Any
    btb: Any
    rank: Any
    pen: Any
    coef: Any
    resid: Any
    def fit(self, y, x: Any | None = ..., weights: Any | None = ..., pen: float = ...) -> None: ...
    def smooth(self, y, x: Any | None = ..., weights: Any | None = ...) -> None: ...
    def gcv(self): ...
    def df_resid(self): ...
    def df_fit(self): ...
    def trace(self): ...
    def fit_target_df(self, y, x: Any | None = ..., df: Any | None = ..., weights: Any | None = ..., tol: float = ..., apen: int = ..., bpen: float = ...) -> None: ...
    def fit_optimize_gcv(self, y, x: Any | None = ..., weights: Any | None = ..., tol: float = ..., brack=...): ...
