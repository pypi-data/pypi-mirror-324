from statsmodels.compat.python import lmap as lmap
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from typing import Any

def ks_2samp(data1, data2): ...
def kstest(rvs, cdf, args=..., N: int = ..., alternative: str = ..., mode: str = ..., **kwds): ...
def dplus_st70_upp(stat, nobs): ...
dminus_st70_upp = dplus_st70_upp

def d_st70_upp(stat, nobs): ...
def v_st70_upp(stat, nobs): ...
def wsqu_st70_upp(stat, nobs): ...
def usqu_st70_upp(stat, nobs): ...
def a_st70_upp(stat, nobs): ...

gof_pvals: Any

def pval_kstest_approx(D, N): ...

class GOF:
    nobs: Any
    vals_sorted: Any
    cdfvals: Any
    def __init__(self, rvs, cdf, args=..., N: int = ...) -> None: ...
    def d_plus(self): ...
    def d_minus(self): ...
    def d(self): ...
    def v(self): ...
    def wsqu(self): ...
    def usqu(self): ...
    def a(self): ...
    def asqu(self): ...
    def get_test(self, testid: str = ..., pvals: str = ...): ...

def gof_mc(randfn, distr, nobs: int = ...) -> None: ...
def asquare(cdfvals, axis: int = ...): ...
def bootstrap(distr, args=..., nobs: int = ..., nrep: int = ..., value: Any | None = ..., batch_size: Any | None = ...): ...
def bootstrap2(value, distr, args=..., nobs: int = ..., nrep: int = ...): ...

class NewNorm:
    def fit_vec(self, x, axis: int = ...): ...
    def cdf(self, x, args): ...
    def rvs(self, args, size): ...
