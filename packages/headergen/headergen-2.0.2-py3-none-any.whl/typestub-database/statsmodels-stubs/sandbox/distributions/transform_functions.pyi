from typing import Any

class TransformFunction:
    def __call__(self, x) -> None: ...

class SquareFunc(TransformFunction):
    def func(self, x): ...
    def inverseplus(self, x): ...
    def inverseminus(self, x): ...
    def derivplus(self, x): ...
    def derivminus(self, x): ...

class NegSquareFunc(TransformFunction):
    def func(self, x): ...
    def inverseplus(self, x): ...
    def inverseminus(self, x): ...
    def derivplus(self, x): ...
    def derivminus(self, x): ...

class AbsFunc(TransformFunction):
    def func(self, x): ...
    def inverseplus(self, x): ...
    def inverseminus(self, x): ...
    def derivplus(self, x): ...
    def derivminus(self, x): ...

class LogFunc(TransformFunction):
    def func(self, x): ...
    def inverse(self, y): ...
    def deriv(self, x): ...

class ExpFunc(TransformFunction):
    def func(self, x): ...
    def inverse(self, y): ...
    def deriv(self, x): ...

class BoxCoxNonzeroFunc(TransformFunction):
    lamda: Any
    def __init__(self, lamda) -> None: ...
    def func(self, x): ...
    def inverse(self, y): ...
    def deriv(self, x): ...

class AffineFunc(TransformFunction):
    constant: Any
    slope: Any
    def __init__(self, constant, slope) -> None: ...
    def func(self, x): ...
    def inverse(self, y): ...
    def deriv(self, x): ...

class ChainFunc(TransformFunction):
    finn: Any
    fout: Any
    def __init__(self, finn, fout) -> None: ...
    def func(self, x): ...
    def inverse(self, y): ...
    def deriv(self, x): ...
