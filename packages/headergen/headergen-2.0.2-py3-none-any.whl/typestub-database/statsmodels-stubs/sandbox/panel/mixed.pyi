from statsmodels.base.model import LikelihoodModelResults as LikelihoodModelResults
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from typing import Any

class Unit:
    Y: Any
    X: Any
    Z: Any
    n: Any
    def __init__(self, endog, exog_fe, exog_re) -> None: ...
    P: Any
    def compute_P(self, Sinv) -> None: ...
    def fit(self, a, D, sigma) -> None: ...
    def compute_xtwy(self): ...
    def compute_xtwx(self): ...
    def cov_random(self, D, Sinv: Any | None = ...): ...
    def logL(self, a, ML: bool = ...): ...
    def deviance(self, ML: bool = ...): ...

class OneWayMixed:
    units: Any
    m: Any
    n_units: Any
    N: Any
    nobs: Any
    p: Any
    k_exog_fe: Any
    a: Any
    q: Any
    k_exog_re: Any
    D: Any
    sigma: float
    dev: Any
    def __init__(self, units) -> None: ...
    def cov_fixed(self): ...
    def cov_random(self): ...
    @property
    def params(self): ...
    @property
    def params_random_units(self): ...
    def cov_params(self): ...
    @property
    def bse(self): ...
    def deviance(self, ML: bool = ...): ...
    def logL(self, ML: bool = ...): ...
    df_resid: Any
    def initialize(self) -> None: ...
    termination: str
    def cont(self, ML: bool = ..., rtol: float = ..., params_rtol: float = ..., params_atol: float = ...): ...
    history: Any
    iterations: Any
    def fit(self, maxiter: int = ..., ML: bool = ..., rtol: float = ..., params_rtol: float = ..., params_atol: float = ...): ...

class OneWayMixedResults(LikelihoodModelResults):
    model: Any
    params: Any
    def __init__(self, model) -> None: ...
    def llf(self): ...
    @property
    def params_random_units(self): ...
    def cov_random(self): ...
    def mean_random(self, idx: str = ...): ...
    def std_random(self): ...
    def plot_random_univariate(self, bins: Any | None = ..., use_loc: bool = ...): ...
    def plot_scatter_pairs(self, idx1, idx2, title: Any | None = ..., ax: Any | None = ...): ...
    def plot_scatter_all_pairs(self, title: Any | None = ...): ...
