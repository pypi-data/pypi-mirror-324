import numpy as np
import pandas as pd
from statsmodels.compat.pandas import Appender as Appender, is_numeric_dtype as is_numeric_dtype
from statsmodels.compat.python import lmap as lmap, lrange as lrange
from statsmodels.iolib.table import SimpleTable as SimpleTable
from statsmodels.stats.stattools import jarque_bera as jarque_bera
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from statsmodels.tools.docstring import Docstring as Docstring, Parameter as Parameter
from statsmodels.tools.validation import array_like as array_like, bool_like as bool_like, float_like as float_like, int_like as int_like
from typing import Any, Sequence, Union

DEPRECATION_MSG: str
PERCENTILES: Any
QUANTILES: Any

def pd_ptp(df): ...
def pd_percentiles(df): ...

PANDAS: Any

def nancount(x, axis: int = ...): ...
def nanptp(arr, axis: int = ...): ...
def nanuss(arr, axis: int = ...): ...
def nanpercentile(arr, axis: int = ...): ...
def nankurtosis(arr, axis: int = ...): ...
def nanskewness(arr, axis: int = ...): ...

MISSING: Any

def sign_test(samp, mu0: int = ...): ...

NUMERIC_STATISTICS: Any
CATEGORICAL_STATISTICS: Any
DEFAULT_STATISTICS: Any

class Description:
    numeric_statistics: Any
    categorical_statistics: Any
    default_statistics: Any
    def __init__(self, data: Union[np.ndarray, pd.Series, pd.DataFrame], stats: Sequence[str] = ..., *, numeric: bool = ..., categorical: bool = ..., alpha: float = ..., use_t: bool = ..., percentiles: Sequence[Union[int, float]] = ..., ntop: bool = ...) -> None: ...
    def frame(self) -> pd.DataFrame: ...
    def numeric(self) -> pd.DataFrame: ...
    def categorical(self) -> pd.DataFrame: ...
    def summary(self) -> SimpleTable: ...

ds: Any

def describe(data: Union[np.ndarray, pd.Series, pd.DataFrame], stats: Sequence[str] = ..., *, numeric: bool = ..., categorical: bool = ..., alpha: float = ..., use_t: bool = ..., percentiles: Sequence[Union[int, float]] = ..., ntop: bool = ...) -> pd.DataFrame: ...

class Describe:
    dataset: Any
    univariate: Any
    def __init__(self, dataset): ...
    def summary(self, stats: str = ..., columns: str = ..., orientation: str = ...): ...
    def print_summary(self, stats, orientation: str = ...): ...
    def sign_test(self, samp, mu0: int = ...): ...
