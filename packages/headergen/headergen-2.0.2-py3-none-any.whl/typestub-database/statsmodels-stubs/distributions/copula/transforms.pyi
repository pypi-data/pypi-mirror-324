from typing import Any

class Transforms:
    def __init__(self) -> None: ...

class TransfFrank(Transforms):
    def evaluate(self, t, theta): ...
    def inverse(self, phi, theta): ...
    def deriv(self, t, theta): ...
    def deriv2(self, t, theta): ...
    def is_completly_monotonic(self, theta): ...

class TransfClayton(Transforms):
    def evaluate(self, t, theta): ...
    def inverse(self, phi, theta): ...
    def deriv(self, t, theta): ...
    def deriv2(self, t, theta): ...
    def is_completly_monotonic(self, theta): ...

class TransfGumbel(Transforms):
    def evaluate(self, t, theta): ...
    def inverse(self, phi, theta): ...
    def deriv(self, t, theta): ...
    def deriv2(self, t, theta): ...
    def is_completly_monotonic(self, theta): ...

class TransfIndep(Transforms):
    def evaluate(self, t, *args): ...
    def inverse(self, phi, *args): ...
    def deriv(self, t, *args): ...
    def deriv2(self, t, *args): ...

class _TransfPower(Transforms):
    transform: Any
    def __init__(self, transform) -> None: ...
    def evaluate(self, t, alpha, beta, *tr_args): ...
    def inverse(self, phi, alpha, beta, *tr_args): ...
