from statsmodels.compat.pandas import Appender as Appender
from statsmodels.tools.decorators import cache_readonly as cache_readonly
from statsmodels.tools.tools import Bunch as Bunch
from statsmodels.tsa.statespace.mlemodel import MLEModel as MLEModel, MLEResults as MLEResults, MLEResultsWrapper as MLEResultsWrapper, PredictionResults as PredictionResults, PredictionResultsWrapper as PredictionResultsWrapper
from statsmodels.tsa.statespace.tools import concat as concat
from typing import Any

class RecursiveLS(MLEModel):
    k_exog: Any
    k_constraints: int
    k_endog: int
    def __init__(self, endog, exog, constraints: Any | None = ..., **kwargs) -> None: ...
    @classmethod
    def from_formula(cls, formula, data, subset: Any | None = ..., constraints: Any | None = ...): ...
    def fit(self): ...
    def filter(self, return_ssm: bool = ..., **kwargs): ...
    def smooth(self, return_ssm: bool = ..., **kwargs): ...
    @property
    def endog_names(self): ...
    @property
    def param_names(self): ...
    @property
    def start_params(self): ...
    def update(self, params, **kwargs) -> None: ...

class RecursiveLSResults(MLEResults):
    df_model: Any
    df_resid: Any
    specification: Any
    def __init__(self, model, params, filter_results, cov_type: str = ..., **kwargs) -> None: ...
    @property
    def recursive_coefficients(self): ...
    def resid_recursive(self): ...
    def cusum(self): ...
    def cusum_squares(self): ...
    def llf_recursive_obs(self): ...
    def llf_recursive(self): ...
    def ssr(self): ...
    def centered_tss(self): ...
    def uncentered_tss(self): ...
    def ess(self): ...
    def rsquared(self): ...
    def mse_model(self): ...
    def mse_resid(self): ...
    def mse_total(self): ...
    def get_prediction(self, start: Any | None = ..., end: Any | None = ..., dynamic: bool = ..., index: Any | None = ..., **kwargs): ...
    def plot_recursive_coefficient(self, variables: int = ..., alpha: float = ..., legend_loc: str = ..., fig: Any | None = ..., figsize: Any | None = ...): ...
    def plot_cusum(self, alpha: float = ..., legend_loc: str = ..., fig: Any | None = ..., figsize: Any | None = ...): ...
    def plot_cusum_squares(self, alpha: float = ..., legend_loc: str = ..., fig: Any | None = ..., figsize: Any | None = ...): ...

class RecursiveLSResultsWrapper(MLEResultsWrapper): ...
