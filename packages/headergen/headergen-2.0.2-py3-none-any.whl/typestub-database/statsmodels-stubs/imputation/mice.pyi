from statsmodels.base.model import LikelihoodModelResults as LikelihoodModelResults
from statsmodels.regression.linear_model import OLS as OLS
from typing import Any

class PatsyFormula:
    formula: Any
    def __init__(self, formula) -> None: ...

class MICEData:
    __doc__: Any
    regularized: Any
    data: Any
    history_callback: Any
    history: Any
    predict_kwds: Any
    perturbation_method: Any
    ix_obs: Any
    ix_miss: Any
    models: Any
    results: Any
    conditional_formula: Any
    init_kwds: Any
    fit_kwds: Any
    model_class: Any
    params: Any
    k_pmm: Any
    def __init__(self, data, perturbation_method: str = ..., k_pmm: int = ..., history_callback: Any | None = ...): ...
    def next_sample(self): ...
    def set_imputer(self, endog_name, formula: Any | None = ..., model_class: Any | None = ..., init_kwds: Any | None = ..., fit_kwds: Any | None = ..., predict_kwds: Any | None = ..., k_pmm: int = ..., perturbation_method: Any | None = ..., regularized: bool = ...) -> None: ...
    def update_all(self, n_iter: int = ...) -> None: ...
    def get_split_data(self, vname): ...
    def get_fitting_data(self, vname): ...
    def plot_missing_pattern(self, ax: Any | None = ..., row_order: str = ..., column_order: str = ..., hide_complete_rows: bool = ..., hide_complete_columns: bool = ..., color_row_patterns: bool = ...): ...
    def plot_bivariate(self, col1_name, col2_name, lowess_args: Any | None = ..., lowess_min_n: int = ..., jitter: Any | None = ..., plot_points: bool = ..., ax: Any | None = ...): ...
    def plot_fit_obs(self, col_name, lowess_args: Any | None = ..., lowess_min_n: int = ..., jitter: Any | None = ..., plot_points: bool = ..., ax: Any | None = ...): ...
    def plot_imputed_hist(self, col_name, ax: Any | None = ..., imp_hist_args: Any | None = ..., obs_hist_args: Any | None = ..., all_hist_args: Any | None = ...): ...
    def perturb_params(self, vname) -> None: ...
    def impute(self, vname) -> None: ...
    def update(self, vname) -> None: ...
    def impute_pmm(self, vname) -> None: ...

class MICE:
    __doc__: Any
    model_formula: Any
    model_class: Any
    n_skip: Any
    data: Any
    results_list: Any
    init_kwds: Any
    fit_kwds: Any
    def __init__(self, model_formula, model_class, data, n_skip: int = ..., init_kwds: Any | None = ..., fit_kwds: Any | None = ...) -> None: ...
    def next_sample(self): ...
    endog_names: Any
    exog_names: Any
    def fit(self, n_burnin: int = ..., n_imputations: int = ...): ...
    def combine(self): ...

class MICEResults(LikelihoodModelResults):
    def __init__(self, model, params, normalized_cov_params) -> None: ...
    def summary(self, title: Any | None = ..., alpha: float = ...): ...
