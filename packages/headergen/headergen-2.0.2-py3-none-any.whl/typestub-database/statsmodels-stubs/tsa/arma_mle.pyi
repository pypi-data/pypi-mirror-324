from statsmodels.base.model import GenericLikelihoodModel as GenericLikelihoodModel
from typing import Any

class Arma(GenericLikelihoodModel):
    nar: int
    nma: int
    def __init__(self, endog, exog: Any | None = ...) -> None: ...
    def initialize(self) -> None: ...
    def geterrors(self, params): ...
    def loglike(self, params): ...
    def nloglikeobs(self, params): ...
    params: Any
    ar_est: Any
    ma_est: Any
    error_estimate: Any
    def fit(self, order=..., start_params: Any | None = ..., method: str = ..., **optkwds): ...
    def fit_mle(self, order=..., start_params: Any | None = ..., method: str = ..., maxiter: int = ..., tol: float = ..., **kwds): ...
    def predicted(self, ar: Any | None = ..., ma: Any | None = ...): ...
    def forecast(self, ar: Any | None = ..., ma: Any | None = ..., nperiod: int = ...): ...
    def forecast2(self, step_ahead: int = ..., start: Any | None = ..., end: Any | None = ..., endog: Any | None = ...): ...
    def forecast3(self, step_ahead: int = ..., start: Any | None = ...): ...
    @classmethod
    def generate_sample(cls, ar, ma, nsample, std: int = ...): ...
