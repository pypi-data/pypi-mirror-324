from statsmodels.compat.python import Literal
from statsmodels.tsa._bds import bds as bds
from statsmodels.tsa._innovations import innovations_algo as innovations_algo, innovations_filter as innovations_filter
from typing import Any, Tuple

def adfuller(x, maxlag: Union[int, None] = ..., regression: str = ..., autolag: str = ..., store: bool = ..., regresults: bool = ...): ...
def acovf(x, adjusted: bool = ..., demean: bool = ..., fft: bool = ..., missing: str = ..., nlag: Any | None = ...): ...
def q_stat(x, nobs): ...
def acf(x, adjusted: bool = ..., nlags: Any | None = ..., qstat: bool = ..., fft: bool = ..., alpha: Any | None = ..., bartlett_confint: bool = ..., missing: str = ...): ...
def pacf_yw(x, nlags: Any | None = ..., method: str = ...): ...
def pacf_burg(x, nlags: Any | None = ..., demean: bool = ...): ...
def pacf_ols(x, nlags: Any | None = ..., efficient: bool = ..., adjusted: bool = ...): ...
def pacf(x, nlags: Any | None = ..., method: str = ..., alpha: Any | None = ...): ...
def ccovf(x, y, adjusted: bool = ..., demean: bool = ..., fft: bool = ...): ...
def ccf(x, y, adjusted: bool = ..., fft: bool = ...): ...
def levinson_durbin(s, nlags: int = ..., isacov: bool = ...): ...
def levinson_durbin_pacf(pacf, nlags: Any | None = ...): ...
def coint(y0, y1, trend: str = ..., method: str = ..., maxlag: Any | None = ..., autolag: Union[str, None] = ..., return_results: Any | None = ...): ...
def arma_order_select_ic(y, max_ar: int = ..., max_ma: int = ..., ic: str = ..., trend: str = ..., model_kw: Any | None = ..., fit_kw: Any | None = ...): ...
def kpss(x, regression: Literal[c, ct] = ..., nlags: Union[Literal[auto, legacy], int] = ..., store: bool = ...) -> Tuple[float, float, int, dict[str, float]]: ...
def range_unit_root_test(x, store: bool = ...): ...

class ZivotAndrewsUnitRoot:
    def __init__(self) -> None: ...
    def run(self, x, trim: float = ..., maxlag: Any | None = ..., regression: str = ..., autolag: str = ...): ...
    def __call__(self, x, trim: float = ..., maxlag: Any | None = ..., regression: str = ..., autolag: str = ...): ...

zivot_andrews: Any
