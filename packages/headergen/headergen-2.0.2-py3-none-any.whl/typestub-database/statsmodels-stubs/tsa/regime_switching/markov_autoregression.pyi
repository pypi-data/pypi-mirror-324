from statsmodels.tsa.regime_switching import markov_regression as markov_regression, markov_switching as markov_switching
from statsmodels.tsa.statespace.tools import constrain_stationary_univariate as constrain_stationary_univariate, unconstrain_stationary_univariate as unconstrain_stationary_univariate
from statsmodels.tsa.tsatools import lagmat as lagmat
from typing import Any

class MarkovAutoregression(markov_regression.MarkovRegression):
    switching_ar: Any
    exog_ar: Any
    orig_endog: Any
    endog: Any
    orig_exog: Any
    exog: Any
    def __init__(self, endog, k_regimes, order, trend: str = ..., exog: Any | None = ..., exog_tvtp: Any | None = ..., switching_ar: bool = ..., switching_trend: bool = ..., switching_exog: bool = ..., switching_variance: bool = ..., dates: Any | None = ..., freq: Any | None = ..., missing: str = ...) -> None: ...
    def predict_conditional(self, params): ...
    @property
    def start_params(self): ...
    @property
    def param_names(self): ...
    def transform_params(self, unconstrained): ...
    def untransform_params(self, constrained): ...

class MarkovAutoregressionResults(markov_regression.MarkovRegressionResults): ...
class MarkovAutoregressionResultsWrapper(markov_regression.MarkovRegressionResultsWrapper): ...
