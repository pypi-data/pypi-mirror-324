from statsmodels.tsa.arima.tools import validate_basic as validate_basic
from statsmodels.tsa.statespace.tools import is_invertible as is_invertible
from typing import Any

class SARIMAXParams:
    spec: Any
    exog_names: Any
    ar_names: Any
    ma_names: Any
    seasonal_ar_names: Any
    seasonal_ma_names: Any
    param_names: Any
    k_exog_params: Any
    k_ar_params: Any
    k_ma_params: Any
    k_seasonal_ar_params: Any
    k_seasonal_ma_params: Any
    k_params: Any
    def __init__(self, spec) -> None: ...
    @property
    def exog_params(self): ...
    @exog_params.setter
    def exog_params(self, value) -> None: ...
    @property
    def ar_params(self): ...
    @ar_params.setter
    def ar_params(self, value) -> None: ...
    @property
    def ar_poly(self): ...
    @ar_poly.setter
    def ar_poly(self, value) -> None: ...
    @property
    def ma_params(self): ...
    @ma_params.setter
    def ma_params(self, value) -> None: ...
    @property
    def ma_poly(self): ...
    @ma_poly.setter
    def ma_poly(self, value) -> None: ...
    @property
    def seasonal_ar_params(self): ...
    @seasonal_ar_params.setter
    def seasonal_ar_params(self, value) -> None: ...
    @property
    def seasonal_ar_poly(self): ...
    @seasonal_ar_poly.setter
    def seasonal_ar_poly(self, value) -> None: ...
    @property
    def seasonal_ma_params(self): ...
    @seasonal_ma_params.setter
    def seasonal_ma_params(self, value) -> None: ...
    @property
    def seasonal_ma_poly(self): ...
    @seasonal_ma_poly.setter
    def seasonal_ma_poly(self, value) -> None: ...
    @property
    def sigma2(self): ...
    @sigma2.setter
    def sigma2(self, params) -> None: ...
    @property
    def reduced_ar_poly(self): ...
    @property
    def reduced_ma_poly(self): ...
    @property
    def params(self): ...
    @params.setter
    def params(self, value) -> None: ...
    @property
    def is_complete(self): ...
    @property
    def is_valid(self): ...
    @property
    def is_stationary(self): ...
    @property
    def is_invertible(self): ...
    def to_dict(self): ...
    def to_pandas(self): ...
