from typing import Any

def arma_generate_sample(ar, ma, nsample, scale: int = ..., distrvs: Any | None = ..., axis: int = ..., burnin: int = ...): ...
def arma_acovf(ar, ma, nobs: int = ..., sigma2: int = ..., dtype: Any | None = ...): ...
def arma_acf(ar, ma, lags: int = ...): ...
def arma_impulse_response(ar, ma, leads: int = ...): ...
def arma2ma(ar, ma, lags: int = ...): ...
def arma2ar(ar, ma, lags: int = ...): ...
def lpol2index(ar): ...
def index2lpol(coeffs, index): ...
def deconvolve(num, den, n: Any | None = ...): ...

class ArmaProcess:
    ar: Any
    ma: Any
    arcoefs: Any
    macoefs: Any
    arpoly: Any
    mapoly: Any
    nobs: Any
    def __init__(self, ar: Any | None = ..., ma: Any | None = ..., nobs: int = ...) -> None: ...
    @classmethod
    def from_roots(cls, maroots: Any | None = ..., arroots: Any | None = ..., nobs: int = ...): ...
    @classmethod
    def from_coeffs(cls, arcoefs: Any | None = ..., macoefs: Any | None = ..., nobs: int = ...): ...
    @classmethod
    def from_estimation(cls, model_results, nobs: Any | None = ...): ...
    def __mul__(self, oth): ...
    def acovf(self, nobs: Any | None = ...): ...
    def acf(self, lags: Any | None = ...): ...
    def pacf(self, lags: Any | None = ...): ...
    def periodogram(self, nobs: Any | None = ...): ...
    def impulse_response(self, leads: Any | None = ...): ...
    def arma2ma(self, lags: Any | None = ...): ...
    def arma2ar(self, lags: Any | None = ...): ...
    @property
    def arroots(self): ...
    @property
    def maroots(self): ...
    @property
    def isstationary(self): ...
    @property
    def isinvertible(self): ...
    def invertroots(self, retnew: bool = ...): ...
    def generate_sample(self, nsample: int = ..., scale: float = ..., distrvs: Any | None = ..., axis: int = ..., burnin: int = ...): ...
