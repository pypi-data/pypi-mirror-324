from matplotlib import backend_bases as backend_bases, backend_tools as backend_tools
from matplotlib.backend_bases import _Backend
from matplotlib.backends import backend_agg as backend_agg
from typing import Any

class TimerTornado(backend_bases.TimerBase):
    def __init__(self, *args, **kwargs) -> None: ...

class TimerAsyncio(backend_bases.TimerBase):
    def __init__(self, *args, **kwargs) -> None: ...

class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):
    supports_blit: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def show(self) -> None: ...
    def draw(self) -> None: ...
    def blit(self, bbox: Any | None = ...) -> None: ...
    def draw_idle(self) -> None: ...
    def set_cursor(self, cursor) -> None: ...
    def set_image_mode(self, mode) -> None: ...
    def get_diff_image(self): ...
    def get_renderer(self, cleared: Any | None = ...): ...
    def handle_event(self, event): ...
    def handle_unknown_event(self, event) -> None: ...
    def handle_ack(self, event) -> None: ...
    def handle_draw(self, event) -> None: ...
    handle_button_press: Any
    handle_button_release: Any
    handle_dblclick: Any
    handle_figure_enter: Any
    handle_figure_leave: Any
    handle_motion_notify: Any
    handle_scroll: Any
    handle_key_press: Any
    handle_key_release: Any
    def handle_toolbar_button(self, event) -> None: ...
    def handle_refresh(self, event) -> None: ...
    def handle_resize(self, event) -> None: ...
    def handle_send_image_mode(self, event) -> None: ...
    def handle_set_device_pixel_ratio(self, event) -> None: ...
    def handle_set_dpi_ratio(self, event) -> None: ...
    def send_event(self, event_type, **kwargs) -> None: ...

class NavigationToolbar2WebAgg(backend_bases.NavigationToolbar2):
    toolitems: Any
    cursor: Any
    message: str
    def __init__(self, canvas) -> None: ...
    def set_message(self, message) -> None: ...
    def draw_rubberband(self, event, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...
    def save_figure(self, *args) -> None: ...
    def pan(self) -> None: ...
    def zoom(self) -> None: ...
    def set_history_buttons(self) -> None: ...

class FigureManagerWebAgg(backend_bases.FigureManagerBase):
    ToolbarCls: Any
    web_sockets: Any
    toolbar: Any
    def __init__(self, canvas, num) -> None: ...
    def show(self) -> None: ...
    def resize(self, w, h, forward: bool = ...) -> None: ...
    def set_window_title(self, title) -> None: ...
    def add_web_socket(self, web_socket) -> None: ...
    def remove_web_socket(self, web_socket) -> None: ...
    def handle_json(self, content) -> None: ...
    def refresh_all(self) -> None: ...
    @classmethod
    def get_javascript(cls, stream: Any | None = ...): ...
    @classmethod
    def get_static_file_path(cls): ...

class _BackendWebAggCoreAgg(_Backend):
    FigureCanvas: Any
    FigureManager: Any
