from ._backend_gtk import _BackendGTK, _NavigationToolbar2GTK, backend_version as backend_version
from gi.repository import Gtk
from matplotlib import backend_tools as backend_tools, cbook as cbook
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, NavigationToolbar2 as NavigationToolbar2, TimerBase as TimerBase, ToolContainerBase as ToolContainerBase
from matplotlib.backend_tools import Cursors as Cursors
from matplotlib.figure import Figure as Figure
from matplotlib.widgets import SubplotTool as SubplotTool
from pathlib import Path as Path
from typing import Any

class FigureCanvasGTK4(Gtk.DrawingArea, FigureCanvasBase):
    required_interactive_framework: str
    supports_blit: bool
    def __init__(self, figure: Any | None = ...) -> None: ...
    def pick(self, mouseevent) -> None: ...
    def destroy(self) -> None: ...
    def set_cursor(self, cursor) -> None: ...
    def scroll_event(self, controller, dx, dy): ...
    def button_press_event(self, controller, n_press, x, y) -> None: ...
    def button_release_event(self, controller, n_press, x, y) -> None: ...
    def key_press_event(self, controller, keyval, keycode, state): ...
    def key_release_event(self, controller, keyval, keycode, state): ...
    def motion_notify_event(self, controller, x, y) -> None: ...
    def leave_notify_event(self, controller) -> None: ...
    def enter_notify_event(self, controller, x, y) -> None: ...
    def resize_event(self, area, width, height) -> None: ...
    def on_draw_event(self, widget, ctx) -> None: ...
    def draw(self) -> None: ...
    def draw_idle(self): ...
    def flush_events(self) -> None: ...

class FigureManagerGTK4(FigureManagerBase):
    window: Any
    vbox: Any
    toolbar: Any
    def __init__(self, canvas, num): ...
    def destroy(self, *args) -> None: ...
    def show(self) -> None: ...
    def full_screen_toggle(self) -> None: ...
    def get_window_title(self): ...
    def set_window_title(self, title) -> None: ...
    def resize(self, width, height) -> None: ...

class NavigationToolbar2GTK4(_NavigationToolbar2GTK, Gtk.Box):
    win: Any
    message: Any
    def __init__(self, canvas, window) -> None: ...
    def save_figure(self, *args) -> None: ...

class ToolbarGTK4(ToolContainerBase, Gtk.Box):
    def __init__(self, toolmanager) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle) -> None: ...
    def toggle_toolitem(self, name, toggled) -> None: ...
    def remove_toolitem(self, name) -> None: ...
    def set_message(self, s) -> None: ...

class SaveFigureGTK4(backend_tools.SaveFigureBase):
    def trigger(self, *args, **kwargs): ...

class HelpGTK4(backend_tools.ToolHelpBase):
    def trigger(self, *args) -> None: ...

class ToolCopyToClipboardGTK4(backend_tools.ToolCopyToClipboardBase):
    def trigger(self, *args, **kwargs) -> None: ...
Toolbar = ToolbarGTK4

class _BackendGTK4(_BackendGTK):
    FigureCanvas: Any
    FigureManager: Any
