from .. import qt_compat as qt_compat
from ..qt_compat import QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from typing import Any

BLACKLIST: Any

class ColorButton(QtWidgets.QPushButton):
    colorChanged: Any
    def __init__(self, parent: Any | None = ...) -> None: ...
    def choose_color(self) -> None: ...
    def get_color(self): ...
    def set_color(self, color) -> None: ...
    color: Any

def to_qcolor(color): ...

class ColorLayout(QtWidgets.QHBoxLayout):
    lineedit: Any
    colorbtn: Any
    def __init__(self, color, parent: Any | None = ...) -> None: ...
    def update_color(self) -> None: ...
    def update_text(self, color) -> None: ...
    def text(self): ...

def font_is_installed(font): ...
def tuple_to_qfont(tup): ...
def qfont_to_tuple(font): ...

class FontLayout(QtWidgets.QGridLayout):
    family: Any
    size: Any
    italic: Any
    bold: Any
    def __init__(self, value, parent: Any | None = ...) -> None: ...
    def get_font(self): ...

def is_edit_valid(edit): ...

class FormWidget(QtWidgets.QWidget):
    update_buttons: Any
    data: Any
    widgets: Any
    formlayout: Any
    def __init__(self, data, comment: str = ..., with_margin: bool = ..., parent: Any | None = ...) -> None: ...
    def get_dialog(self): ...
    def setup(self): ...
    def get(self): ...

class FormComboWidget(QtWidgets.QWidget):
    update_buttons: Any
    combobox: Any
    stackwidget: Any
    widgetlist: Any
    def __init__(self, datalist, comment: str = ..., parent: Any | None = ...) -> None: ...
    def setup(self) -> None: ...
    def get(self): ...

class FormTabWidget(QtWidgets.QWidget):
    update_buttons: Any
    tabwidget: Any
    widgetlist: Any
    def __init__(self, datalist, comment: str = ..., parent: Any | None = ...) -> None: ...
    def setup(self) -> None: ...
    def get(self): ...

class FormDialog(QtWidgets.QDialog):
    apply_callback: Any
    formwidget: Any
    float_fields: Any
    bbox: Any
    def __init__(self, data, title: str = ..., comment: str = ..., icon: Any | None = ..., parent: Any | None = ..., apply: Any | None = ...) -> None: ...
    def register_float_field(self, field) -> None: ...
    def update_buttons(self) -> None: ...
    data: Any
    def accept(self) -> None: ...
    def reject(self) -> None: ...
    def apply(self) -> None: ...
    def get(self): ...

def fedit(data, title: str = ..., comment: str = ..., icon: Any | None = ..., parent: Any | None = ..., apply: Any | None = ...): ...
