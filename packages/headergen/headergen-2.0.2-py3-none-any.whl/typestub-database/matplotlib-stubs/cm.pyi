from collections.abc import Mapping, MutableMapping
from matplotlib import cbook as cbook, colors as colors
from matplotlib._cm import datad as datad
from typing import Any

class __getattr__:
    LUTSIZE: Any

class _DeprecatedCmapDictWrapper(MutableMapping):
    def __init__(self, cmap_registry) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __setitem__(self, key, val) -> None: ...
    def get(self, key, default: Any | None = ...): ...

class ColormapRegistry(Mapping):
    def __init__(self, cmaps) -> None: ...
    def __getitem__(self, item): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __call__(self): ...
    def register(self, cmap, *, name: Any | None = ..., force: bool = ...) -> None: ...

cmap_d: Any

def register_cmap(name: Any | None = ..., cmap: Any | None = ..., *, override_builtin: bool = ...) -> None: ...
def get_cmap(name: Any | None = ..., lut: Any | None = ...): ...
def unregister_cmap(name): ...

class ScalarMappable:
    cmap: Any
    colorbar: Any
    callbacks: Any
    def __init__(self, norm: Any | None = ..., cmap: Any | None = ...) -> None: ...
    callbacksSM: Any
    def to_rgba(self, x, alpha: Any | None = ..., bytes: bool = ..., norm: bool = ...): ...
    def set_array(self, A) -> None: ...
    def get_array(self): ...
    def get_cmap(self): ...
    def get_clim(self): ...
    def set_clim(self, vmin: Any | None = ..., vmax: Any | None = ...) -> None: ...
    def get_alpha(self): ...
    def set_cmap(self, cmap) -> None: ...
    @property
    def norm(self): ...
    @norm.setter
    def norm(self, norm) -> None: ...
    def set_norm(self, norm) -> None: ...
    def autoscale(self) -> None: ...
    def autoscale_None(self) -> None: ...
    stale: bool
    def changed(self) -> None: ...
