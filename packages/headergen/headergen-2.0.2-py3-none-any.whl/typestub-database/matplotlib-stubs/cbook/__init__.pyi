import collections.abc
from matplotlib._api.deprecation import MatplotlibDeprecationWarning as MatplotlibDeprecationWarning, mplDeprecation as mplDeprecation
from typing import Any

def deprecated(*args, **kwargs): ...
def warn_deprecated(*args, **kwargs) -> None: ...

class _StrongRef:
    def __init__(self, obj) -> None: ...
    def __call__(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class CallbackRegistry:
    exception_handler: Any
    callbacks: Any
    def __init__(self, exception_handler=...) -> None: ...
    def connect(self, signal, func): ...
    def disconnect(self, cid) -> None: ...
    def process(self, s, *args, **kwargs) -> None: ...
    def blocked(self, *, signal: Any | None = ...) -> None: ...

class silent_list(list):
    type: Any
    def __init__(self, type, seq: Any | None = ...) -> None: ...

def strip_math(s): ...
def is_writable_file_like(obj): ...
def file_requires_unicode(x): ...
def to_filehandle(fname, flag: str = ..., return_opened: bool = ..., encoding: Any | None = ...): ...
def open_file_cm(path_or_file, mode: str = ..., encoding: Any | None = ...): ...
def is_scalar_or_string(val): ...
def get_sample_data(fname, asfileobj: bool = ..., *, np_load: bool = ...): ...
def flatten(seq, scalarp=...) -> None: ...

class maxdict(dict):
    maxsize: Any
    def __init__(self, maxsize) -> None: ...
    def __setitem__(self, k, v) -> None: ...

class Stack:
    def __init__(self, default: Any | None = ...) -> None: ...
    def __call__(self): ...
    def __len__(self): ...
    def __getitem__(self, ind): ...
    def forward(self): ...
    def back(self): ...
    def push(self, o): ...
    def home(self): ...
    def empty(self): ...
    def clear(self) -> None: ...
    def bubble(self, o): ...
    def remove(self, o) -> None: ...

def report_memory(i: int = ...): ...
def safe_masked_invalid(x, copy: bool = ...): ...
def print_cycles(objects, outstream=..., show_progress: bool = ...) -> None: ...

class Grouper:
    def __init__(self, init=...) -> None: ...
    def __contains__(self, item): ...
    def clean(self) -> None: ...
    def join(self, a, *args) -> None: ...
    def joined(self, a, b): ...
    def remove(self, a) -> None: ...
    def __iter__(self): ...
    def get_siblings(self, a): ...

def simple_linear_interpolation(a, steps): ...
def delete_masked_points(*args): ...
def boxplot_stats(X, whis: float = ..., bootstrap: Any | None = ..., labels: Any | None = ..., autorange: bool = ...): ...

ls_mapper: Any
ls_mapper_r: Any

def contiguous_regions(mask): ...
def is_math_text(s): ...
def violin_stats(X, method, points: int = ..., quantiles: Any | None = ...): ...
def pts_to_prestep(x, *args): ...
def pts_to_poststep(x, *args): ...
def pts_to_midstep(x, *args): ...

STEP_LOOKUP_MAP: Any

def index_of(y): ...
def safe_first_element(obj): ...
def sanitize_sequence(data): ...
def normalize_kwargs(kw, alias_mapping: Any | None = ...): ...

class _OrderedSet(collections.abc.MutableSet):
    def __init__(self) -> None: ...
    def __contains__(self, key): ...
    def __iter__(self): ...
    def __len__(self): ...
    def add(self, key) -> None: ...
    def discard(self, key) -> None: ...
