import matplotlib.cm as cm
import matplotlib.text as text
from matplotlib import docstring as docstring
from matplotlib.backend_bases import MouseButton as MouseButton
from typing import Any

class ClabelText(text.Text):
    def get_rotation(self): ...

class ContourLabeler:
    labelFmt: Any
    labelManual: Any
    rightside_up: Any
    labelLevelList: Any
    labelIndiceList: Any
    labelFontProps: Any
    labelFontSizeList: Any
    labelMappable: Any
    labelCValueList: Any
    labelXYs: Any
    labelTextsList: Any
    def clabel(self, levels: Any | None = ..., *, fontsize: Any | None = ..., inline: bool = ..., inline_spacing: int = ..., fmt: Any | None = ..., colors: Any | None = ..., use_clabeltext: bool = ..., manual: bool = ..., rightside_up: bool = ..., zorder: Any | None = ...): ...
    def print_label(self, linecontour, labelwidth): ...
    def too_close(self, x, y, lw): ...
    def get_label_coords(self, distances, XX, YY, ysize, lw): ...
    def get_label_width(self, lev, fmt, fsize): ...
    def set_label_props(self, label, text, color) -> None: ...
    def get_text(self, lev, fmt): ...
    def locate_label(self, linecontour, labelwidth): ...
    def calc_label_rot_and_inline(self, slc, ind, lw, lc: Any | None = ..., spacing: int = ...): ...
    def add_label(self, x, y, rotation, lev, cvalue) -> None: ...
    def add_label_clabeltext(self, x, y, rotation, lev, cvalue) -> None: ...
    def add_label_near(self, x, y, inline: bool = ..., inline_spacing: int = ..., transform: Any | None = ...) -> None: ...
    def pop_label(self, index: int = ...) -> None: ...
    def labels(self, inline, inline_spacing) -> None: ...

class ContourSet(cm.ScalarMappable, ContourLabeler):
    axes: Any
    levels: Any
    filled: Any
    linewidths: Any
    linestyles: Any
    hatches: Any
    alpha: Any
    origin: Any
    extent: Any
    colors: Any
    extend: Any
    antialiased: Any
    nchunk: Any
    locator: Any
    logscale: bool
    collections: Any
    labelTexts: Any
    labelCValues: Any
    allkinds: Any
    tlinewidths: Any
    def __init__(self, ax, *args, levels: Any | None = ..., filled: bool = ..., linewidths: Any | None = ..., linestyles: Any | None = ..., hatches=..., alpha: Any | None = ..., origin: Any | None = ..., extent: Any | None = ..., cmap: Any | None = ..., colors: Any | None = ..., norm: Any | None = ..., vmin: Any | None = ..., vmax: Any | None = ..., extend: str = ..., antialiased: Any | None = ..., nchunk: int = ..., locator: Any | None = ..., transform: Any | None = ..., **kwargs) -> None: ...
    def get_transform(self): ...
    def legend_elements(self, variable_name: str = ..., str_format=...): ...
    tcolors: Any
    def changed(self) -> None: ...
    def get_alpha(self): ...
    def set_alpha(self, alpha) -> None: ...
    def find_nearest_contour(self, x, y, indices: Any | None = ..., pixel: bool = ...): ...

class QuadContourSet(ContourSet): ...
