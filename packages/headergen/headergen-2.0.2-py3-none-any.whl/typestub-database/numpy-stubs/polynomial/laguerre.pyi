from numpy import dtype as dtype, int_ as int_, ndarray as ndarray
from numpy.polynomial._polybase import ABCPolyBase as ABCPolyBase
from numpy.polynomial.polyutils import trimcoef as trimcoef
from typing import Any

lagtrim = trimcoef

def poly2lag(pol) -> None: ...
def lag2poly(c) -> None: ...

lagdomain: ndarray[Any, dtype[int_]]
lagzero: ndarray[Any, dtype[int_]]
lagone: ndarray[Any, dtype[int_]]
lagx: ndarray[Any, dtype[int_]]

def lagline(off, scl) -> None: ...
def lagfromroots(roots) -> None: ...
def lagadd(c1, c2) -> None: ...
def lagsub(c1, c2) -> None: ...
def lagmulx(c) -> None: ...
def lagmul(c1, c2) -> None: ...
def lagdiv(c1, c2) -> None: ...
def lagpow(c, pow, maxpower=...) -> None: ...
def lagder(c, m=..., scl=..., axis=...) -> None: ...
def lagint(c, m=..., k=..., lbnd=..., scl=..., axis=...) -> None: ...
def lagval(x, c, tensor=...) -> None: ...
def lagval2d(x, y, c) -> None: ...
def laggrid2d(x, y, c) -> None: ...
def lagval3d(x, y, z, c) -> None: ...
def laggrid3d(x, y, z, c) -> None: ...
def lagvander(x, deg) -> None: ...
def lagvander2d(x, y, deg) -> None: ...
def lagvander3d(x, y, z, deg) -> None: ...
def lagfit(x, y, deg, rcond=..., full=..., w=...) -> None: ...
def lagcompanion(c) -> None: ...
def lagroots(c) -> None: ...
def laggauss(deg) -> None: ...
def lagweight(x) -> None: ...

class Laguerre(ABCPolyBase):
    domain: Any
    window: Any
    basis_name: Any
