from numpy import dtype as dtype, int_ as int_, ndarray as ndarray
from numpy.polynomial._polybase import ABCPolyBase as ABCPolyBase
from numpy.polynomial.polyutils import trimcoef as trimcoef
from typing import Any

hermetrim = trimcoef

def poly2herme(pol) -> None: ...
def herme2poly(c) -> None: ...

hermedomain: ndarray[Any, dtype[int_]]
hermezero: ndarray[Any, dtype[int_]]
hermeone: ndarray[Any, dtype[int_]]
hermex: ndarray[Any, dtype[int_]]

def hermeline(off, scl) -> None: ...
def hermefromroots(roots) -> None: ...
def hermeadd(c1, c2) -> None: ...
def hermesub(c1, c2) -> None: ...
def hermemulx(c) -> None: ...
def hermemul(c1, c2) -> None: ...
def hermediv(c1, c2) -> None: ...
def hermepow(c, pow, maxpower=...) -> None: ...
def hermeder(c, m=..., scl=..., axis=...) -> None: ...
def hermeint(c, m=..., k=..., lbnd=..., scl=..., axis=...) -> None: ...
def hermeval(x, c, tensor=...) -> None: ...
def hermeval2d(x, y, c) -> None: ...
def hermegrid2d(x, y, c) -> None: ...
def hermeval3d(x, y, z, c) -> None: ...
def hermegrid3d(x, y, z, c) -> None: ...
def hermevander(x, deg) -> None: ...
def hermevander2d(x, y, deg) -> None: ...
def hermevander3d(x, y, z, deg) -> None: ...
def hermefit(x, y, deg, rcond=..., full=..., w=...) -> None: ...
def hermecompanion(c) -> None: ...
def hermeroots(c) -> None: ...
def hermegauss(deg) -> None: ...
def hermeweight(x) -> None: ...

class HermiteE(ABCPolyBase):
    domain: Any
    window: Any
    basis_name: Any
