from .auxfuncs import *
from typing import Any

f2py_version: Any
strictf77: int
sourcecodeform: str
quiet: int
verbose: int
tabchar: Any
pyffilename: str
f77modulename: str
skipemptyends: int
ignorecontains: int
dolowercase: int
debug: Any
beginpattern: str
currentfilename: str
expectbegin: int
f90modulevars: Any
filepositiontext: str
gotnextfile: int
groupcache: Any
groupcounter: int
grouplist: Any
groupname: str
include_paths: Any
neededmodule: int
onlyfuncs: Any
previous_context: Any
skipblocksuntil: int
skipfuncs: Any
skipfunctions: Any
usermodules: Any

def reset_global_f2py_vars() -> None: ...
def outmess(line, flag: int = ...) -> None: ...

defaultimplicitrules: Any
badnames: Any
invbadnames: Any

def rmbadname1(name): ...
def rmbadname(names): ...
def undo_rmbadname1(name): ...
def undo_rmbadname(names): ...
def getextension(name): ...

is_f_file: Any

def is_free_format(file): ...
def readfortrancode(ffile, dowithline=..., istop: int = ...) -> None: ...

beforethisafter: Any
fortrantypes: str
typespattern: Any
typespattern4implicit: Any
functionpattern: Any
subroutinepattern: Any
groupbegins77: str
beginpattern77: Any
groupbegins90: Any
beginpattern90: Any
groupends: str
endpattern: Any
endifs: str
endifpattern: Any
implicitpattern: Any
dimensionpattern: Any
externalpattern: Any
optionalpattern: Any
requiredpattern: Any
publicpattern: Any
privatepattern: Any
intrinsicpattern: Any
intentpattern: Any
parameterpattern: Any
datapattern: Any
callpattern: Any
entrypattern: Any
callfunpattern: Any
commonpattern: Any
usepattern: Any
containspattern: Any
formatpattern: Any
f2pyenhancementspattern: Any
multilinepattern: Any

def split_by_unquoted(line, characters): ...

crackline_re_1: Any

def crackline(line, reset: int = ...) -> None: ...
def markouterparen(line): ...
def markoutercomma(line, comma: str = ...): ...
def unmarkouterparen(line): ...
def appenddecl(decl, decl2, force: int = ...): ...

selectpattern: Any
nameargspattern: Any
callnameargspattern: Any
real16pattern: Any
real8pattern: Any

def analyzeline(m, case, line) -> None: ...
def appendmultiline(group, context_name, ml) -> None: ...
def cracktypespec0(typespec, ll): ...

namepattern: Any
kindselector: Any
charselector: Any
lenkindpattern: Any
lenarraypattern: Any

def removespaces(expr): ...
def markinnerspaces(line): ...
def updatevars(typespec, selector, attrspec, entitydecl): ...
def cracktypespec(typespec, selector): ...
def setattrspec(decl, attr, force: int = ...): ...
def setkindselector(decl, sel, force: int = ...): ...
def setcharselector(decl, sel, force: int = ...): ...
def getblockname(block, unknown: str = ...): ...
def setmesstext(block) -> None: ...
def get_usedict(block): ...
def get_useparameters(block, param_map: Any | None = ...): ...
def postcrack2(block, tab: str = ..., param_map: Any | None = ...): ...
def postcrack(block, args: Any | None = ..., tab: str = ...): ...
def sortvarnames(vars): ...
def analyzecommon(block): ...
def analyzebody(block, args, tab: str = ...): ...
def buildimplicitrules(block): ...
def myeval(e, g: Any | None = ..., l: Any | None = ...): ...

getlincoef_re_1: Any

def getlincoef(e, xset): ...
def getarrlen(dl, args, star: str = ...): ...

word_pattern: Any

def get_sorted_names(vars): ...
def get_parameters(vars, global_params=...): ...
def analyzevars(block): ...

analyzeargs_re_1: Any

def expr2name(a, block, args=...): ...
def analyzeargs(block): ...

determineexprtype_re_1: Any
determineexprtype_re_2: Any
determineexprtype_re_3: Any
determineexprtype_re_4: Any
determineexprtype_re_5: Any

def determineexprtype(expr, vars, rules=...): ...
def crack2fortrangen(block, tab: str = ..., as_interface: bool = ...): ...
def common2fortran(common, tab: str = ...): ...
def use2fortran(use, tab: str = ...): ...
def true_intent_list(var): ...
def vars2fortran(block, vars, args, tab: str = ..., as_interface: bool = ...): ...
def crackfortran(files): ...
def crack2fortran(block): ...
