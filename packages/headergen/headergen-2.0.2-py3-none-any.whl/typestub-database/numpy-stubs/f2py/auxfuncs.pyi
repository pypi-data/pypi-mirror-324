import pprint
from typing import Any

errmess: Any
show = pprint.pprint

def outmess(t) -> None: ...
def debugcapi(var): ...
def isstring(var): ...
def isstringarray(var): ...
def isarrayofstrings(var): ...
def isarray(var): ...
def isscalar(var): ...
def iscomplex(var): ...
def islogical(var): ...
def isinteger(var): ...
def islong_long(var): ...
def isunsigned_char(var): ...
def isunsigned_short(var): ...
def isunsigned(var): ...
def isunsigned_long_long(var): ...
def isdouble(var): ...
def islong_double(var): ...
def islong_complex(var): ...
def iscomplexarray(var): ...
def isint1array(var): ...
def isunsigned_chararray(var): ...
def isunsigned_shortarray(var): ...
def isunsigned_long_longarray(var): ...
def issigned_long_longarray(var): ...
def isallocatable(var): ...
def ismoduleroutine(rout): ...
def ismodule(rout): ...
def isfunction(rout): ...
def isfunction_wrap(rout): ...
def issubroutine(rout): ...
def issubroutine_wrap(rout): ...
def isroutine(rout): ...
def islogicalfunction(rout): ...
def islong_longfunction(rout): ...
def islong_doublefunction(rout): ...
def iscomplexfunction(rout): ...
def iscomplexfunction_warn(rout): ...
def isstringfunction(rout): ...
def hasexternals(rout): ...
def isthreadsafe(rout): ...
def isoptional(var): ...
def isexternal(var): ...
def isrequired(var): ...
def isintent_in(var): ...
def isintent_inout(var): ...
def isintent_out(var): ...
def isintent_hide(var): ...
def isintent_nothide(var): ...
def isintent_c(var): ...
def isintent_copy(var): ...
def isintent_overwrite(var): ...
def isintent_callback(var): ...
def isintent_inplace(var): ...
def isintent_aux(var): ...

isintent_dict: Any

def isprivate(var): ...
def hasinitvalue(var): ...
def hasnote(var): ...
def hasresultnote(rout): ...
def hascommon(rout): ...
def hasbody(rout): ...
def hascallstatement(rout): ...

class F2PYError(Exception): ...

class throw_error:
    mess: Any
    def __init__(self, mess) -> None: ...
    def __call__(self, var) -> None: ...

def l_and(*f): ...
def l_or(*f): ...
def l_not(f): ...
def isdummyroutine(rout): ...
def getfortranname(rout): ...
def getcallstatement(rout): ...
def getcallprotoargument(rout, cb_map=...): ...
def getusercode(rout): ...
def getusercode1(rout): ...
def getpymethoddef(rout): ...
def getargs2(rout): ...
def getrestdoc(rout): ...
def gentitle(name): ...
def stripcomma(s): ...
def replace(str, d, defaultsep: str = ...): ...
def dictappend(rd, ar): ...
def applyrules(rules, d, var=...): ...
