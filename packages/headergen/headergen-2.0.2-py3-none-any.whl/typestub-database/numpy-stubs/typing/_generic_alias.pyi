import numpy as np
from typing import Any, Iterable, List, NoReturn, Tuple, Type, TypeVar

class _GenericAlias:
    @property
    def __origin__(self) -> type: ...
    @property
    def __args__(self) -> Tuple[Any, ...]: ...
    @property
    def __parameters__(self) -> Tuple[TypeVar, ...]: ...
    def __init__(self, origin: type, args: Any) -> None: ...
    @property
    def __call__(self) -> type: ...
    def __reduce__(self) -> Tuple[Type[_T], Tuple[type, Tuple[Any, ...]]]: ...
    def __mro_entries__(self, bases: Iterable[object]) -> Tuple[type]: ...
    def __dir__(self) -> List[str]: ...
    def __hash__(self) -> int: ...
    def __instancecheck__(self, obj: object) -> NoReturn: ...
    def __subclasscheck__(self, cls: type) -> NoReturn: ...
    def __getitem__(self, key: Any) -> _T: ...
    def __eq__(self, value: object) -> bool: ...
    def __getattribute__(self, name: str) -> Any: ...
ScalarType = TypeVar('ScalarType', bound=np.generic, covariant=True)
NDArray: Any
