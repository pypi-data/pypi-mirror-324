import distutils.cygwinccompiler
from numpy.distutils import log as log
from numpy.distutils.misc_util import get_build_architecture as get_build_architecture, msvc_runtime_library as msvc_runtime_library, msvc_runtime_major as msvc_runtime_major, msvc_runtime_version as msvc_runtime_version
from typing import Any

def get_msvcr_replacement(): ...

class Mingw32CCompiler(distutils.cygwinccompiler.CygwinCCompiler):
    compiler_type: str
    gcc_version: Any
    linker: str
    compiler_cxx: Any
    def __init__(self, verbose: int = ..., dry_run: int = ..., force: int = ...) -> None: ...
    def link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols: Any | None = ..., debug: int = ..., extra_preargs: Any | None = ..., extra_postargs: Any | None = ..., build_temp: Any | None = ..., target_lang: Any | None = ...) -> None: ...
    def object_filenames(self, source_filenames, strip_dir: int = ..., output_dir: str = ...): ...

def find_python_dll(): ...
def dump_table(dll): ...
def generate_def(dll, dfile) -> None: ...
def find_dll(dll_name): ...
def build_msvcr_library(debug: bool = ...): ...
def build_import_library(): ...
def msvc_manifest_xml(maj, min): ...
def manifest_rc(name, type: str = ...): ...
def check_embedded_msvcr_match_linked(msver) -> None: ...
def configtest_name(config): ...
def manifest_name(config): ...
def rc_name(config): ...
def generate_manifest(config) -> None: ...
