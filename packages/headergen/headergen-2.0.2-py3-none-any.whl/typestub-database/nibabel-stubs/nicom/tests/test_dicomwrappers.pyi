from unittest import TestCase

from _typeshed import Incomplete

from ...tests.nibabel_data import get_nibabel_data as get_nibabel_data
from ...tests.nibabel_data import needs_nibabel_data as needs_nibabel_data
from ...volumeutils import endian_codes as endian_codes
from .. import dicomwrappers as didw
from . import dicom_test as dicom_test
from . import have_dicom as have_dicom
from . import pydicom as pydicom

IO_DATA_PATH: Incomplete
DATA_FILE: Incomplete
DATA_FILE_PHILIPS: Incomplete
DATA: Incomplete
DATA_PHILIPS: Incomplete
DATA_FILE_B0: Incomplete
DATA_FILE_SLC_NORM: Incomplete
DATA_FILE_DEC_RSCL: Incomplete
DATA_FILE_4D: Incomplete
DATA_FILE_EMPTY_ST: Incomplete
DATA_FILE_4D_DERIVED: Incomplete
DATA_FILE_CT: Incomplete
DATA_FILE_SIEMENS_TRACE: Incomplete
EXPECTED_AFFINE: Incomplete
EXPECTED_PARAMS: Incomplete

def test_wrappers() -> None: ...
def test_get_from_wrapper(): ...
def test_wrapper_from_data() -> None: ...
def test_wrapper_args_kwds() -> None: ...
def test_dwi_params() -> None: ...
def test_q_vector_etc() -> None: ...
def test_vol_matching() -> None: ...
def test_slice_indicator() -> None: ...
def test_orthogonal() -> None: ...
def test_rotation_matrix() -> None: ...
def test_use_csa_sign() -> None: ...
def test_assert_parallel() -> None: ...
def test_decimal_rescale() -> None: ...
def fake_frames(seq_name, field_name, value_seq): ...
def fake_shape_dependents(
    div_seq, sid_seq: Incomplete | None = None, sid_dim: Incomplete | None = None
): ...

class TestMultiFrameWrapper(TestCase):
    MINIMAL_MF: Incomplete
    WRAPCLASS = didw.MultiframeWrapper
    def test_shape(self) -> None: ...
    def test_iop(self) -> None: ...
    def test_voxel_sizes(self) -> None: ...
    def test_image_position(self) -> None: ...
    def test_affine(self) -> None: ...
    def test_data_real(self) -> None: ...
    def test_slicethickness_fallback(self) -> None: ...
    def test_data_derived_shape(self) -> None: ...
    def test_data_trace(self) -> None: ...
    def test_data_unreadable_private_headers(self) -> None: ...
    def test_data_fake(self) -> None: ...
    def test__scale_data(self) -> None: ...
