from __future__ import annotations
from ostk import core as OpenSpaceToolkitCorePy
from ostk.core import container
from ostk.core import filesystem
from ostk.core import type
import ostk.core.type
from ostk import io as OpenSpaceToolkitIOPy
import typing
from . import ip
__all__ = ['OpenSpaceToolkitCorePy', 'OpenSpaceToolkitIOPy', 'URL', 'container', 'filesystem', 'ip', 'type']
class URL:
    class Query:
        class Parameter:
            __hash__: typing.ClassVar[None] = None
            @staticmethod
            def _pybind11_conduit_v1_(*args, **kwargs):
                ...
            def __eq__(self, arg0: URL.Query.Parameter) -> bool:
                ...
            def __init__(self, arg0: ostk.core.type.String, arg1: ostk.core.type.String) -> None:
                ...
            def __ne__(self, arg0: URL.Query.Parameter) -> bool:
                ...
            def get_name(self) -> ostk.core.type.String:
                ...
            def get_value(self) -> ostk.core.type.String:
                ...
            def is_defined(self) -> bool:
                ...
        __hash__: typing.ClassVar[None] = None
        @staticmethod
        def _pybind11_conduit_v1_(*args, **kwargs):
            ...
        @staticmethod
        def parse(arg0: ostk.core.type.String) -> URL.Query:
            ...
        @staticmethod
        def undefined() -> URL.Query:
            ...
        def __eq__(self, arg0: URL.Query) -> bool:
            ...
        def __init__(self, arg0: list[...]) -> None:
            ...
        def __ne__(self, arg0: URL.Query) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __str__(self) -> str:
            ...
        def add_parameter(self, arg0: typing.Any) -> None:
            ...
        def get_parameter_with_name(self, arg0: ostk.core.type.String) -> ostk.core.type.String:
            ...
        def has_parameter_with_name(self, arg0: ostk.core.type.String) -> bool:
            ...
        def is_defined(self) -> bool:
            ...
        def to_string(self) -> ostk.core.type.String:
            ...
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @staticmethod
    def parse(arg0: ostk.core.type.String) -> URL:
        ...
    @staticmethod
    def undefined() -> URL:
        ...
    def __add__(self, arg0: ostk.core.type.String) -> URL:
        ...
    def __eq__(self, arg0: URL) -> bool:
        ...
    def __iadd__(self, arg0: ostk.core.type.String) -> URL:
        ...
    def __init__(self, arg0: ostk.core.type.String, arg1: ostk.core.type.String, arg2: ostk.core.type.String, arg3: ostk.core.type.Integer, arg4: ostk.core.type.String, arg5: ostk.core.type.String, arg6: typing.Any, arg7: ostk.core.type.String) -> None:
        ...
    def __ne__(self, arg0: URL) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def get_fragment(self) -> ostk.core.type.String:
        ...
    def get_host(self) -> ostk.core.type.String:
        ...
    def get_password(self) -> ostk.core.type.String:
        ...
    def get_path(self) -> ostk.core.type.String:
        ...
    def get_port(self) -> ostk.core.type.Integer:
        ...
    def get_query(self) -> ...:
        ...
    def get_scheme(self) -> ostk.core.type.String:
        ...
    def get_user(self) -> ostk.core.type.String:
        ...
    def is_defined(self) -> bool:
        ...
    def set_array(self: list[URL.Query.Parameter]) -> None:
        ...
    def set_fragment(self, arg0: ostk.core.type.String) -> None:
        ...
    def set_host(self, arg0: ostk.core.type.String) -> None:
        ...
    def set_password(self, arg0: ostk.core.type.String) -> None:
        ...
    def set_path(self, arg0: ostk.core.type.String) -> None:
        ...
    def set_port(self, arg0: ostk.core.type.Integer) -> None:
        ...
    def set_query(self, arg0: typing.Any) -> None:
        ...
    def set_scheme(self, arg0: ostk.core.type.String) -> None:
        ...
    def set_user(self, arg0: ostk.core.type.String) -> None:
        ...
    def to_string(self, doSanitize: bool = False) -> ostk.core.type.String:
        ...
