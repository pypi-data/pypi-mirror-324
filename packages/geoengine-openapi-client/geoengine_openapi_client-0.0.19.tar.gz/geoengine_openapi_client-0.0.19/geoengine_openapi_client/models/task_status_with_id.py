# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import Field, StrictStr
from geoengine_openapi_client.models.task_status import TaskStatus

class TaskStatusWithId(TaskStatus):
    """
    TaskStatusWithId
    """
    task_id: StrictStr = Field(..., alias="taskId")
    __properties = ["description", "estimatedTimeRemaining", "info", "pctComplete", "status", "taskType", "timeStarted", "timeTotal", "cleanUp", "error", "taskId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaskStatusWithId:
        """Create an instance of TaskStatusWithId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if info (nullable) is None
        # and __fields_set__ contains the field
        # Note: fixed handling of actual_instance
        if getattr(self.actual_instance, "info", None) is None and "info" in self.actual_instance.__fields_set__:
            _dict['info'] = None

        # set to None if clean_up (nullable) is None
        # and __fields_set__ contains the field
        # Note: fixed handling of actual_instance
        if getattr(self.actual_instance, "clean_up", None) is None and "clean_up" in self.actual_instance.__fields_set__:
            _dict['cleanUp'] = None

        # set to None if error (nullable) is None
        # and __fields_set__ contains the field
        # Note: fixed handling of actual_instance
        if getattr(self.actual_instance, "error", None) is None and "error" in self.actual_instance.__fields_set__:
            _dict['error'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaskStatusWithId:
        """Create an instance of TaskStatusWithId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TaskStatusWithId.parse_obj(obj)

        # Note: fixed handling of actual_instance
        _obj = TaskStatusWithId.parse_obj({
            "actual_instance": TaskStatus.from_dict(obj).actual_instance,
            "task_id": obj.get("taskId")
        })
        return _obj

        _obj = TaskStatusWithId.parse_obj({
            "description": obj.get("description"),
            "estimated_time_remaining": obj.get("estimatedTimeRemaining"),
            "info": obj.get("info"),
            "pct_complete": obj.get("pctComplete"),
            "status": obj.get("status"),
            "task_type": obj.get("taskType"),
            "time_started": obj.get("timeStarted"),
            "time_total": obj.get("timeTotal"),
            "clean_up": obj.get("cleanUp"),
            "error": obj.get("error"),
            "task_id": obj.get("taskId")
        })
        return _obj


