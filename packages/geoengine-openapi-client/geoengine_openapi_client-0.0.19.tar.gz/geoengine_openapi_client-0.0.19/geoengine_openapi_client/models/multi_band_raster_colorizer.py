# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist, validator

class MultiBandRasterColorizer(BaseModel):
    """
    MultiBandRasterColorizer
    """
    blue_band: conint(strict=True, ge=0) = Field(..., alias="blueBand", description="The band index of the blue channel.")
    blue_max: Union[StrictFloat, StrictInt] = Field(..., alias="blueMax", description="The maximum value for the red channel.")
    blue_min: Union[StrictFloat, StrictInt] = Field(..., alias="blueMin", description="The minimum value for the red channel.")
    blue_scale: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="blueScale", description="A scaling factor for the blue channel between 0 and 1.")
    green_band: conint(strict=True, ge=0) = Field(..., alias="greenBand", description="The band index of the green channel.")
    green_max: Union[StrictFloat, StrictInt] = Field(..., alias="greenMax", description="The maximum value for the red channel.")
    green_min: Union[StrictFloat, StrictInt] = Field(..., alias="greenMin", description="The minimum value for the red channel.")
    green_scale: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="greenScale", description="A scaling factor for the green channel between 0 and 1.")
    no_data_color: Optional[conlist(StrictInt, max_items=4, min_items=4)] = Field(None, alias="noDataColor")
    red_band: conint(strict=True, ge=0) = Field(..., alias="redBand", description="The band index of the red channel.")
    red_max: Union[StrictFloat, StrictInt] = Field(..., alias="redMax", description="The maximum value for the red channel.")
    red_min: Union[StrictFloat, StrictInt] = Field(..., alias="redMin", description="The minimum value for the red channel.")
    red_scale: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="redScale", description="A scaling factor for the red channel between 0 and 1.")
    type: StrictStr = Field(...)
    __properties = ["blueBand", "blueMax", "blueMin", "blueScale", "greenBand", "greenMax", "greenMin", "greenScale", "noDataColor", "redBand", "redMax", "redMin", "redScale", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('multiBand'):
            raise ValueError("must be one of enum values ('multiBand')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MultiBandRasterColorizer:
        """Create an instance of MultiBandRasterColorizer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MultiBandRasterColorizer:
        """Create an instance of MultiBandRasterColorizer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MultiBandRasterColorizer.parse_obj(obj)

        _obj = MultiBandRasterColorizer.parse_obj({
            "blue_band": obj.get("blueBand"),
            "blue_max": obj.get("blueMax"),
            "blue_min": obj.get("blueMin"),
            "blue_scale": obj.get("blueScale"),
            "green_band": obj.get("greenBand"),
            "green_max": obj.get("greenMax"),
            "green_min": obj.get("greenMin"),
            "green_scale": obj.get("greenScale"),
            "no_data_color": obj.get("noDataColor"),
            "red_band": obj.get("redBand"),
            "red_max": obj.get("redMax"),
            "red_min": obj.get("redMin"),
            "red_scale": obj.get("redScale"),
            "type": obj.get("type")
        })
        return _obj


