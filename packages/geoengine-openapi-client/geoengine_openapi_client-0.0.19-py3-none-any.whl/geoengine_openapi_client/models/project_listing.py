# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class ProjectListing(BaseModel):
    """
    ProjectListing
    """
    changed: datetime = Field(...)
    description: StrictStr = Field(...)
    id: StrictStr = Field(...)
    layer_names: conlist(StrictStr) = Field(..., alias="layerNames")
    name: StrictStr = Field(...)
    plot_names: conlist(StrictStr) = Field(..., alias="plotNames")
    __properties = ["changed", "description", "id", "layerNames", "name", "plotNames"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectListing:
        """Create an instance of ProjectListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectListing:
        """Create an instance of ProjectListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectListing.parse_obj(obj)

        _obj = ProjectListing.parse_obj({
            "changed": obj.get("changed"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "layer_names": obj.get("layerNames"),
            "name": obj.get("name"),
            "plot_names": obj.get("plotNames")
        })
        return _obj


