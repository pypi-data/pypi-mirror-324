# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from geoengine_openapi_client.models.color_param import ColorParam
from geoengine_openapi_client.models.number_param import NumberParam

class StrokeParam(BaseModel):
    """
    StrokeParam
    """
    color: ColorParam = Field(...)
    width: NumberParam = Field(...)
    __properties = ["color", "width"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StrokeParam:
        """Create an instance of StrokeParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of width
        if self.width:
            _dict['width'] = self.width.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StrokeParam:
        """Create an instance of StrokeParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StrokeParam.parse_obj(obj)

        _obj = StrokeParam.parse_obj({
            "color": ColorParam.from_dict(obj.get("color")) if obj.get("color") is not None else None,
            "width": NumberParam.from_dict(obj.get("width")) if obj.get("width") is not None else None
        })
        return _obj


