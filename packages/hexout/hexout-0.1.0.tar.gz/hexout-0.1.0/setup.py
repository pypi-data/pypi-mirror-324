# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['hexout']
entry_points = \
{'console_scripts': ['your-script = yourpackage:main']}

setup_kwargs = {
    'name': 'hexout',
    'version': '0.1.0',
    'description': 'A brief description of your package.',
    'long_description': '# HexOut\n\n`hexout` is a simple library that generates hex listings of binary data in a flexible form.\n\n## Features\n\nPacks and unpacks bytes by mapping human-readable format strings to equivalent `struct` format symbols.\nProvides format symbols for a variety of data types, including integer types, floating-point types,\ncharacters, strings, Pascal strings and padding.\nSupports specification of endianness in format strings using terms like `little_endian` and `big_endian`.\n\n## Basic Usage\n\n`Hexout` can easily generate hex dumps of binary data.  Viewing data in hex is useful any time processing\nbinary data is in play. \n\nThe main data types that are expected are byte strings, lists/tuples of integers in the range 0/255. \n\nThe default hex format is inferred to be \'0widthX\', the standard hex formatting with leadning 0 and\nupper case hex letters.  The width is 2*bytes_per_column, since each byte requires 2 ascii characters\nto represent it.  If you want leading 0x, or no zero padding\n\n### Examples:\n\nMost simple output of raw bytes.\n```text\nHexOut().as_hex(b\'\\x01\\x02\\x03\')\n\'01 02 03\'\n```\n\nNow some formatting\n```text\nHexOut(bytes_per_column=2,hex_format=\'0x{:04x}\').as_hex(b\'\\x01\\x02\\x03\\04\')\n\'0x0102 0x0304\'\n```\n\nNow with address:\n```text\nHexOut(show_address=True,bytes_per_column=2,hex_format=\'0x{:04x}\').as_hex(b\'\\x01\\x02\\x03\\04\')\n\'0000: 0x0102 0x0304\'\n```\n\nNow for some bigger examples:\n\nRegular hex data as a list of 32 bit hex values.\n\n```text\n>>>bdata = list(range(0,256))\n>>>ho = HexOut(columns=8,bytes_per_column=4,hex_format=\'0x{:08X}\',addr_format=\'0x{:02X}: \',show_address=True)\n>>>print(ho.as_hex(bdata))\n0x00: 0x00010203 0x04050607 0x08090A0B 0x0C0D0E0F 0x10111213 0x14151617 0x18191A1B 0x1C1D1E1F\n0x20: 0x20212223 0x24252627 0x28292A2B 0x2C2D2E2F 0x30313233 0x34353637 0x38393A3B 0x3C3D3E3F\n0x40: 0x40414243 0x44454647 0x48494A4B 0x4C4D4E4F 0x50515253 0x54555657 0x58595A5B 0x5C5D5E5F\n0x60: 0x60616263 0x64656667 0x68696A6B 0x6C6D6E6F 0x70717273 0x74757677 0x78797A7B 0x7C7D7E7F\n0x80: 0x80818283 0x84858687 0x88898A8B 0x8C8D8E8F 0x90919293 0x94959697 0x98999A9B 0x9C9D9E9F\n0xA0: 0xA0A1A2A3 0xA4A5A6A7 0xA8A9AAAB 0xACADAEAF 0xB0B1B2B3 0xB4B5B6B7 0xB8B9BABB 0xBCBDBEBF\n0xC0: 0xC0C1C2C3 0xC4C5C6C7 0xC8C9CACB 0xCCCDCECF 0xD0D1D2D3 0xD4D5D6D7 0xD8D9DADB 0xDCDDDEDF\n0xE0: 0xE0E1E2E3 0xE4E5E6E7 0xE8E9EAEB 0xECEDEEEF 0xF0F1F2F3 0xF4F5F6F7 0xF8F9FAFB 0xFCFDFEFF\n```\nor a list of 8bit hex values\n```text\n>>>bdata = list(range(0,256))\n>>>print(HexOut(bytes_per_column=1, columns=16,hex_format=\'{:02X}\').as_hex(bdata))\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F\n20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F\n30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F\n40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F\n60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F\n70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F\n80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F\n90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF\nB0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF\nC0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF\nD0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF\nE0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n```\nAlthough the library is called hexout, it really can do anything the format statement will tolerate\nso the following example shows the output in binary\n\n```text\n>>>HexOut( columns=4,hex_format=\'{:08b}\').as_hex(b\'\\x01\\x02\\x03\\04\')\n\'00000001 00000010 00000011 00000100\'\n```\n\nThis shows most of the capability with addresses, hex, and ascii output.\n\n```text\nprint(HexOut(show_ascii=True,columns=16).as_hex(range(0,256)))\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ................\n10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F ................\n20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F  !"#$%&\'()*+,-./\n30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 0123456789:;<=>?\n40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F @ABCDEFGHIJKLMNO\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F PQRSTUVWXYZ[\\]^_\n60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F `abcdefghijklmno\n70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F pqrstuvwxyz{|}~.\n80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F ................\n90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F ................\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF ................\nB0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF ................\nC0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF ................\nD0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF ................\nE0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF ................\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF ................\n```\n\nYou can easily control the number of bytes displayed in each column using the bytes_per_column.\n\n```python\nprint(HexOut(bytes_per_column=1).as_hex(range(16)))\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\nprint(HexOut(bytes_per_column=2).as_hex(range(16)))\n0001 0203 0405 0607 0809 0A0B 0C0D 0E0F\nprint(HexOut(bytes_per_column=4).as_hex(range(16)))\n00010203 04050607 08090A0B 0C0D0E0F\nprint(HexOut(bytes_per_column=8).as_hex(range(16)))\n0001020304050607 08090A0B0C0D0E0F\nprint(HexOut(bytes_per_column=16).as_hex(range(16)))\n000102030405060708090A0B0C0D0E0F\n```\n\nIf you don\'t like leading 0\'s in your number formats you can use spaces by providing a custom hex format\nlike this where you use the ` >` using the first character (space) as the pad character and the left or\nright padding using the `<` or `>` to indicate the padding direction.\n\n```text\nprint(hexout.HexOut(bytes_per_column=2, hex_format="{: >4X}",columns=4).as_hex(range(32)))\n   1  203  405  607\n 809  A0B  C0D  E0F\n1011 1213 1415 1617\n1819 1A1B 1C1D 1E1F\n```\n\n\n## Exceptions\nIf data is provided that is out of range for bytes (0-255) a `ValueError` exception is thrown.\n\n\n\n',
    'author': 'Your Name',
    'author_email': 'youremail@example.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'py_modules': modules,
    'entry_points': entry_points,
    'python_requires': '>=3.12,<4.0',
}


setup(**setup_kwargs)
