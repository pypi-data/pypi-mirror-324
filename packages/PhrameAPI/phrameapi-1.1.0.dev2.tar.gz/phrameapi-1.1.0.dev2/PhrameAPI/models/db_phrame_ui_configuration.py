# coding: utf-8

"""
    PhrameAPI

    Phrame API  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Contact: david@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from PhrameAPI.configuration import Configuration


class DbPhrameUIConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'left': 'int',
        'top': 'int',
        'width': 'int',
        'height': 'int',
        'type': 'str',
        'z_order': 'int',
        'stream_id': 'str',
        'stream_suffix': 'str',
        'button_label': 'str',
        'group_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'left': 'left',
        'top': 'top',
        'width': 'width',
        'height': 'height',
        'type': 'type',
        'z_order': 'z_order',
        'stream_id': 'stream_id',
        'stream_suffix': 'stream_suffix',
        'button_label': 'button_label',
        'group_id': 'group_id'
    }

    def __init__(self, id=None, left=None, top=None, width=None, height=None, type=None, z_order=None, stream_id=None, stream_suffix=None, button_label=None, group_id=None, local_vars_configuration=None):  # noqa: E501
        """DbPhrameUIConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._left = None
        self._top = None
        self._width = None
        self._height = None
        self._type = None
        self._z_order = None
        self._stream_id = None
        self._stream_suffix = None
        self._button_label = None
        self._group_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if left is not None:
            self.left = left
        if top is not None:
            self.top = top
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if type is not None:
            self.type = type
        if z_order is not None:
            self.z_order = z_order
        if stream_id is not None:
            self.stream_id = stream_id
        if stream_suffix is not None:
            self.stream_suffix = stream_suffix
        if button_label is not None:
            self.button_label = button_label
        if group_id is not None:
            self.group_id = group_id

    @property
    def id(self):
        """Gets the id of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The id of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DbPhrameUIConfiguration.


        :param id: The id of this DbPhrameUIConfiguration.  # noqa: E501
        :type id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 36):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 36):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/`")  # noqa: E501

        self._id = id

    @property
    def left(self):
        """Gets the left of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The left of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this DbPhrameUIConfiguration.


        :param left: The left of this DbPhrameUIConfiguration.  # noqa: E501
        :type left: int
        """

        self._left = left

    @property
    def top(self):
        """Gets the top of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The top of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this DbPhrameUIConfiguration.


        :param top: The top of this DbPhrameUIConfiguration.  # noqa: E501
        :type top: int
        """

        self._top = top

    @property
    def width(self):
        """Gets the width of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The width of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DbPhrameUIConfiguration.


        :param width: The width of this DbPhrameUIConfiguration.  # noqa: E501
        :type width: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The height of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DbPhrameUIConfiguration.


        :param height: The height of this DbPhrameUIConfiguration.  # noqa: E501
        :type height: int
        """

        self._height = height

    @property
    def type(self):
        """Gets the type of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The type of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DbPhrameUIConfiguration.


        :param type: The type of this DbPhrameUIConfiguration.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def z_order(self):
        """Gets the z_order of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The z_order of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._z_order

    @z_order.setter
    def z_order(self, z_order):
        """Sets the z_order of this DbPhrameUIConfiguration.


        :param z_order: The z_order of this DbPhrameUIConfiguration.  # noqa: E501
        :type z_order: int
        """

        self._z_order = z_order

    @property
    def stream_id(self):
        """Gets the stream_id of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The stream_id of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this DbPhrameUIConfiguration.


        :param stream_id: The stream_id of this DbPhrameUIConfiguration.  # noqa: E501
        :type stream_id: str
        """

        self._stream_id = stream_id

    @property
    def stream_suffix(self):
        """Gets the stream_suffix of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The stream_suffix of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._stream_suffix

    @stream_suffix.setter
    def stream_suffix(self, stream_suffix):
        """Sets the stream_suffix of this DbPhrameUIConfiguration.


        :param stream_suffix: The stream_suffix of this DbPhrameUIConfiguration.  # noqa: E501
        :type stream_suffix: str
        """

        self._stream_suffix = stream_suffix

    @property
    def button_label(self):
        """Gets the button_label of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The button_label of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._button_label

    @button_label.setter
    def button_label(self, button_label):
        """Sets the button_label of this DbPhrameUIConfiguration.


        :param button_label: The button_label of this DbPhrameUIConfiguration.  # noqa: E501
        :type button_label: str
        """

        self._button_label = button_label

    @property
    def group_id(self):
        """Gets the group_id of this DbPhrameUIConfiguration.  # noqa: E501


        :return: The group_id of this DbPhrameUIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DbPhrameUIConfiguration.


        :param group_id: The group_id of this DbPhrameUIConfiguration.  # noqa: E501
        :type group_id: str
        """

        self._group_id = group_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DbPhrameUIConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DbPhrameUIConfiguration):
            return True

        return self.to_dict() != other.to_dict()
