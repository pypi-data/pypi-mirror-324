>>> from abc import ABC, abstractmethod
>>> from anymethod import anymethod

>>> class Base(ABC):
...     @anymethod
...     @abstractmethod
...     def whoami(owner) -> None:
...         raise NotImplementedError

>>> Base()
Traceback (most recent call last):
    ...
TypeError: Can't instantiate abstract class Base ...

>>> class FooBar(Base):
...     @anymethod
...     def whoami(owner) -> None:
...         print(owner)

>>> FooBar()
<__main__.FooBar object at 0x...>

>>> FooBar().whoami()
<__main__.FooBar object at 0x...>
